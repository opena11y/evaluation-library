/*
*   debug.js
*
*   Usage
*     import DebugLogging from './debug.js';
*     const debug = new DebugLogging('myLabel', true); // e.g. 'myModule'
*     ...
*     if (debug.flag) debug.log('myMessage');
*
*   Notes
*     new DebugLogging() - calling the constructor with no arguments results
*                   in debug.flag set to false and debug.label set to 'debug';
*                   constructor accepts 0, 1 or 2 arguments in any order
*                   @param flag [optional] {boolean} - sets debug.flag
*                   @param label [optional] {string} - sets debug.label
*   Properties
*     debug.flag    {boolean} allows you to switch debug logging on or off;
*                   default value is false
*     debug.label   {string} rendered as a prefix to each log message;
*                   default value is 'debug'
*   Methods
*     debug.log        calls console.log with label prefix and message
*                      @param message {object} - console.log calls toString()
*                      @param spaceAbove [optional] {boolean}
*
*     debug.tag        outputs tagName and textContent of DOM element
*                      @param node {DOM node reference} - usually an HTMLElement
*                      @param spaceAbove [optional] {boolean}
*
*     debug.domElement outputs tagName, role, name and number of children of
*                      DOMElement object
*                      @param node {DOM node reference} - usually an HTMLElement
*                      @param prefix [optional] {String}
*
*     debug.domText    outputs text content of DOMText object
*                      @param node {DOM node reference} - usually an HTMLElement
*                      @param prefix [optional] {String}
*
*     debug.separator  outputs only debug.label and a series of hyphens
*                      @param spaceAbove [optional] {boolean}
*/

class DebugLogging {
  constructor (...args) {
    // Default values for cases where fewer than two arguments are provided
    this._flag = false;
    this._label = 'debug';

    // The constructor may be called with zero, one or two arguments. If two
    // arguments, they can be in any order: one is assumed to be the boolean
    // value for '_flag' and the other one the string value for '_label'.
    for (const [index, arg] of args.entries()) {
      if (index < 2) {
        switch (typeof arg) {
          case 'boolean':
            this._flag = arg;
            break;
          case 'string':
            this._label = arg;
            break;
        }
      }
    }
  }

  get flag () { return this._flag; }

  set flag (value) {
    if (typeof value === 'boolean') {
      this._flag = value;
    }
  }

  get label () { return this._label; }

  set label (value) {
    if (typeof value === 'string') {
      this._label = value;
    }
  }

  log (message, spaceAbove) {
    const newline = spaceAbove ? '\n' : '';
    console.log(`${newline}[${this._label}] ${message}`);
  }

  tag (node, spaceAbove) {
    if (node && node.tagName) {
      const text = node.textContent.trim().replace(/\s+/g, ' ');
      this.log(`[${node.tagName}]: ${text.substring(0, 40)}`, spaceAbove);
    }
  }

  color (message, color="#000", backgroundColor='#fff', spaceAbove) {
    const newline = spaceAbove ? '\n' : '';
    console.log(`${newline}[${this._label}] ` + `%c${message}`, `color: ${color}; background: ${backgroundColor}`);
  }

  separator (spaceAbove) {
    this.log('-----------------------------', spaceAbove);
  }

  domElement (domElement, prefix) {
    if (typeof prefix !== 'string') {
      prefix = '';
    }

    if (domElement) {
      const accName = domElement.accName;
      const count   = domElement.children.length;
      const pos     = domElement.ordinalPosition;

      const childPos = `children: ${count} position: ${pos}`;
      const name  = accName.name.length ? `[${domElement.role}]: ${accName.name} (src: ${accName.source})` : ``;
      let ownsInfo = domElement.ariaInfo.hasAriaOwns ? domElement.ariaInfo.ariaOwnsIds : '';
      ownsInfo += domElement.ariaInfo.ownedByDomElements.length ?
                  'ownedby: ' + domElement.ariaInfo.ownedByDomElements.join('; ') :
                  '';

      this.log(`${prefix}[${domElement.tagName}][${domElement.role}]: ${name} ${childPos} ${ownsInfo}`);

//      this.log(`${prefix}[${domElement.tagName}][            tabIndex]: ${domElement.tabIndex}`);
//      this.log(`${prefix}[${domElement.tagName}][           isTabStop]: ${domElement.isTabStop}`);
//      this.log(`${prefix}[${domElement.tagName}][isInteractiveElement]: ${domElement.isInteractiveElement}`);
//      this.log(`${prefix}[${domElement.tagName}][            isWidget]: ${domElement.ariaInfo.isWidget}`);
    }
  }

  domText (domText, prefix) {
    if (typeof prefix !== 'string') {
      prefix = '';
    }
    const maxDisplay = 20;
    if (domText) {
      if (domText.getText.length < maxDisplay) {
        this.log(`${prefix}[text]: ${domText.getText} (parent: ${domText.parentDomElement.tagName})`);
      } else {
        this.log(`${prefix}[text]: ${domText.getText.substring(0, maxDisplay)} ... (parent: ${domText.parentDomElement.tagName})`);
      }
    }
  }

}

/* constants.js */

/* Constants */
const debug$11 = new DebugLogging('constants', false);

const VERSION = '2.0.beta3';


/**
 * @constant RULESET
 * @type String
 * @desc Constants identify the current versions of WCAG
 *
 * @example
 * RULESET.WCAG20
 * RULESET.WCAG21
 * RULESET.WCAG22
 */

const RULESET =  {
  WCAG20: 'WCAG20',
  WCAG21: 'WCAG21',
  WCAG22: 'WCAG22'
};

/**
 * @constant RULE_CATEGORIES * @type Integer
 * @desc Numercial constant representing a rule category and is bit maskable
 *
 * @example
 * RULE_CATEGORIES.UNDEFINED
 * RULE_CATEGORIES.AUDIO_VIDEO
 * RULE_CATEGORIES.FORMS
 * RULE_CATEGORIES.HEADINGS
 * RULE_CATEGORIES.IMAGES
 * RULE_CATEGORIES.KEYBOARD_SUPPORT
 * RULE_CATEGORIES.LINKS
 * RULE_CATEGORIES.LANDMARKS
 * RULE_CATEGORIES.SITE_NAVIGATION
 * RULE_CATEGORIES.COLOR_CONTENT
 * RULE_CATEGORIES.TABLES_LAYOUT
 * RULE_CATEGORIES.TIMING_LIVE
 * RULE_CATEGORIES.WIDGETS_SCRIPTS
 */

const RULE_CATEGORIES = {
  UNDEFINED              : 0x0000,
  LANDMARKS              : 0x0001,
  HEADINGS               : 0x0002,
  COLOR_CONTENT          : 0x0004,
  IMAGES                 : 0x0008,
  LINKS                  : 0x0010,
  TABLES_LAYOUT          : 0x0020,
  FORMS                  : 0x0040,
  WIDGETS_SCRIPTS        : 0x0080,
  AUDIO_VIDEO            : 0x0100,
  KEYBOARD_SUPPORT       : 0x0200,
  TIMING_LIVE            : 0x0400,
  SITE_NAVIGATION        : 0x0800,
  // Composite categories
  ALL                    : 0x0FFF
};

/**
 * @constant RULE_SCOPE
 * @type Integer
 * @desc Defines scope of a rule
 *
 * @example
 * RULE_SCOPE.UNKNOWN
 * RULE_SCOPE.ELEMENT
 * RULE_SCOPE.PAGE
 * RULE_SCOPE.WEBSITE
 */

const RULE_SCOPE =  {
  UNDEFINED  : 0x0000,
  ELEMENT    : 0x0001,
  PAGE       : 0x0002,
  WEBSITE    : 0x0004,
  // Composite scopes
  ALL        : 0x0007
};

/**
 * @constant RESULT_TYPE
 * @type Integer
 * @desc Defines if the rule represents a element, page or website result
 *
 * @example
 * RESULT_TYPE.BASE
 * RESULT_TYPE.ELEMENT
 * RESULT_TYPE.PAGE
 * RESULT_TYPE.WEBSITE
 */

const RESULT_TYPE =  {
  BASE    : 0,
  ELEMENT : 1,
  PAGE    : 2,
  WEBSITE : 3
};

/**
 * @constant TEST_RESULT * @type Integer
 * @desc Types of rule results, used in validation functions
 *
 * @example
 * TEST_RESULT.FAIL
 * TEST_RESULT.HIDDEN
 * TEST_RESULT.MANUAL_CHECK
 * TEST_RESULT.NONE
 * TEST_RESULT.PASS
 */

const TEST_RESULT = {
  PASS         : 1,
  FAIL         : 2,
  MANUAL_CHECK : 3,
  HIDDEN       : 4,
  NONE         : 5
};

/**
 * @constant IMPLEMENTATION_VALUE * @type Integer
 * @desc Constants used to represent the level of implementation
 *
 * @example
 * IMPLEMENTATION_VALUE.UNDEFINED
 * IMPLEMENTATION_VALUE.NOT_APPLICABLE
 * IMPLEMENTATION_VALUE.NOT_IMPLEMENTED
 * IMPLEMENTATION_VALUE.PARTIAL_IMPLEMENTATION
 * IMPLEMENTATION_VALUE.ALMOST_COMPLETE
 * IMPLEMENTATION_VALUE.COMPLETE
 * IMPLEMENTATION_VALUE.COMPLETE_WITH_MANUAL_CHECKS
 * IMPLEMENTATION_VALUE.MANUAL_CHECKS_ONLY
 */

const IMPLEMENTATION_VALUE = {
  UNDEFINED                   : 0,
  NOT_APPLICABLE              : 1,
  NOT_IMPLEMENTED             : 2,
  PARTIAL_IMPLEMENTATION      : 3,
  ALMOST_COMPLETE             : 4,
  COMPLETE                    : 5,
  COMPLETE_WITH_MANUAL_CHECKS : 6,
  MANUAL_CHECKS_ONLY          : 7
};

  /**
 * @constant RESULT_VALUE
 * @type Integer
 * @desc Constants used to represent evaluation results at the element level
 *
 * @example
 * RESULT_VALUE.UNDEFINED
 * RESULT_VALUE.PASS
 * RESULT_VALUE.HIDDEN
 * RESULT_VALUE.MANUAL_CHECK
 * RESULT_VALUE.VIOLATION
 * RESULT_VALUE.WARNING
 */

const RESULT_VALUE = {
  UNDEFINED      : 0,
  PASS           : 1,
  HIDDEN         : 2,  // Content is hidden and not tested for accessibility
  MANUAL_CHECK   : 3,
  WARNING        : 4,
  VIOLATION      : 5
};

/**
 * @constant RULE_RESULT_VALUE * @type Integer
 * @desc Constants used to represent evaluation results at the rule level
 *
 * @example
 * RULE_RESULT_VALUE.UNDEFINED
 * RULE_RESULT_VALUE.NOT_APPLICABLE
 * RULE_RESULT_VALUE.PASS
 * RULE_RESULT_VALUE.MANUAL_CHECK
 * RULE_RESULT_VALUE.WARNING
 * RULE_RESULT_VALUE.VIOLATION
 */

const RULE_RESULT_VALUE = {
  UNDEFINED      : 0,
  NOT_APPLICABLE : 1,
  PASS           : 2,
  MANUAL_CHECK   : 3,
  WARNING        : 4,
  VIOLATION      : 5
};

  /**
 * @constant WCAG_PRINCIPLE
 * @type Integer
 * @desc Numercial constant representing a WCAG 2.0 Principles
 *
 * @example
 * WCAG_PRINCIPLE.P_1
 * WCAG_PRINCIPLE.P_2
 * WCAG_PRINCIPLE.P_3
 * WCAG_PRINCIPLE.P_4
 */
const WCAG_PRINCIPLE = {
  P_1          : 0x000001,
  P_2          : 0x000002,
  P_3          : 0x000004,
  P_4          : 0x000008,
  ALL          : 0x00000F
};

  /**
 * @constant WCAG_GUIDELINE
 * @type Integer
 * @desc Numercial constant representing a WCAG 2.0 Guidelines
 *
 * @example
 * WCAG_GUIDELINE.G_1_1
 * WCAG_GUIDELINE.G_1_2
 * WCAG_GUIDELINE.G_1_3
 * WCAG_GUIDELINE.G_1_4
 * WCAG_GUIDELINE.G_2_1
 * WCAG_GUIDELINE.G_2_2
 * WCAG_GUIDELINE.G_2_3
 * WCAG_GUIDELINE.G_2_4
 * WCAG_GUIDELINE.G_3_1
 * WCAG_GUIDELINE.G_3_2
 * WCAG_GUIDELINE.G_3_3
 * WCAG_GUIDELINE.G_4_1
 */

const WCAG_GUIDELINE = {
  G_1_1          : 0x000010,
  G_1_2          : 0x000020,
  G_1_3          : 0x000040,
  G_1_4          : 0x000080,
  G_2_1          : 0x000100,
  G_2_2          : 0x000200,
  G_2_3          : 0x000400,
  G_2_4          : 0x000800,
  G_2_5          : 0x001000,
  G_3_1          : 0x002000,
  G_3_2          : 0x004000,
  G_3_3          : 0x008000,
  G_4_1          : 0x010000,
  ALL            : 0x01FFF0
};

/**
 * @constant WCAG_SUCCESS_CRITERION * @type Integer
 * @desc Numercial constant representing a WCAG 2.x Success Criteria
 *
 * @example
 * WCAG_SUCCESS_CRITERION.SC_1_1_1
 * ....
 * WCAG_SUCCESS_CRITERION.SC_4_1_2
 */

const WCAG_SUCCESS_CRITERION = {
  SC_1_1_1          : 0x1101,
  SC_1_2_1          : 0x1201,
  SC_1_2_2          : 0x1202,
  SC_1_2_3          : 0x1203,
  SC_1_2_4          : 0x1204,
  SC_1_2_5          : 0x1205,
  SC_1_2_6          : 0x1206,
  SC_1_2_7          : 0x1207,
  SC_1_2_8          : 0x1208,
  SC_1_2_9          : 0x1209,
  SC_1_3_1          : 0x1301,
  SC_1_3_2          : 0x1302,
  SC_1_3_3          : 0x1303,
  SC_1_3_4          : 0x1304,
  SC_1_3_5          : 0x1305,
  SC_1_3_6          : 0x1306,
  SC_1_4_1          : 0x1401,
  SC_1_4_2          : 0x1402,
  SC_1_4_3          : 0x1403,
  SC_1_4_4          : 0x1404,
  SC_1_4_5          : 0x1405,
  SC_1_4_6          : 0x1406,
  SC_1_4_7          : 0x1407,
  SC_1_4_8          : 0x1408,
  SC_1_4_9          : 0x1409,
  SC_1_4_10         : 0x1410,
  SC_1_4_11         : 0x1411,
  SC_1_4_12         : 0x1412,
  SC_1_4_13         : 0x1413,
  SC_2_1_1          : 0x2101,
  SC_2_1_2          : 0x2102,
  SC_2_1_3          : 0x2103,
  SC_2_1_4          : 0x2104,
  SC_2_2_1          : 0x2201,
  SC_2_2_2          : 0x2202,
  SC_2_2_3          : 0x2203,
  SC_2_2_4          : 0x2204,
  SC_2_2_5          : 0x2205,
  SC_2_2_6          : 0x2206,
  SC_2_3_1          : 0x2301,
  SC_2_3_2          : 0x2302,
  SC_2_3_3          : 0x2303,
  SC_2_4_1          : 0x2401,
  SC_2_4_2          : 0x2402,
  SC_2_4_3          : 0x2403,
  SC_2_4_4          : 0x2404,
  SC_2_4_5          : 0x2405,
  SC_2_4_6          : 0x2406,
  SC_2_4_7          : 0x2407,
  SC_2_4_8          : 0x2408,
  SC_2_4_9          : 0x2409,
  SC_2_4_10         : 0x2410,
  SC_2_4_11         : 0x2411,
  SC_2_4_12         : 0x2412,
  SC_2_4_13         : 0x2413,
  SC_2_5_1          : 0x2501,
  SC_2_5_2          : 0x2502,
  SC_2_5_3          : 0x2503,
  SC_2_5_4          : 0x2504,
  SC_2_5_5          : 0x2505,
  SC_2_5_6          : 0x2506,
  SC_2_5_7          : 0x2507,
  SC_2_5_8          : 0x2508,
  SC_3_1_1          : 0x3101,
  SC_3_1_2          : 0x3102,
  SC_3_1_3          : 0x3103,
  SC_3_1_4          : 0x3104,
  SC_3_1_5          : 0x3105,
  SC_3_1_6          : 0x3106,
  SC_3_2_1          : 0x3201,
  SC_3_2_2          : 0x3202,
  SC_3_2_3          : 0x3203,
  SC_3_2_4          : 0x3204,
  SC_3_2_5          : 0x3205,
  SC_3_2_6          : 0x3206,
  SC_3_3_1          : 0x3301,
  SC_3_3_2          : 0x3302,
  SC_3_3_3          : 0x3303,
  SC_3_3_4          : 0x3304,
  SC_3_3_5          : 0x3305,
  SC_3_3_6          : 0x3306,
  SC_3_3_7          : 0x3307,
  SC_3_3_8          : 0x3308,
  SC_3_3_9          : 0x3309,
  SC_4_1_1          : 0x4101,
  SC_4_1_2          : 0x4102,
  SC_4_1_3          : 0x4103
};

/**
 * @constant TABLE_TYPE
 * @type Number
 * @desc Constants for TABLE_TYPE table cache elements
 * @example
 * TABLE_TYPE.UNKNOWN
 * TABLE_TYPE.LAYOUT
 * TABLE_TYPE.DATA
 * TABLE_TYPE.COMPLEX
*/

const TABLE_TYPE =  {
  UNKNOWN        : 1,
  LAYOUT         : 2,
  DATA           : 3,
  COMPLEX        : 4,
  ARIA_TABLE     : 5,
  ARIA_GRID      : 6,
  ARIA_TREEGRID  : 7,
};

const HEADER_SOURCE = {
  NONE         : 1,
  HEADERS_ATTR : 2,
  ROW_COLUMN   : 3
};


/**
 * @constant REFERENCES
 * @type Integer
 * @desc Types of reference for supplemential materials to help people understand an accessibility requirement and
 *       how to improve the accessibility
 *
 * @example
 * REFERENCES.UNKNOWN
 * REFERENCES.SPECIFICATION
 * REFERENCES.WCAG_TECHNIQUE
 * REFERENCES.TECHNIQUE
 * REFERENCES.EXAMPLE
 * REFERENCES.MANUAL_CHECK
 * REFERENCES.AUTHORING_TOOL
 * REFERENCES.OTHER
 */

const REFERENCES = {
  UNKNOWN         : 0,
  AUTHORING_TOOL  : 1,
  EXAMPLE         : 2,
  LIBRARY_PRODUCT : 3,
  MANUAL_CHECK    : 4,
  OTHER           : 5,
  PURPOSE         : 6,
  RULE_CATEGORY   : 7,
  REFERENCE       : 8,
  SPECIFICATION   : 9,
  TECHNIQUE       : 10,
  WCAG_TECHNIQUE  : 11
};

/**
 * @constant WCAG_LEVEL
 * @type Integer
 * @desc Constants related to the level of importance of a success criteria
 *
 * @example
 * WCAG_LEVEL.A
 * WCAG_LEVEL.AA
 * WCAG_LEVEL.AAA
 */

const WCAG_LEVEL =  {
  A       : 4,
  AA      : 2,
  AAA     : 1,
  UNKNOWN : 0
};

/* Constant Class */

class Constants {
  constructor () {
    this.IMPLEMENTATION_VALUE   = IMPLEMENTATION_VALUE;
    this.RESULT_VALUE           = RESULT_VALUE;
    this.RESULT_TYPE            = RESULT_TYPE;
    this.RULESET                = RULESET;
    this.RULE_CATEGORIES        = RULE_CATEGORIES;
    this.RULE_RESULT_VALUE      = RULE_RESULT_VALUE;
    this.RULE_SCOPE             = RULE_SCOPE;
    this.WCAG_GUIDELINE         = WCAG_GUIDELINE;
    this.WCAG_LEVEL             = WCAG_LEVEL;
    this.WCAG_PRINCIPLE         = WCAG_PRINCIPLE;
    this.WCAG_SUCCESS_CRITERION = WCAG_SUCCESS_CRITERION;
  }
} 

/**
 * @constant WCAG21_SC
 * @type String
 * @desc Constants identify the success criteria in WCAG 2.1
 *
 */

const WCAG21_SC = [
  '1.3.4',
  '1.3.5',
  '1.3.6',
  '1.4.10',
  '1.4.11',
  '1.4.12',
  '1.4.13',
  '2.1.4',
  '2.2.6',
  '2.3.3',
  '2.5.1',
  '2.5.2',
  '2.5.3',
  '2.5.4',
  '2.5.5',
  '2.5.6',
  '4.1.3'
];

/**
 * @constant WCAG22_SC
 * @type String
 * @desc Constants identify the success criteria in WCAG 2.2
 *
 */

const WCAG22_SC = [
  '2.4.11',
  '2.4.12',
  '2.4.13',
  '2.5.7',
  '2.5.8',
  '3.2.6',
  '3.3.7',
  '3.3.8',
  '3.3.9'
  ];

/*  Constant helper functions */

/**
 * @function getGuidelineId
 *
 * @desc Returns constant identifying the WCAG Guideline
 *
 * @param {String} sc - String representing a success criteria (e.g. '2.4.1')
 *
 * @return {Integer}
 */

function getGuidelineId(sc) {
  debug$11.flag && debug$11.log(`[getGuidelineId][sc]: ${sc}`);
  const parts = sc.split('.');
  const gl = (parts.length === 3) ? `G_${parts[0]}_${parts[1]}` : ``;
  if (!gl) {
    return 0;
  }
  debug$11.flag && debug$11.log(`[getGuidelineId][gl]: ${gl}`);
  return WCAG_GUIDELINE[gl];
}

/**
 * @function getResultValue
 *
 * @desc Returns RESULT_VALUE constant identifying the result based on
 *       the rule being required or recommended
 *
 * @param  {Integer}  testValue  - a TEST_VALUE constant representing the
 *                                 result
 * @param  {Boolean}  isrequired  - true if the rule is required
 *
 * @return {Integer} see @desc
 */

function getResultValue(testValue, isRequired) {
    switch (testValue) {

      case TEST_RESULT.PASS:
        return RESULT_VALUE.PASS;

      case TEST_RESULT.FAIL:
        if (isRequired) {
          return RESULT_VALUE.VIOLATION;
        }
        else {
          return RESULT_VALUE.WARNING;
        }

      case TEST_RESULT.MANUAL_CHECK:
        return RESULT_VALUE.MANUAL_CHECK;

      case TEST_RESULT.HIDDEN:
        return RESULT_VALUE.HIDDEN;
    }

    return RESULT_VALUE.NONE;
}

/* utils.js */
/* constants */
const labelableElements = ['input', 'meter', 'output', 'progress', 'select', 'textarea'];
const elementsWithInvalid = ['form', 'fieldset', 'input', 'legend'];
const inputsWithChecked   = ['checkbox', 'radio'];


/* helper functions */

function isLabelable (node) {

  const tagName = node.tagName.toLowerCase();

  if ((tagName === 'input') && node.hasAttribute('type')) {
    return node.type.toLowerCase() !== 'hidden';
  }

  return labelableElements.includes(tagName);
}

/*
*   normalize: Trim leading and trailing whitespace and condense all
*   internal sequences of whitespace to a single space. Adapted from
*   Mozilla documentation on String.prototype.trim polyfill. Handles
*   BOM and NBSP characters.
*/
function normalize (s) {
  const rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
  return s.replace(rtrim, '').replace(/\s+/g, ' ');
}

/*
*   normalizeLeadingAndTrailingSpace: Trim leading and trailing redundant
*   whitespace and condense all internal sequences of whitespace to a single
*   space.
*/
function normalizeLeadingAndTrailingSpace (s) {
  let n = normalize(s);
  // preserve a space character before and after the string
  if (n.length && s.length) {
    if (n[0] !== s[0]) {
      n = ' ' + n;
    }
    if (n[n.length-1] !== s[s.length-1]) {
      n = n + ' ';
    }
  }
  else {
    if (s.length) {
      n = ' ';
    }
  }
  return n;
}

/*
*   getAttributeValue: Return attribute value if present on element,
*   otherwise return empty string.
*/
function getAttributeValue (element, attribute) {
  let value = element.getAttribute(attribute);
  return (value === null) ? '' : normalize(value);
}

/**
 * @function hasInvalidState
 *
 * @desc Identifies elements with the invalid state, that would overide
 *       or replace the use of aria-invalid attribute
 *
 * @param  {Object}  node   - DOM element node
 *
 * @returns {Boolean} true it element has a invalid state, otherwise false
 */

function hasInvalidState (node) {
  return elementsWithInvalid.includes(node.tagName.toLowerCase());
}

/**
 * @function hasCheckedState
 *
 * @desc Identifies elements with the checked state, that would overide
 *       or replace the use of aria-checked attribute
 *
 * @param  {Object}  node   - DOM element node
 *
 * @returns {Boolean} true it element has a checked state, otherwise false
 */

function hasCheckedState (node) {
  let flag = node.tagName.toLowerCase() === 'input';
  flag = flag && inputsWithChecked.includes(node.type.toLowerCase());
  return flag;
}

/**
 * @function hasSeelctedState
 *
 * @desc Identifies elements with the selected state, that would overide
 *       or replace the use of aria-selected attribute
 *
 * @param  {Object}  node   - DOM element node
 *
 * @returns {Boolean} true it element has a selected state, otherwise false
 */

function hasSelectedState (node) {
  return node.tagName.toLowerCase() === 'option';
}

/**
 * @function filterTextContent
 *
 * @desc Normalizes spaces in a string and removes any non-printable characters
 *
 * @param {String} s - string to be normalized
 *
 * @return  String
 */

function filterTextContent  (s) {
  // Replace repeated spaces, newlines and tabs with a single space

  if (typeof s !== 'string') return "";

// **** NOTE *****
// This function was changed to support fae-util based on HTMLUnit, which does not seem to
// handle character entities the same as a browser DOM
// This resulted in special characters being generated triggering false positives in some
/// rules, usually Landmark rules related to content being outside a landmark

//  if (s.replace) return s.replace(/^\s*|\s(?=\s)|\s*$/g, "");

  const len = s.length;
  let s1 = "";
  let last_c = 32;

  for (let i = 0; i < len; i++) {

    var c = s.charCodeAt(i);

    // only include printable characters less than '~' character
    if (c < 32 || c > 126) continue;

    if ((c !== 32) || (last_c !== 32)) {
      s1 += s[i];
      last_c = c;
    }

  }
  return s1.trim();
}

/**
 * @function replaceAll
 *
 * @desc Normalizes spaces in a string
 *
 * @param {String}  s       - String to have replacements
 * @param {String}  str1    - String to replace
 * @param {String}  str2    - The replacement string
 *
 * @return  String
 */

function replaceAll (s, str1, str2) {
  let len = s.length;
  let pos = s.indexOf(str1);
  let s1  = "";

  while (pos >= 0) {
    s1 += s.slice(0,pos);
    s1 += str2;
    s   = s.slice((pos+str1.length), len);

    pos = s.indexOf(str1);
    len = s.length;
  }
  s1 += s.slice(0, len);
  return s1;
}

/**
 * @function getFormattedDate
 *
 * @desc Returns a fomratted string (YYYY-MM-DD) represeting the current date
 *       with leading zeros
 *
 * @return {String}  Formatted date string
 */

function getFormattedDate() {

  function leadingZero(n) {
    let n1 = n.toString();
    if (n < 10) n1 = "0" + n;
    return n1;
  }

  const date = new Date();

  const y = date.getFullYear();
  const m = date.getMonth() + 1;
  const d = date.getDate();
  const hours = date.getHours() + 1;
  const minutes = date.getMinutes() + 1;

  return y + "-" +
        leadingZero(m) + "-" +
        leadingZero(d) + ":" +
        leadingZero(hours)+ ":" +
        leadingZero(minutes);
}

/**
 * @function cleanForUTF8
 *
 * @desc Returns an string with only UTF8 characters
 *
 * @param  {String}  str - string to clean
 *
 * @return {String}  String with only ASCII characters
 */

function cleanForUTF8 (str) {
  if (typeof str !== 'string') {
    return "[cleanForUTF8]: Not a string";
  }
  let nstr = '';
  str.split().forEach( c => {
    if (c >= ' ' && c < '~') nstr += c;
  });
  return nstr;
}

/**
 * @function accNamesTheSame
 *
 * @desc Returns true if the names a equivalent, otherwise false
 *
 * @param  {accName}  str - string to clean
 *
 * @return {Object} ref1 - Name object 1
 * @return {Object} ref2 - Name object 1
 */

function accNamesTheSame (ref1, ref2) {
  return ref1.name.toLowerCase() === ref2.name.toLowerCase();
}

/**
 * @function usesARIALabeling
 *
 * @desc Returns true if the element has an aria-label or aria-labeledby 
 *       attributes
 *
 * @param  {Object}  node - DOM node
 *
 * @return {Boolean} see @desc
 */

function  usesARIALabeling (node) {
  return node.hasAttribute('aria-label') || node.hasAttribute('aria-labelledby');
}

/* controlInfo.js */

/* Constants */
const debug$10 = new DebugLogging('ControlInfo', false);
debug$10.flag = false;

/**
 * @class ControlElement
 *
 * @desc Idenifies a DOM element for native HTML controls and ARIA widgets.
 *
 * @param  {Object}  domElement   - Structural Information
 */

class ControlElement {
  constructor (domElement, parentControlElement) {

    const node = domElement.node;

    this.parentControlElement = parentControlElement;
    this.domElement = domElement;
    this.isGroup = domElement.role === 'group';
    this.isInputTypeText   = this.isInputType(node, 'date') ||
                             this.isInputType(node, 'number') ||
                             this.isInputType(node, 'tel') ||
                             this.isInputType(node, 'time') ||
                             this.isInputType(node, 'text') ||
                             this.isInputType(node, 'url');


    this.nameAttr = node.hasAttribute('name') ?
                    node.getAttribute('name') :
                    '';

    this.isInputTypeImage  = this.isInputType(node, 'image');

    this.isInputTypeRadio  = this.isInputType(node, 'radio');

    this.typeAttr = node.type ? node.type : '';
    this.childControlElements = [];
    this.nameForComparision = this.getNameForComparison(domElement, parentControlElement);

    this.hasPattern = node.hasAttribute('pattern');

    this.hasValidityState = node.validity && (typeof node.validity.valid === 'boolean');
    this.isValid = this.hasValidityState ? node.validity.valid : true;

    this.hasAriaInvalid = node.hasAttribute('aria-invalid');
    this.ariaInvalid = this.hasAriaInvalid ?
                       (node.getAttribute('aria-invalid').toLowerCase() === 'true') :
                       false;

    this.isDisabled = node.disabled ||
                      (node.hasAttribute('aria-disabled') ?
                      (node.getAttribute('aria-disabled').toLowerCase() === 'true') :
                      false);

    this.hasRequired = typeof node.required === 'boolean' ? node.required : false;
    this.hasAriaRequired = node.hasAttribute('aria-required');
    this.ariaRequired = this.hasAriaRequired ?
                       (node.getAttribute('aria-required').toLowerCase() === 'true') :
                       false;

    this.autocomplete = node.getAttribute('autocomplete');

    this.labelElement = this.checkForLabelEncapsulation(parentControlElement);

    if (this.labelElement) {
      this.hasLabel = true;
      this.labelWidth  = this.labelElement.domElement.width;
      this.labelHeight = this.labelElement.domElement.height;
    }
    else {
      this.hasLabel = false;
      this.labelWidth = 0;
      this.labelHeight = 0;
    }
  }

  get isButton () {
    return false;
  }

  get isFieldset () {
    return false;
  }

  get isLabel () {
    return false;
  }

  get isLegend () {
    return false;
  }

  get isInteractive () {
    return true;
  }

  checkForLabelEncapsulation (parentControlElement) {
    while (parentControlElement) {
      if (parentControlElement.isLabel) {
        return parentControlElement;
      }
      parentControlElement = parentControlElement.parentControlElement;
    }
    return false;
  }

  addChildControlElement (controlElement) {
    this.childControlElements.push(controlElement);
  }

  isInputType (node, type) {
    if (node.tagName.toLowerCase() === 'input') {
      return node.type === type;
    }
    return false;
  }

  getGroupControlElement () {
    let ce = this.parentControlElement;
    while (ce) {
      if (ce.isGroup) {
        return ce;
      }
      ce = ce.parentControlElement;
    }
    return null;
  }

  getGroupingNames (controlElement) {
    let names = '';
    let pce = controlElement;

    while (pce) {
      if (pce.domElement.role === 'group') {
        names += ' [g]: ' + pce.domElement.accName.name.trim().toLowerCase();
      }
      pce = pce.parentControlElement;
    }
    return names;
  }

  getRequiredParentControlName (roles, controlElement) {
    let pce = controlElement;
    while (pce) {
      if (roles.indexOf(pce.domElement.role) >= 0) {
        return ' [p]: ' + pce.domElement.accName.name.trim().toLowerCase();
      }
      pce = pce.parentControlElement;
    }
    return '';
  }

  getNameForComparison (domElement, parentControlElement) {
    let name = domElement.accName.name.trim().toLowerCase();

    // If it has a required parent, include required parent control name
    if (domElement.ariaInfo.requiredParents.length > 0) {
      name += this.getRequiredParentControlName(domElement.ariaInfo.requiredParents, parentControlElement);
    }
    else {
      // Include all grouping names
      name += this.getGroupingNames(parentControlElement);
    }

    return name;
  }

  getButtonControl (type) {
    function findButton(controlElements) {
      for (let i = 0; i < controlElements.length; i++) {
        const ce = controlElements[i];
        const de = ce.domElement; 
        if (((de.tagName === 'input') || (de.tagName === 'button')) &&
            de.typeAttr === type) {
          return ce;
        } 
        if (ce.childControlElements.length) {
          const buttonControl = findButton(ce.childControlElements);
          if (buttonControl) {
            return buttonControl;
          }
        }        
      }
      return null;
    }
    return findButton(this.childControlElements);
  }

  updateLegendInfo (legendElement) {
    let pce = this.parentControlElement;
    while (pce) {
      if (pce.isFieldset) {
        pce.legendElements.push(legendElement);
        break;
      }
      pce = pce.parentControlElement;
    }
  }

  showControlInfo (prefix) {
    if (typeof prefix !== 'string') {
      prefix = '';
    }
    this.childControlElements.forEach( ce => {
      debug$10.domElement(ce.domElement, prefix);
      ce.showControlInfo(prefix + '  ');
    });
  }
}

class ButtonElement extends ControlElement {

  constructor (domElement, parentControlElement) {
    super(domElement, parentControlElement);
    
    const node = domElement.node;

    this.hasTextContent = node.textContent.trim().length > 0; 
    this.hasSVGContent = this.checkForSVGContent(node);

  }

  get isButton () {
    return true;
  }

  checkForSVGContent (node) {
    return node.querySelector('svg') ? true : false;
  }  
}


class FieldsetElement extends ControlElement {

  constructor (domElement, parentControlElement) {
    super(domElement, parentControlElement);
    this.legendElements = [];
  }

  get isFieldset () {
    return true;
  }

  get isInteractive () {
    return false;
  }


}

class LabelElement extends ButtonElement {

  constructor (domElement, parentControlElement) {
    super(domElement, parentControlElement);

    const doc = domElement.parentInfo.document;
    const node = domElement.node;

    this.labelForAttr = this.getLabelForAttribute(node);
    const refControlNode = this.getReferenceControl(doc, this.labelForAttr);
    this.isLabelForAttrValid = refControlNode ? isLabelable(refControlNode) : false;
    this.labelforTargetUsesAriaLabeling = refControlNode ? usesARIALabeling(refControlNode) : false;
  }

  get isLabel () {
    return true;
  }

  get isInteractive () {
    return false;
  }

  getLabelForAttribute (node) {
    const tagName = node.tagName.toLowerCase();
    if ((tagName === 'label') && node.hasAttribute('for')) {
      return node.getAttribute('for');
    }
    return '';
  }

  getReferenceControl(doc, id) {
    if (doc && id) {
      const node = doc.getElementById(id);
      if (node) {
        return node;
      }
    }
    return false;
  }  
}

class LegendElement extends ButtonElement {

  constructor (domElement, parentControlElement) {
    super(domElement, parentControlElement);
    
  }

  get isLegend () {
    return true;
  }

  get isInteractive () {
    return false;
  }

}


/**
 * @class ControlInfo
 *
 * @desc Collects information on the HTML control elements and ARIA widget roles
 *       on a web page for use in rules
 *
 * @param  {Object}  ControlInfo   - Structural Information
 */

class ControlInfo {
  constructor () {
    this.allControlElements      = [];
    this.childControlElements    = [];
    this.allFormElements  = [];
    this.allButtonElements = [];
    this.allRadioAndCheckboxElements = [];
    this.allLabelElements = [];
    this.hasTextInput = false;
  }

  /**
   * @method updateLabelForReferences
   *
   * @desc Updates controls with label[for] references
   *
   */

  updateLabelForReferences () {
    this.allLabelElements.forEach (le => {
      const id = le.labelForAttr;
      if (id) {
        for (let i = 0; i < this.allControlElements.length; i += 1) {
          const ce = this.allControlElements[i];
          const de = ce.domElement;
          if (de.id === id) {
            if (ce.labelElement) {
              // pick largest label for size calculations
              if (ce.labelElement.area < le.domElement.area) {
                ce.labelElement = le;
                ce.labelWidth  = le.domElement.width;
                ce.labelHeight = le.domElement.height;
              }
            }
            else {
              ce.labelElement = le;
              ce.hasLabel = true;
              ce.labelWidth  = le.domElement.width;
              ce.labelHeight = le.domElement.height;
            }
            break;
          }
        }
      }
    });
  }

  /**
   * @method addChildControlElement
   *
   * @desc Creates a new ControlElement and adds it to the array of
   *       ControlElements
   *
   * @param  {Object}  domElement           - domElement object being added to ControlInfo
   * @param  {Object}  parentControlElement - ControlElement object representing that parent ControlElement
   *
   */

  addChildControlElement (domElement, parentControlElement) {
    const tagName = domElement.tagName;
    const role = domElement.role; 
    let ce = null;

    switch (tagName) {
      case 'button':
        ce = new ButtonElement(domElement, parentControlElement);
        break;

      case 'fieldset':
        ce = new FieldsetElement(domElement, parentControlElement);
        break;

      case 'label':
        ce = new LabelElement(domElement, parentControlElement);
        this.allLabelElements.push(ce);
        break;

      case 'legend':
        ce = new LegendElement(domElement, parentControlElement);
        ce.updateLegendInfo(ce);
        break;

      default:
        if ((tagName !== 'input') && (role === 'button')) {
          ce = new ButtonElement(domElement, parentControlElement);
        }
        else {
          ce = new ControlElement(domElement, parentControlElement);
          this.hasTextInput = this.hasTextInput || ce.isInputTypeText;
        }
        break;
    }

    this.allControlElements.push(ce);
    if (domElement.tagName === 'form') {
      this.allFormElements.push(ce);
    }

    if (parentControlElement) {
      parentControlElement.addChildControlElement(ce);
    } else {
      this.childControlElements.push(ce);
    }

    if (domElement.role === 'button') {
      this.allButtonElements.push(ce);
    }

    return ce;
  }

  /**
   * @method isControl
   *
   * @desc Tests if a domElement is a HTML control element, a grouping item or ARIA widget role
   *
   * @param  {Object}  domElement - DOMElement object representing an element in the DOM
   */

  isControl (domElement) {
    if (domElement.role === 'link') {
      return false;
    }
    const isGroupRole = domElement.role    === 'group';
    const isFormTag   = domElement.tagName === 'form';
    const isLabel     = domElement.tagName === 'label';
    const isLegend    = domElement.tagName === 'legend';
    const isMeter     = domElement.tagName === 'meter';
    return domElement.isInteractiveElement ||
           isFormTag   ||
           isGroupRole ||
           isLabel     ||
           isLegend    ||
           isMeter     ||
           domElement.ariaInfo.isWidget;
  }


  /**
   * @method update
   *
   * @desc Checks to see if the domElement is a HTML control element or has an ARIA
   *       widget role
   *
   * @param  {Object}  parentControlElement - ControlElement object representing the current
   *                                          ancestor controls in the DOM
   *
   * @param  {Object}  domElement - DOMElement object representing an element in the DOM
   *
   * @return  {Object}  ControlElement - ControlElement object for use as the parent ControlElement
   *                                     for descendant domElements
   */

  update (parentControlElement, domElement) {
    let controlElement = parentControlElement;
    if (this.isControl(domElement)) {
      controlElement = this.addChildControlElement(domElement, parentControlElement);
    }
    return controlElement;
  }

  /**
   * @method showControlInfo
   *
   * @desc showControlInfo is used for debugging the ControlInfo and ControlElement objects
   */

  showControlInfo () {
    if (debug$10.flag) {
      debug$10.log('== Control Tree ==', 1);
      this.childControlElements.forEach( ce => {
        debug$10.domElement(ce.domElement);
        ce.showControlInfo('  ');
      });
      debug$10.log('== Forms ==', 1);
      this.allFormElements.forEach( ce => {
        debug$10.domElement(ce.domElement);
      });
    }
  }
}

/* gen-aria-property-data-types.js is a generated file, see https://github.com/opena11y/aria-to-code */
const propertyDataTypes = {
  'aria-activedescendant': {
    propType: 'property',
    type: 'idref',
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-atomic': {
    propType: 'property',
    type: 'boolean',
    values: [
      'false',
      'true'
    ],
    defaultValue: 'false',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-autocomplete': {
    propType: 'property',
    type: 'nmtoken',
    values: [
      'inline',
      'list',
      'both',
      'none'
    ],
    defaultValue: 'none',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-busy': {
    propType: 'state',
    type: 'boolean',
    values: [
      'false',
      'true'
    ],
    defaultValue: 'false',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-checked': {
    propType: 'state',
    type: 'tristate',
    values: [
      'false',
      'mixed',
      'true',
      'undefined'
    ],
    defaultValue: 'undefined',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-colcount': {
    propType: 'property',
    type: 'integer',
    allowUndeterminedValue: true,
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-colindex': {
    propType: 'property',
    type: 'integer',
    allowUndeterminedValue: false,
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-colspan': {
    propType: 'property',
    type: 'integer',
    allowUndeterminedValue: false,
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-controls': {
    propType: 'property',
    type: 'idrefs',
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-current': {
    propType: 'state',
    type: 'nmtoken',
    values: [
      'page',
      'step',
      'location',
      'date',
      'time',
      'true',
      'false'
    ],
    defaultValue: 'false',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-describedby': {
    propType: 'property',
    type: 'idrefs',
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-details': {
    propType: 'property',
    type: 'idref',
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-disabled': {
    propType: 'state',
    type: 'boolean',
    values: [
      'false',
      'true'
    ],
    defaultValue: 'false',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-dropeffect': {
    propType: 'property',
    type: 'nmtokens',
    values: [
      'copy',
      'execute',
      'link',
      'move',
      'none',
      'popup'
    ],
    defaultValue: 'none',
    deprecated: true,
    idlAttribute: ''
  },
  'aria-errormessage': {
    propType: 'property',
    type: 'idref',
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-expanded': {
    propType: 'state',
    type: 'nmtoken',
    values: [
      'false',
      'true',
      'undefined'
    ],
    defaultValue: 'undefined',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-flowto': {
    propType: 'property',
    type: 'idrefs',
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-grabbed': {
    propType: 'state',
    type: 'nmtoken',
    values: [
      'false',
      'true',
      'undefined'
    ],
    defaultValue: 'undefined',
    deprecated: true,
    idlAttribute: ''
  },
  'aria-haspopup': {
    propType: 'property',
    type: 'nmtoken',
    values: [
      'false',
      'true',
      'menu',
      'listbox',
      'tree',
      'grid',
      'dialog'
    ],
    defaultValue: 'false',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-hidden': {
    propType: 'state',
    type: 'nmtoken',
    values: [
      'false',
      'true',
      'undefined'
    ],
    defaultValue: 'undefined',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-invalid': {
    propType: 'state',
    type: 'nmtoken',
    values: [
      'grammar',
      'false',
      'spelling',
      'true'
    ],
    defaultValue: 'false',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-keyshortcuts': {
    propType: 'property',
    type: 'string',
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-label': {
    propType: 'property',
    type: 'string',
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-labelledby': {
    propType: 'property',
    type: 'idrefs',
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-level': {
    propType: 'property',
    type: 'integer',
    allowUndeterminedValue: false,
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-live': {
    propType: 'property',
    type: 'nmtoken',
    values: [
      'assertive',
      'off',
      'polite'
    ],
    defaultValue: 'off',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-modal': {
    propType: 'property',
    type: 'boolean',
    values: [
      'false',
      'true'
    ],
    defaultValue: 'false',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-multiline': {
    propType: 'property',
    type: 'boolean',
    values: [
      'false',
      'true'
    ],
    defaultValue: 'false',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-multiselectable': {
    propType: 'property',
    type: 'boolean',
    values: [
      'false',
      'true'
    ],
    defaultValue: 'false',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-orientation': {
    propType: 'property',
    type: 'nmtoken',
    values: [
      'horizontal',
      'undefined',
      'vertical'
    ],
    defaultValue: 'undefined',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-owns': {
    propType: 'property',
    type: 'idrefs',
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-placeholder': {
    propType: 'property',
    type: 'string',
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-posinset': {
    propType: 'property',
    type: 'integer',
    allowUndeterminedValue: false,
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-pressed': {
    propType: 'state',
    type: 'tristate',
    values: [
      'false',
      'mixed',
      'true',
      'undefined'
    ],
    defaultValue: 'undefined',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-readonly': {
    propType: 'property',
    type: 'boolean',
    values: [
      'false',
      'true'
    ],
    defaultValue: 'false',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-relevant': {
    propType: 'property',
    type: 'nmtokens',
    values: [
      'additions',
      'additions',
      'all',
      'removals',
      'text'
    ],
    defaultValue: 'additions',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-required': {
    propType: 'property',
    type: 'boolean',
    values: [
      'false',
      'true'
    ],
    defaultValue: 'false',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-roledescription': {
    propType: 'property',
    type: 'string',
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-rowcount': {
    propType: 'property',
    type: 'integer',
    allowUndeterminedValue: true,
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-rowindex': {
    propType: 'property',
    type: 'integer',
    allowUndeterminedValue: false,
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-rowspan': {
    propType: 'property',
    type: 'integer',
    allowUndeterminedValue: false,
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-selected': {
    propType: 'state',
    type: 'nmtoken',
    values: [
      'false',
      'true',
      'undefined'
    ],
    defaultValue: 'undefined',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-setsize': {
    propType: 'property',
    type: 'integer',
    allowUndeterminedValue: true,
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-sort': {
    propType: 'property',
    type: 'nmtoken',
    values: [
      'ascending',
      'descending',
      'none',
      'other'
    ],
    defaultValue: 'none',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-valuemax': {
    propType: 'property',
    type: 'number',
    values: [],
    defaultValue: '100',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-valuemin': {
    propType: 'property',
    type: 'number',
    values: [],
    defaultValue: '0',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-valuenow': {
    propType: 'property',
    type: 'number',
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  },
  'aria-valuetext': {
    propType: 'property',
    type: 'string',
    values: [],
    defaultValue: '',
    deprecated: false,
    idlAttribute: ''
  }
};

/* gen-aria-role-design-patterns.js is a generated file, see https://github.com/opena11y/aria-to-code */
const designPatterns = {
  alert: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure live',
    isAbstract: false
  },
  alertdialog: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-modal',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure window',
    isAbstract: false
  },
  application: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-dropeffect',
      'aria-flowto',
      'aria-grabbed',
      'aria-hidden',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-activedescendant',
      'aria-disabled',
      'aria-errormessage',
      'aria-expanded',
      'aria-haspopup',
      'aria-invalid'
    ],
    deprecatedProps: [],
    supportedProps: [
      'aria-activedescendant',
      'aria-disabled',
      'aria-errormessage',
      'aria-expanded',
      'aria-haspopup',
      'aria-invalid'
    ],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure widget',
    isAbstract: false
  },
  article: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-posinset',
      'aria-setsize'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [
      'aria-posinset',
      'aria-setsize'
    ],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure section',
    isAbstract: false
  },
  banner: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'landmark',
    isAbstract: false
  },
  blockquote: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  button: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-disabled',
      'aria-haspopup',
      'aria-expanded',
      'aria-pressed'
    ],
    deprecatedProps: [
      'aria-errormessage',
      'aria-invalid'
    ],
    supportedProps: [
      'aria-disabled',
      'aria-haspopup',
      'aria-expanded',
      'aria-pressed'
    ],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: true,
    nameProhibited: false,
    childrenPresentational: true,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'widget',
    isAbstract: false
  },
  caption: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: true,
    childrenPresentational: false,
    requiredParents: [
      'figure',
      'grid',
      'table',
      'treegrid'
    ],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  cell: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-colindex',
      'aria-colspan',
      'aria-rowindex',
      'aria-rowspan'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [
      'aria-colindex',
      'aria-colspan',
      'aria-rowindex',
      'aria-rowspan'
    ],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: true,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [
      'row'
    ],
    requiredChildren: [],
    roleType: 'structure section',
    isAbstract: false
  },
  checkbox: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-checked',
      'aria-errormessage',
      'aria-expanded',
      'aria-invalid',
      'aria-readonly',
      'aria-required'
    ],
    deprecatedProps: [
      'aria-haspopup'
    ],
    supportedProps: [
      'aria-errormessage',
      'aria-expanded',
      'aria-invalid',
      'aria-readonly',
      'aria-required'
    ],
    hasRange: false,
    requiredProps: [
      'aria-checked'
    ],
    nameRequired: true,
    nameFromContent: true,
    nameProhibited: false,
    childrenPresentational: true,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'widget',
    isAbstract: false
  },
  code: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: true,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  columnheader: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-colindex',
      'aria-colspan',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-expanded',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-readonly',
      'aria-relevant',
      'aria-required',
      'aria-roledescription',
      'aria-rowindex',
      'aria-rowspan',
      'aria-selected'
    ],
    deprecatedProps: [],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: true,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [
      'row'
    ],
    requiredChildren: [],
    roleType: 'structure widget',
    isAbstract: false
  },
  combobox: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-flowto',
      'aria-grabbed',
      'aria-hidden',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-controls',
      'aria-expanded',
      'aria-activedescendant',
      'aria-autocomplete',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid',
      'aria-readonly',
      'aria-required'
    ],
    deprecatedProps: [],
    supportedProps: [
      'aria-activedescendant',
      'aria-autocomplete',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid',
      'aria-readonly',
      'aria-required'
    ],
    hasRange: false,
    requiredProps: [
      'aria-controls',
      'aria-expanded'
    ],
    nameRequired: true,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'widget',
    isAbstract: false
  },
  command: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'abstract',
    isAbstract: true
  },
  complementary: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'landmark',
    isAbstract: false
  },
  composite: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-activedescendant',
      'aria-disabled'
    ],
    deprecatedProps: [
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [
      'aria-activedescendant',
      'aria-disabled'
    ],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'abstract',
    isAbstract: true
  },
  contentinfo: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'landmark',
    isAbstract: false
  },
  definition: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  deletion: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: true,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  dialog: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-modal',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'window',
    isAbstract: false
  },
  directory: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  document: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  emphasis: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: true,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  feed: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [
      'article'
    ],
    roleType: 'structure',
    isAbstract: false
  },
  figure: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  form: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'landmark',
    isAbstract: false
  },
  generic: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-live',
      'aria-owns',
      'aria-relevant'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: true,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  grid: {
    inheritedProps: [
      'aria-activedescendant',
      'aria-atomic',
      'aria-busy',
      'aria-colcount',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-rowcount',
      'aria-multiselectable',
      'aria-readonly'
    ],
    deprecatedProps: [
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [
      'aria-multiselectable',
      'aria-readonly'
    ],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [
      'row',
      'rowgroup'
    ],
    roleType: 'widget structure',
    isAbstract: false
  },
  gridcell: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-colindex',
      'aria-colspan',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-dropeffect',
      'aria-flowto',
      'aria-grabbed',
      'aria-hidden',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-rowindex',
      'aria-rowspan',
      'aria-disabled',
      'aria-errormessage',
      'aria-expanded',
      'aria-haspopup',
      'aria-invalid',
      'aria-readonly',
      'aria-required',
      'aria-selected'
    ],
    deprecatedProps: [],
    supportedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-expanded',
      'aria-haspopup',
      'aria-invalid',
      'aria-readonly',
      'aria-required',
      'aria-selected'
    ],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: true,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [
      'row'
    ],
    requiredChildren: [],
    roleType: 'structure widget',
    isAbstract: false
  },
  group: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-activedescendant',
      'aria-disabled'
    ],
    deprecatedProps: [
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [
      'aria-activedescendant',
      'aria-disabled'
    ],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  heading: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-level'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [
      'aria-level'
    ],
    nameRequired: true,
    nameFromContent: true,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  img: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: true,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  input: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'abstract',
    isAbstract: true
  },
  insertion: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: true,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  landmark: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'abstract',
    isAbstract: true
  },
  link: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-disabled',
      'aria-expanded',
      'aria-haspopup'
    ],
    deprecatedProps: [
      'aria-errormessage',
      'aria-invalid'
    ],
    supportedProps: [
      'aria-disabled',
      'aria-expanded',
      'aria-haspopup'
    ],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: true,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'widget',
    isAbstract: false
  },
  list: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [
      'listitem'
    ],
    roleType: 'structure',
    isAbstract: false
  },
  listbox: {
    inheritedProps: [
      'aria-activedescendant',
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-orientation',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-errormessage',
      'aria-expanded',
      'aria-invalid',
      'aria-multiselectable',
      'aria-readonly',
      'aria-required'
    ],
    deprecatedProps: [
      'aria-haspopup'
    ],
    supportedProps: [
      'aria-errormessage',
      'aria-expanded',
      'aria-invalid',
      'aria-multiselectable',
      'aria-readonly',
      'aria-required'
    ],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [
      'group',
      'option'
    ],
    roleType: 'widget structure',
    isAbstract: false
  },
  listitem: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-level',
      'aria-posinset',
      'aria-setsize'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [
      'aria-level',
      'aria-posinset',
      'aria-setsize'
    ],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [
      'directory',
      'list'
    ],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  log: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure widget live',
    isAbstract: false
  },
  main: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'landmark',
    isAbstract: false
  },
  marquee: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure widget live',
    isAbstract: false
  },
  math: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  meter: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-valuemax',
      'aria-valuemin',
      'aria-valuetext',
      'aria-valuenow'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: true,
    requiredProps: [
      'aria-valuenow'
    ],
    nameRequired: true,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: true,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'range',
    isAbstract: false
  },
  menu: {
    inheritedProps: [
      'aria-activedescendant',
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-orientation',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [
      'group',
      'menuitem',
      'menuitemcheckbox',
      'menuitemradio'
    ],
    roleType: 'widget structure',
    isAbstract: false
  },
  menubar: {
    inheritedProps: [
      'aria-activedescendant',
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-orientation',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [
      'group',
      'menuitem',
      'menuitemcheckbox',
      'menuitemradio'
    ],
    roleType: 'widget structure',
    isAbstract: false
  },
  menuitem: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-disabled',
      'aria-expanded',
      'aria-haspopup',
      'aria-posinset',
      'aria-setsize'
    ],
    deprecatedProps: [
      'aria-errormessage',
      'aria-invalid'
    ],
    supportedProps: [
      'aria-disabled',
      'aria-expanded',
      'aria-haspopup',
      'aria-posinset',
      'aria-setsize'
    ],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: true,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [
      'group',
      'menu',
      'menubar'
    ],
    requiredChildren: [],
    roleType: 'widget',
    isAbstract: false
  },
  menuitemcheckbox: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-expanded',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-posinset',
      'aria-relevant',
      'aria-roledescription',
      'aria-setsize',
      'aria-checked'
    ],
    deprecatedProps: [
      'aria-errormessage',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [
      'aria-checked'
    ],
    nameRequired: true,
    nameFromContent: true,
    nameProhibited: false,
    childrenPresentational: true,
    requiredParents: [
      'group',
      'menu',
      'menubar'
    ],
    requiredChildren: [],
    roleType: 'widget',
    isAbstract: false
  },
  menuitemradio: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-checked',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-expanded',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-posinset',
      'aria-relevant',
      'aria-roledescription',
      'aria-setsize'
    ],
    deprecatedProps: [
      'aria-checked',
      'aria-errormessage',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: true,
    nameProhibited: false,
    childrenPresentational: true,
    requiredParents: [
      'group',
      'menu',
      'menubar'
    ],
    requiredChildren: [],
    roleType: 'widget',
    isAbstract: false
  },
  navigation: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'landmark',
    isAbstract: false
  },
  note: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  option: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-selected',
      'aria-checked',
      'aria-posinset',
      'aria-setsize'
    ],
    deprecatedProps: [
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [
      'aria-checked',
      'aria-posinset',
      'aria-setsize'
    ],
    hasRange: false,
    requiredProps: [
      'aria-selected'
    ],
    nameRequired: true,
    nameFromContent: true,
    nameProhibited: false,
    childrenPresentational: true,
    requiredParents: [
      'group',
      'listbox'
    ],
    requiredChildren: [],
    roleType: 'widget',
    isAbstract: false
  },
  paragraph: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: true,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  presentation: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: true,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  progressbar: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-valuemax',
      'aria-valuemin',
      'aria-valuenow',
      'aria-valuetext'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: true,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: true,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'range widget',
    isAbstract: false
  },
  radio: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-checked',
      'aria-posinset',
      'aria-setsize'
    ],
    deprecatedProps: [
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [
      'aria-posinset',
      'aria-setsize'
    ],
    hasRange: false,
    requiredProps: [
      'aria-checked'
    ],
    nameRequired: true,
    nameFromContent: true,
    nameProhibited: false,
    childrenPresentational: true,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'widget',
    isAbstract: false
  },
  radiogroup: {
    inheritedProps: [
      'aria-activedescendant',
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-orientation',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-errormessage',
      'aria-invalid',
      'aria-readonly',
      'aria-required'
    ],
    deprecatedProps: [
      'aria-haspopup'
    ],
    supportedProps: [
      'aria-errormessage',
      'aria-invalid',
      'aria-readonly',
      'aria-required'
    ],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [
      'radio'
    ],
    roleType: 'widget structure',
    isAbstract: false
  },
  range: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-valuemax',
      'aria-valuemin',
      'aria-valuenow',
      'aria-valuetext'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [
      'aria-valuemax',
      'aria-valuemin',
      'aria-valuenow',
      'aria-valuetext'
    ],
    hasRange: true,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'abstract',
    isAbstract: true
  },
  region: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'landmark',
    isAbstract: false
  },
  row: {
    inheritedProps: [
      'aria-activedescendant',
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-colindex',
      'aria-expanded',
      'aria-level',
      'aria-posinset',
      'aria-rowindex',
      'aria-setsize',
      'aria-selected'
    ],
    deprecatedProps: [
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [
      'aria-colindex',
      'aria-expanded',
      'aria-level',
      'aria-posinset',
      'aria-rowindex',
      'aria-setsize',
      'aria-selected'
    ],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: true,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [
      'grid',
      'rowgroup',
      'table',
      'treegrid'
    ],
    requiredChildren: [
      'cell',
      'columnheader',
      'gridcell',
      'rowheader'
    ],
    roleType: 'structure widget',
    isAbstract: false
  },
  rowgroup: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [
      'grid',
      'table',
      'treegrid'
    ],
    requiredChildren: [
      'row'
    ],
    roleType: 'structure',
    isAbstract: false
  },
  rowheader: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-colindex',
      'aria-colspan',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-readonly',
      'aria-relevant',
      'aria-required',
      'aria-roledescription',
      'aria-rowindex',
      'aria-rowspan',
      'aria-selected',
      'aria-expanded',
      'aria-sort'
    ],
    deprecatedProps: [],
    supportedProps: [
      'aria-expanded',
      'aria-sort'
    ],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: true,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [
      'row'
    ],
    requiredChildren: [],
    roleType: 'structure widget',
    isAbstract: false
  },
  scrollbar: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-valuetext',
      'aria-controls',
      'aria-valuenow',
      'aria-disabled',
      'aria-orientation',
      'aria-valuemax',
      'aria-valuemin'
    ],
    deprecatedProps: [
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [
      'aria-disabled',
      'aria-orientation',
      'aria-valuemax',
      'aria-valuemin'
    ],
    hasRange: true,
    requiredProps: [
      'aria-controls',
      'aria-valuenow'
    ],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: true,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'range widget',
    isAbstract: false
  },
  search: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'landmark',
    isAbstract: false
  },
  searchbox: {
    inheritedProps: [
      'aria-activedescendant',
      'aria-atomic',
      'aria-autocomplete',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-multiline',
      'aria-owns',
      'aria-placeholder',
      'aria-readonly',
      'aria-relevant',
      'aria-required',
      'aria-roledescription'
    ],
    deprecatedProps: [],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'widget',
    isAbstract: false
  },
  section: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'abstract',
    isAbstract: true
  },
  sectionhead: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: true,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'abstract',
    isAbstract: true
  },
  select: {
    inheritedProps: [
      'aria-activedescendant',
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'abstract',
    isAbstract: true
  },
  separator: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-valuenow',
      'aria-disabled',
      'aria-orientation',
      'aria-valuemax',
      'aria-valuemin',
      'aria-valuetext'
    ],
    deprecatedProps: [
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [
      'aria-orientation'
    ],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: true,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  separatorFocusable: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-valuenow',
      'aria-disabled',
      'aria-orientation',
      'aria-valuemax',
      'aria-valuemin',
      'aria-valuetext'
    ],
    deprecatedProps: [
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [
      'aria-disabled',
      'aria-orientation',
      'aria-valuemax',
      'aria-valuemin',
      'aria-valuetext'
    ],
    hasRange: true,
    requiredProps: [
      'aria-valuenow'
    ],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: true,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'widget range',
    isAbstract: false
  },
  slider: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-flowto',
      'aria-grabbed',
      'aria-hidden',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-valuetext',
      'aria-valuenow',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid',
      'aria-orientation',
      'aria-readonly',
      'aria-valuemax',
      'aria-valuemin'
    ],
    deprecatedProps: [],
    supportedProps: [
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid',
      'aria-orientation',
      'aria-readonly',
      'aria-valuemax',
      'aria-valuemin'
    ],
    hasRange: true,
    requiredProps: [
      'aria-valuenow'
    ],
    nameRequired: true,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: true,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'widget range',
    isAbstract: false
  },
  spinbutton: {
    inheritedProps: [
      'aria-activedescendant',
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-errormessage',
      'aria-invalid',
      'aria-readonly',
      'aria-required',
      'aria-valuemax',
      'aria-valuemin',
      'aria-valuenow',
      'aria-valuetext'
    ],
    deprecatedProps: [
      'aria-haspopup'
    ],
    supportedProps: [
      'aria-errormessage',
      'aria-invalid',
      'aria-readonly',
      'aria-required',
      'aria-valuemax',
      'aria-valuemin',
      'aria-valuenow',
      'aria-valuetext'
    ],
    hasRange: true,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'widget range',
    isAbstract: false
  },
  status: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure live',
    isAbstract: false
  },
  strong: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: true,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  structure: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'abstract',
    isAbstract: true
  },
  subscript: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: true,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  superscript: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: true,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  switch: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-expanded',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-readonly',
      'aria-relevant',
      'aria-required',
      'aria-roledescription',
      'aria-checked'
    ],
    deprecatedProps: [
      'aria-haspopup'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [
      'aria-checked'
    ],
    nameRequired: true,
    nameFromContent: true,
    nameProhibited: false,
    childrenPresentational: true,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'widget',
    isAbstract: false
  },
  tab: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-disabled',
      'aria-expanded',
      'aria-haspopup',
      'aria-posinset',
      'aria-selected',
      'aria-setsize'
    ],
    deprecatedProps: [
      'aria-errormessage',
      'aria-invalid'
    ],
    supportedProps: [
      'aria-disabled',
      'aria-expanded',
      'aria-haspopup',
      'aria-posinset',
      'aria-selected',
      'aria-setsize'
    ],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: true,
    nameProhibited: false,
    childrenPresentational: true,
    requiredParents: [
      'tablist'
    ],
    requiredChildren: [],
    roleType: 'structure widget',
    isAbstract: false
  },
  table: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-colcount',
      'aria-rowcount'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [
      'aria-colcount',
      'aria-rowcount'
    ],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [
      'row',
      'rowgroup'
    ],
    roleType: 'structure',
    isAbstract: false
  },
  tablist: {
    inheritedProps: [
      'aria-activedescendant',
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-multiselectable',
      'aria-orientation'
    ],
    deprecatedProps: [
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [
      'aria-multiselectable',
      'aria-orientation'
    ],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [
      'tab'
    ],
    roleType: 'widget',
    isAbstract: false
  },
  tabpanel: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure widget',
    isAbstract: false
  },
  term: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  textbox: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-flowto',
      'aria-grabbed',
      'aria-hidden',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-activedescendant',
      'aria-autocomplete',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid',
      'aria-multiline',
      'aria-placeholder',
      'aria-readonly',
      'aria-required'
    ],
    deprecatedProps: [],
    supportedProps: [
      'aria-activedescendant',
      'aria-autocomplete',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid',
      'aria-multiline',
      'aria-placeholder',
      'aria-readonly',
      'aria-required'
    ],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'widget',
    isAbstract: false
  },
  time: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure widget live',
    isAbstract: false
  },
  timer: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure widget live',
    isAbstract: false
  },
  toolbar: {
    inheritedProps: [
      'aria-activedescendant',
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  },
  tooltip: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: true,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure widget',
    isAbstract: false
  },
  tree: {
    inheritedProps: [
      'aria-activedescendant',
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-orientation',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription',
      'aria-errormessage',
      'aria-invalid',
      'aria-multiselectable',
      'aria-required'
    ],
    deprecatedProps: [
      'aria-haspopup'
    ],
    supportedProps: [
      'aria-errormessage',
      'aria-invalid',
      'aria-multiselectable',
      'aria-required'
    ],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [
      'group',
      'treeitem'
    ],
    roleType: 'widget structure',
    isAbstract: false
  },
  treegrid: {
    inheritedProps: [
      'aria-activedescendant',
      'aria-atomic',
      'aria-busy',
      'aria-colcount',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-multiselectable',
      'aria-orientation',
      'aria-owns',
      'aria-readonly',
      'aria-relevant',
      'aria-required',
      'aria-roledescription',
      'aria-rowcount'
    ],
    deprecatedProps: [
      'aria-haspopup'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [
      'row',
      'rowgroup'
    ],
    roleType: 'widget structure',
    isAbstract: false
  },
  treeitem: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-checked',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-level',
      'aria-live',
      'aria-owns',
      'aria-posinset',
      'aria-relevant',
      'aria-roledescription',
      'aria-selected',
      'aria-setsize',
      'aria-expanded',
      'aria-haspopup'
    ],
    deprecatedProps: [
      'aria-errormessage',
      'aria-invalid',
      'aria-selected'
    ],
    supportedProps: [
      'aria-expanded',
      'aria-haspopup'
    ],
    hasRange: false,
    requiredProps: [],
    nameRequired: true,
    nameFromContent: true,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [
      'group',
      'tree'
    ],
    requiredChildren: [],
    roleType: 'structure widget',
    isAbstract: false
  },
  widget: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'abstract',
    isAbstract: true
  },
  window: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-label',
      'aria-labelledby',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: false,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'abstract',
    isAbstract: true
  },
  none: {
    inheritedProps: [
      'aria-atomic',
      'aria-busy',
      'aria-controls',
      'aria-current',
      'aria-describedby',
      'aria-details',
      'aria-disabled',
      'aria-dropeffect',
      'aria-errormessage',
      'aria-flowto',
      'aria-grabbed',
      'aria-haspopup',
      'aria-hidden',
      'aria-invalid',
      'aria-keyshortcuts',
      'aria-live',
      'aria-owns',
      'aria-relevant',
      'aria-roledescription'
    ],
    deprecatedProps: [
      'aria-disabled',
      'aria-errormessage',
      'aria-haspopup',
      'aria-invalid'
    ],
    supportedProps: [],
    hasRange: false,
    requiredProps: [],
    nameRequired: false,
    nameFromContent: false,
    nameProhibited: true,
    childrenPresentational: false,
    requiredParents: [],
    requiredChildren: [],
    roleType: 'structure',
    isAbstract: false
  }
};

/* ariaInfo.js */

/* Constants */
const debug$$ = new DebugLogging('AriaInfo', false);
debug$$.flag = false;

/* Debug helper functions */

function debugRefs (refs) {
  let s = '';
  refs.forEach(r => {
    s += `[${r.name} -> ${r.invalidIds.join()}]\n`;
  });
  return s;
}

function debugAttrs (attrs) {
  let s = '';
  attrs.forEach(attr => {
    if (typeof attr === 'string') {
      s += attr + ' ';
    } else {
      if (attr.invalidTokens && attr.invalidTokens.length) {
        s += `[${attr.name}=${attr.invalidTokens.join(' ')}]\n`;
      } else {
        s += `[${attr.name}=${attr.value}]\n`;
      }
    }
  });
  return s;
}

/**
 * @class RefInfo
 *
 * @desc Information about an ARIA attributes the reference IDs.
 *       The invalidIds array is a array of the invalid ID values.
 *
 * @param  {String}  name   - name of attribute
 * @param  {String}  value  - value of attribute
 */

class RefInfo {
  constructor (name, value) {
    this.name = name;
    this.value = value;
    this.invalidIds = [];
  }
}

/**
 * @class AriaInfo
 *
 * @desc Aria information for a element node
 *
 * @param  {Object}   doc          - Document object reference
 * @param  {Boolean}  hasRole      - True if node has explicit role definition
 * @param  {String}   role         - ARIA role for the element
 * @param  {String}   defaultRole  - Default role of element if no role is defined
 * @param  {Object}   node         - dom element node
 */

class AriaInfo {
  constructor (doc, hasRole, role, defaultRole, node) {
    const tagName = node.tagName.toLowerCase();
    const level = parseInt(node.getAttribute('aria-level'));

    let designPattern = designPatterns[role];

    // Separator role is a special case of a role that can be interactive
    if (role === 'separator' &&
        node.hasAttribute('tabindex') &&
        node.tabIndex >= 0) {
      designPattern = designPatterns['separatorFocusable'];
    }

    this.isValidRole  = typeof designPattern === 'object';
    this.isAbstractRole = false;


    // if role is not valid use default role for element for validation
    if (!this.isValidRole) {
      designPattern = designPatterns[defaultRole];
    } else {
      this.isAbstractRole  = designPattern.roleType.indexOf('abstract') >= 0;     
    }

    if (!designPattern) {
      designPattern = designPatterns['generic'];
    }

    this.isNameRequired     = designPattern.nameRequired;
    this.isNameProhibited   = designPattern.nameProhibited;

    this.requiredParents  = designPattern.requiredParents;
    this.hasRequiredParents  = designPattern.requiredParents.length > 0;

    this.requiredChildren  = designPattern.requiredChildren;
    this.hasRequiredChildren = designPattern.requiredChildren.length > 0;
    this.isBusy = node.hasAttribute('aria-busy') ?
                  node.getAttribute('aria-busy').toLowerCase() === 'true':
                  false;

    this.hasAriaOwns = node.hasAttribute('aria-owns');
    this.ariaOwnsIds = this.hasAriaOwns ?
                       node.getAttribute('aria-owns').split(' ') :
                       [];
    this.ownedDomElements   = [];
    this.ownedByDomElements = [];

    this.isRange    = (designPattern.roleType.indexOf('range') >= 0);
    this.isWidget   = (designPattern.roleType.indexOf('widget') >= 0)  ||
                      (designPattern.roleType.indexOf('window') >= 0);

    this.isLandark  = designPattern.roleType.indexOf('landmark') >= 0;     

    this.isSection  = designPattern.roleType.indexOf('section') >= 0;     
    this.isAbstractRole  = designPattern.roleType.indexOf('abstract') >= 0;

    this.flowTo = node.hasAttribute('aria-flowto') ?
                  node.getAttribute('aria-flowto') :
                  '';

    // for range widgets
    if (this.isRange) {
      this.isValueNowRequired = designPattern.requiredProps.includes('aria-valuenow');

      this.hasValueNow = node.hasAttribute('aria-valuenow');
      if (this.hasValueNow) {
        this.valueNow = node.getAttribute('aria-valuenow');
        this.valueNow = isNaN(parseFloat(this.valueNow)) ? this.valueNow : parseFloat(this.valueNow);
        this.validValueNow = !isNaN(this.valueNow);
      }
      else {
        this.valueNow = 'undefined';
        this.validValueNow = false;
      }

      this.hasValueMin = node.hasAttribute('aria-valuemin');
      if (this.hasValueMin) {
        this.valueMin = node.getAttribute('aria-valuemin');
        this.valueMin = isNaN(parseFloat(this.valueMin)) ? this.valueMin : parseFloat(this.valueMin);
        this.validValueMin = !isNaN(this.valueMin);
      }
      else {
        this.valueMin = 0;
        this.validValueMin = true;
      }

      this.hasValueMax = node.hasAttribute('aria-valuemax');
      if (this.hasValueMax) {
        this.valueMax = node.getAttribute('aria-valuemax');
        this.valueMax = isNaN(parseFloat(this.valueMax)) ? this.valueMax : parseFloat(this.valueMax);
        this.validValueMax = !isNaN(this.valueMax);
      }
      else {
        this.valueMax = 100;
        this.validValueMax = true;
      }
      this.valueText = node.hasAttribute('aria-valuetext') ? node.getAttribute('aria-valuetext') : '';
    }

    // for live regions

    this.ariaLive = node.hasAttribute('aria-live') ? node.getAttribute('aria-live').toLowerCase() : '';
    this.isLive     = designPattern.roleType.indexOf('live') >= 0 ||
                      this.ariaLive === 'polite' ||
                      this.ariaLive === 'assertive';


    // Used for heading
    this.headingLevel = this.getHeadingLevel(role, node);

    const attrs = Array.from(node.attributes);

    this.validAttrs        = [];
    this.invalidAttrs      = [];

    attrs.forEach( attr =>  {
      if (attr.name.indexOf('aria') === 0) {
        if (typeof propertyDataTypes[attr.name] === 'object') {
          const a = {
            name: attr.name,
            value: attr.value,
            type: propertyDataTypes[attr.name].type,
            values: propertyDataTypes[attr.name].values,
            allowUndeterminedValue: propertyDataTypes[attr.name].allowUndeterminedValue
          };
          this.validAttrs.push(a);
        } else {
          this.invalidAttrs.push(attr);
        }
      }
    });

    this.invalidAttrValues  = this.checkForInvalidAttributeValue(this.validAttrs);
    this.invalidRefs        = this.checkForInvalidReferences(doc, this.validAttrs);

    this.unsupportedAttrs   = this.checkForUnsupportedAttribute(this.validAttrs, designPattern);
    this.deprecatedAttrs    = this.checkForDeprecatedAttribute(this.validAttrs, designPattern);
    if (hasRole) {
      this.requiredAttrs      = this.checkForRequiredAttributes(this.validAttrs, designPattern, node);
    } else {
      this.requiredAttrs      = [];
    }

    switch (tagName) {
      case 'h1':
        this.ariaLevel = 1;
        break;

      case 'h2':
        this.ariaLevel = 2;
        break;

      case 'h3':
        this.ariaLevel = 3;
        break;

      case 'h4':
        this.ariaLevel = 4;
        break;

      case 'h5':
        this.ariaLevel = 5;
        break;

      case 'h6':
        this.ariaLevel = 6;
        break;

      default:
        this.ariaLevel = (typeof level === 'number') && (level > 0) ? level : 0;
        break;
    }


    if (debug$$.flag) {
      node.attributes.length && debug$$.log(`${node.outerHTML}`, 1);
      debug$$.log(`[         isWidget]: ${this.isWidget}`);
      debug$$.log(`[invalidAttrValues]: ${debugAttrs(this.invalidAttrValues)}`);
      debug$$.log(`[      invalidRefs]: ${debugRefs(this.invalidRefs)}`);
      debug$$.log(`[ unsupportedAttrs]: ${debugAttrs(this.unsupportedAttrs)}`);
      debug$$.log(`[  deprecatedAttrs]: ${debugAttrs(this.deprecatedAttrs)}`);
      debug$$.log(`[    requiredAttrs]: ${debugAttrs(this.requiredAttrs)} (${Array.isArray(this.requiredAttrs)})`);
      debug$$.log(`[     invalidAttrs]: ${debugAttrs(this.invalidAttrs)}`);
    }
  }

  // check if the value of the aria attribute
  // is allowed
  checkForInvalidAttributeValue (attrs) {
    const attrsWithInvalidValues = [];
    let count;

    attrs.forEach( attr => {
      const value     = attr.value.trim().toLowerCase();
      const values    = value.split(' ');
      const num       = Number(value);

      switch (attr.type) {
        case 'boolean':
          if (!attr.values.includes(value)) {
            attrsWithInvalidValues.push(attr);
          }
          break;

        case 'integer':
          if (attr.allowUndeterminedValue) {
            if (!Number.isInteger(num) || (num < -1) || (value === ''))  {
              attrsWithInvalidValues.push(attr);
            }            
          }
          else {
            if (!Number.isInteger(num) || (num < 1) || (value === ''))  {
              attrsWithInvalidValues.push(attr);
            }            
          }
          break;

        case 'nmtoken':
          if (!attr.values.includes(value)) {
            attrsWithInvalidValues.push(attr);
          }
          break;

        case 'nmtokens':
          count = 0;
          values.forEach( v => {
            if (!attr.values.includes(v.trim())) {
              count += 1;
            }
          });
          if (count) {
            attrsWithInvalidValues.push(attr);
          }
          break;

        case 'number':
          if (isNaN(value) || (value === '')) {
            attrsWithInvalidValues.push(attr);
          }
          break;

        case 'tristate':
          if (!attr.values.includes(value)) {
            attrsWithInvalidValues.push(attr);
          }
          break;

      }

    });

    return attrsWithInvalidValues;
  }

  // checks for valid IDREF and IDREFs for
  // aria attributes like aria-labelledby,
  // aria-controls, etc...
  checkForInvalidReferences (doc, attrs) {
    const invalidRefs = [];

    attrs.forEach( attr => {
      const attrInfo = propertyDataTypes[attr.name];
      const idRefs = attr.value.split(' ');

      if ((attrInfo.type === 'idref') ||
          (attrInfo.type === 'idrefs')) {

        const refInfo = new RefInfo (attr.name, attr.value);

        idRefs.forEach( id => {
          try {
            if (doc && !doc.querySelector(`#${id}`)) {
              refInfo.invalidIds.push(id);
            }
          } catch (error) {
            refInfo.invalidIds.push(id);
          }
        });
        if (refInfo.invalidIds.length) {
          invalidRefs.push(refInfo);
        }
      }
    });

    return invalidRefs;
  }

  // checks for the use of an aria-attribute that
  // is not defined for the specific role
  checkForUnsupportedAttribute (attrs, designPattern) {
    const unsupportedAttrs = [];

    attrs.forEach( attr => {
      const name     = attr.name.toLowerCase();
      if (!designPattern.supportedProps.includes(name) &&
        !designPattern.requiredProps.includes(name) &&
        !designPattern.inheritedProps.includes(name)) {
        unsupportedAttrs.push(attr);
      }
    });

    return unsupportedAttrs;
  }

  // checks for aria attributes that are deprecated for all roles
  // and the use of aria attributes that should no longer be used
  // on elements with a specific role
  checkForDeprecatedAttribute (attrs, designPattern) {
    const deprecatedAttrs = [];

    attrs.forEach( attr => {
      const name     = attr.name.toLowerCase();
      const attrInfo = propertyDataTypes[name];
      if (designPattern.deprecatedProps.includes(name) ||
        attrInfo.deprecated) {
        deprecatedAttrs.push(attr);
      }
    });

    return deprecatedAttrs;
  }

  // checks for required aria attributes for a specific role
  // In some cased native HTML semantics like "checked' property of
  // an input element can be used to satisfy the requirement
  checkForRequiredAttributes(attrs, designPattern, node) {
    let requiredAttrs = [];
    designPattern.requiredProps.forEach (reqAttr => {

      const defaultValue = propertyDataTypes[reqAttr].defaultValue;
      const attrInfo = {
        name: reqAttr,
        hasDefaultValue: (defaultValue !== '') && (defaultValue !== 'undefined'),
        defaultValue: defaultValue,
        isDefined: ((reqAttr === 'aria-checked')  && hasCheckedState(node)) ||
                   ((reqAttr === 'aria-selected') && hasSelectedState(node)),
        value: ''
      };

      attrs.forEach( attr => {
        if (attr.name === reqAttr) {
          attrInfo.isDefined = true;
          attrInfo.value = attr.value;
        }
      });
      requiredAttrs.push(attrInfo);
    });
    return requiredAttrs;
  }

  getHeadingLevel (role, node) {
    switch (node.tagName.toLowerCase()) {
      case 'h1':
        return 1;

      case 'h2':
        return 2;

      case 'h3':
        return 3;

      case 'h4':
        return 4;

      case 'h5':
        return 5;

      case 'h6':
        return 6;

      default:
        if (role === 'heading') {
          const level = parseInt(node.getAttribute('aria-level'));
          if (Number.isInteger(level)) {
            return level;
          }
        }
        break;
    }
    return 0;
  }

}

/* colorContrast.js */

/* Constants */
const debug$_ = new DebugLogging('colorContrast', false);
debug$_.flag = false;
const defaultFontSize = 16;    // In pixels (px)
const biggerFontSize  = 18.66; // In pixels (px)
const largeFontSize   = 24;    // In pixels (px)
const fontWeightBold  = 300;

  /**
   * @function getLuminance
   *
   * @desc Get the luminance value of a hex encoded color
   *
   * @param {String}  color    - Hex representation of a color value
   *
   * @return {Number}  Returns a number representing the limnance value
   */

  function getLuminance (color) {

    // Get decimal values
    const R8bit = parseInt(color.substring(0,2),16);
    const G8bit = parseInt(color.substring(2,4),16);
    const B8bit = parseInt(color.substring(4,6),16);

    // Get sRGB values
    const RsRGB = R8bit/255;
    const GsRGB = G8bit/255;
    const BsRGB = B8bit/255;
    // Calculate luminance
    const R = (RsRGB <= 0.03928) ? RsRGB/12.92 : Math.pow(((RsRGB + 0.055)/1.055), 2.4);
    const G = (GsRGB <= 0.03928) ? GsRGB/12.92 : Math.pow(((GsRGB + 0.055)/1.055), 2.4);
    const B = (BsRGB <= 0.03928) ? BsRGB/12.92 : Math.pow(((BsRGB + 0.055)/1.055), 2.4);

    return (0.2126 * R + 0.7152 * G + 0.0722 * B);
  }

function computeCCR (hex1, hex2) {
    const L1 = getLuminance(hex1);
    const L2 = getLuminance(hex2);
    return Math.round((Math.max(L1, L2) + 0.05)/(Math.min(L1, L2) + 0.05)*10)/10;
}

/*
 * @class ColorContrast
 *
 * @desc Identifies the text properties used to determine WCAG color contrast 
 *       requirements including computing the color contrast ratio based on 
 *       text and background colors
 *
 * @param  {Object}  parentDomElement - Parent DomElement containing ancestor style information
 * @param  {Object}  elementNode      - dom element node 
 */

class ColorContrast {
  constructor (parentDomElement, elementNode) {
    let parentColorContrast = parentDomElement ? parentDomElement.colorContrast : false;
    let style = window.getComputedStyle(elementNode, null);

    if (debug$_.flag) {
      debug$_.separator();
      debug$_.tag(elementNode);
    }

    this.opacity            = this.normalizeOpacity(style, parentColorContrast);

    this.backgroundColor    = this.normalizeBackgroundColor(style, parentColorContrast);
    this.backgroundColorHex = this.rgbToHex(this.backgroundColor, parentColorContrast.backgroundColorHex);
    this.color              = style.getPropertyValue("color");
    this.colorHex           = this.rgbToHex(this.color, this.backgroundColorHex, this.opacity);

    this.backgroundImage    = this.normalizeBackgroundImage(style, parentColorContrast);
    this.backgroundRepeat   = style.getPropertyValue("background-repeat");
    this.backgroundPosition = style.getPropertyValue("background-position");
    this.hasBackgroundImage = this.backgroundImage !== 'none';

    this.fontFamily = style.getPropertyValue("font-family");
    this.fontSize   = this.normalizeFontSize(style, parentColorContrast);
    this.fontWeight = this.normalizeFontWeight(style, parentColorContrast);
    this.isLargeFont = this.getLargeFont(this.fontSize, this.fontWeight);

    this.colorContrastRatio = computeCCR(this.colorHex, this.backgroundColorHex);

    if (debug$_.flag) {
      debug$_.log(`[                      color]: ${this.color}`);
      debug$_.log(`[           background color]: ${this.backgroundColor}`);
      debug$_.log(`[                    opacity]: ${this.opacity}`);
      debug$_.log(`[           Background Image]: ${this.backgroundImage} (${this.hasBackgroundImage})`);
      debug$_.log(`[ Family/Size/Weight/isLarge]: "${this.fontFamily}"/${this.fontSize}/${this.fontWeight}/${this.isLargeFont}`);
      debug$_.color(`[   CCR for Color/Background]: ${this.colorContrastRatio} for #${this.colorHex}/#${this.backgroundColorHex}`, this.color, this.backgroundColor);
    }
  }

  /**
   * @method normalizeOpacity
   *
   * @desc Normalizes opacity to a number 
   *
   * @param {Object}  style                - Computed style object for an element node 
   * @param {Object}  parentColorContrast  - Computed color contrast information for parent
   *                                         DomElement
   *
   * @return {Number}  Returns a number representing the opacity
   */

  normalizeOpacity (style, parentColorContrast) {
    let opacity = style.getPropertyValue("opacity");
    let parentOpacity = 1.0;

    if (parentColorContrast) {
      parentOpacity = parentColorContrast.opacity;
    }

    if (isNaN(opacity)) {
      opacity = opacity.toLowerCase();

      switch (opacity) {
        case 'inherit':
        case 'unset':
          opacity = parentOpacity;
          break;

        case 'initial':
        case 'revert':
          opacity = 1.0;
          break;

        default:
          if (opacity.indexOf('%')) {
            opacity = parseInt(opacity.split('%')[0]);
            if (isNaN(opacity)) {
              opacity = parentOpacity;
            } else {
              opacity = parentOpacity * (opacity / 100);
            }
          }
          else {
            opacity = parseFloat(opacity) * parentOpacity;
            if (isNaN(opacity)) {
              opacity = 1.0;
            }
          }
          break;
      }  // end switch
    } else {
      opacity = parseFloat(opacity) * parentOpacity;
      if (isNaN(opacity)) {
        opacity = 1.0;
      }

    }

    // Make sure opacity is between 0 and 1
    opacity = Math.max(Math.min(opacity, 1.0), 0.0);

    return opacity;
  }  

  /**
   * @method normalizeBackgroundColor
   *
   * @desc Normalizes background color
   *
   * @param {Object}  style                - Computed style object for an element node 
   * @param {Object}  parentColorContrast  - Computed color contrast information for parent
   *                                         DomElement
   *
   * @return {String}  Returns the background color
   */

  normalizeBackgroundColor (style, parentColorContrast) {
    let backgroundColor = style.getPropertyValue("background-color");
    if ((backgroundColor == 'rgba(0, 0, 0, 0)') ||
        (backgroundColor == 'transparent') ||
        (backgroundColor == 'inherit')) {

      debug$_.flag && debug$_.log(`[normalizeBackgroundColor][parentColorContrast]: ${parentColorContrast}`);

      if (parentColorContrast) {
        debug$_.flag && debug$_.log(`[normalizeBackgroundColor][backgroundColor]: ${parentColorContrast.backgroundColor}`);
        backgroundColor   = parentColorContrast.backgroundColor;
      }
      else {
        // This is an edge case test typically for body elements and frames
        backgroundColor = 'rgb(255,255,255)';
      }
    }
    return backgroundColor;
  }

  /**
   * @method normalizeBackgroundImage
   *
   * @desc Normalizes background image 
   *
   * @param {Object}  style                - Computed style object for an element node 
   * @param {Object}  parentColorContrast  - Computed color contrast information for parent
   *                                         DomElement
   *
   * @return {String}  Returns a reference to a background image URL or none
   */

  normalizeBackgroundImage (style, parentColorContrast) {
    let backgroundImage = style.getPropertyValue("background-image").toLowerCase();

    if ((backgroundImage === 'inherit') ||
        (backgroundImage === 'none') ||
        (backgroundImage === '')) {
      if (parentColorContrast) {
        backgroundImage = parentColorContrast.backgroundImage;
      }
      else {
        backgroundImage = 'none';
      }
    }
    return backgroundImage;
  }

  /*
   * @method normalizeFontSize
   *
   * @desc Normalizes font size to a number 
   *
   * @param {Object}  style                - Computed style object for an element node 
   * @param {Object}  parentColorContrast  - Computed color contrast information for parent
   *                                         DomElement
   *
   * @return {Number}  Returns a number representing font size value in pixels (px)
   */

  normalizeFontSize (style, parentColorContrast) {
    let fontSize = style.getPropertyValue("font-size");
    if (isNaN(fontSize)) {
      if (fontSize.toLowerCase() == 'inherit') {
        if (parentColorContrast) {
          fontSize = parentColorContrast.fontSize;
        }
        else {
          fontSize = defaultFontSize;
        }
      } else {
        fontSize = parseInt(fontSize, 10);
        if (isNaN(fontSize)) {
          fontSize = defaultFontSize;
        }
      }
    } 
    return fontSize;
  }

  /*
   * @method normalizeFontWeight
   *
   * @desc Normalizes font weight to a number 
   *
   * @param {Object}  style                - Computed style object for an element node 
   * @param {Object}  parentColorContrast  - Computed color contrast information for parent
   *                                         DomElement
   *
   * @return {Number}  Returns a number representing font weight value
   */

  normalizeFontWeight (style, parentColorContrast) {
    let fontWeight = style.getPropertyValue("font-weight");

    if (isNaN(fontWeight)) {
      switch (fontWeight.toLowerCase()) {
      case 'bold':
        fontWeight = 700;
        break;

      case 'normal':
        fontWeight = 400;
        break;

      case 'inherit':
        if (parentColorContrast) {
          fontWeight = parentColorContrast.fontWeight;
        }
        else {
          fontWeight = 400;
        }
        break;

      case 'bolder':
        fontWeight = 700;
        break;

      default:
        fontWeight = 400;
        break;

      }
    }
    else {
      fontWeight = parseInt(fontWeight, 10);
    }    
    return fontWeight;
  }

  /**
  * @function rgbToHex
  *
  * @desc Converts an RGB color to Hex values
  *
  * @param {String} colorRGB       - RGB Color rgb(rr, gg, bb) or rgb(rr, gg, bb, aa)
  * @param {String} backgroundHex  - Background color as a hex value
  * @param {Number}  opacity       - A number between 0 and 1 representing CSS value
  *                                  default value is 1.0
  *
  * @return  {String}  - Hex version of the RGB color
  */

  rgbToHex ( colorRGB, backgroundHex, opacity=1.0 ) {

    function hexToString(d) {
      let hex = Number(d).toString(16);
      return hex.length === 1 ? '0' + hex : hex;
    }

    if (!colorRGB) return "000000";

    colorRGB = colorRGB.replace('"', '');
    colorRGB = colorRGB.split(')')[0];
    colorRGB = colorRGB.split('(')[1];
    const parts = colorRGB.split(',');
    let r1 = parseFloat(parts[0]);
    let g1 = parseFloat(parts[1]);
    let b1 = parseFloat(parts[2]);
    const o1 = parts.length === 4 ? parseFloat(parts[3]) : 1.0;

    if (typeof backgroundHex !== 'string' || backgroundHex.length !== 6) {
      backgroundHex = 'FFFFFF';
    }

    const r2 = parseInt(backgroundHex.substring(0,2), 16);
    const g2 = parseInt(backgroundHex.substring(2,4), 16);
    const b2 = parseInt(backgroundHex.substring(4,6), 16);

    const min = 0.0001;

    if (o1 < min) {
      return backgroundHex;
    }
    else {
      if (o1 < 1.0) {
        r1 = Math.round(r1 * o1 + r2 * (1 - o1));
        g1 = Math.round(g1 * o1 + g2 * (1 - o1));
        b1 = Math.round(b1 * o1 + b2 * (1 - o1));
      }
    }

    if (typeof opacity === 'string') {
      opacity = parseFloat(opacity);
    }

    if ((opacity === Number.NaN) || (opacity < 0.0) || (opacity > 1.0)) {
      opacity = 1.0;
    }

    if (opacity < 1.0) {
      r1 = Math.round(r1 * opacity + r2 * (1 - opacity));
      g1 = Math.round(g1 * opacity + g2 * (1 - opacity));
      b1 = Math.round(b1 * opacity + b2 * (1 - opacity));
    }

    return hexToString(r1) + hexToString(g1) + hexToString(b1);
  }

  /**
   * @method getLargeFont
   *
   * @desc Returns a boolean indiciating if the fontis considered large
   *
   * @param {Number}  fontSize    - font size of the element in pixels
   * @param {Number}  fontWeight  - Numberical value of the font wieght (100-900)
   *
   * @return {Boolean}  Returns true if considered a large font, otherwise fals
   */

  getLargeFont (fontSize, fontWeight) {
    const isSizeLarge   = fontSize >= largeFontSize;
    const isSizeBigger  = fontSize >= biggerFontSize;
    const isBold        = fontWeight >= fontWeightBold;


    return isSizeLarge || (isSizeBigger && isBold);
  }
}

/* eventInfo.js */

/* Constants */
const debug$Z = new DebugLogging('EventInfo', false);

/**
 * @class EventInfo
 *
 * @desc Collects information on the links in a web page
 */

class EventInfo {
  constructor (node) {
    this.hasClick  = node.hasAttribute('onclick');
    this.hasChange = node.hasAttribute('onchange');

    if (debug$Z.flag) {
      console.log(`[hasClick ]: ${this.hasClick}`);
      console.log(`[hasChange]: ${this.hasChange}`);
    }
  }
}

/* generated file, see https://github.com/opena11y/aria-in-html-to-code */
const ariaInHTMLInfo = {
  title: 'ARIA in HTML',
  status: 'W3C Recommendation 05 July 2023',
  reference: 'https://www.w3.org/TR/html-aria/',
  elementInfo: {
    'a[href]': {
      tagName: 'a',
      defaultRole: 'link',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'button',
        'checkbox',
        'menuitem',
        'menuitemcheckbox',
        'menuitemradio',
        'option',
        'radio',
        'switch',
        'tab',
        'treeitem',
        'link'
      ],
      attr1: 'href',
      id: 'a[href]'
    },
    a: {
      tagName: 'a',
      defaultRole: 'generic',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'a'
    },
    abbr: {
      tagName: 'abbr',
      defaultRole: '',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'abbr'
    },
    address: {
      tagName: 'address',
      defaultRole: 'group',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'address'
    },
    'area[href]': {
      tagName: 'area',
      defaultRole: 'link',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      attr1: 'href',
      id: 'area[href]'
    },
    area: {
      tagName: 'area',
      defaultRole: 'generic',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'button',
        'link',
        'generic'
      ],
      id: 'area'
    },
    article: {
      tagName: 'article',
      defaultRole: 'article',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'application',
        'document',
        'feed',
        'main',
        'none',
        'presentation',
        'region',
        'article'
      ],
      id: 'article'
    },
    aside: {
      tagName: 'aside',
      defaultRole: 'complementary',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'feed',
        'none',
        'note',
        'presentation',
        'region',
        'search',
        'complementary'
      ],
      id: 'aside'
    },
    audio: {
      tagName: 'audio',
      defaultRole: '',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'application'
      ],
      id: 'audio'
    },
    b: {
      tagName: 'b',
      defaultRole: 'generic',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'b'
    },
    base: {
      tagName: 'base',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'base'
    },
    bdi: {
      tagName: 'bdi',
      defaultRole: 'generic',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'bdi'
    },
    bdo: {
      tagName: 'bdo',
      defaultRole: 'generic',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'bdo'
    },
    blockquote: {
      tagName: 'blockquote',
      defaultRole: 'blockquote',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'blockquote'
    },
    body: {
      tagName: 'body',
      defaultRole: 'generic',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'body'
    },
    br: {
      tagName: 'br',
      defaultRole: '',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'none',
        'presentation'
      ],
      id: 'br'
    },
    button: {
      tagName: 'button',
      defaultRole: 'button',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'checkbox',
        'combobox',
        'gridcell',
        'link',
        'menuitem',
        'menuitemcheckbox',
        'menuitemradio',
        'option',
        'radio',
        'slider',
        'switch',
        'tab',
        'treeitem',
        'button'
      ],
      id: 'button'
    },
    canvas: {
      tagName: 'canvas',
      defaultRole: '',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'canvas'
    },
    caption: {
      tagName: 'caption',
      defaultRole: 'caption',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'caption'
    },
    cite: {
      tagName: 'cite',
      defaultRole: '',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'cite'
    },
    code: {
      tagName: 'code',
      defaultRole: 'code',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'code'
    },
    col: {
      tagName: 'col',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'col'
    },
    colgroup: {
      tagName: 'colgroup',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'colgroup'
    },
    data: {
      tagName: 'data',
      defaultRole: 'generic',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'data'
    },
    datalist: {
      tagName: 'datalist',
      defaultRole: 'listbox',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'datalist'
    },
    dd: {
      tagName: 'dd',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'dd'
    },
    del: {
      tagName: 'del',
      defaultRole: 'deletion',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'del'
    },
    details: {
      tagName: 'details',
      defaultRole: 'group',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'details'
    },
    dfn: {
      tagName: 'dfn',
      defaultRole: 'term',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'dfn'
    },
    dialog: {
      tagName: 'dialog',
      defaultRole: 'dialog',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'alertdialog',
        'dialog'
      ],
      id: 'dialog'
    },
    div: {
      tagName: 'div',
      defaultRole: 'generic',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'div'
    },
    dl: {
      tagName: 'dl',
      defaultRole: '',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'group',
        'list',
        'none',
        'presentation'
      ],
      id: 'dl'
    },
    dt: {
      tagName: 'dt',
      defaultRole: '',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'listitem'
      ],
      id: 'dt'
    },
    em: {
      tagName: 'em',
      defaultRole: 'emphasis',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'em'
    },
    embed: {
      tagName: 'embed',
      defaultRole: '',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'application',
        'document',
        'img',
        'none',
        'presentation'
      ],
      id: 'embed'
    },
    fieldset: {
      tagName: 'fieldset',
      defaultRole: 'group',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'none',
        'presentation',
        'radiogroup',
        'group'
      ],
      id: 'fieldset'
    },
    figcaption: {
      tagName: 'figcaption',
      defaultRole: '',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'group',
        'none',
        'presentation'
      ],
      id: 'figcaption'
    },
    'figure[figcaption]': {
      tagName: 'figure',
      defaultRole: 'figure',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      hasFigcaption: true,
      id: 'figure[figcaption]'
    },
    figure: {
      tagName: 'figure',
      defaultRole: 'figure',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'figure'
    },
    'footer[contentinfo]': {
      tagName: 'footer',
      defaultRole: 'contentinfo',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'group',
        'presentation',
        'none',
        'article',
        'aside',
        'main',
        'nav',
        'section',
        'role=article',
        'complementary',
        'main',
        'navigation',
        'region',
        'role=contentinfo',
        'role=generic'
      ],
      isLandmark: true,
      id: 'footer[contentinfo]'
    },
    footer: {
      tagName: 'footer',
      defaultRole: 'generic',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'group',
        'presentation',
        'none',
        'article',
        'aside',
        'main',
        'nav',
        'section',
        'role=article',
        'complementary',
        'main',
        'navigation',
        'region',
        'role=contentinfo',
        'role=generic'
      ],
      id: 'footer'
    },
    form: {
      tagName: 'form',
      defaultRole: 'form',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'none',
        'presentation',
        'search',
        'form'
      ],
      id: 'form'
    },
    h1: {
      tagName: 'h1',
      defaultRole: 'heading',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'none',
        'presentation',
        'tab',
        'heading'
      ],
      id: 'h1'
    },
    h2: {
      tagName: 'h2',
      defaultRole: 'heading',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'none',
        'presentation',
        'tab',
        'heading'
      ],
      id: 'h2'
    },
    h3: {
      tagName: 'h3',
      defaultRole: 'heading',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'none',
        'presentation',
        'tab',
        'heading'
      ],
      id: 'h3'
    },
    h4: {
      tagName: 'h4',
      defaultRole: 'heading',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'none',
        'presentation',
        'tab',
        'heading'
      ],
      id: 'h4'
    },
    h5: {
      tagName: 'h5',
      defaultRole: 'heading',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'none',
        'presentation',
        'tab',
        'heading'
      ],
      id: 'h5'
    },
    h6: {
      tagName: 'h6',
      defaultRole: 'heading',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'none',
        'presentation',
        'tab',
        'heading'
      ],
      id: 'h6'
    },
    head: {
      tagName: 'head',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'head'
    },
    'header[banner]': {
      tagName: 'header',
      defaultRole: 'banner',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'group',
        'none',
        'presentation',
        'article',
        'aside',
        'main',
        'nav',
        'section',
        'role=article',
        'complementary',
        'main',
        'navigation',
        'region',
        'role=contentinfo',
        'role=generic'
      ],
      isLandmark: true,
      id: 'header[banner]'
    },
    header: {
      tagName: 'header',
      defaultRole: 'generic',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'group',
        'none',
        'presentation',
        'article',
        'aside',
        'main',
        'nav',
        'section',
        'role=article',
        'complementary',
        'main',
        'navigation',
        'region',
        'role=contentinfo',
        'role=generic'
      ],
      id: 'header'
    },
    hgroup: {
      tagName: 'hgroup',
      defaultRole: 'generic',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'hgroup'
    },
    hr: {
      tagName: 'hr',
      defaultRole: 'separator',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'none',
        'presentation',
        'separator'
      ],
      id: 'hr'
    },
    html: {
      tagName: 'html',
      defaultRole: 'document',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'html'
    },
    i: {
      tagName: 'i',
      defaultRole: 'generic',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'i'
    },
    iframe: {
      tagName: 'iframe',
      defaultRole: '',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'application',
        'document',
        'img',
        'none',
        'presentation'
      ],
      id: 'iframe'
    },
    'img[accname]': {
      tagName: 'img',
      defaultRole: 'img',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'button',
        'checkbox',
        'link',
        'menuitem',
        'menuitemcheckbox',
        'menuitemradio',
        'option',
        'progressbar',
        'radio',
        'scrollbar',
        'separator',
        'slider',
        'switch',
        'tab',
        'treeitem',
        'img'
      ],
      hasAccname: true,
      id: 'img[accname]'
    },
    'img[alt]': {
      tagName: 'img',
      defaultRole: 'img',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'button',
        'checkbox',
        'link',
        'menuitem',
        'menuitemcheckbox',
        'menuitemradio',
        'option',
        'progressbar',
        'radio',
        'scrollbar',
        'separator',
        'slider',
        'switch',
        'tab',
        'treeitem',
        'img'
      ],
      attr1: 'alt',
      id: 'img[alt]'
    },
    'img[emptyalt]': {
      tagName: 'img',
      defaultRole: 'presentation',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      attr1: 'alt=""',
      id: 'img[emptyalt]'
    },
    img: {
      tagName: 'img',
      defaultRole: 'img',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'img'
    },
    'input[type=button]': {
      tagName: 'input',
      defaultRole: 'button',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'checkbox',
        'combobox',
        'gridcell',
        'link',
        'menuitem',
        'menuitemcheckbox',
        'menuitemradio',
        'option',
        'radio',
        'slider',
        'switch',
        'tab',
        'treeitem',
        'button'
      ],
      attr1: 'type=button',
      id: 'input[type=button]'
    },
    'input[type=checkbox]': {
      tagName: 'input',
      defaultRole: 'checkbox',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'menuitemcheckbox',
        'option',
        'switch',
        'button',
        'checkbox'
      ],
      attr1: 'type=checkbox',
      id: 'input[type=checkbox]'
    },
    'input[type=color]': {
      tagName: 'input',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      attr1: 'type=color',
      id: 'input[type=color]'
    },
    'input[type=date]': {
      tagName: 'input',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      attr1: 'type=date',
      id: 'input[type=date]'
    },
    'input[type=datetime-local]': {
      tagName: 'input',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      attr1: 'type=datetime-local',
      id: 'input[type=datetime-local]'
    },
    'input[type=email][list]': {
      tagName: 'input',
      defaultRole: 'combobox',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      attr1: 'type=email',
      attr2: 'list',
      id: 'input[type=email][list]'
    },
    'input[type=email]': {
      tagName: 'input',
      defaultRole: 'textbox',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      attr1: 'type=email',
      id: 'input[type=email]'
    },
    'input[type=file]': {
      tagName: 'input',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      attr1: 'type=file',
      id: 'input[type=file]'
    },
    'input[type=hidden]': {
      tagName: 'input',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      attr1: 'type=hidden',
      id: 'input[type=hidden]'
    },
    'input[type=image]': {
      tagName: 'input',
      defaultRole: 'button',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'button',
        'checkbox',
        'gridcell',
        'link',
        'menuitem',
        'menuitemcheckbox',
        'menuitemradio',
        'option',
        'radio',
        'slider',
        'switch',
        'tab',
        'treeitem'
      ],
      attr1: 'type=image',
      id: 'input[type=image]'
    },
    'input[type=month]': {
      tagName: 'input',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      attr1: 'type=month',
      id: 'input[type=month]'
    },
    'input[type=number]': {
      tagName: 'input',
      defaultRole: 'spinbutton',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      attr1: 'type=number',
      id: 'input[type=number]'
    },
    'input[type=password]': {
      tagName: 'input',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      attr1: 'type=password',
      id: 'input[type=password]'
    },
    'input[type=radio]': {
      tagName: 'input',
      defaultRole: 'radio',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'menuitemradio',
        'radio'
      ],
      attr1: 'type=radio',
      id: 'input[type=radio]'
    },
    'input[type=range]': {
      tagName: 'input',
      defaultRole: 'slider',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      attr1: 'type=range',
      id: 'input[type=range]'
    },
    'input[type=reset]': {
      tagName: 'input',
      defaultRole: 'button',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [],
      attr1: 'type=reset',
      id: 'input[type=reset]'
    },
    'input[type=search][list]': {
      tagName: 'input',
      defaultRole: 'combobox',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      attr1: 'type=search',
      attr2: 'list',
      id: 'input[type=search][list]'
    },
    'input[type=search]': {
      tagName: 'input',
      defaultRole: 'searchbox',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      attr1: 'type=search',
      id: 'input[type=search]'
    },
    'input[type=submit]': {
      tagName: 'input',
      defaultRole: 'button',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [],
      attr1: 'type=submit',
      id: 'input[type=submit]'
    },
    'input[type=tel][list]': {
      tagName: 'input',
      defaultRole: 'combobox',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      attr1: 'type=tel',
      attr2: 'list',
      id: 'input[type=tel][list]'
    },
    'input[type=tel]': {
      tagName: 'input',
      defaultRole: 'textbox',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      attr1: 'type=tel',
      id: 'input[type=tel]'
    },
    'input[type=text][list]': {
      tagName: 'input',
      defaultRole: 'combobox',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      attr1: 'type=text',
      attr2: 'list',
      id: 'input[type=text][list]'
    },
    'input[type=text]': {
      tagName: 'input',
      defaultRole: 'textbox',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'combobox',
        'searchbox',
        'spinbutton',
        'textbox'
      ],
      attr1: 'type=text',
      id: 'input[type=text]'
    },
    'input[type=time]': {
      tagName: 'input',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      attr1: 'type=time',
      id: 'input[type=time]'
    },
    'input[type=url][list]': {
      tagName: 'input',
      defaultRole: 'combobox',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      attr1: 'type=url',
      attr2: 'list',
      id: 'input[type=url][list]'
    },
    'input[type=url]': {
      tagName: 'input',
      defaultRole: 'textbox',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      attr1: 'type=url',
      id: 'input[type=url]'
    },
    'input[type=week]': {
      tagName: 'input',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      attr1: 'type=week',
      id: 'input[type=week]'
    },
    ins: {
      tagName: 'ins',
      defaultRole: 'insertion',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'ins'
    },
    kbd: {
      tagName: 'kbd',
      defaultRole: '',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'kbd'
    },
    label: {
      tagName: 'label',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'label'
    },
    legend: {
      tagName: 'legend',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'legend'
    },
    'li[listitem]': {
      tagName: 'li',
      defaultRole: 'listitem',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      ownedbyOL: true,
      ownedbyUL: true,
      ownedbyMenu: true,
      id: 'li[listitem]'
    },
    li: {
      tagName: 'li',
      defaultRole: 'generic',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'li'
    },
    link: {
      tagName: 'link',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'link'
    },
    main: {
      tagName: 'main',
      defaultRole: 'main',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'main'
    },
    map: {
      tagName: 'map',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'map'
    },
    mark: {
      tagName: 'mark',
      defaultRole: '',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'mark'
    },
    math: {
      tagName: 'math',
      defaultRole: 'math',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'math'
    },
    menu: {
      tagName: 'menu',
      defaultRole: 'list',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'group',
        'listbox',
        'menu',
        'menubar',
        'none',
        'presentation',
        'radiogroup',
        'tablist',
        'toolbar',
        'tree',
        'list'
      ],
      id: 'menu'
    },
    meta: {
      tagName: 'meta',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'meta'
    },
    meter: {
      tagName: 'meter',
      defaultRole: 'meter',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'meter'
    },
    nav: {
      tagName: 'nav',
      defaultRole: 'navigation',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'menu',
        'menubar',
        'none',
        'presentation',
        'tablist',
        'navigation'
      ],
      id: 'nav'
    },
    noscript: {
      tagName: 'noscript',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'noscript'
    },
    object: {
      tagName: 'object',
      defaultRole: '',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'application',
        'document',
        'img'
      ],
      id: 'object'
    },
    ol: {
      tagName: 'ol',
      defaultRole: 'list',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'group',
        'listbox',
        'menu',
        'menubar',
        'none',
        'presentation',
        'radiogroup',
        'tablist',
        'toolbar',
        'tree',
        'list'
      ],
      id: 'ol'
    },
    optgroup: {
      tagName: 'optgroup',
      defaultRole: 'group',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'optgroup'
    },
    option: {
      tagName: 'option',
      defaultRole: 'option',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'option'
    },
    output: {
      tagName: 'output',
      defaultRole: 'status',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'output'
    },
    p: {
      tagName: 'p',
      defaultRole: 'paragraph',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'p'
    },
    param: {
      tagName: 'param',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'param'
    },
    picture: {
      tagName: 'picture',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'picture'
    },
    pre: {
      tagName: 'pre',
      defaultRole: 'generic',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'pre'
    },
    progress: {
      tagName: 'progress',
      defaultRole: 'progressbar',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'progress'
    },
    q: {
      tagName: 'q',
      defaultRole: 'generic',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'q'
    },
    rp: {
      tagName: 'rp',
      defaultRole: '',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'rp'
    },
    rt: {
      tagName: 'rt',
      defaultRole: '',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'rt'
    },
    ruby: {
      tagName: 'ruby',
      defaultRole: '',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'ruby'
    },
    s: {
      tagName: 's',
      defaultRole: 'deletion',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 's'
    },
    samp: {
      tagName: 'samp',
      defaultRole: 'generic',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'samp'
    },
    script: {
      tagName: 'script',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'script'
    },
    search: {
      tagName: 'search',
      defaultRole: 'search',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'form',
        'group',
        'none',
        'presentation',
        'region',
        'search'
      ],
      id: 'search'
    },
    'section[accname]': {
      tagName: 'section',
      defaultRole: 'region',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'alert',
        'alertdialog',
        'application',
        'banner',
        'complementary',
        'contentinfo',
        'dialog',
        'document',
        'feed',
        'group',
        'log',
        'main',
        'marquee',
        'navigation',
        'none',
        'note',
        'presentation',
        'search',
        'status',
        'tabpanel',
        'role=region',
        'role=generic'
      ],
      hasAccname: true,
      id: 'section[accname]'
    },
    section: {
      tagName: 'section',
      defaultRole: 'generic',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'alert',
        'alertdialog',
        'application',
        'banner',
        'complementary',
        'contentinfo',
        'dialog',
        'document',
        'feed',
        'group',
        'log',
        'main',
        'marquee',
        'navigation',
        'none',
        'note',
        'presentation',
        'search',
        'status',
        'tabpanel',
        'role=region',
        'role=generic'
      ],
      id: 'section'
    },
    select: {
      tagName: 'select',
      defaultRole: 'combobox',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'menu',
        'combobox'
      ],
      id: 'select'
    },
    'select[size-or-multiple]': {
      tagName: 'select',
      defaultRole: 'listbox',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      hasSizeOrMultiple: true,
      id: 'select[size-or-multiple]'
    },
    slot: {
      tagName: 'slot',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'slot'
    },
    small: {
      tagName: 'small',
      defaultRole: 'generic',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'small'
    },
    source: {
      tagName: 'source',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'source'
    },
    span: {
      tagName: 'span',
      defaultRole: 'generic',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'span'
    },
    strong: {
      tagName: 'strong',
      defaultRole: 'strong',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'strong'
    },
    style: {
      tagName: 'style',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'style'
    },
    sub: {
      tagName: 'sub',
      defaultRole: 'subscript',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'sub'
    },
    summary: {
      tagName: 'summary',
      defaultRole: 'summary',
      noRoleAllowed: true,
      anyRoleAllowed: true,
      id: 'summary'
    },
    sup: {
      tagName: 'sup',
      defaultRole: 'superscript',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'sup'
    },
    SVG: {
      tagName: 'SVG',
      defaultRole: 'graphics-document',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'SVG'
    },
    table: {
      tagName: 'table',
      defaultRole: 'table',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'table'
    },
    tbody: {
      tagName: 'tbody',
      defaultRole: 'rowgroup',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'tbody'
    },
    template: {
      tagName: 'template',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'template'
    },
    textarea: {
      tagName: 'textarea',
      defaultRole: 'textbox',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'textarea'
    },
    tfoot: {
      tagName: 'tfoot',
      defaultRole: 'rowgroup',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'tfoot'
    },
    thead: {
      tagName: 'thead',
      defaultRole: 'rowgroup',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'thead'
    },
    time: {
      tagName: 'time',
      defaultRole: 'time',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'time'
    },
    title: {
      tagName: 'title',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'title'
    },
    'td[cell]': {
      tagName: 'td',
      defaultRole: 'cell',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      ownedbyTable: true,
      id: 'td[cell]'
    },
    'td[gridcell]': {
      tagName: 'td',
      defaultRole: 'gridcell',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      ownedbyGrid: true,
      ownedbyTreegrid: true,
      id: 'td[gridcell]'
    },
    td: {
      tagName: 'td',
      defaultRole: 'generic',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'td'
    },
    'th[cell]': {
      tagName: 'th',
      defaultRole: 'cell',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      ownedbyTable: true,
      id: 'th[cell]'
    },
    'th[gridcell]': {
      tagName: 'th',
      defaultRole: 'gridcell',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      ownedbyGrid: true,
      ownedbyTreegrid: true,
      id: 'th[gridcell]'
    },
    'th[colheader]': {
      tagName: 'th',
      defaultRole: 'colheader',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      ownedbyTable: true,
      ownedbyGrid: true,
      ownedbyTreegrid: true,
      id: 'th[colheader]'
    },
    th: {
      tagName: 'th',
      defaultRole: 'generic',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'th'
    },
    'tr[table]': {
      tagName: 'tr',
      defaultRole: 'row',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      ownedbyTable: true,
      ownedbyGrid: true,
      ownedbyTreegrid: true,
      id: 'tr[table]'
    },
    tr: {
      tagName: 'tr',
      defaultRole: 'generic',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'tr'
    },
    track: {
      tagName: 'track',
      defaultRole: '',
      noRoleAllowed: true,
      anyRoleAllowed: false,
      id: 'track'
    },
    u: {
      tagName: 'u',
      defaultRole: 'generic',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'u'
    },
    ul: {
      tagName: 'ul',
      defaultRole: 'list',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'group',
        'listbox',
        'menu',
        'menubar',
        'none',
        'presentation',
        'radiogroup',
        'tablist',
        'toolbar',
        'tree',
        'list'
      ],
      id: 'ul'
    },
    var: {
      tagName: 'var',
      defaultRole: '',
      noRoleAllowed: false,
      anyRoleAllowed: true,
      id: 'var'
    },
    video: {
      tagName: 'video',
      defaultRole: '',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'application'
      ],
      id: 'video'
    },
    wbr: {
      tagName: 'wbr',
      defaultRole: '',
      noRoleAllowed: false,
      anyRoleAllowed: false,
      allowedRoles: [
        'none',
        'presentation'
      ],
      id: 'wbr'
    }
  }
};

/* ariaInHtml.js */

/* Constants */
const debug$Y = new DebugLogging('ariaInHtml', false);
const higherLevelElements = [
  'article',
  'aside',
  'footer',
  'header',
  'main',
  'nav',
  'region',
  'section'
  ];

const landmarkRoles$1 = [
  'banner',
  'complementary',
  'contentinfo',
  'form',
  'main',
  'navigation',
  'region',
  'search'
  ];

/**
* @function getAriaInHTMLInfo
*
* @desc Uses the ARIA in HTML specification to identify a default role and provide
*       role restriction information
*
* @param  {Object}  node        - Element node from a browser DOM
*/

function getAriaInHTMLInfo (node) {
  let elemInfo, type, selector;

  let tagName = node.tagName.toLowerCase();
  const elementInfo = ariaInHTMLInfo.elementInfo;

  switch (tagName) {
    case 'a':
      if (node.href) {
        elemInfo = elementInfo['a[href]'];
      } else {
        elemInfo = elementInfo['a'];
      }
      break;

    case 'area':
      if (node.href) {
        elemInfo = elementInfo['area[href]'];
      } else {
        elemInfo = elementInfo['area'];
      }
      break;

    case 'header':
      if (isTopLevel(node)) {
        elemInfo = elementInfo['header[banner]'];
      } else {
        elemInfo = elementInfo['header'];
      }
      break;

    case 'figure':
      if (node.querySelector('figcaption')) {
        elemInfo = elementInfo['figure[figcaption]'];
      } else {
        elemInfo = elementInfo['figure'];
      }
      break;

    case 'footer':
      if (isTopLevel(node)) {
        elemInfo = elementInfo['footer[contentinfo]'];
      } else {
        elemInfo = elementInfo['footer'];
      }
      break;

    // This is a fix since you don't always want an accessible name on a form
    case 'form':
      if (node.hasAttribute('aria-label') ||
        node.hasAttribute('aria-labelledby')||
        node.hasAttribute('title')) {
        elemInfo = elementInfo['form'];
      } else {
        elemInfo = elementInfo['form'];
        elemInfo.defaultRole = 'generic';
      }
      break;

    case 'img':
      if (node.hasAttribute('aria-label') ||
          node.hasAttribute('aria-labelledby')) {
          elemInfo = elementInfo['img[accname]'];
      } else {
        if (node.hasAttribute('alt')) {
          if (node.alt.trim().length) {
            elemInfo = elementInfo['img[alt]'];
          } else {
            elemInfo = elementInfo['img[emptyalt]'];
          }
        } else {
          elemInfo = elementInfo['img'];
        }
      }
      break;

    case 'input':
      type = node.getAttribute('type');
      if (!type) {
        type = 'text';
      }
      selector = tagName + '[type=' + type + ']';
      if (node.hasAttribute('list')) {
        selector += '[list]';
      }

      elemInfo = elementInfo[selector];

      switch (type) {
        case 'color':
        case 'date':
        case 'datetime-local':
        case 'month':
        case 'password':
        case 'time':
        case 'week':
          elemInfo.defaultRole = 'textbox';
          break;

        case 'file':
          elemInfo.defaultRole = 'button';
          break;
      }

      break;

    case 'li':
      if (isListitemInList(node)) {
        elemInfo = elementInfo[`${tagName}[listitem]`];
      } else {
        elemInfo = elementInfo[`${tagName}`];
      }
      break;


    case 'section':
      if (node.hasAttribute('aria-label') ||
        node.hasAttribute('aria-labelledby')||
        node.hasAttribute('title')) {
        elemInfo = elementInfo['section[accname]'];
      } else {
        elemInfo = elementInfo['section'];
      }
      break;

    case 'select':
      if (node.multiple || (node.size > 1)) {
        elemInfo = elementInfo['select[size-or-multiple]'];
      } else {
        elemInfo = elementInfo['select'];
      }
      break;

    case 'td':
    case 'th':
      if (isCellInGrid(node)) {
          elemInfo = elementInfo[`${tagName}[gridcell]`];
      } else {
        if (isCellInLayoutTable(node)) {
          elemInfo = elementInfo[tagName];
        } else {
          elemInfo = elementInfo[`${tagName}[cell]`];
        }
      }
      break;

    case 'tr':
      if (isCellInLayoutTable(node)) {
        elemInfo = elementInfo['tr'];
      } else {
        elemInfo = elementInfo[`tr[table]`];
      }
      break;

    default:
      elemInfo = elementInfo[tagName];

  }

  if (!elemInfo) {
      elemInfo = {
      "tagName": node.tagName,
      "defaultRole": "generic",
      "noRoleAllowed": false,
      "anyRoleAllowed": true,
      "id": "custom"
    };
  }

  if (debug$Y.flag) {
    if (tagName === 'h2') {
      debug$Y.tag(node);
    }
    debug$Y.log(`[elemInfo][id]: ${elemInfo.id} (${tagName})`);
  }

  return elemInfo;
}


/**
* @function getString
*
* @desc Checks if a value is a string, if it is a string convert it to lowercase.
*       If not a string, return an empty string
*
* @param  {String}  value        - value to be checked
*/

function getString (value) {
  if (typeof value === 'string') {
    return value.trim().toLowerCase();
  }
  return '';
}

/**
* @function isTopLevel
*
* @desc Tests the node to see if it is in the content of any other
*       elements with default landmark roles or is the descendant
*       of an element with a defined landmark role
*
* @param  {Object}  node        - Element node from a browser DOM
*/

function isTopLevel (node) {
  node = node && node.parentNode;
  while (node && (node.nodeType === Node.ELEMENT_NODE)) {
    const tagName = getString(node.tagName);
    const role = getString(node.getAttribute('role'));

    if (higherLevelElements.includes(tagName) ||
        landmarkRoles$1.includes(role)) {
      return false;
    }
    node = node.parentNode;
  }
  return true;
}


/**
* @function isListiemInList
*
* @desc Returns true if the listitem is a descendant of OL, UL or MENU element
*
* @param  {Object}  node - Element node from a browser DOM
*
* @return {Boolean} see @desc
*/

function isListitemInList  (node) {
  node = node && node.parentNode;
  while (node && (node.nodeType === Node.ELEMENT_NODE)) {
    const tagName = getString(node.tagName);
    if (['menu', 'ol', 'ul'].includes(tagName)) {
      return true;
    }
    node = node.parentNode;
  }
  return false;
}

/**
* @function isCellInGrid
*
* @desc Tests the table cell is part of a grid widget
*
* @param  {Object}  node - Element node from a browser DOM
*/

function isCellInGrid  (node) {
  node = node && node.parentNode;
  while (node && (node.nodeType === Node.ELEMENT_NODE)) {
    const tagName = getString(node.tagName);
    const role = getString(node.getAttribute('role'));

    if (tagName === 'table') {
      return role === 'grid' || role === 'treegrid';
    }

    node = node.parentNode;
  }
  return false;
}

/**
* @function isCellInLayoutTable
*
* @desc Tests the table cell is part of a table that
*       has been identified as being used for layout
*
* @param  {Object}  node - Element node from a browser DOM
*/

function isCellInLayoutTable  (node) {
  node = node && node.parentNode;
  while (node && (node.nodeType === Node.ELEMENT_NODE)) {
    const tagName = getString(node.tagName);
    const role = getString(node.getAttribute('role'));

    if (tagName === 'table') {
      return role === 'none' || role === 'presentation';
    }
    node = node.parentNode;
  }
  return false;
}

/* visibility.js */

/* Constants */
const debug$X = new DebugLogging('visibility', false);

/**
 * @class Visibility
 *
 * @desc Identifies the properties used to determine the visibility of the element
 *       for both the graphical rendering and assistive technologies
 *
 * @param  {Object}  parentDomElement - Parent DomElement containing ancestor style information
 * @param  {Object}  elementNode      - dom element node 
 */

class Visibility {
  constructor (parentDomElement, elementNode) {
    let parentVisibility = parentDomElement ? parentDomElement.visibility : false;
    let style = window.getComputedStyle(elementNode, null);
    let tagName = elementNode.tagName ? elementNode.tagName : '';

    this.isHidden           = this.normalizeHidden (elementNode, parentVisibility);
    this.isAriaHidden       = this.normalizeAriaHidden (elementNode, parentVisibility);
    this.isDisplayNone      = this.normalizeDisplay (style, parentVisibility);
    this.isVisibilityHidden = this.normalizeVisibility (style, parentVisibility);
    this.isSmallHeight      = this.normalizeHeight(style, parentVisibility);
    this.isSmallFont        = this.getFontSize(style);

    // Set default values for visibility
    this.isVisibleOnScreen = true;
    this.isVisibleToAT     = true; // AT -> Assistive Technology

    if (this.isHidden ||
        this.isDisplayNone ||
        this.isVisibilityHidden) {

      if (tagName !== 'area') {
        this.isVisibleOnScreen = false;
        this.isVisibleToAT     = false;
      }
    }

    if (this.isSmallHeight ||
        this.isSmallFont) {
      this.isVisibleOnScreen = false;
    }

    if (this.isAriaHidden) {
      this.isVisibleToAT = false;
    }

    if (debug$X.flag) {
      debug$X.separator();
      debug$X.tag(elementNode);
      debug$X.log('[          isHidden]: ' + this.isHidden);
      debug$X.log('[      isAriaHidden]: ' + this.isAriaHidden);
      debug$X.log('[     isDisplayNone]: ' + this.isDisplayNone);
      debug$X.log('[isVisibilityHidden]: ' + this.isVisibilityHidden);
      debug$X.log('[     isSmallHeight]: ' + this.isSmallHeight);
      debug$X.log('[       isSmallFont]: ' + this.isSmallFont);
      debug$X.log('[ isVisibleOnScreen]: ' + this.isVisibleOnScreen);
      debug$X.log('[     isVisibleToAT]: ' + this.isVisibleToAT);
    }
  }

  /**
   * @method normalizeHidden
   *
   * @desc Determine if the hidden attribute is set on this element
   *       or one of its ancestors 
   *
   * @param {Object}  node              - dom element node
   * @param {Object}  parentVisibility  - Computed visibility information for parent
   *                                      DomElement
   *
   * @return {Boolean}  Returns true if element or one of its ancestors has the 
   *                    hidden attribute 
   */

  normalizeHidden (node, parentVisibility) {
    let hidden = node.getAttribute('hidden');
    hidden = hidden ? true : false;
    if (parentVisibility &&
        parentVisibility.hidden)  {
      hidden = true;
    }
    return hidden;
  }

  /**
   * @method normalizeAriaHidden
   *
   * @desc Determine if the aria-hidden attribute is set to true on this element
   *       or one of its ancestors 
   *
   * @param {Object}  node              - dom element node
   * @param {Object}  parentVisibility  - Computed visibility information for parent
   *                                      DomElement
   *
   * @return {Boolean}  Returns true if element or one of its ancestors has the 
   *                    aria-hidden attribute set to true 
   */

  normalizeAriaHidden (node, parentVisibility) {
    let hidden = false;
    let ariaHidden = node.getAttribute('aria-hidden');
    if (ariaHidden) {
      ariaHidden = ariaHidden.trim().toLowerCase();
      hidden = (ariaHidden === 'true') ? true : false;
    }
    if (parentVisibility &&
        parentVisibility.isAriaHidden)  {
      hidden = true;
    }
    return hidden;
  }

  /**
   * @method normalizeDisplay
   *
   * @desc Computes a boolean value to indicate whether the content or its
   *       ancestor that results in content not being displayed based on 
   *       the CSS display property
   *
   * @param {Object}  style             - Computed style object for an element node
   * @param {Object}  parentVisibility  - Computed visibility information for parent
   *                                      DomElement
   *
   * @return {Boolean}  Returns a true if content is visible
   */

  normalizeDisplay (style, parentVisibility) {
    let display = style.getPropertyValue("display");
    let isDisplayNone = false;

    if ((display === 'none') || 
        (parentVisibility && parentVisibility.isDisplayNone)) {
      isDisplayNone = true;
    }

    return isDisplayNone;
  }

  /**
   * @method normalizeVisibility
   *
   * @desc Computes a boolean value to indicate whether the content or its
   *       ancestor that results in content not being displayed based on 
   *       the CSS visibility property
   *
   * @param {Object}  style             - Computed style object for an element node
   * @param {Object}  parentVisibility  - Computed visibility information for parent
   *                                      DomElement
   *
   * @return {Boolean}  Returns a true if content is visible
   */

  normalizeVisibility (style, parentVisibility) {
    let visibility = style.getPropertyValue("visibility");
    let isVisibilityHidden =  parentVisibility.isVisibilityHidden; 

    if ((visibility === 'collapse') ||
        (visibility === 'hidden')) {
        isVisibilityHidden = true;
    }
    else {
      if (visibility === 'visible') {
        isVisibilityHidden = false;        
      }
    }
    return isVisibilityHidden;
  }

  /**
   * @method normalizeHeight
   *
   * @desc Computes a boolean value to indicate whether the content or its
   *       ancestor that results in content not being displayed based on
   *       the CSS height and overflow properties
   *
   * @param {Object}  style             - Computed style object for an element node
   * @param {Object}  parentVisibility  - Computed visibility information for parent
   *                                      DomElement
   *
   * @return {Boolean}  Returns a true if content is visible
   */

  normalizeHeight (style, parentVisibility) {
    const height   = parseFloat(style.getPropertyValue("height"));
    const overflow = style.getPropertyValue("overflow");
    return parentVisibility.isSmallHeight || ((height <= 1) && (overflow === 'hidden'));
  }

  /**
   * @method getFontSize
   *
   * @desc Computes a boolean value to indicate whether the content or its
   *       ancestor that results in content not being displayed based on
   *       the CSS height and overflow properties
   *
   * @param {Object}  style             - Computed style object for an element node
   *
   * @return {Boolean}  Returns a true if content is small
   */

  getFontSize (style) {
    const fontSize = parseFloat(style.getPropertyValue("font-size"));
    return fontSize <= 1;
  }
}

/*
*   embedded.js
*
*   To calculate the accessible name of a form element from its label, it is
*   necessary to aggregate the text nodes in the label along with the values
*   of any embedded controls that text content may contain.
*
*   isEmbeddedControl is used to determine whether or not a form control can
*   be embedded within text content.
*
*   getEmbeddedControlValue is used to get the value of an embedded control
*   based on its ARIA role.
*/

const rangeRoles = ['slider', 'spinbutton'];

/*
*   @function isEmbeddedControl
*
*   @desc  Determine whether element is an element or has a role
*          that could be embedded within text content of a label.
*
*   @parm {Object}  element  - DOM node of element
*
*   @returns {Boolean}  True if element has content, otherwise false
*/
function isEmbeddedControl (element) {
  return isInputWithValue(element) ||
         isSelectElement(element) ||
         rangeRoles.includes(getRole(element));
}

/*
*   @function getEmbeddedControlValue
*
*   @desc Based on the tag name or the role of element,
*         value of the embedded control.
*
*   @parm {Object}  element  - DOM node of input element
*
*   @returns {String}  Content of the value attribute if defined,
*                      else empty string
*/
function getEmbeddedControlValue (element) {
  if (isInputWithValue(element)) {
    return getAttributeValue(element, 'value') + ' ';
  }
  else {
    if (isSelectElement(element)) {
      return getSelectValue(element) + ' ';
    }
    else {
      if (rangeRoles.includes(getRole(element))) {
        return getRangeValue(element) + ' ';
      }
    }
  }

  return '';
}

// LOW-LEVEL FUNCTIONS

/*
*   @function getRangeValue
*
*   @desc Get current value of element with role 'slider'
*         or 'spinbutton' (i.e., subclass of abstract 'range' role).
*
*   @parm {Object}  element  - DOM node of select element
*
*   @returns {String}  @desc
*/
function getRangeValue (element) {
  let value;

  value = getAttributeValue(element, 'aria-valuetext');
  if (value.length) return value;

  value = getAttributeValue(element, 'aria-valuenow');
  if (value.length) return value;

  return '';
}

/*
*   @function getSelectValue
*
*   @desc Returns the content of the selected option elements
*         of a select element, if no selected options returns
*         empty string
*
*   @parm {Object}  element  - DOM node of select element
*
*   @returns {String}  @desc
*/
function getSelectValue (element) {
  let tagName = element.tagName.toLowerCase();

  if (tagName === 'select') {
    let arr = [], selectedOptions = element.selectedOptions;

    for (let i = 0; i < selectedOptions.length; i++) {
      let option = selectedOptions[i];
      let value = normalize(option.value);
      if (value.length) arr.push(value);
    }

    if (arr.length) return arr.join(' ');
  }

  return '';
}

/*   @function  getRole
*
*    @desc  If defined return attribbute role
*
*    @parm {Object}  element  - DOM node of element
*
*    @returns {String}  see @desc
*/
function getRole (element) {
  return element.hasAttribute('role') ? element.getAttribute('role').toLowerCase() : '';
}

/*   @function  isInputWithValue
*
*    @desc  Returns true if an input element can be used in accessible
*           name calculation, (e.g. not all types can be included)
*
*    @parm {Object}  element  - DOM node of element
*
*    @returns {Boolean}  see @desc
*/
function isInputWithValue (element) {
  // Included types are based on testing with Chrome browser
  const includeTypes = ['button', 'email', 'number', 'password', 'range', 'tel', 'text', 'url'];
  const tagName   = element.tagName.toLowerCase();
  const typeValue = element.hasAttribute('type') ?
                    element.getAttribute('type').toLowerCase() :
                    'text';

  return (tagName === 'input') &&
        includeTypes.includes(typeValue);
}

/*   @function  isSelectElement
*
*    @desc  Returns true if a select element, otherwise false
*
*    @parm {Object}  element  - DOM node of element
*
*    @returns {Boolean}  see @desc
*/
function isSelectElement (element) {
  const tagName = element.tagName.toLowerCase();
  return (tagName === 'select');
}

/*
*   namefrom.js
*/
const debug$W = new DebugLogging('nameFrom', false);
debug$W.flag = false;

/*
*   @function getElementContents
*
*   @desc  Construct the ARIA text alternative for element by
*          processing its element and text node descendants and then adding any CSS-
*          generated content if present.
*
*   @parm {Object}  element     - DOM node of element
*   @parm {Object}  forElement  - DOM node of element being labelled
*
*   @returns {[String, Boolean]}  Returns a string and a boolean indicating
*                                 the name includes some image content
*/
function getElementContents (element, forElement) {
  let result = '';
  let includesAlt       = false;
  let includesAriaLabel = false;

  if (element.hasChildNodes()) {
    let children = element.childNodes,
        arrayOfStrings = [];

    for (let i = 0; i < children.length; i++) {
      const [contents, inclAlt, inclAriaLabel] = getNodeContents(children[i], forElement);
      if (contents && contents.length) arrayOfStrings.push(contents);
      includesAlt       = includesAlt       || inclAlt;
      includesAriaLabel = includesAriaLabel || inclAriaLabel;
    }

    result = (arrayOfStrings.length) ? arrayOfStrings.join('') : '';
  }

  return [addCssGeneratedContent(element, result), includesAlt, includesAriaLabel];
}

// HIGHER-LEVEL FUNCTIONS THAT RETURN AN OBJECT WITH SOURCE PROPERTY

/*
*   @function nameFromAttribute
*
*   @desc
*
*   @parm {Object}  element    - DOM node of element
*   @parm {String}  attribute  - name of attribute (e.g. 'alt', 'value')
*
*   @returns {Object}  @desc
*/
function nameFromAttribute (element, attribute) {
  let name;

  name = getAttributeValue(element, attribute);
  if (name.length) return { name: normalize(name),
                            source: attribute,
                            includesAlt: false,
                            includesAriaLabel: attribute === 'aria=label',
                            nameIsNotVisible: true
                           };
  return null;
}

/*
*   @function  nameFromAltAttribute
*
*   @desc
*
*   @parm {Object}  element - DOM node of element
*
*   @returns {Object}  @desc
*/
function nameFromAltAttribute (element) {
  let name = element.getAttribute('alt');

  // Attribute is present
  if (name !== null) {
    name = normalize(name);
    return { name: name,
             source: 'alt',
             includesAlt: true,
             includesAriaLabel: false,
             nameIsNotVisible: false
           };
  }

  // Attribute not present
  return null;
}

/*
*   @function nameFromContents
*   @desc
*
*   @parm {Object}  element - DOM node of element
*
*   @returns {Object}  @desc
*/
function nameFromContents (element) {

  const [name, inclAlt, inclAriaLabel] = getElementContents(element);
  if (name.length) return { name: normalize(name),
                            source: 'contents',
                            includesAlt: inclAlt,
                            includesAriaLabel: inclAriaLabel,
                            nameIsNotVisible: false
                          };
  return null;
}

/*
*   @function nameFromDefault
*   @desc
*
*   @parm {Object}  element - DOM node of element
*
*   @returns {Object}  @desc
*/
function nameFromDefault (name) {
  return name.length ? { name: name,
                         source: 'default',
                         includesAlt: false,
                         includesAriaLabel: false,
                         nameIsNotVisible: false
                       } : null;
}

/*
*   @function nameFromDescendant
*   @desc
*
*   @parm {Object}  element - DOM node of element
*
*   @returns {Object}  @desc
*/
function nameFromDescendant (element, tagName) {
  let descendant = element.querySelector(tagName);
  if (descendant) {
    let [name, incAlt, incAriaLabel] = descendant.hasAttribute('aria-label') ?
               [descendant.getAttribute('aria-label'), false, true] :
               getElementContents(descendant);
    if (name.length) return { name: normalize(name),
                              source: tagName + ' element',
                              includesAlt: incAlt,
                              includesAriaLabel: incAriaLabel,
                              nameIsNotVisible: isDisplayNone(descendant) || isVisibilityHidden(descendant)
                            };
  }

  return null;
}

/*
*   @function nameFromLabelElement
*   @desc
*
*   @parm {Object}  doc     - Parent document of the element
*   @parm {Object}  element - DOM node of element
*
*   @returns {Object}  @desc
*/
function nameFromLabelElement (doc, element) {
  let label, name, inclAlt, inclAriaLabel, notVisible;
  // label [for=id]
  if (element.id) {
    try {
      label = doc.querySelector('[for="' + element.id + '"]');
      if (label) {
        [name, inclAlt, inclAriaLabel, notVisible] = label.hasAttribute('aria-label') ?
               [label.getAttribute('aria-label'), false, true, true] :
               getElementContents(label, element);
        if (name.length) return { name: normalize(name),
                                  source: 'label reference',
                                  includeAlt: inclAlt,
                                  includeAriaLabel: inclAriaLabel,
                                  nameIsNotVisibile: notVisible
                                 };
      }
    } catch (error) {
      debug$W.log(`[nameFromLabelElement][error]: ${error}`);
    }
  }

  // label encapsulation
  if (typeof element.closest === 'function') {
    label = element.closest('label');
    if (label) {
      [name, inclAlt, inclAriaLabel] = label.hasAttribute('aria-label') ?
             [label.getAttribute('aria-label'), false, true] :
             getElementContents(label, element);
      if (name.length) return { name: normalize(name),
                                source: 'label encapsulation',
                                includesAlt: inclAlt,
                                includesAriaLabel: inclAriaLabel
                            };
    }
  }

  return null;
}

/*
*   @function nameFromLegendElement
*
*   @desc
*
*   @parm {Object}  doc     - Parent document of the element
*   @parm {Object}  element - DOM node of element
*
*   @returns {Object}  @desc
*/
function nameFromLegendElement (doc, element) {
  let name, legend, inclAlt, inclAriaLabel;

  // legend
  if (element) {
    legend = element.querySelector('legend');
    if (legend) {
      [name, inclAlt, inclAriaLabel] = legend.hasAttribute('aria-label') ?
             [legend.getAttribute('aria-label'), false, true] :
             getElementContents(legend, element);
    if (name.length) return { name: normalize(name),
                              source: 'legend',
                              includesAlt: inclAlt,
                              includesAriaLabel: inclAriaLabel
                          };
    }
  }
  return null;
}

/*
*   @function nameFromDetailsOrSummary
*
*   @desc If element is expanded (has open attribute),
*         return the contents of the summary element followed
*         by the text contents of element and all of its non-summary
*         child elements. Otherwise, return only the contents of the
*         first summary element descendant.
*
*   @parm {Object}  element - DOM node of element
*
*   @returns {Object}  @desc
*/

function nameFromDetailsOrSummary (element) {
  let name, summary, inclAlt = false, inclAriaLabel = false;

  function isExpanded (elem) { return elem.hasAttribute('open'); }

  // At minimum, always use summary contents
  summary = element.querySelector('summary');
  if (summary) [name, inclAlt, inclAriaLabel] = getElementContents(summary);

  // Return either summary + details (non-summary) or summary only
  if (isExpanded(element)) {
    name += getContentsOfChildNodes(element, function (elem) {
      return elem.tagName.toLowerCase() !== 'summary';
    });
    if (name.length) return { name: normalize(name),
                              source: 'contents',
                              includesAlt : inclAlt,
                              includesAriaLabel: inclAriaLabel
                            };
  }
  else {
    if (name.length) return { name: normalize(name),
                              source: 'summary element',
                              includesAlt : inclAlt,
                              includesAriaLabel: inclAriaLabel
                            };

  }

  return null;
}

// LOW-LEVEL HELPER FUNCTIONS (NOT EXPORTED)

/*
*   @function  isDisplayNone
*
*   @desc Returns true if the element or parent element has set the CSS
*         display property to none or has the hidden attribute,
*         otherwise false
*
*   @param  {Object}  node  - a DOM node
*
*   @returns  {Boolean} see @desc
*/

function isDisplayNone (node) {

  if (!node) {
    return false;
  }

  if (node.nodeType === Node.TEXT_NODE) {
      node = node.parentNode;
  }

  if (node.nodeType === Node.ELEMENT_NODE) {

    if (node.hasAttribute('hidden')) {
      return true;
    }

    // aria-hidden attribute with the value "true" is an same as
    // setting the hidden attribute for name calculation
    if (node.hasAttribute('aria-hidden')) {
      if (node.getAttribute('aria-hidden').toLowerCase()  === 'true') {
        return true;
      }
    }

    const style = window.getComputedStyle(node, null);

    const display = style.getPropertyValue("display");

    if (display) {
      return display === 'none';
    }
  }
  return false;
}

/*
*   @function isVisibilityHidden
*
*   @desc Returns true if the node (or it's parrent) has the CSS visibility
*         property set to "hidden" or "collapse", otherwise false
*
*   @param  {Object}   node  -  DOM node
*
*   @return  see @desc
*/

function isVisibilityHidden(node) {

  if (!node) {
    return false;
  }

  if (node.nodeType === Node.TEXT_NODE) {
    node = node.parentNode;
  }

  if (node.nodeType === Node.ELEMENT_NODE) {
    const style = window.getComputedStyle(node, null);

    const visibility = style.getPropertyValue("visibility");
    if (visibility) {
      return (visibility === 'hidden') || (visibility === 'collapse');
    }
  }
  return false;
}

/*
*   @function isAriaHiddenFalse
*
*   @desc Returns true if the node has the aria-hidden property set to
*         "false", otherwise false.
*         NOTE: This function is important in the accessible name
*               calculation, since content hidden with a CSS technique
*               can be included in the accessible name calculation when
*               aria-hidden is set to false for the chrome browser
*
*   @param  {Object}   node  -  DOM node
*
*   @return  see @desc
*/

function isAriaHiddenFalse(node) {

  if (!node) {
    return false;
  }

  if (node.nodeType === Node.TEXT_NODE) {
      node = node.parentNode;
  }

  if (node.nodeType === Node.ELEMENT_NODE) {
    return (node.hasAttribute('aria-hidden') &&
        (node.getAttribute('aria-hidden').toLowerCase() === 'false'));
  }

  return false;
}

/*
*   @function includeContentInName
*
*   @desc Checks the CSS display and hidden properties, and
*         the aria-hidden property to see if the content
*         should be included in the accessible name
*        calculation.  Returns true if it should be
*         included, otherwise false
*
*   @param  {Object}   node  -  DOM node
*
*   @return  see @desc
*/

function includeContentInName(node) {
  // NOTE: Chrome is the only major browser using aria-hidden=false in
  //       accessible name computation
  const flag = isAriaHiddenFalse(node) && false;
  return flag || (!isVisibilityHidden(node) && !isDisplayNone(node));
}

/*
*   @function includeContentInName
*
*   @desc Checks the CSS display and hidden properties, and
*         the aria-hidden property to see if the content
*         should be included in the accessible name
*        calculation.  Returns true if it should be
*         included, otherwise false
*
*   @param  {Object}   node     -  DOM node
*   @param  {Object}   forElem  -  DOM node the name is being computed for
*
*   @returns {[String, Boolean, Boolean]}  Returns a string and two boolean values
*                                          indicating the name includes alt text
*                                          and content from aria-label
*/

function getNodeContents (node, forElem, alwaysInclude=false) {
  let contents = '';
  let nc;
  let arr = [];
  let includesAlt = false;
  let includesAriaLabel = false;
  let nInclAlt, nInclAriaLabel;

  // Cannot recursively use the element
  // in computing it's accessible name
  if (node === forElem) {
    return ['', false, false];
  }

  switch (node.nodeType) {

      case Node.ELEMENT_NODE:
      // If aria-label is present, node recursion stops and
      // aria-label value is returned
      if (node.hasAttribute('aria-label')) {
        if (includeContentInName(node) || alwaysInclude ) {
          contents = node.getAttribute('aria-label');
          includesAriaLabel = true;
        }
      }
      else {
        if (node instanceof HTMLSlotElement) {
          // if no slotted elements, check for default slotted content
          const assignedNodes = node.assignedNodes().length ? node.assignedNodes() : node.assignedNodes({ flatten: true });
          assignedNodes.forEach( assignedNode => {
            [nc, nInclAlt, nInclAriaLabel] = getNodeContents(assignedNode, forElem);
            if (nc && nc.length) arr.push(nc);
            includesAlt = includesAlt       || nInclAlt;
            includesAlt = includesAriaLabel || nInclAriaLabel;
          });
          contents = (arr.length) ? arr.join('') : '';
        } else {
          if (couldHaveAltText(node) && (includeContentInName(node) || alwaysInclude)) {
            contents = getAttributeValue(node, 'alt');
            includesAlt = true;
          }
          else {
            if (isEmbeddedControl(node) && (includeContentInName(node) || alwaysInclude)) {
              contents = getEmbeddedControlValue(node);
            }
            else {
              if (node.hasChildNodes()) {
                let children = Array.from(node.childNodes);
                children.forEach( child => {
                  [nc, nInclAlt, nInclAriaLabel] = getNodeContents(child, forElem);
                  if (nc && nc.length) arr.push(nc);
                  includesAlt = includesAlt       || nInclAlt;
                  includesAlt = includesAriaLabel || nInclAriaLabel;
                });
                contents = (arr.length) ? arr.join('') : '';
              }
            }
          }
          // For all branches of the ELEMENT_NODE case...
        }
      }
      contents = addCssGeneratedContent(node, contents);
      if (contents.length) {
        contents = ' ' + contents;
      }
      break;

    case Node.TEXT_NODE:
      if (includeContentInName(node) || alwaysInclude) {
        contents = normalizeLeadingAndTrailingSpace(node.textContent);
      }
      break;
  }

  return [contents, includesAlt, includesAriaLabel];
}

/*
*   couldHaveAltText: Based on HTML5 specification, determine whether
*   element could have an 'alt' attribute.
*/
function couldHaveAltText (element) {
  let tagName = element.tagName.toLowerCase();

  switch (tagName) {
    case 'img':
    case 'area':
      return true;
    case 'input':
      return (element.type && element.type === 'image');
  }

  return false;
}

/*
*   addCssGeneratedContent: Add CSS-generated content for pseudo-elements
*   :before and :after. According to the CSS spec, test that content value
*   is other than the default computed value of 'none'.
*
*   Note: Even if an author specifies content: 'none', because browsers add
*   the double-quote character to the beginning and end of computed string
*   values, the result cannot and will not be equal to 'none'.
*/
function addCssGeneratedContent (element, contents) {
  let result = contents,
      prefix = getComputedStyle(element, ':before').content,
      suffix = getComputedStyle(element, ':after').content;

  if ((prefix[0] === '"') && !prefix.toLowerCase().includes('moz-')) {
    result = prefix.substring(1, (prefix.length-1)) + result;
  }

  if ((suffix[0] === '"') && !suffix.toLowerCase().includes('moz-')) {
    result = result + suffix.substring(1, (suffix.length-1)) ;
  }

  return result;
}

/*
*   getContentsOfChildNodes: Using predicate function for filtering element
*   nodes, collect text content from all child nodes of element.
*/
function getContentsOfChildNodes (element, predicate) {
  let arr = [], content;

  Array.prototype.forEach.call(element.childNodes, function (node) {
    switch (node.nodeType) {
      case (Node.ELEMENT_NODE):
        if (predicate(node)) {
          content = getElementContents(node)[0];
          if (content.length) arr.push(content);
        }
        break;
      case (Node.TEXT_NODE):
        content = normalizeLeadingAndTrailingSpace(node.textContent);
        if (content.length) arr.push(content);
        break;
    }
  });

  if (arr.length) return arr.join(' ');
  return '';
}

/*
*   getaccname.js
*
*   Note: Information in this module is based on the following documents:
*   1. HTML Accessibility API Mappings 1.0 (http://rawgit.com/w3c/aria/master/html-aam/html-aam.html)
*   2. SVG Accessibility API Mappings (http://rawgit.com/w3c/aria/master/svg-aam/svg-aam.html)
*/

const noAccName = {
  name: '',
  source: 'none',
  includesAlt: false,
  includesAriaLabel: false,
  nameIsNotVisible: false,
};

// These roles are based on the ARAI 1.2 specification
const  rolesThatAllowNameFromContents = [
  'button',
  'cell',
  'checkbox',
  'columnheader',
  'gridcell',
  'heading',
  'link',
  'menuitem',
  'menuitemcheckbox',
  'menuitemradio',
  'option',
  'radio',
  'row',
  'rowheader',
  'sectionhead',
  'switch',
  'tab',
  'tooltip',
  'treeitem'
];

// These elements that allow name from content
const  elementsThatAllowNameFromContents = [
'a',
'button',
'h1',
'h2',
'h3',
'h4',
'h5',
'h6',
'summary'
];
const debug$V = new DebugLogging('getAccName', false);
debug$V.flag = false;
function debugAccName (accName) {
  if (debug$V.flag && accName.name) {
    debug$V.log(`====================`);
    debug$V.log(`[             name]: ${accName.name}`);
    debug$V.log(`[           source]: ${accName.source}`);
    debug$V.log(`[      includesAlt]: ${accName.includesAlt}`);
    debug$V.log(`[includesAriaLabel]: ${accName.includesAriaLabel}`);
    debug$V.log(`[ nameIsNotVisible]: ${accName.nameIsNotVisible}`);
  }
}

/*
*   @function getAccessibleName
*
*   @desc Use the ARIA Roles Model specification for accessible
*         name calculation based on its precedence order:
*         (1) Use aria-labelledby, unless a traversal is already underway;
*         (2) Use aria-label attribute value;
*         (3) Use whatever method is specified by the native semantics of the
*             element, which includes, as last resort, use of the title attribute.
*
*   @desc (Object)  doc              -  Parent document of element
*   @desc (Object)  element          -  DOM node of element to compute name
*
*   @returns {Object} Returns a object with the following properties:
*                     'name' {String}
*                     'source' {String}
*                     'includesAlt' {Boolean}
*                     'includesAriaLabel' {Boolean}
*                     'nameIsNotVisible' {Boolean}
*/
function getAccessibleName (doc, element) {
  let accName = nameFromAttributeIdRefs(doc, element, 'aria-labelledby');
  if (accName === null) accName = nameFromAttribute(element, 'aria-label');
  if (accName === null) accName = nameFromNativeSemantics(doc, element);
  if (accName === null) accName = noAccName;
  debug$V.flag && debugAccName(accName);
  return accName;
}

/*
*   @function getAccessibleDesc
*
*   @desc Use the ARIA Roles Model specification for accessible
*         description calculation based on its precedence order:
*         (1) Use aria-describedby, unless a traversal is already underway;
*         (2) As last resort, use the title attribute, if not used as accessible name.
*
*   @desc (Object)  doc         -  Parent document of element
*   @desc (Object)  element     -  DOM node of element to compute description
*   @desc (Boolean) allowTitle  -  Allow title as accessible description
*
*   @returns {Object} Returns a object with the following properties:
*                     'name' {String}
*                     'source' {String}
*                     'includesAlt' {Boolean}
*                     'includesAriaLabel' {Boolean}
*                     'nameIsNotVisible' {Boolean}
*/
function getAccessibleDesc (doc, element, allowTitle=true) {
  let accDesc = nameFromAttributeIdRefs(doc, element, 'aria-describedby');
  if (allowTitle && (accDesc === null)) accDesc = nameFromAttribute(element, 'title');
  if (accDesc === null) accDesc = noAccName;
  return accDesc;
}


/*
*   @function getErrMessage
*
*   @desc Use the ARIA Roles Model specification for accessible
*         error description uses aria-errormessage attribute
*
*   @desc (Object)  doc              -  Parent document of element
*   @desc (Object)  element          -  DOM node of element to compute error message
*
*   @returns {Object} Returns a object with the following properties:
*                     'name' {String}
*                     'source' {String}
*                     'includesAlt' {Boolean}
*                     'includesAriaLabel' {Boolean}
*                     'nameIsNotVisible' {Boolean}
*/
function getErrMessage (doc, element) {
  let errMessage = null;

  errMessage = nameFromAttributeIdRefs(doc, element, 'aria-errormessage');
  if (errMessage === null) errMessage = noAccName;

  return errMessage;
}

/*
*   @function nameFromNativeSemantics
*
*   @desc Use method appropriate to the native semantics
*         of element to find accessible name. Includes methods for all interactive
*         elements. For non-interactive elements, if the element's ARIA role allows
*         its acc. name to be derived from its text contents
*
*   @desc (Object)  doc              -  Parent document of element
*   @desc (Object)  element          -  DOM node of element to compute name
*
*   @returns {Object} Returns a object with an 'name' and 'source' property
*/
function nameFromNativeSemantics (doc, element) {
  let tagName = element.tagName.toLowerCase(),
      accName = null;

  switch (tagName) {
    // FORM ELEMENTS: INPUT
    case 'input':
      switch (element.type) {
        // HIDDEN
        case 'hidden':
            accName = '';
          break;

        // TEXT FIELDS
        case 'email':
        case 'password':
        case 'search':
        case 'tel':
        case 'text':
        case 'url':
          accName = nameFromLabelElement(doc, element);
          if (accName === null) accName = nameFromAttribute(element, 'placeholder');
          break;

        // OTHER INPUT TYPES
        case 'button':
          accName = nameFromAttribute(element, 'value');
          break;

        case 'reset':
          accName = nameFromAttribute(element, 'value');
          if (accName === null) accName = nameFromDefault('Reset');
          break;

        case 'submit':
          accName = nameFromAttribute(element, 'value');
          if (accName === null) accName = nameFromDefault('Submit');
          break;

        case 'image':
          accName = nameFromAltAttribute(element);
          if (accName === null) accName = nameFromAttribute(element, 'value');
          break;

        default:
          accName = nameFromLabelElement(doc, element);
          break;
      }
      break;

    // FORM ELEMENTS: OTHER
    case 'fieldset':
      accName = nameFromLegendElement(doc, element);
      break;

    case 'keygen':
    case 'meter':
    case 'output':
    case 'progress':
    case 'select':
      accName = nameFromLabelElement(doc, element);
      break;

    case 'textarea':
      accName = nameFromLabelElement(doc, element);
      if (accName === null) accName = nameFromAttribute(element, 'placeholder');
      break;

    case 'iframe':
      accName = nameFromAttribute(element, 'title');
      break;

    case 'img':
    case 'area': // added
      accName = nameFromAltAttribute(element);
      break;

    case 'svg': // added
      accName = nameFromDescendant(element, 'title');
      break;

    // OTHER ELEMENTS
    case 'details':
      accName = nameFromDetailsOrSummary(element);
      break;

    case 'figure':
      accName = nameFromDescendant(element, 'figcaption');
      break;

    case 'table':
      accName = nameFromDescendant(element, 'caption');
      break;

    // Elements that allow name from contents
    case 'a':
      if (element.hasAttribute('href')) {
        accName = nameFromContents(element);
      }
      break;

    case 'button':
    case 'caption':
    case 'dd':
    case 'dt':
    case 'figcaption':
    case 'label':
    case 'li':
    case 'option':
    case 'td':
    case 'th':
      accName = nameFromContents(element);
      break;


    // ELEMENTS NOT SPECIFIED ABOVE
    default:
      if (doesElementAllowNameFromContents(element)) {
        accName = nameFromContents(element);
      }
      break;
  }

  // LAST RESORT USE TITLE
  if (accName === null) accName = nameFromAttribute(element, 'title');

  return accName;
}

// HELPER FUNCTIONS (NOT EXPORTED)

/*
*   @function nameFromAttributeIdRefs
*
*   @desc Get the value of attrName on element (a space-
*         separated list of IDREFs), visit each referenced element in the order it
*         appears in the list and obtain its accessible name, and return an object
*         with name property set to a string that is a space-separated concatenation
*         of those results if any, otherwise return null.
*
*   @desc (Object)  doc              -  Parent document of element
*   @desc (Object)  element          -  DOM node of element to compute name
*   @desc (Boolean) nameFromContent  -  If true allow element content to be used as name
*
*   @returns {Object} Returns a object with an 'name' and 'source' property
*/
function nameFromAttributeIdRefs (doc, element, attribute) {
  let value = getAttributeValue(element, attribute);
  let idRefs, i, refElement, name, names, arr = [];
  let includesAlt = false;
  let includesAriaLabel = false;
  let refNotVisible = false;

  if (value.length) {
    idRefs = value.split(' ');

    for (i = 0; i < idRefs.length; i++) {
      refElement = doc.getElementById(idRefs[i]);
      if (refElement) {
        if (refElement.hasAttribute('aria-label')) {
          name = refElement.getAttribute('aria-label');
          includesAriaLabel = true;
        }
        else {
          if (refElement.hasChildNodes()) {
            refNotVisible = refNotVisible || isDisplayNone(refElement) || isVisibilityHidden(refElement);
            names = [];
            let children = Array.from(refElement.childNodes);
            children.forEach( child => {
              // Need to ignore CSS display: none and visibility: hidden for referenced
              // elements, but not their child elements
              const [nc, nInclAlt, nInclAriaLabel] = getNodeContents(child, refElement, true);
              if (nc.length) names.push(nc);
              includesAlt       = includesAlt || nInclAlt;
              includesAriaLabel = includesAriaLabel || nInclAriaLabel;
            });
            name = (names.length) ? names.join('') : '';
          }
          else {
            name = '';
          }
        }
        name = addCssGeneratedContent(refElement, name);
        if (name.length) arr.push(name);
      }
    }
  }

  if (arr.length)
    return { name: normalize(arr.join(' ')),
             source: attribute,
             includesAlt: includesAlt,
             includesAriaLabel: includesAriaLabel,
             nameIsNotVisible: refNotVisible
           };

  return null;
}


/*
*   @function doesElementAllowNameFromContents
*
*   @desc Returns true if tag name or role allows name from contents, otherwise false
*
*   @desc (Object)  element  -  DOM node of element to compute name
*
*   @return (Boolean) see @desc
*/

function doesElementAllowNameFromContents (element) {
  const role = element.getAttribute('role');
  if (role) {
    return rolesThatAllowNameFromContents.includes(role.toLowerCase());
  }
  else {
    return elementsThatAllowNameFromContents.includes(element.tagName.toLowerCase());
  }
}

/* domElement.js */

/* Constants */
const debug$U = new DebugLogging('DOMElement', false);
debug$U.flag = false;

const elementsWithContent = [
  'area',
  'audio',
  'canvas',
  'img',
  'input',
  'select',
  'svg',
  'textarea',
  'video'
];

const elementsThatMayHaveContent = [
  'embed',
  'object'
];

const landmarkRoles = ['banner', 'complementary', 'contentinfo', 'form', 'main', 'navigation', 'region', 'search'];
const requireAccessibleNames = ['region', 'form'];

/**
 * @class DOMElement
 *
 * @desc Used to represent a dom element node with additional
 *       information useful for accessibility rules
 *
 * @param  {Object}  parentInfo  - ParentInfo object (can be null for top level)
 * @param  {Object}  elementNode - dom element node to be represented
 */

class DOMElement {
  constructor (parentInfo, elementNode, ordinalPosition) {
    const parentDomElement = parentInfo.domElement;
    const accNameDoc       = parentInfo.useParentDocForName ?
                             parentInfo.parentDocument :
                             parentInfo.document;

    this.ordinalPosition  = ordinalPosition;
    this.parentInfo       = parentInfo;
    this.node             = elementNode;
    this.tagName          = elementNode.tagName.toLowerCase();
    this.isLabelable      = isLabelable(elementNode);
    this.lang             = elementNode.hasAttribute('lang') ?
                            elementNode.getAttribute('lang') :
                            '';

    this.ariaInHTMLInfo  = getAriaInHTMLInfo(elementNode);
    const defaultRole = this.ariaInHTMLInfo.defaultRole;

    this.hasRole = elementNode.hasAttribute('role');
    this.role    = this.hasRole ?
                   elementNode.getAttribute('role') :
                   defaultRole;

    this.accesskey = elementNode.hasAttribute('accesskey') ? elementNode.getAttribute('accesskey') : '';

    // used for button and form control related rules
    this.typeAttr = elementNode.getAttribute('type');

    this.hasNativeCheckedState  = hasCheckedState(elementNode);
    this.hasNativeInvalidState  = hasInvalidState(elementNode);
    this.hasNativeSelectedState = hasSelectedState(elementNode);

    this.ariaInfo  = new AriaInfo(accNameDoc, this.hasRole, this.role, defaultRole, elementNode);
    this.eventInfo = new EventInfo(elementNode);

    this.accName        = getAccessibleName(accNameDoc, elementNode);
    this.accDescription = getAccessibleDesc(accNameDoc, elementNode, (this.accName.source !== 'title'));
    this.errMessage     = getErrMessage(accNameDoc, elementNode);

    this.colorContrast = new ColorContrast(parentDomElement, elementNode);
    this.visibility    = new Visibility(parentDomElement, elementNode);

    this.id         = elementNode.id        ? elementNode.id   : '';
    this.name       = elementNode.name      ? elementNode.name : '';
    this.className  = elementNode.className ? elementNode.className : '';
    this.htmlAttrs  = this.getHtmlAttrs(elementNode);
    this.ariaAttrs  = this.getAriaAttrs(elementNode);

    this.hasContent = elementsWithContent.includes(this.tagName);
    this.mayHaveContent = elementsThatMayHaveContent.includes(this.tagName);

    this.tabIndex             = checkTabIndex(elementNode);
    this.isTabStop            = checkIsTabStop(elementNode);
    this.isInteractiveElement = checkForInteractiveElement(elementNode);

    this.isLink      = this.role === 'link';
    this.isLandmark  = this.checkForLandamrk();
    this.isHeading   = this.role === 'heading';
    this.isInDialog  = this.tagName === 'dialog' ||
                       this.role === 'dialog' ||
                       parentInfo.inDialog;

    // CSS Position property and size information

    const cssStyle = window.getComputedStyle(elementNode, null);
    const elemRect = elementNode.getBoundingClientRect();

    this.cssPosition = cssStyle.getPropertyValue('position');

    this.top      = window.scrollY + elemRect.top;
    this.left     = window.scrollX + elemRect.left;
    this.height   = Math.round(10 * elemRect.height, 1) / 10;
    this.width    = Math.round(10 * elemRect.width, 1) / 10;
    this.area     = this.height * this.width;

    this.authorWidth    = cssStyle.getPropertyValue('width');
    this.authorHeight   = cssStyle.getPropertyValue('height');
    this.authorLeft     = cssStyle.getPropertyValue('left');
    this.authorRight    = cssStyle.getPropertyValue('right');
    this.authorTop      = cssStyle.getPropertyValue('top');
    this.authorBottom   = cssStyle.getPropertyValue('bottom');
    this.authorDisplay  = cssStyle.getPropertyValue('display');
    this.authorPosition = cssStyle.getPropertyValue('position');

    this.authorSizing = (this.authorWidth  !== 'auto') ||
                        (this.authorHeight !== 'auto') ||
                        ((this.authorLeft   !== 'auto') &&
                         (this.authorRight  !== 'auto')) ||
                        ((this.authorTop    !== 'auto') &&
                         (this.authorBottom !== 'auto'));

    this.children = [];

    // Information on rule results associated with this element
    this.resultsHidden       = [];
    this.resultsPassed       = [];
    this.resultsViolations   = [];
    this.resultsWarnings     = [];
    this.resultsManualChecks = [];

    // A name that can be used in rule results to identify the element
    this.elemName = this.tagName;
    this.elemName += elementNode.type ? `[type=${elementNode.type}]` : '';
    this.elemName += this.id ? `#${this.id}` : '';
    this.elemName += this.hasRole ? `[role=${this.role}]` : '';

    // Potential references to other cache objects

    this.tableCell = null;
    this.tableElement = null;

  }


  /**
   * @method isDomText
   *
   * @desc
   *
   * @return {Boolean} Returns false since this is a DOMElement object
   */

  get isDomText () {
    return false;
  }


  /**
   * @method isDomElement
   *
   * @desc Returns true since this is a DOMElement object
   *
   * @return {Boolean} see @desc
   */

  get isDomElement () {
    return true;
  }

  /**
   * @method checkForLandamrk
   *
   * @desc Tests if a domElement is a landmark
   *
   * @param  {Object}  domElement - DOMElement object representing an element in the DOM
   */

  checkForLandamrk () {
    let flag = false;
    const role = this.role || this.defaultRole;
    const name = this.accName.name;

    if (landmarkRoles.includes(role)) {
      if (requireAccessibleNames.includes(role)) {
        flag = name && name.length;
      } else {
        flag = true;
      }
    }

    return flag;
  }

  /**
   * @method isLastChildDomText
   *
   * @desc
   *
   * @return {Boolean} Returns true if the last child is a DOMText object, otherwise false
   */

  get isLastChildDomText () {
    let flag = false;
    const lastChild = this.getLastChild();
    if (lastChild && lastChild.isDomText) {
      flag = true;
    }
    return flag;
  }

  /**
   * @method addChild
   *
   * @desc
   *
   * @param {Object}  domItem  -
   */

  addChild (domItem) {
    this.children.push(domItem);
  }

  /**
   * @method getIndentifier
   *
   * @desc
   */

  getIdentifier () {
    let identifier = this.node.hasAttribute('type') ?
                     `${this.tagName}[${this.node.getAttribute('type')}]` :
                     this.tagName;
    return identifier;
  }

  /**
   * @method getLastChild
   *
   * @desc
   */

  getLastChild () {
    let len = this.children.length;
    let domItem = null;
    if (len) {
      domItem = this.children[len-1];
    }
    return domItem;
  }

  /**
   * @method getHtmlAttrs
   *
   * @desc Get non-ARIA attributes for the element in a name value object
   *
   * @param {Object}  node  - DOM node element
   *
   * @param {Array} array of objects with attribute name and value properties
   */

  getHtmlAttrs (node) {
    const htmlAttrs = {};
    const attrs = Array.from(node.attributes);
    attrs.forEach( attr => {
      if (attr.name.toLowerCase().indexOf('aria') !== 0) {
        htmlAttrs[attr.name] = attr.value;
      }
    });
    return htmlAttrs;
  }

  /**
   * @method getAriaAttrs
   *
   * @desc Get ARIA attributes for the element in a name value object
   *
   * @param {Object}  node  - DOM node element
   *
   * @param {Array} array of objects with attribute name and value properties
   */

  getAriaAttrs (node) {
    const ariaAttrs = {};
    const attrs = Array.from(node.attributes);
    attrs.forEach( attr => {
      if (attr.name.toLowerCase().indexOf('aria') === 0) {
        ariaAttrs[attr.name] = attr.value;
      }
    });
    return ariaAttrs;
  }

  /**
   * @method addTextToLastChild
   *
   * @desc Adds the text content to an existing DOMText object
   *
   * @param {String}  text  - text content to add
   */

  addTextToLastChild (text) {
    const domItem = this.getLastChild();
    if (domItem && domItem.isDomText) {
      domItem.addText(text);
    }
  }

  /**
   * @method hasTextContent
   *
   * @desc Checks to see if the element contains any text content
   *
   * @return {Boolean} True it there are text nodes, otherwise false
   */

  hasTextContent () {

    function anyDOMText (domItems) {
      for (let i = 0; i < domItems.length; i += 1) {
        const domItem = domItems[i];
        if (domItem.isDomText) {
          return true;
        }
        else {
          if (anyDOMText (domItem.children)) {
            return true;
          }
        }
      }
      return false;
    }
    return anyDOMText(this.children);
  }


  toString () {
    let type = '';
    let id = '';

    if (this.node.type) {
      type = `[type=${this.node.type}]`;
    }

    if (this.node.id) {
      id = `[id=${this.node.id}]`;
    }

    return `(${this.ordinalPosition}): ${this.tagName}${type}${id}[${this.role}]`;
  }

  /**
   * @method showDomElementTree
   *
   * @desc  Used for debugging the DOMElement tree
   */
  showDomElementTree (prefix) {
    if (typeof prefix !== 'string') {
      prefix = '';
    }
    if (debug$U.flag) {
      this.children.forEach( domItem => {
        if (domItem.isDomText) {
          debug$U.domText(domItem, prefix);
        } else {
          debug$U.domElement(domItem, prefix);
          domItem.showDomElementTree(prefix + '   ');
        }
      });
    }
  }
}

// Helper functions

/**
 * @function checkForInteractiveElement
 *
 * @desc Returns true if the element is natively interactive
 *
 * @param  {Object}  node - DOM node
 *
 * @return Returns true if the elements is interactive, otherwise false
 */

function checkForInteractiveElement (node) {
  const tagName     = node.tagName.toLowerCase();
  const hasHref     = node.hasAttribute('href');
  const hasControls = node.hasAttribute('controls');
  const type        = node.hasAttribute('type') ? node.getAttribute('type') : 'text';

  switch (tagName ) {
    case 'a':
    case 'area':
      return hasHref;

    case 'audio':
      return hasControls;

    case 'button':
      return true;

    case 'input':
      return type !== 'hidden';

    case 'output':
      return true;

    case 'select':
      return true;

    case 'textarea':
      return true;

    case 'video':
      return hasControls;

  }

  return false;
}


/**
 * @function checkIsTabStop
 *
 * @desc Returns true if the tabindex is defined and greater than or equal to zero,
 *       or the element's native semantics is an interactive element
 *
 * @param  {Object}  node - DOM node
 *
 * @return Returns true if the elements is a tab stop, otherwise false
 */

function checkIsTabStop (node) {
  return (node.tabIndex >= 0) || checkForInteractiveElement(node);
}

/**
 * @function checkTabIndex
 *
 * @desc Returns value of tabindex if it is defined
 *
 * @param  {Object}  node - DOM node
 *
 * @return see @desc
 */

function checkTabIndex (node) {
  if (node.tabIndex >= 0) {
    return node.tabIndex
  }
  return node.hasAttribute('tabIndex') ? -1 : undefined;
}

/* domText.js */

/* Constants */
const debug$T = new DebugLogging('domText', false);

/**
 * @class DOMText
 *
 * @desc Used to represent a dom text node for use in computing information 
 *       usefule for accessibility rules.
 * 
 *       NOTE: Adjacent dom text nodes in the live dom are combined into a
 *             single DOMText object
 *
 * @param  {Object}  parentInfo - ParentInfo object 
 * @param  {Object}  textNode   - dom text node to be represented
 */

class DOMText {
  constructor (parentDomElement, textNode) {
    this.parentDomElement = parentDomElement;
    this.text = textNode.textContent.trim();
    if (debug$T.flag) {
      debug$T.log(`[text]: ${this.text}`);
    }
  }

  /**
   * @method getText
   *
   * @desc
   *
   * @return {String} Returns text content
   */

  get getText () {
    return this.text;
  }

  /**
   * @method isDomElement
   *
   * @desc Returns false since this is a DOMText object
   *
   * @return {Boolean} see @desc
   */

  get isDomElement () {
    return false;
  }  

  /**
   * @method isDomText
   *
   * @desc
   *
   * @return {Boolean} Returns true since this is a DOMText object
   */

  get isDomText () {
    return true;
  }

  /**
   * @method hasContent
   *
   * @desc
   *
   * @return {Boolean} Returns true if the DOMText has content, otherwise false
   */

  get hasContent () {
    return this.text.length;
  }

  addText (text) {
    const s = text.trim();
    if (s) {
      this.text += ' ' + s;
    }
  }
}

/* iframeInfo.js */

/* Constants */
const debug$S = new DebugLogging('iframeInfo', false);

/**
 * @class IFrameElement
 *
 * @desc Idenifies a DOM element as being an iframe.
 *
 * @param  {Object}  domElement   - dome element information
 */

class IFrameElement {
  constructor (domElement, isCrossDomain) {
    this.domElement = domElement;
    this.src = domElement.node.src;
    this.isCrossDomain = isCrossDomain;
  }

  showInfo () {
    if (debug$S.flag) {
      debug$S.log(`[          src]: ${this.src}`);
      debug$S.log(`[isCrossDomain]: ${this.isCrossDomain}`);
    }
  }
}

/**
 * @class IframeInfo
 *
 * @desc Collects information on the iframes in a web page
 */

class IframeInfo {
  constructor () {
    this.allIFrameElements = [];
  }

  /**
   * @method update
   *
   * @desc Checks to see if the domElement has a role of "link"
   *
   * @param  {Object}  domElement        - DOMElement object representing an element in the DOM
   */

  update (domElement, isCrossDomain) {
    const ife = new IFrameElement(domElement, isCrossDomain);
    this.allIFrameElements.push(ife);
  }

  /**
   * @method showLinkInfo
   *
   * @desc showLinkInfo is used for debugging the LinkInfo object
   */

  showIFrameInfo () {
    if (debug$S.flag) {
      debug$S.log(`== ${this.allIFrameElements.length} IFrames ==`, 1);
      this.allIFrameElements.forEach( ife => {
        ife.showInfo();
      });
    }
  }
}

/* linkInfo.js */

/* Constants */
const debug$R = new DebugLogging('idInfo', false);

/**
 * @class idInfo
 *
 * @desc Collects information on the ids in a web page
 */

class IdInfo {
  constructor () {
    this.idCountsByDoc = [];
  }

  /**
   * @method update
   *
   * @desc Checks to see if the domElement has a role of "link"
   *
   * @param  {Object}  domElement        - DOMElement object representing an element in the DOM
   */

  update (documentIndex, domElement) {
    const id = domElement.node.id;
    if (id) {
      if (!this.idCountsByDoc[documentIndex]) {
        this.idCountsByDoc[documentIndex] = {};
      }
      if (this.idCountsByDoc[documentIndex][id]) {
        this.idCountsByDoc[documentIndex][id] += 1;       
      }
      else {
        this.idCountsByDoc[documentIndex][id] = 1;       
      }
    }
  }

  /**
   * @method showIdInfo
   *
   * @desc showIdInfo is used for debugging the IdInfo object
   */

  showIdInfo () {
    if (debug$R.flag) {
      debug$R.log('== All Links ==', 1);
      this.idCounts.for( id => {
        debug$R.log(`[${id}]: ${this.idCounts[id]}`);
      });
    }
  }
}

/* imageInfo.js */

/* Constants */
const debug$Q = new DebugLogging('imageInfo', false);

/**
 * @class ImageElement
 *
 * @desc Identifies a DOM element as an image or graphical object
 *
 * @param  {Object}  domElement   - Structural Information
 */

class ImageElement {
  constructor (domElement) {
    this.domElement = domElement;
    this.url = domElement.node.src ? new URL(domElement.node.src) : '';
    if (this.url) {
      const parts = this.url.pathname.split('/');
      this.fileName = parts.length ? parts.pop() : '';
    }
    else {
      this.fileName = '';
    }
  }

  addAreaDomElement (domElement) {
    this.areaDomElements.push(domElement);
  }

  toString () {
    return this.domElement.role;
  }
}

/**
 * @class MapElement
 *
 * @desc Identifies a DOM element as an image map
 *
 * @param  {Object}  domElement   - Structural Information
 */

class MapElement {
  constructor (domElement) {
    this.domElement = domElement;
    this.areaDomElements = [];
  }

  addAreaDomElement (domElement) {
    this.areaDomElements.push(domElement);
  }

  toString () {
    return this.domElement.role;
  }
}


/**
 * @class ImageInfo
 *
 * @desc Collects information on the image elements on a web page for use in
 *       rules
 */

class ImageInfo {
  constructor () {
    this.allImageElements  = [];
    this.allSVGDomElements    = [];
    this.allMapElements       = [];
  }

  /**
   * @method addImageElement
   *
   * @desc Creates a new IamgeElement and to the array of
   *       ImageElements
   *
   * @param  {Object}  domElement -
   *
   */

  addImageElement (domElement) {
    const ie = new ImageElement(domElement);
    this.allImageElements.push(ie);
    return ie;
  }

  /**
   * @method addMapElement
   *
   * @desc Creates a new MapElement and to the array of
   *       MapElements
   *
   * @param  {Object}  domElement -
   *
   */

  addMapElement (domElement) {
    const me = new MapElement(domElement);
    this.allMapElements.push(me);
    return me;
  }

  /**
   * @method isImage
   *
   * @desc Tests if a domElement for role of "img"
   *
   * @param  {Object}  domElement - DOMElement object representing an element in the DOM
   */

  isImage (domElement) {
    return (domElement.role === 'img') ||
           (domElement.tagName === 'img');
  }

  /**
   * @method isSVG
   *
   * @desc Tests if a domElement is an SVG graphic
   *
   * @param  {Object}  domElement - DOMElement object representing an element in the DOM
   */

  isSVG (domElement) {
    return domElement.tagName === 'svg';
  }

  /**
   * @method isMap
   *
   * @desc Tests if a domElement is an map element
   *
   * @param  {Object}  domElement - DOMElement object representing an element in the DOM
   */

  isMap (domElement) {
    return domElement.tagName === 'map';
  }

  /**
   * @method isArea
   *
   * @desc Tests if a domElement is an area element
   *
   * @param  {Object}  domElement - DOMElement object representing an element in the DOM
   */

  isArea (domElement) {
    return domElement.tagName === 'area';
  }

  /**
   * @method update
   *
   * @desc Checks to see if the domElement has a role of "img" or a graphical tag name
   *
   * @param  {Object}  parentMapElement  - current ancestor MapElement object
   * @param  {Object}  domElement        - DOMElement object representing an element in the DOM
   *
   * @return {Object}  Last MapElement object
   */

  update (parentMapElement, domElement) {
    let currentMapElement = parentMapElement;

    if (this.isImage(domElement)) {
      this.addImageElement(domElement);
    }

   if (this.isSVG(domElement)) {
      this.allSVGDomElements.push(domElement);
    }

    if (this.isMap(domElement)) {
      currentMapElement = this.addMapElement(domElement);
    }

    if (this.isArea(domElement)) {
      if (parentMapElement) {
        parentMapElement.addAreaDomElement(domElement);
      }
    }

    return currentMapElement;
  }

  /**
   * @method showImageInfo
   *
   * @desc showImageInfo is used for debugging the ImageInfo, ImageElement and MapElement objects
   */

  showImageInfo () {
    if (debug$Q.flag) {
      debug$Q.log('== All Image elements ==', 1);
      this.allImageElements.forEach( ie => {
        debug$Q.log(`[fileName]: ${ie.fileName}`, true);
        debug$Q.log(`[    role]: ${ie.domElement.role}`);
        debug$Q.log(`[    name]: ${ie.domElement.accName.name}`);
        debug$Q.log(`[  source]: ${ie.domElement.accName.source}`);
        debug$Q.log(`[  length]: ${ie.domElement.accName.name.length}`);
      });
      debug$Q.log('== All SVG domElements  ==', 1);
      this.allSVGDomElements.forEach( de => {
        debug$Q.domElement(de);
      });
      debug$Q.log('== All MapElements ==', 1);
      this.allMapElements.forEach( me => {
        debug$Q.domElement(me.domElement);
      });
    }
  }
}

/* linkInfo.js */

/* Constants */
const debug$P = new DebugLogging('linkInfo', false);

/**
 * @class LinkInfo
 *
 * @desc Collects information on the links in a web page
 */

class LinkInfo {
  constructor () {
    this.allLinkDomElements = [];
  }

  /**
   * @method isLink
   *
   * @desc Tests if a domElement for role of "link"
   *
   * @param  {Object}  domElement - DOMElement object representing an element in the DOM
   */

  isLink (domElement) {
    return domElement.role === 'link';
  }

  /**
   * @method update
   *
   * @desc Checks to see if the domElement has a role of "link"
   *
   * @param  {Object}  domElement  - DOMElement object representing an element in the DOM
   * @param  {Boolean} inLink      - True if element is a descendant of a link, otherwise false
   */

  update (domElement, inLink) {
    if (this.isLink(domElement)) {
      this.allLinkDomElements.push(domElement);
      return true;
    }
    return inLink;
  }

  /**
   * @method showLinkInfo
   *
   * @desc showLinkInfo is used for debugging the LinkInfo object
   */

  showLinkInfo () {
    if (debug$P.flag) {
      debug$P.log('== All Links ==', 1);
      this.allLinkDomElements.forEach( de => {
        debug$P.domElement(de);
      });
    }
  }
}

/* listInfo.js */

/* Constants */
const debug$O = new DebugLogging('ListInfo', false);
debug$O.flag = false;
const allListitemRoles = ['list', 'listitem', 'menu', 'menuitem', 'menuitemcheckbox', 'menuitemradio'];
const listRoles = ['list', 'menu'];

/**
 * @class ListElement
 *
 * @desc Identifies a DOM element as being a container for a list items.
 *
 * @param  {Object}  domElement   - Structural Information
 */

class ListElement {
  constructor (domElement, parentListElement) {

    this.parentListElement = parentListElement;
    this.domElement = domElement;
    this.childListElements = [];
    this.isListRole = this.isList(domElement);
    this.linkCount = 0;  // Used in determining if a list is for navigation
    this.textContent = 0;
    this.linkTextContent = 0;
  }

  /**
   * @method isList
   *
   * @desc Tests if a domElement is a list
   *
   * @param  {Object}  domElement - DOMElement object representing an element in the DOM
   */

  isList (domElement) {
    const role = domElement.role;
    return listRoles.includes(role);
  }

  addChildListitem (listElement) {
    this.childListElements.push(listElement);
  }

  showListInfo (prefix) {
    if (typeof prefix !== 'string') {
      prefix = '';
    }
    debug$O.log(`${prefix}[List Count]: ${this.childListElements.length} [Link Count]: ${this.linkCount}`);
    this.childListElements.forEach( le => {
      debug$O.domElement(le.domElement, prefix);
      le.showListInfo(prefix + '  ');
    });
  }
}

/**
 * @class ListInfo
 *
 * @desc Collects information on the list elements on a web page for use in
 *       rules
 *
 * @param  {Object}  ListInfo   - Structural Information
 */

class ListInfo {
  constructor () {

    this.allListElements = [];
    this.childListElements = [];
    this.linkCount = 0;
  }

  /**
   * @method addChildListitem
   *
   * @desc Creates a new ListElement and to the array of
   *       ListElements
   *
   * @param  {Object}  domElement        - New ListElement object being added to ListInfo
   * @param  {Object}  parentListElement - ListElement object representing that parent ListElement
   *
   */

  addChildListitem (domElement, parentListElement) {
    const le = new ListElement(domElement, parentListElement);
    this.allListElements.push(le);

    if (parentListElement) {
      parentListElement.addChildListitem(le);
    } else {
      this.childListElements.push(le);
    }
    return le;
  }

  /**
   * @method isListitem
   *
   * @desc Tests if a domElement is a listitem
   *
   * @param  {Object}  domElement - DOMElement object representing an element in the DOM
   */

  isListitem (domElement) {
    const role = domElement.role;
    return allListitemRoles.includes(role);
  }

  /**
   * @method isLink
   *
   * @desc Tests if a domElement is a link
   *
   * @param  {Object}  domElement - DOMElement object representing an element in the DOM
   */

  isLink (domElement) {
    return domElement.role === 'link';
  }

  /**
   * @method update
   *
   * @desc Checks to see if the domElement is a list item and if so adds the
   *       domElement to the List Info object and current ListElement
   *
   * @param  {Object}  domElement - DOMElement object representing an element in the DOM
   *
   * @return  {Object}  ListElement - ListElement object for use as the parent ListElement
   *                                  for descendant domElements
   */

  update (parentListElement, domElement) {
    let listElement = parentListElement;
    if (this.isListitem(domElement)) {
      listElement = this.addChildListitem(domElement, parentListElement);
    }
    if (this.isLink(domElement)) {
      this.linkCount += 1;
      while (parentListElement) {
        if (parentListElement.isListRole) {
          parentListElement.linkCount += 1;
          break;
        }
        parentListElement = parentListElement.parentListElement;
      }
    }
    return listElement;
  }

  /**
   * @method showListInfo
   *
   * @desc showListInfo is used for debugging the ListInfo and ListElement objects
   */

  showListInfo () {
    if (debug$O.flag) {
      debug$O.log('== All ListElements ==', 1);
      debug$O.log(`[linkCount]: ${this.linkCount}`);
      this.allListElements.forEach( le => {
        debug$O.log(`[textContent]: ${le.textContent}`);
        debug$O.log(`[linkTextContent]: ${le.linkTextContent}`);
        debug$O.domElement(le.domElement);
      });
      debug$O.log('== List Tree ==', 1);
      debug$O.log(`[linkCount]: ${this.linkCount}`);
      this.childListElements.forEach( le => {
        debug$O.log(`[textContent]: ${le.textContent}`);
        debug$O.log(`[linkTextContent]: ${le.linkTextContent}`);
        debug$O.domElement(le.domElement);
        le.showListInfo('  ');
      });
    }
  }
}

/* listInfo.js */

/* Constants */
const debug$N = new DebugLogging('MediaInfo', false);
debug$N.flag = false;

/**
 * @class MediaElement
 *
 * @desc Identifies a DOM element as an audio or video element.
 *
 * @param  {Object}  domElement   - DOM element object
 */

class MediaElement {
  constructor (domElement) {
    this.domElement = domElement;
    this.tracks = [];
    this.hasAutoPlay = domElement.node.hasAttribute('autoplay');
  }

  get allowsTracks () {
    return true;
  }

  get isObject () {
    return false;
  }

  get hasCaptionTrack () {
    return this.checkForTrackKind('captions');
  }

  get hasDescriptionTrack () {
    return this.checkForTrackKind('descriptions');
  }

  get hasSubtitleTrack () {
    return this.checkForTrackKind('subtitles');
  }

  get hasChaptersTrack () {
    return this.checkForTrackKind('chapters');
  }

  checkForTrackKind (type) {
    for (let i = 0; i < this.tracks.length; i += 1) {
      if (this.tracks[i].kind.includes(type)) {
        return true;
      }
    }
    return false;
  }

  toString() {
    return `[MediaElement]: ${this.domElement}`;
  }
}

/**
 * @class TrackElement
 *
 * @desc Identifies a DOM element as a track element.
 *
 * @param  {Object}  domElement   - DOM element object
 */

class TrackElement {
  constructor (domElement) {
    const node = domElement.node;
    this.domElement = domElement;
    this.kind = node.hasAttribute('kind') ? node.kind.toLowerCase() : '';
  }

  toString() {
    return `[TrackElement]: ${this.domElement}`;
  }
}


/**
 * @class ObjectElement
 *
 * @desc Identifies a DOM element as an object element.
 *
 * @param  {Object}  domElement   - DOM element object
 */

class ObjectElement {
  constructor (domElement) {
    const node = domElement.node;
    this.domElement = domElement;
    this.params = [];
    this.type = node.hasAttribute('type') ? node.type.toLowerCase() : '';
  }
  get allowsTracks () {
    return false;
  }

  get isObject () {
    return true;
  }

  get isAudio () {
    return this.type.includes('audio');
  }

  get isVideo () {
    return this.type.includes('video');
  }

  toString() {
    return `[ObjectElement]: ${this.domElement}`;
  }
}

/**
 * @class ParamElement
 *
 * @desc Identifies a DOM element as a param element.
 *
 * @param  {Object}  domElement   - DOM element object
 */

class ParamElement {
  constructor (domElement) {
    this.domElement = domElement;
  }

  toString() {
    return `[ParamElement]: ${this.domElement}`;
  }

}

/**
 * @class EmbedElement
 *
 * @desc Identifies a DOM element as an embed element.
 *
 * @param  {Object}  domElement   - DOM element object
 */

class EmbedElement {
  constructor (domElement) {
    const node = domElement.node;
    this.domElement = domElement;
    this.type = node.hasAttribute('type') ? node.type.toLowerCase() : '';
  }

  get allowsTracks () {
    return false;
  }

  get isAudio () {
    return this.type.includes('audio');
  }

 get isVideo () {
    return this.type.includes('video');
  }

  get isObject () {
    return false;
  }

  toString() {
    return `[EmbedElement]: ${this.domElement}`;
  }
}

/**
 * @class MediaInfo
 *
 * @desc Collects information on the media elements on a web page for use in
 *       rules
 */

class MediaInfo {
  constructor () {
    this.audioElements  = [];
    this.embedElements  = [];
    this.objectElements = [];
    this.videoElements  = [];
    this.allMediaElements = [];
  }

  update (mediaElement, domElement) {

    switch (domElement.tagName) {

      case 'audio':
        mediaElement = new MediaElement(domElement);
        this.audioElements.push(mediaElement);
        this.allMediaElements.push(mediaElement);
        break;

      case 'embed':
        mediaElement = new EmbedElement(domElement);
        this.embedElements.push(mediaElement);
        this.allMediaElements.push(mediaElement);
        break;

      case 'object':
        mediaElement = new ObjectElement(domElement);
        this.objectElements.push(mediaElement);
        this.allMediaElements.push(mediaElement);
        break;

      case 'param':
        if (mediaElement && mediaElement.isObject) {
          const param = new ParamElement(domElement);
          mediaElement.params.push(param);
        }
        break;

      case 'track':
        if (mediaElement &&
            mediaElement.allowsTracks) {
          const track = new TrackElement(domElement);
          mediaElement.tracks.push(track);
        }
        break;

      case 'video':
        mediaElement = new MediaElement(domElement);
        this.videoElements.push(mediaElement);
        this.allMediaElements.push(mediaElement);
        break;

    }

    return mediaElement;
  }

  /**
   * @method showMediaInfo
   *
   * @desc showMediaInfo is used for debugging the MediaInfo and other media objects
   */

  showListInfo () {
    if (debug$N.flag) {
      debug$N.log('== Audio Elements ==', 1);
      this.audioElements.forEach( ae => {
        debug$N.log(ae);
      });

      debug$N.log('== Video Elements ==', 1);
      this.videoElements.forEach( ve => {
        debug$N.log(ve);
      });

      debug$N.log('== Object Elements ==', 1);
      this.objectElements.forEach( oe => {
        debug$N.log(oe);
      });

      debug$N.log('== Embed Elements ==', 1);
      this.embedElements.forEach( ee => {
        debug$N.log(ee);
      });


    }
  }
}

/* structureInfo.js */

/* Constants */
const debug$M = new DebugLogging('structureInfo', false);

/**
 * @class LandmarkElement
 *
 * @desc Identifies a DOM element as being a landmark and relationships to other landmarks and headings.
 *
 * @param  {Object}  domElement   - Structural Information
 */

class LandmarkElement {
  constructor (domElement, parentLandmarkElement) {

    this.parentLandmarkElement   = parentLandmarkElement;
    this.domElement              = domElement;

    this.descendantLandmarkElements = [];
    this.childLandmarkElements      = [];
    this.childHeadingDomElements    = [];
  }

  addChildLandmark (landmarkElement) {
    this.childLandmarkElements.push(landmarkElement);
    let ple = landmarkElement.parentLandmarkElement;
    while (ple) {
      ple.descendantLandmarkElements.push(landmarkElement);
      ple = ple.parentLandmarkElement;
    }
  }

  addChildHeading (domElement) {
    this.childHeadingDomElements.push(domElement);
  }

  showLandmarkInfo (prefix) {
    if (typeof prefix !== 'string') {
      prefix = '';
    }
    this.childLandmarkElements.forEach( le => {
      debug$M.domElement(le.domElement, prefix);
      le.showLandmarkInfo(prefix + '  ');
    });
    this.childHeadingDomElements.forEach( h => {
      debug$M.domElement(h, prefix);
    });
  }

  getFirstVisibleHeadingDomElement() {
    const domElements = this.childHeadingDomElements;
    for (let i = 0; i < domElements.length; i += 1){
      const de = domElements[i];
      if (de.visibility.isVisibleToAT) {
        return de;
      }
    }
    return false;
  }

  toString () {
    return this.domElement.role;
  }
}

/**
 * @class StructureInfo
 *
 * @desc Collects information on the landmarks or headings on a web page for use in
 *       rules
 *
 * @param  {Object}  structuralInfo   - Structural Information
 */

class StructureInfo {
  constructor () {
    this.hasMainLandmark = false;
    this.allLandmarkElements = [];
    this.allHeadingDomElements = [];
    this.allH1DomElements = [];
    this.childLandmarkElements = [];
    this.landmarkElementsByDoc = [];
  }

  /**
   * @method addChildLandmark
   *
   * @desc Creates a new LandmarkElement and to the array of
   *       LandmarkElements
   *
   * @param  {Object}  domElement             - New LandmarkElement object being added to StrutureInfo
   * @param  {Object}  parentLandmarkElement  - LandmarkElement object identifying the parent
   *                                            LandmarkElement
   * @param  {Integer} documentIndex          - index for identifying the current document (e.g. iframe
   *                                             or custom element dom)
   */

  addChildLandmark (domElement, parentLandmarkElement, documentIndex) {

    if (domElement.role === 'main') {
      this.hasMainLandmark = true;
    }

    const le = new LandmarkElement(domElement, parentLandmarkElement);
    this.allLandmarkElements.push(le);

    if (!Array.isArray(this.landmarkElementsByDoc[documentIndex])) {
      this.landmarkElementsByDoc[documentIndex] = [];
    }
    this.landmarkElementsByDoc[documentIndex].push(le);

    if (parentLandmarkElement) {
      parentLandmarkElement.addChildLandmark(le);
    } else {
      this.childLandmarkElements.push(le);
    }

    return le;
  }

  /**
   * @method addChildHeading
   *
   * @desc
   *
   * @param  {Object}  domElement            - DOMElement object representing an element in the DOM
   * @param  {Object}  parentLandmarkElement - LandmarkElement object representing an landmark region
   */

  addChildHeading (domElement, parentLandmarkElement) {
    this.allHeadingDomElements.push(domElement);

    if (domElement.ariaInfo.ariaLevel === 1) {
      this.allH1DomElements.push(domElement);
    }

    if (parentLandmarkElement) {
      parentLandmarkElement.addChildHeading(domElement);
    }
  }

  /**
   * @method update
   *
   * @desc Checks to see if the domElement is a heading or landmark and if so adds the
   *       domElement to the StrutureInfo object and current LandmarkElement
   *
   * @param  {Object}  parentLandmarkElement  - Parent LandmarkElement (note: can be null)
   * @param  {Object}  domElement             - DOMElement object representing an element in the DOM
   * @param  {Integer} documentIndex          - index for identifying the current document (e.g. iframe
   *                                            or custom element dom)
   *
   * @return  {Object}  LandmarkElement - Landmarklement object for use as the parent landmark
   *                                      element for descendant domElements
   */

  update (parentLandmarkElement, domElement, documentIndex) {
    let landmarkElement = parentLandmarkElement;
    if (domElement.isHeading) {
      this.addChildHeading(domElement, parentLandmarkElement);
    }

    if (domElement.isLandmark) {
      landmarkElement = this.addChildLandmark(domElement, parentLandmarkElement, documentIndex);
    }
    return landmarkElement;
  }

  /**
   * @method showStructureInfo
   *
   * @desc showSructureInfo is used for debugging the StructureInfo and LandmarkElement objects
   */

  showStructureInfo () {
    if (debug$M.flag) {
      debug$M.log('== All Headings ==', 1);
      this.allHeadingDomElements.forEach( h => {
        debug$M.domElement(h);
      });
      debug$M.log('== All Landmarks ==', 1);
      this.allLandmarkElements.forEach( le => {
        debug$M.domElement(le.domElement);
      });
      debug$M.log('== Landmarks By Doc ==', 1);
      this.landmarkElementsByDoc.forEach( (les, index) => {
        debug$M.log(`Document Index: ${index} (${Array.isArray(les)})`);
        if (Array.isArray(les)) {
          les.forEach(le => {
            debug$M.domElement(le.domElement);
          });
        }
      });
      debug$M.log('== Structure Tree ==', 1);
      this.childLandmarkElements.forEach( le => {
        debug$M.domElement(le.domElement);
        le.showLandmarkInfo('  ');
      });
    }
  }
}

/* common.js */

const common = {
  level: ['undefined', 'AAA', 'AA', 'undefined', 'A'],
  baseResult: ['undefined','P','H','MC','W','V'],
  baseResultLong: ['undefined','Pass','Hidden','Manual Check','Warning','Violation'],
  resultType: ['base','element','page','website'],
  ruleResult: ['undefined', 'N/A', 'P', 'MC', 'W', 'V'],
  ruleScopes: ['undefined', 'Element', 'Page', 'undefined', 'Website'],
  allRuleResults: 'All Rule Results',
  allRules: 'All Rules',
  implementationValue: [
    'undefined',
    'Not Applicable',
    'Not Implemented',
    'Partial Implementation',
    'Almost Complete',
    'Complete',
    'Complete with Manual Checks',
    'Manual Checks Only'
    ],
  ruleResultMessages: {
    'ACTION_NONE': 'No action needed',
    'NOT_APPLICABLE': 'Not applicable'
  },
  required: 'Required',
  recommended: 'Recommended',
  tableType: ['undefined', 'Unknown', 'Layout', 'Simple Data', 'Complex Data', 'ARIA Table', 'Grid', 'Tree Grid'],
  headerSource: ['undefined', 'none', 'headers attribute', 'row and column'],

  elementViolationLabel:   'V',
  elementWarningLabel:     'W',
  elementPassLabel:        'P',
  elementManualCheckLabel: 'MC',

  pageViolationLabel:   'Page Violation',
  pageWarningLabel:     'Page Warning',
  pagePassLabel:        'Page Pass',
  pageManualCheckLabel: 'Page Manual Check',

  websiteViolationLabel:   'Website Violation',
  websiteWarningLabel:     'Website Warning',
  websitePassLabel:        'Website Pass',
  websiteManualCheckLabel: 'Website Manual Check',

  rulesetLevelA:   'Level A only',
  rulesetLevelAA:  'Levels A and AA',
  rulesetLevelAAA: 'Levels A, AA and enhanced CCR',

  rulesetFilter: 'First Step rules',
  rulesetWCAG22: 'WCAG 2.2, ',
  rulesetWCAG21: 'WCAG 2.1, ',
  rulesetWCAG20: 'WCAG 2.0, ',

  scopeFilterElement: ', Element scope only',
  scopeFilterPage:    ', Page scope only',
  scopeFilterWebsite: ', Website scope only',

  headerSource: ['none', 'none', 'Headers Attribute', 'Row/Column Headers']

};

/* ruleCategories.js */

const ruleCategories = [
  {
    id           : RULE_CATEGORIES.LANDMARKS,
    title        : 'Landmarks',
    url          : '',
    description  : 'Use ARIA landmark roles to structure the content of each page and identify major sections of content, thus making them more findable and navigable. The use of landmarks will, in many cases, reflect the visual styling and page layouts that web designers utilize to set apart various sections of content.'
  },
  {
    id           : RULE_CATEGORIES.HEADINGS,
    title        : 'Headings',
    url          : '',
    description  : 'Use heading elements (H1-H6) to provide appropriate labels for landmarks, and to identify subsections of content within landmarks.'
  },
  {
    id           : RULE_CATEGORIES.COLOR_CONTENT,
    title        : 'Color/Content',
    url          : '',
    description  : 'Use proper HTML markup to identify the semantics and language of text content. Ensure that text is readable by adhering to color contrast guidelines, and that information is not conveyed solely by the use of color, shape, location or sound.'
  },
  {
    id           : RULE_CATEGORIES.IMAGES,
    title        : 'Images',
    url          : '',
    description  : 'Provide appropriate text alternatives for static images and graphics.'
  },
  {
    id           : RULE_CATEGORIES.LINKS,
    title        : 'Links',
    url          : '',
    description  : 'Use link text that properly describes the target of each link. Ensure consistency and uniqueness for links that are usable, predictable and understandable.'
  },
  {
    id           : RULE_CATEGORIES.TABLES_LAYOUT,
    title        : 'Tables/Layout',
    url          : '',
    description  : 'Provide table captions or other meta-information as needed. Provide row and column header references for data cells of data tables. Ensure that tables used for layout properly linearize text content and other layout related rules'
  },
  {
    id           : RULE_CATEGORIES.FORMS,
    title        : 'Forms',
    url          : '',
    description  : 'Provide meaningful labels for form elements and usable and understandable error feedback as needed.'
  },
  {
    id           : RULE_CATEGORIES.WIDGETS_SCRIPTS,
    title        : 'ARIA Widgets',
    url          : '',
    description  : 'Use appropriate ARIA markup to describe their roles, properties and states.'
  },
  {
    id           : RULE_CATEGORIES.AUDIO_VIDEO,
    title        : 'Audio/Video',
    url          : '',
    description  : 'Provide appropriate text transcripts, captions or audio descriptions for elements used in rendering audio and video content.'
  },
  {
    id           : RULE_CATEGORIES.KEYBOARD_SUPPORT,
    title        : 'Keyboard Support',
    url          : '',
    description  : 'Provide logical and sequential keyboard navigation among interactive elements such as links and form controls. Use standard models of keyboard interaction for custom widgets.'
  },
  {
    id           : RULE_CATEGORIES.TIMING_LIVE,
    title        : 'Timing/Live Regions',
    url          : '',
    description  : 'Eliminate accessibility problems caused by time limits on input and by content that moves, scrolls, flashes or auto-updates.   Live regions provide information on status changes, and for reporting errors and other asynchronous important changes in content.'
  },
  {
    id           : RULE_CATEGORIES.SITE_NAVIGATION,
    title        : 'Site Navigation',
    url          : '',
    description  : 'Ensure the consistent labeling and ordering of recurrent page sections across all pages within a website. Provide a meaningful title for each page within a website.'
  },
  // Composite rule categories
  {
    id           : RULE_CATEGORIES.ALL,
    title        : 'All Rules',
    url          : '',
    description  : 'Includes all rules in the ruleset and provides a way to sort and compare the results of all the rules.'
  }
];

/* ruleScope.js */

const ruleScopes = [
  {
    id           : RULE_SCOPE.ELEMENT,
    title        : 'Element',
    url          : '',
    description  : 'Accessibility requirements that apply to an element.'
  },
  {
    id           : RULE_SCOPE.PAGE,
    title        : 'Page',
    url          : '',
    description  : 'Accessibility requirements that apply to a web page.'
  },
  {
    id           : RULE_SCOPE.WEBSITE,
    title        : 'Website',
    url          : '',
    description  : 'Accessibility requirements that apply to the pages in a website.'
  },
  // Composite rule categories
  {
    id           : RULE_SCOPE.ALL,
    title        : 'All Rules',
    url          : '',
    description  : 'Includes all rules in the ruleset and provides a way to sort and compare the results of all the rules.'
  }
];

/* ruleCategories.js */

const rulesets = [
  {
    id           : RULESET.TRIAGE,
    abbrev       : 'FS',
    title        : 'First Step',
    description  : 'First step rules to focus on for people new to accessibility or to get an initial view of accessibility of a resource, primarily rules that result in pass/fail results.'
  },
  {
    id           : RULESET.LEVEL,
    abbrev       : 'Level A + FS',
    title        : 'All WCAG Level A + First Step Level AA rules',
    description  : 'All WCAG Single-A rules and all WCAG AA rules in the First Step ruleset.'
  },
  {
    id           : RULESET.ALL,
    abbrev       : 'Level A and AA',
    title        : 'ALL WCAG A and AA rules',
    description  : 'All WCAG A and AA rules.'
  }
];

/* ruleCategories.js */

const wcag = {
  abbreviation: 'WCAG 2.2',
  title: 'Web Content Accessibility Guidelines (WCAG) 2.2',
  url: 'https://www.w3.org/TR/WCAG22/',
  status: 'W3C Recommendation 05 June 2018',
  level: 'Level ',
  levels: ['Undefined',  'AAA',  'AA',  '',  'A'  ],
  all_guidelines: {
    title: 'All Rules',
    description: 'All the rules related to WCAG 2.2.',
    url_spec: 'https://www.w3.org/TR/WCAG22/'
  },
  principles: {
    '1': {
      id: WCAG_PRINCIPLE.P_1,
      title: '1. Perceivable',
      description: 'Information and user interface components must be presentable to users in ways they can perceive.',
      url_spec: 'https://www.w3.org/TR/WCAG22/#perceivable',
      guidelines: {
        '1.1': {
          id: WCAG_GUIDELINE.G_1_1,
          title: 'Guideline 1.1 Text Alternatives',
          description: 'Provide text alternatives for any non-text content so that it can be changed into other forms people need, such as large print, braille, speech, symbols or simpler language.',
          url_spec: 'https://www.w3.org/TR/WCAG22/#text-alternatives',
          success_criteria: {
            '1.1.1': {
              id: WCAG_SUCCESS_CRITERION.SC_1_1_1,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 1.1.1 Non-text Content',
              description: 'All non-text content that is presented to the user has a text alternative that serves the equivalent purpose, except for the situations listed below.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#non-text-content',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/non-text-content.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#non-text-content',
              references: {
              }
            }
          }
        },
        '1.2': {
          id: WCAG_GUIDELINE.G_1_2,
          title: 'Guideline 1.2 Time-based Media',
          description: 'Provide alternatives for time-based media.',
          url_spec: 'https://www.w3.org/TR/WCAG22/#time-based-media',
          success_criteria: {
            '1.2.1': {
              id: WCAG_SUCCESS_CRITERION.SC_1_2_1,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 1.2.1 Audio-only and Video-only (Prerecorded)',
              description: 'For prerecorded audio-only and prerecorded video-only media, the following are true, except when the audio or video is a media alternative for text and is clearly labeled as such:',
              url_spec: 'https://www.w3.org/TR/WCAG22/#audio-only-and-video-only-prerecorded',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/audio-only-and-video-only-prerecorded.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#audio-only-and-video-only-prerecorded',
              references: {
              }
            },
            '1.2.2': {
              id: WCAG_SUCCESS_CRITERION.SC_1_2_2,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 1.2.2 Captions (Prerecorded)',
              description: 'Captions are provided for all prerecorded audio content in synchronized media, except when the media is a media alternative for text and is clearly labeled as such.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#captions-prerecorded',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/captions-prerecorded.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#captions-prerecorded',
              references: {
              }
            },
            '1.2.3': {
              id: WCAG_SUCCESS_CRITERION.SC_1_2_3,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 1.2.3 Audio Description or Media Alternative (Prerecorded)',
              description: 'An alternative for time-based media or audio description of the prerecorded video content is provided for synchronized media, except when the media is a media alternative for text and is clearly labeled as such.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#audio-description-or-media-alternative-prerecorded',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/audio-description-or-media-alternative-prerecorded.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#audio-description-or-media-alternative-prerecorded',
              references: {
              }
            },
            '1.2.4': {
              id: WCAG_SUCCESS_CRITERION.SC_1_2_4,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 1.2.4 Captions (Live)',
              description: 'Captions are provided for all live audio content in synchronized media.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#captions-live',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/captions-live.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#captions-live',
              references: {
              }
            },
            '1.2.5': {
              id: WCAG_SUCCESS_CRITERION.SC_1_2_5,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 1.2.5 Audio Description (Prerecorded)',
              description: 'Audio description is provided for all prerecorded video content in synchronized media.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#audio-description-prerecorded',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/audio-description-prerecorded.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#audio-description-prerecorded',
              references: {
              }
            },
            '1.2.6': {
              id: WCAG_SUCCESS_CRITERION.SC_1_2_6,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 1.2.6 Sign Language (Prerecorded)',
              description: 'Sign language interpretation is provided for all prerecorded audio content in synchronized media.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#sign-language-prerecorded',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/sign-language-prerecorded.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#sign-language-prerecorded',
              references: {
              }
            },
            '1.2.7': {
              id: WCAG_SUCCESS_CRITERION.SC_1_2_7,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 1.2.7 Extended Audio Description (Prerecorded)',
              description: 'Where pauses in foreground audio are insufficient to allow audio descriptions to convey the sense of the video, extended audio description is provided for all prerecorded video content in synchronized media.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#extended-audio-description-prerecorded',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/extended-audio-description-prerecorded.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#extended-audio-description-prerecorded',
              references: {
              }
            },
            '1.2.8': {
              id: WCAG_SUCCESS_CRITERION.SC_1_2_8,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 1.2.8 Media Alternative (Prerecorded)',
              description: 'An alternative for time-based media is provided for all prerecorded synchronized media and for all prerecorded video-only media.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#media-alternative-prerecorded',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/media-alternative-prerecorded.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#media-alternative-prerecorded',
              references: {
              }
            },
            '1.2.9': {
              id: WCAG_SUCCESS_CRITERION.SC_1_2_9,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 1.2.9 Audio-only (Live)',
              description: 'An alternative for time-based media that presents equivalent information for live audio-only content is provided.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#audio-only-live',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/audio-only-live.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#audio-only-live',
              references: {
              }
            }
          }
        },
        '1.3': {
          id: WCAG_GUIDELINE.G_1_3,
          title: 'Guideline 1.3 Adaptable',
          description: 'Create content that can be presented in different ways (for example simpler layout) without losing information or structure.',
          url_spec: 'https://www.w3.org/TR/WCAG22/#adaptable',
          success_criteria: {
            '1.3.1': {
              id: WCAG_SUCCESS_CRITERION.SC_1_3_1,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 1.3.1 Info and Relationships',
              description: 'Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#info-and-relationships',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/info-and-relationships.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#info-and-relationships',
              references: {
              }
            },
            '1.3.2': {
              id: WCAG_SUCCESS_CRITERION.SC_1_3_2,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 1.3.2 Meaningful Sequence',
              description: 'When the sequence in which content is presented affects its meaning, a correct reading sequence can be programmatically determined.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#meaningful-sequence',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/meaningful-sequence.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#meaningful-sequence',
              references: {
              }
            },
            '1.3.3': {
              id: WCAG_SUCCESS_CRITERION.SC_1_3_3,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 1.3.3 Sensory Characteristics',
              description: 'Instructions provided for understanding and operating content do not rely solely on sensory characteristics of components such as shape, color, size, visual location, orientation, or sound.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#sensory-characteristics',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/sensory-characteristics.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#sensory-characteristics',
              references: {
              }
            },
            '1.3.4': {
              id: WCAG_SUCCESS_CRITERION.SC_1_3_4,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 1.3.4 Orientation',
              description: 'Content does not restrict its view and operation to a single display orientation, such as portrait or landscape, unless a specific display orientation is essential.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#orientation',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/orientation.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#orientation',
              references: {
              }
            },
            '1.3.5': {
              id: WCAG_SUCCESS_CRITERION.SC_1_3_5,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 1.3.5 Identify Input Purpose',
              description: 'The purpose of each input field collecting information about the user can be programmatically determined when:',
              url_spec: 'https://www.w3.org/TR/WCAG22/#identify-input-purpose',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/identify-input-purpose.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#identify-input-purpose',
              references: {
              }
            },
            '1.3.6': {
              id: WCAG_SUCCESS_CRITERION.SC_1_3_6,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 1.3.6 Identify Purpose',
              description: 'In content implemented using markup languages, the purpose of User Interface Components, icons, and regions can be programmatically determined.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#identify-purpose',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/identify-purpose.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#identify-purpose',
              references: {
              }
            }
          }
        },
        '1.4': {
          id: WCAG_GUIDELINE.G_1_4,
          title: 'Guideline 1.4 Distinguishable',
          description: 'Make it easier for users to see and hear content including separating foreground from background.',
          url_spec: 'https://www.w3.org/TR/WCAG22/#distinguishable',
          success_criteria: {
            '1.4.1': {
              id: WCAG_SUCCESS_CRITERION.SC_1_4_1,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 1.4.1 Use of Color',
              description: 'Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#use-of-color',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/use-of-color.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#use-of-color',
              references: {
              }
            },
            '1.4.2': {
              id: WCAG_SUCCESS_CRITERION.SC_1_4_2,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 1.4.2 Audio Control',
              description: 'If any audio on a Web page plays automatically for more than 3 seconds, either a mechanism is available to pause or stop the audio, or a mechanism is available to control audio volume independently from the overall system volume level.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#audio-control',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/audio-control.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#audio-control',
              references: {
              }
            },
            '1.4.3': {
              id: WCAG_SUCCESS_CRITERION.SC_1_4_3,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 1.4.3 Contrast (Minimum)',
              description: 'The visual presentation of text and images of text has a contrast ratio of at least 4.5:1, except for the following:',
              url_spec: 'https://www.w3.org/TR/WCAG22/#contrast-minimum',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/contrast-minimum.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#contrast-minimum',
              references: {
              }
            },
            '1.4.4': {
              id: WCAG_SUCCESS_CRITERION.SC_1_4_4,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 1.4.4 Resize text',
              description: 'Except for captions and images of text, text can be resized without assistive technology up to 200 percent without loss of content or functionality.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#resize-text',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/resize-text.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#resize-text',
              references: {
              }
            },
            '1.4.5': {
              id: WCAG_SUCCESS_CRITERION.SC_1_4_5,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 1.4.5 Images of Text',
              description: 'If the technologies being used can achieve the visual presentation, text is used to convey information rather than images of text except for the following:',
              url_spec: 'https://www.w3.org/TR/WCAG22/#images-of-text',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/images-of-text.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#images-of-text',
              references: {
              }
            },
            '1.4.6': {
              id: WCAG_SUCCESS_CRITERION.SC_1_4_6,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 1.4.6 Contrast (Enhanced)',
              description: 'The visual presentation of text and images of text has a contrast ratio of at least 7:1, except for the following:',
              url_spec: 'https://www.w3.org/TR/WCAG22/#contrast-enhanced',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/contrast-enhanced.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#contrast-enhanced',
              references: {
              }
            },
            '1.4.7': {
              id: WCAG_SUCCESS_CRITERION.SC_1_4_7,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 1.4.7 Low or No Background Audio',
              description: 'For prerecorded audio-only content that (1) contains primarily speech in the foreground, (2) is not an audio CAPTCHA or audio logo, and (3) is not vocalization intended to be primarily musical expression such as singing or rapping, at least one of the following is true:',
              url_spec: 'https://www.w3.org/TR/WCAG22/#low-or-no-background-audio',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/low-or-no-background-audio.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#low-or-no-background-audio',
              references: {
              }
            },
            '1.4.8': {
              id: WCAG_SUCCESS_CRITERION.SC_1_4_8,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 1.4.8 Visual Presentation',
              description: 'For the visual presentation of blocks of text, a mechanism is available to achieve the following:',
              url_spec: 'https://www.w3.org/TR/WCAG22/#visual-presentation',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/visual-presentation.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#visual-presentation',
              references: {
              }
            },
            '1.4.9': {
              id: WCAG_SUCCESS_CRITERION.SC_1_4_9,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 1.4.9 Images of Text (No Exception)',
              description: 'Images of text are only used for pure decoration or where a particular presentation of text is essential to the information being conveyed.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#images-of-text-no-exception',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/images-of-text-no-exception.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#images-of-text-no-exception',
              references: {
              }
            },
            '1.4.10': {
              id: WCAG_SUCCESS_CRITERION.SC_1_4_10,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 1.4.10 Reflow',
              description: 'Content can be presented without loss of information or functionality, and without requiring scrolling in two dimensions for:',
              url_spec: 'https://www.w3.org/TR/WCAG22/#reflow',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/reflow.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#reflow',
              references: {
              }
            },
            '1.4.11': {
              id: WCAG_SUCCESS_CRITERION.SC_1_4_11,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 1.4.11 Non-text Contrast',
              description: 'The visual presentation of the following have a contrast ratio of at least 3:1 against adjacent color(s):',
              url_spec: 'https://www.w3.org/TR/WCAG22/#non-text-contrast',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/non-text-contrast.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#non-text-contrast',
              references: {
              }
            },
            '1.4.12': {
              id: WCAG_SUCCESS_CRITERION.SC_1_4_12,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 1.4.12 Text Spacing',
              description: 'In content implemented using markup languages that support the following text style properties, no loss of content or functionality occurs by setting all of the following and by changing no other style property:',
              url_spec: 'https://www.w3.org/TR/WCAG22/#text-spacing',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/text-spacing.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#text-spacing',
              references: {
              }
            },
            '1.4.13': {
              id: WCAG_SUCCESS_CRITERION.SC_1_4_13,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 1.4.13 Content on Hover or Focus',
              description: 'Where receiving and then removing pointer hover or keyboard focus triggers additional content to become visible and then hidden, the following are true:',
              url_spec: 'https://www.w3.org/TR/WCAG22/#content-on-hover-or-focus',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/content-on-hover-or-focus.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#content-on-hover-or-focus',
              references: {
              }
            }
          }
        }
      }
    },
    '2': {
      id: WCAG_PRINCIPLE.P_2,
      title: '2. Operable',
      description: 'User interface components and navigation must be operable.',
      url_spec: 'https://www.w3.org/TR/WCAG22/#operable',
      guidelines: {
        '2.1': {
          id: WCAG_GUIDELINE.G_2_1,
          title: 'Guideline 2.1 Keyboard Accessible',
          description: 'Make all functionality available from a keyboard.',
          url_spec: 'https://www.w3.org/TR/WCAG22/#keyboard-accessible',
          success_criteria: {
            '2.1.1': {
              id: WCAG_SUCCESS_CRITERION.SC_2_1_1,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 2.1.1 Keyboard',
              description: 'All functionality of the content is operable through a keyboard interface without requiring specific timings for individual keystrokes, except where the underlying function requires input that depends on the path of the user\'s movement and not just the endpoints.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#keyboard',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/keyboard.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#keyboard',
              references: {
              }
            },
            '2.1.2': {
              id: WCAG_SUCCESS_CRITERION.SC_2_1_2,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 2.1.2 No Keyboard Trap',
              description: 'If keyboard focus can be moved to a component of the page using a keyboard interface, then focus can be moved away from that component using only a keyboard interface, and, if it requires more than unmodified arrow or tab keys or other standard exit methods, the user is advised of the method for moving focus away.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#no-keyboard-trap',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/no-keyboard-trap.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#no-keyboard-trap',
              references: {
              }
            },
            '2.1.3': {
              id: WCAG_SUCCESS_CRITERION.SC_2_1_3,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 2.1.3 Keyboard (No Exception)',
              description: 'All functionality of the content is operable through a keyboard interface without requiring specific timings for individual keystrokes.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#keyboard-no-exception',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/keyboard-no-exception.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#keyboard-no-exception',
              references: {
              }
            },
            '2.1.4': {
              id: WCAG_SUCCESS_CRITERION.SC_2_1_4,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 2.1.4 Character Key Shortcuts',
              description: 'If a keyboard shortcut is implemented in content using only letter (including upper- and lower-case letters), punctuation, number, or symbol characters, then at least one of the following is true:',
              url_spec: 'https://www.w3.org/TR/WCAG22/#character-key-shortcuts',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/character-key-shortcuts.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#character-key-shortcuts',
              references: {
              }
            }
          }
        },
        '2.2': {
          id: WCAG_GUIDELINE.G_2_2,
          title: 'Guideline 2.2 Enough Time',
          description: 'Provide users enough time to read and use content.',
          url_spec: 'https://www.w3.org/TR/WCAG22/#enough-time',
          success_criteria: {
            '2.2.1': {
              id: WCAG_SUCCESS_CRITERION.SC_2_2_1,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 2.2.1 Timing Adjustable',
              description: 'For each time limit that is set by the content, at least one of the following is true:',
              url_spec: 'https://www.w3.org/TR/WCAG22/#timing-adjustable',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/timing-adjustable.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#timing-adjustable',
              references: {
              }
            },
            '2.2.2': {
              id: WCAG_SUCCESS_CRITERION.SC_2_2_2,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 2.2.2 Pause, Stop, Hide',
              description: 'For moving, blinking, scrolling, or auto-updating information, all of the following are true:',
              url_spec: 'https://www.w3.org/TR/WCAG22/#pause-stop-hide',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/pause-stop-hide.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#pause-stop-hide',
              references: {
              }
            },
            '2.2.3': {
              id: WCAG_SUCCESS_CRITERION.SC_2_2_3,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 2.2.3 No Timing',
              description: 'Timing is not an essential part of the event or activity presented by the content, except for non-interactive synchronized media and real-time events.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#no-timing',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/no-timing.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#no-timing',
              references: {
              }
            },
            '2.2.4': {
              id: WCAG_SUCCESS_CRITERION.SC_2_2_4,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 2.2.4 Interruptions',
              description: 'Interruptions can be postponed or suppressed by the user, except interruptions involving an emergency.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#interruptions',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/interruptions.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#interruptions',
              references: {
              }
            },
            '2.2.5': {
              id: WCAG_SUCCESS_CRITERION.SC_2_2_5,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 2.2.5 Re-authenticating',
              description: 'When an authenticated session expires, the user can continue the activity without loss of data after re-authenticating.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#re-authenticating',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/re-authenticating.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#re-authenticating',
              references: {
              }
            },
            '2.2.6': {
              id: WCAG_SUCCESS_CRITERION.SC_2_2_6,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 2.2.6 Timeouts',
              description: 'Users are warned of the duration of any user inactivity that could cause data loss, unless the data is preserved for more than 20 hours when the user does not take any actions.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#timeouts',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/timeouts.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#timeouts',
              references: {
              }
            }
          }
        },
        '2.3': {
          id: WCAG_GUIDELINE.G_2_3,
          title: 'Guideline 2.3 Seizures and Physical Reactions',
          description: 'Do not design content in a way that is known to cause seizures or physical reactions.',
          url_spec: 'https://www.w3.org/TR/WCAG22/#seizures-and-physical-reactions',
          success_criteria: {
            '2.3.1': {
              id: WCAG_SUCCESS_CRITERION.SC_2_3_1,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 2.3.1 Three Flashes or Below Threshold',
              description: 'Web pages do not contain anything that flashes more than three times in any one second period, or the flash is below the general flash and red flash thresholds.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#three-flashes-or-below-threshold',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/three-flashes-or-below-threshold.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#three-flashes-or-below-threshold',
              references: {
              }
            },
            '2.3.2': {
              id: WCAG_SUCCESS_CRITERION.SC_2_3_2,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 2.3.2 Three Flashes',
              description: 'Web pages do not contain anything that flashes more than three times in any one second period.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#three-flashes',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/three-flashes.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#three-flashes',
              references: {
              }
            },
            '2.3.3': {
              id: WCAG_SUCCESS_CRITERION.SC_2_3_3,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 2.3.3 Animation from Interactions',
              description: 'Motion animation triggered by interaction can be disabled, unless the animation is essential to the functionality or the information being conveyed.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#animation-from-interactions',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/animation-from-interactions.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#animation-from-interactions',
              references: {
              }
            }
          }
        },
        '2.4': {
          id: WCAG_GUIDELINE.G_2_4,
          title: 'Guideline 2.4 Navigable',
          description: 'Provide ways to help users navigate, find content, and determine where they are.',
          url_spec: 'https://www.w3.org/TR/WCAG22/#navigable',
          success_criteria: {
            '2.4.1': {
              id: WCAG_SUCCESS_CRITERION.SC_2_4_1,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 2.4.1 Bypass Blocks',
              description: 'A mechanism is available to bypass blocks of content that are repeated on multiple Web pages.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#bypass-blocks',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/bypass-blocks.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#bypass-blocks',
              references: {
              }
            },
            '2.4.2': {
              id: WCAG_SUCCESS_CRITERION.SC_2_4_2,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 2.4.2 Page Titled',
              description: 'Web pages have titles that describe topic or purpose.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#page-titled',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/page-titled.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#page-titled',
              references: {
              }
            },
            '2.4.3': {
              id: WCAG_SUCCESS_CRITERION.SC_2_4_3,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 2.4.3 Focus Order',
              description: 'If a Web page can be navigated sequentially and the navigation sequences affect meaning or operation, focusable components receive focus in an order that preserves meaning and operability.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#focus-order',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/focus-order.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#focus-order',
              references: {
              }
            },
            '2.4.4': {
              id: WCAG_SUCCESS_CRITERION.SC_2_4_4,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 2.4.4 Link Purpose (In Context)',
              description: 'The purpose of each link can be determined from the link text alone or from the link text together with its programmatically determined link context, except where the purpose of the link would be ambiguous to users in general.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#link-purpose-in-context',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/link-purpose-in-context.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#link-purpose-in-context',
              references: {
              }
            },
            '2.4.5': {
              id: WCAG_SUCCESS_CRITERION.SC_2_4_5,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 2.4.5 Multiple Ways',
              description: 'More than one way is available to locate a Web page within a set of Web pages except where the Web Page is the result of, or a step in, a process.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#multiple-ways',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/multiple-ways.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#multiple-ways',
              references: {
              }
            },
            '2.4.6': {
              id: WCAG_SUCCESS_CRITERION.SC_2_4_6,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 2.4.6 Headings and Labels',
              description: 'Headings and labels describe topic or purpose.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#headings-and-labels',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/headings-and-labels.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#headings-and-labels',
              references: {
              }
            },
            '2.4.7': {
              id: WCAG_SUCCESS_CRITERION.SC_2_4_7,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 2.4.7 Focus Visible',
              description: 'Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#focus-visible',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/focus-visible.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#focus-visible',
              references: {
              }
            },
            '2.4.8': {
              id: WCAG_SUCCESS_CRITERION.SC_2_4_8,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 2.4.8 Location',
              description: 'Information about the user\'s location within a set of Web pages is available.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#location',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/location.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#location',
              references: {
              }
            },
            '2.4.9': {
              id: WCAG_SUCCESS_CRITERION.SC_2_4_9,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 2.4.9 Link Purpose (Link Only)',
              description: 'A mechanism is available to allow the purpose of each link to be identified from link text alone, except where the purpose of the link would be ambiguous to users in general.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#link-purpose-link-only',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/link-purpose-link-only.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#link-purpose-link-only',
              references: {
              }
            },
            '2.4.10': {
              id: WCAG_SUCCESS_CRITERION.SC_2_4_10,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 2.4.10 Section Headings',
              description: 'Section headings are used to organize the content.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#section-headings',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/section-headings.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#section-headings',
              references: {
              }
            },
            '2.4.11': {
              id: WCAG_SUCCESS_CRITERION.SC_2_4_11,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 2.4.11 Focus Not Obscured (Minimum)',
              description: 'When a user interface component receives keyboard focus, the component is not entirely hidden due to author-created content.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#focus-not-obscured-minimum',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/focus-not-obscured-minimum.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#focus-not-obscured-minimum',
              references: {
              }
            },
            '2.4.12': {
              id: WCAG_SUCCESS_CRITERION.SC_2_4_12,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 2.4.12 Focus Not Obscured (Enhanced)',
              description: 'When a user interface component receives keyboard focus, no part of the component is hidden by author-created content.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#focus-not-obscured-enhanced',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/focus-appearance.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#focus-appearance',
              references: {
              }
            },
            '2.4.13': {
              id: WCAG_SUCCESS_CRITERION.SC_2_4_13,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 2.4.13 Focus Appearance',
              description: 'When the keyboard focus indicator is visible, an area of the focus indicator is at least as large as the area of a 2 CSS pixel thick perimeter of the unfocused component or sub-component, and has a contrast ratio of at least 3:1 between the same pixels in the focused and unfocused states. NOTE: some exceptions',
              url_spec: 'https://www.w3.org/TR/WCAG22/#focus-appearance',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/focus-appearance.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#focus-appearance',
              references: {
              }
            }
          }
        },
        '2.5': {
          id: WCAG_GUIDELINE.G_2_5,
          title: 'Guideline 2.5 Input Modalities',
          description: 'Make it easier for users to operate functionality through various inputs beyond keyboard.',
          url_spec: 'https://www.w3.org/TR/WCAG22/#input-modalities',
          success_criteria: {
            '2.5.1': {
              id: WCAG_SUCCESS_CRITERION.SC_2_5_1,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 2.5.1 Pointer Gestures',
              description: 'All functionality that uses multipoint or path-based gestures for operation can be operated with a single pointer without a path-based gesture, unless a multipoint or path-based gesture is essential.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#pointer-gestures',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/pointer-gestures.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#pointer-gestures',
              references: {
              }
            },
            '2.5.2': {
              id: WCAG_SUCCESS_CRITERION.SC_2_5_2,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 2.5.2 Pointer Cancellation',
              description: 'For functionality that can be operated using a single pointer, at least one of the following is true:',
              url_spec: 'https://www.w3.org/TR/WCAG22/#pointer-cancellation',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/pointer-cancellation.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#pointer-cancellation',
              references: {
              }
            },
            '2.5.3': {
              id: WCAG_SUCCESS_CRITERION.SC_2_5_3,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 2.5.3 Label in Name',
              description: 'For user interface components with labels that include text or images of text, the name contains the text that is presented visually.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#label-in-name',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/label-in-name.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#label-in-name',
              references: {
              }
            },
            '2.5.4': {
              id: WCAG_SUCCESS_CRITERION.SC_2_5_4,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 2.5.4 Motion Actuation',
              description: 'Functionality that can be operated by device motion or user motion can also be operated by user interface components and responding to the motion can be disabled to prevent accidental actuation, except when:',
              url_spec: 'https://www.w3.org/TR/WCAG22/#motion-actuation',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/motion-actuation.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#motion-actuation',
              references: {
              }
            },
            '2.5.5': {
              id: WCAG_SUCCESS_CRITERION.SC_2_5_5,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 2.5.5 Target Size',
              description: 'The size of the target for pointer inputs is at least 44 by 44 CSS pixels except when:',
              url_spec: 'https://www.w3.org/TR/WCAG22/#target-size',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/target-size.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#target-size',
              references: {
              }
            },
            '2.5.6': {
              id: WCAG_SUCCESS_CRITERION.SC_2_5_6,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 2.5.6 Concurrent Input Mechanisms',
              description: 'Web content does not restrict use of input modalities available on a platform except where the restriction is essential, required to ensure the security of the content, or required to respect user settings.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#concurrent-input-mechanisms',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/concurrent-input-mechanisms.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#concurrent-input-mechanisms',
              references: {
              }
            },
            '2.5.7': {
              id: WCAG_SUCCESS_CRITERION.SC_2_5_7,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 2.5.7 Dragging Movements',
              description: 'All functionality that uses a dragging movement for operation can be achieved by a single pointer without dragging, unless dragging is essential or the functionality is determined by the user agent and not modified by the author.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#dragging-movements',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/dragging-movements.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#dragging-movements',
              references: {
              }
            },
            '2.5.8': {
              id: WCAG_SUCCESS_CRITERION.SC_2_5_8,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 2.5.8 Target Size (Minimum)',
              description: 'The size of the target for pointer inputs is at least 24 by 24 CSS pixels. NOTE: There are five exceptions.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#target-size-minimum',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/target-size-minimum.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#target-size-minimum',
              references: {
              }
            }
          }
        }
      }
    },
    '3': {
      id: WCAG_PRINCIPLE.P_3,
      title: '3. Understandable',
      description: 'Information and the operation of user interface must be understandable.',
      url_spec: 'https://www.w3.org/TR/WCAG22/#understandable',
      guidelines: {
        '3.1': {
          id: WCAG_GUIDELINE.G_3_1,
          title: 'Guideline 3.1 Readable',
          description: 'Make text content readable and understandable.',
          url_spec: 'https://www.w3.org/TR/WCAG22/#readable',
          success_criteria: {
            '3.1.1': {
              id: WCAG_SUCCESS_CRITERION.SC_3_1_1,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 3.1.1 Language of Page',
              description: 'The default human language of each Web page can be programmatically determined.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#language-of-page',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/language-of-page.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#language-of-page',
              references: {
              }
            },
            '3.1.2': {
              id: WCAG_SUCCESS_CRITERION.SC_3_1_2,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 3.1.2 Language of Parts',
              description: 'The human language of each passage or phrase in the content can be programmatically determined except for proper names, technical terms, words of indeterminate language, and words or phrases that have become part of the vernacular of the immediately surrounding text.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#language-of-parts',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/language-of-parts.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#language-of-parts',
              references: {
              }
            },
            '3.1.3': {
              id: WCAG_SUCCESS_CRITERION.SC_3_1_3,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 3.1.3 Unusual Words',
              description: 'A mechanism is available for identifying specific definitions of words or phrases used in an unusual or restricted way, including idioms and jargon.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#unusual-words',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/unusual-words.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#unusual-words',
              references: {
              }
            },
            '3.1.4': {
              id: WCAG_SUCCESS_CRITERION.SC_3_1_4,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 3.1.4 Abbreviations',
              description: 'A mechanism for identifying the expanded form or meaning of abbreviations is available.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#abbreviations',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/abbreviations.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#abbreviations',
              references: {
              }
            },
            '3.1.5': {
              id: WCAG_SUCCESS_CRITERION.SC_3_1_5,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 3.1.5 Reading Level',
              description: 'When text requires reading ability more advanced than the lower secondary education level after removal of proper names and titles, supplemental content, or a version that does not require reading ability more advanced than the lower secondary education level, is available.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#reading-level',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/reading-level.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#reading-level',
              references: {
              }
            },
            '3.1.6': {
              id: WCAG_SUCCESS_CRITERION.SC_3_1_6,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 3.1.6 Pronunciation',
              description: 'A mechanism is available for identifying specific pronunciation of words where meaning of the words, in context, is ambiguous without knowing the pronunciation.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#pronunciation',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/pronunciation.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#pronunciation',
              references: {
              }
            }
          }
        },
        '3.2': {
          id: WCAG_GUIDELINE.G_3_2,
          title: 'Guideline 3.2 Predictable',
          description: 'Make Web pages appear and operate in predictable ways.',
          url_spec: 'https://www.w3.org/TR/WCAG22/#predictable',
          success_criteria: {
            '3.2.1': {
              id: WCAG_SUCCESS_CRITERION.SC_3_2_1,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 3.2.1 On Focus',
              description: 'When any user interface component receives focus, it does not initiate a change of context.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#on-focus',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/on-focus.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#on-focus',
              references: {
              }
            },
            '3.2.2': {
              id: WCAG_SUCCESS_CRITERION.SC_3_2_2,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 3.2.2 On Input',
              description: 'Changing the setting of any user interface component does not automatically cause a change of context unless the user has been advised of the behavior before using the component.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#on-input',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/on-input.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#on-input',
              references: {
              }
            },
            '3.2.3': {
              id: WCAG_SUCCESS_CRITERION.SC_3_2_3,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 3.2.3 Consistent Navigation',
              description: 'Navigational mechanisms that are repeated on multiple Web pages within a set of Web pages occur in the same relative order each time they are repeated, unless a change is initiated by the user.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#consistent-navigation',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/consistent-navigation.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#consistent-navigation',
              references: {
              }
            },
            '3.2.4': {
              id: WCAG_SUCCESS_CRITERION.SC_3_2_4,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 3.2.4 Consistent Identification',
              description: 'Components that have the same functionality within a set of Web pages are identified consistently.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#consistent-identification',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/consistent-identification.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#consistent-identification',
              references: {
              }
            },
            '3.2.5': {
              id: WCAG_SUCCESS_CRITERION.SC_3_2_5,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 3.2.5 Change on Request',
              description: 'Changes of context are initiated only by user request or a mechanism is available to turn off such changes.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#change-on-request',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/change-on-request.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#change-on-request',
              references: {
              }
            },
            '3.2.6': {
              id: WCAG_SUCCESS_CRITERION.SC_3_2_6,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 3.2.6 Consistent Help',
              description: 'If a Web page contains Human contact details, Human contact mechanism, Self-help option.and/or a fully automated contact mechanisms, and at least one of the mechanisms are repeated on multiple Web pages within a set of Web pages, they occur in the same order relative to other page content, unless a change is initiated by the user',
              url_spec: 'https://www.w3.org/TR/WCAG22/#consistent-help',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/consistent-help.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#consistent-help',
              references: {
              }
            }
          }
        },
        '3.3': {
          id: WCAG_GUIDELINE.G_3_3,
          title: 'Guideline 3.3 Input Assistance',
          description: 'Help users avoid and correct mistakes.',
          url_spec: 'https://www.w3.org/TR/WCAG22/#input-assistance',
          success_criteria: {
            '3.3.1': {
              id: WCAG_SUCCESS_CRITERION.SC_3_3_1,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 3.3.1 Error Identification',
              description: 'If an input error is automatically detected, the item that is in error is identified and the error is described to the user in text.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#error-identification',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/error-identification.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#error-identification',
              references: {
              }
            },
            '3.3.2': {
              id: WCAG_SUCCESS_CRITERION.SC_3_3_2,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 3.3.2 Labels or Instructions',
              description: 'Labels or instructions are provided when content requires user input.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#labels-or-instructions',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/labels-or-instructions.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#labels-or-instructions',
              references: {
              }
            },
            '3.3.3': {
              id: WCAG_SUCCESS_CRITERION.SC_3_3_3,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 3.3.3 Error Suggestion',
              description: 'If an input error is automatically detected and suggestions for correction are known, then the suggestions are provided to the user, unless it would jeopardize the security or purpose of the content.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#error-suggestion',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/error-suggestion.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#error-suggestion',
              references: {
              }
            },
            '3.3.4': {
              id: WCAG_SUCCESS_CRITERION.SC_3_3_4,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 3.3.4 Error Prevention (Legal, Financial, Data)',
              description: 'For Web pages that cause legal commitments or financial transactions for the user to occur, that modify or delete user-controllable data in data storage systems, or that submit user test responses, at least one of the following is true:',
              url_spec: 'https://www.w3.org/TR/WCAG22/#error-prevention-legal-financial-data',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/error-prevention-legal-financial-data.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#error-prevention-legal-financial-data',
              references: {
              }
            },
            '3.3.5': {
              id: WCAG_SUCCESS_CRITERION.SC_3_3_5,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 3.3.5 Help',
              description: 'Context-sensitive help is available.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#help',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/help.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#help',
              references: {
              }
            },
            '3.3.6': {
              id: WCAG_SUCCESS_CRITERION.SC_3_3_6,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 3.3.6 Error Prevention (All)',
              description: 'For Web pages that require the user to submit information, at least one of the following is true:',
              url_spec: 'https://www.w3.org/TR/WCAG22/#error-prevention-all',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/error-prevention-all.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#error-prevention-all',
              references: {
              }
            },
            '3.3.7': {
              id: WCAG_SUCCESS_CRITERION.SC_3_3_7,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 3.3.7 Redundant Entry',
              description: 'Information previously entered by or provided to the user that is required to be entered again in the same process is either auto-populated or available for the user to select. NOTE: There are exceptions',
              url_spec: 'https://www.w3.org/TR/WCAG22/#redundant-entry',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/redundant-entry.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#redundant-entry',
              references: {
              }
            },
            '3.3.8': {
              id: WCAG_SUCCESS_CRITERION.SC_3_3_8,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 3.3.8 Accessible Authentication (Minimum)',
              description: 'A cognitive function test (such as remembering a password or solving a puzzle) is not required for any step in an authentication process unless that step provides at least one of the following: another authentication method that does not rely on a cognitive function test, a mechanism is available to assist the user in completing the cognitive function test, the cognitive function test is to recognize objects and/or the cognitive function test is to identify non-text content the user provided to the Web site.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#accessible-authentication-minimum',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/accessible-authentication-minimum.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#accessible-authentication-minimum',
              references: {
              }
            },
            '3.3.9': {
              id: WCAG_SUCCESS_CRITERION.SC_3_3_9,
              level: WCAG_LEVEL.AAA,
              title: 'Success Criterion 3.3.9 Accessible Authentication (Enhanced)',
              description: 'A cognitive function test (such as remembering a password or solving a puzzle) is not required for any step in an authentication process unless that step provides at least one of the following: another authentication method that does not rely on a cognitive function test and/or a mechanism is available to assist the user in completing the cognitive function test.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#accessible-authentication-enhanced',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/accessible-authentication-enhanced.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#accessible-authentication-enhanced',
              references: {
              }
            }
          }
        }
      }
    },
    '4': {
      id: WCAG_PRINCIPLE.P_4,
      title: '4. Robust',
      description: 'Content must be robust enough that it can be interpreted by by a wide variety of user agents, including assistive technologies.',
      url_spec: 'https://www.w3.org/TR/WCAG22/#robust',
      guidelines: {
        '4.1': {
          id: WCAG_GUIDELINE.G_4_1,
          title: 'Guideline 4.1 Compatible',
          description: 'Maximize compatibility with current and future user agents, including assistive technologies.',
          url_spec: 'https://www.w3.org/TR/WCAG22/#compatible',
          success_criteria: {
            '4.1.1': {
              id: WCAG_SUCCESS_CRITERION.SC_4_1_1,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 4.1.1 Parsing',
              description: 'In content implemented using markup languages, elements have complete start and end tags, elements are nested according to their specifications, elements do not contain duplicate attributes, and any IDs are unique, except where the specifications allow these features.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#parsing',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/parsing.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#parsing',
              references: {
              }
            },
            '4.1.2': {
              id: WCAG_SUCCESS_CRITERION.SC_4_1_2,
              level: WCAG_LEVEL.A,
              title: 'Success Criterion 4.1.2 Name, Role, Value',
              description: 'For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#name-role-value',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/name-role-value.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#name-role-value',
              references: {
              }
            },
            '4.1.3': {
              id: WCAG_SUCCESS_CRITERION.SC_4_1_3,
              level: WCAG_LEVEL.AA,
              title: 'Success Criterion 4.1.3 Status Messages',
              description: 'In content implemented using markup languages, status messages can be programmatically determined through role or properties such that they can be presented to the user by assistive technologies without receiving focus.',
              url_spec: 'https://www.w3.org/TR/WCAG22/#status-messages',
              url_understand: 'https://www.w3.org/WAI/WCAG22/Understanding/status-messages.html',
              url_meet: 'https://www.w3.org/WAI/WCAG22/quickref/#status-messages',
              references: {
              }
            }
          }
        }
      }
    }
  }
};

/* audioRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const audioRules$1 = {
  AUDIO_1: {
    ID:                    'Audio 1',
    DEFINITION:            '@audio@ elements must have caption or text transcription of the audio content.',
    SUMMARY:               '@audio@ must have alternative',
    TARGET_RESOURCES_DESC: '@audio@ elements',
    RULE_RESULT_MESSAGES: {
      FAIL_S:         'Add caption or text transcript to @audio@ element',
      FAIL_P:         'Add a caption or text transcript to each of the %N_F the @audio@ elements with out captions or transcripts.',
      MANUAL_CHECK_S: 'Verify the @audio@ element has either a caption or text transcript of the audio content.',
      MANUAL_CHECK_P: 'Verify the %N_MC @audio@ elements are audio only have either a caption or text transcript of the audio.',
      HIDDEN_S:       'The @audio@ element that is hidden was not analyzed for accessible audio.',
      HIDDEN_P:       'The %N_H @audio@ elements that are hidden were not analyzed for accessible audio.',
      NOT_APPLICABLE: 'No @audio@ elements found on this page.'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_PASS_1:    '@audio@ element has caption.',
      ELEMENT_PASS_2:    '@audio@ element has a text transcript.',
      ELEMENT_FAIL_1:    'Add caption or text transcript to @audio@ element.',
      ELEMENT_MC_1:      'Verify the @audio@ element has captions or text transcript.',
      ELEMENT_HIDDEN_1:  'The @audio@ element is hidden and was not evaluated.'
    },
    PURPOSES: [
      'Captions and text transcripts provide a means for people cannot hear the audio to understand the audio content.',
      'Some types of learning disabilities affect speech perception, captions and text transcripts provide an alternative way to understand the audio content.',
      'When the language of the audio is different than the native language of the listener, captions and text transcripts support the listener in understanding the audio content.'
    ],
    TECHNIQUES: [
      'Use the @track@ element to add captioning to the audio content.',
      'Use WebVTT to encode the timed stamped captioning information for the audio content.',
      'Use @aria-describedby@ to reference a text transcript of the audio content.'
    ],
    MANUAL_CHECKS: [
      'When captions are enabled on the media player, check to make sure the captions visible.',
      'If there is a caption make sure the captions accurately represents the audio content.',
      'If there is a text transcript make sure the transcript accurately represents the audio content.'
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.TECHNIQUE,
        title: 'W3C: Making Audio and Video Media Accessible',
        url:   'https://www.w3.org/WAI/media/av/'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'HMTL: The audio element',
        url:   'https://html.spec.whatwg.org/multipage/media.html#the-audio-element'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'HMTL: The track element',
        url:   'https://html.spec.whatwg.org/multipage/media.html#the-track-element'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'WebVTT: The Web Video Text Tracks Format',
        url:   'https://www.w3.org/TR/webvtt1/'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (ARIA) 1.2: aria-describedby',
        url:   'https://www.w3.org/TR/wai-aria/#aria-describedby'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'University of Washington: Creating Accessible Videos',
        url:   'https://www.washington.edu/accessibility/videos/'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
        url:   'https://webaim.org/techniques/captions/'
      }
    ]
  },
  AUDIO_2: {
    ID:                    'Audio 2',
    DEFINITION:            '@object@ elements used for audio only must have caption or text transcription of the audio content.',
    SUMMARY:               '@object@ for audio must have alternative',
    TARGET_RESOURCES_DESC: '@object@ elements',
    RULE_RESULT_MESSAGES: {
      FAIL_S:   'Add caption or text transcript to @object@ element.',
      FAIL_P:   'Add a caption or text transcript to each of the %N_F the @object@ elements with out captions or transcripts.',
      MANUAL_CHECK_S:     'Check if the @object@ element is audio only content.  If it is audio only make sure it has either a caption or text transcript of the audio content.',
      MANUAL_CHECK_P:     'Check if any of the %N_MC @object@ elements are audio only. If any are audio only make sure they have either a caption or text transcript of the audio.',
      HIDDEN_S: 'The @object@ element that is hidden was not analyzed for accessible audio.',
      HIDDEN_P: 'The %N_H @object@ elements that are hidden were not analyzed for accessible audio.',
      NOT_APPLICABLE:  'No @embed@ elements found on this page.'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_PASS_1:   '@object@ element references text transcript.',
      ELEMENT_FAIL_1:   'Add captions or text transcript to @object@ element.',
      ELEMENT_MC_1:     'Verify the @object@ element has synchronous captions.',
      ELEMENT_MC_2:     'Verify the @object@ element only renders audio only, if it is audio only verify that it has captions or text transcript.',
      ELEMENT_HIDDEN_1: 'The @object@ element is hidden and was not evaluated.'
    },
    PURPOSES: [
      'Captions and text transcripts provide a means for people cannot hear the audio to understand the audio content.',
      'Some types of learning disabilities affect speech perception, captions and text transcripts provide an alternative way to understand the audio content.',
      'When the language of the audio is different than the native language of the listener, captions and text transcripts support the listener in understanding the audio content.'
    ],
    TECHNIQUES: [
      'Use the @audio@ element instead of the @object@ element for audio only content, since the @audio@ element provides better support for captions and text transcripts.',
      'Use @aria-describedby@ attribute to point to a text description of the audio only content.'
    ],
    MANUAL_CHECKS: [
      'Check the web page for a link to a text transcript of the audio, or if the transcript is part of the page rendering the audio.',
      'Check the media player for a button to turn on and off captions.',
      'When captions are enabled on the media player, check to make sure the captions visible and represent the speech and sounds heard on the audio.',
      'In some cases "open" captions might be used, this means the captions are always "on" as part of the video.'
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.TECHNIQUE,
        title: 'W3C: Making Audio and Video Media Accessible',
        url:   'https://www.w3.org/WAI/media/av/'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'HMTL: The object element',
        url:   'https://html.spec.whatwg.org/multipage/iframe-embed-object.html#the-object-element'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (ARIA) 1.2: aria-describedby',
        url:   'https://www.w3.org/TR/wai-aria/#aria-describedby'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'University of Washington: Creating Accessible Videos',
        url:   'https://www.washington.edu/accessibility/videos/'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
        url:   'https://webaim.org/techniques/captions/'
      }
    ]
  },
  AUDIO_3: {
    ID:                    'Audio 3',
    DEFINITION:            '@embed@ elements used for audio only must have caption or text transcription of the audio content.',
    SUMMARY:               '@embed@ for audio must have alternative',
    TARGET_RESOURCES_DESC: '@embed@ elements',
    RULE_RESULT_MESSAGES: {
      FAIL_S:          'Add caption or text transcript to @embed@ element.',
      FAIL_P:          'Add a caption or text transcript to each of the %N_F @embed@ elements without captions or transcripts.',
      MANUAL_CHECK_S:  'Check if the @embed@ element is audio only content.  If it is audio only make sure it has either a caption or text transcript of the audio content.',
      MANUAL_CHECK_P:  'Check if any of the %N_MC @embed@ elements are audio only. If any are audio only make sure they have either a caption or text transcript of the audio.',
      HIDDEN_S:        'The @embed@ element that is hidden was not analyzed for accessible audio.',
      HIDDEN_P:        'The %N_H @embed@ elements that are hidden were not analyzed for accessibile audio.',
      NOT_APPLICABLE:  'No @embed@ elements found on this page'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_PASS_1:   '@embed@ element references text transcript.',
      ELEMENT_FAIL_1:   'Add captions or text transcript to @embed@ element.',
      ELEMENT_MC_1:     'Verify the @embed@ element has synchronous captions.',
      ELEMENT_MC_2:     'Verify the @embed@ element only renders audio only, if it is audio only verify that it has captions or text transcript.',
      ELEMENT_HIDDEN_1: 'The @object@ element is hidden and was not evaluated.'
    },
    PURPOSES: [
      'Captions and text transcripts provide a means for people cannot hear the audio to understand the audio content.',
      'Some types of learning disabilities affect speech perception, captions and text transcripts provide an alternative way to understand the audio content.',
      'When the language of the audio is different than the native language of the listener, captions and text transcripts support the listener in understanding the audio content.'
    ],
    TECHNIQUES: [
      'Use the @audio@ element instead of the @embed@ element for audio only content, since the @audio@ element provides better support for captions and text transcripts.',
      'Use @aria-describedby@ attribute to point to a text description of the audio only content.'
    ],
    MANUAL_CHECKS: [
      'Check the web page for a link to a text transcript of the audio, or if the transcript is part of the page rendering the audio.',
      'Check the media player for a button to turn on and off captions',
      'When captions are enabled on the media player, check to make sure the captions visible and represent the speech and sounds heard on the audio.',
      'In some cases "open" captions might be used, this means the captions are always "on" as part of the video.'
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.TECHNIQUE,
        title: 'W3C: Making Audio and Video Media Accessible',
        url:   'https://www.w3.org/WAI/media/av/'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'HMTL: The embed element',
        url:   'https://html.spec.whatwg.org/multipage/iframe-embed-object.html#the-embed-element'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (ARIA) 1.2: aria-describedby',
        url:   'https://www.w3.org/TR/wai-aria/#aria-describedby'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'University of Washington: Creating Accessible Videos',
        url:   'https://www.washington.edu/accessibility/videos/'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
        url:   'https://webaim.org/techniques/captions/'
      }
    ]
  },
  AUDIO_4: {
    ID:                    'Audio 4',
    DEFINITION:            'Media content with audio that automatically starts playing when the page loads and lasts longer than 3 seconds must provide a means for the user able to stop, pause or mute the audio content.',
    SUMMARY:               'Pause, stop or mute audio',
    TARGET_RESOURCES_DESC: 'Content that is used to auto play media that includes audio content',
    RULE_RESULT_MESSAGES: {
      MANUAL_CHECK_S:     'Verify that there is no media content that plays automatically and includes audio content that lasts longer than 3 seconds.  If the audio content lasts longer than 3 seconds, verify the user can pause, stop or mute the audio.',
      MANUAL_CHECK_P:     'Verify that there is no media content that plays automatically and includes audio content that lasts longer than 3 seconds.  If the audio content lasts longer than 3 seconds, verify the user can pause, stop or mute the audio.'
    },
    BASE_RESULT_MESSAGES: {
      PAGE_MC_1:   'Verify that there is no media content that plays automatically and includes audio content that lasts longer than 3 seconds.  If the audio content lasts longer than 3 seconds, verify the user can pause, stop or mute the audio.'
    },
    PURPOSES:        [ 'Audio content interferes with people using speech based assistive technologies like screen readers.'
                    ],
    TECHNIQUES:     [ 'Remove or disable the auto playing of media that includes audio content.',
                      'Provide a means to pause, stop or mute the audio content.',
                      'Use cookies to preserve the user preference of pausing, stopping or muting the audio content.'
                    ],
    MANUAL_CHECKS:  [ 'Verify that there is no media content that plays automatically and includes audio content that lasts longer than 3 seconds.  If the audio content lasts longer than 3 seconds, verify the user can pause, stop or mute the audio.'
                    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.TECHNIQUE,
        title: 'W3C: Making Audio and Video Media Accessible',
        url:   'https://www.w3.org/WAI/media/av/'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'WCAG 2.1 Success Criterion 1.4.2 Audio Control',
        url:   'https://www.w3.org/TR/WCAG21/#audio-control'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'How to meet Success Criterion 1.4.2 Audio Control',
        url:   'https://www.w3.org/WAI/WCAG21/quickref/#audio-control'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'University of Washington: Creating Accessible Videos',
        url:   'https://www.washington.edu/accessibility/videos/'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
        url:   'https://webaim.org/techniques/captions/'
      }
    ]
  }
};

/* authorizationRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const authorizationRules$1 = {
  AUTHORIZATION_1: {
        ID:                    'Authorization 1',
        DEFINITION:            'A cognitive function test (such as remembering a password or solving a puzzle) is not required for any step in an authentication process unless that step provides at least one of four ways of completing the test.',
        SUMMARY:               'Accessible Authorization (Minimum) ',
        TARGET_RESOURCES_DESC: 'Page',
        RULE_RESULT_MESSAGES: {
          MANUAL_CHECK_S:  'The evaluation cannot automatically verfiy if the page does not require remembering a password or solving a puzzle to login to an online resource. Verify the form controls on this page are for authentication, if they are make sure the authorization requirements are met.'
        },
        BASE_RESULT_MESSAGES: {
          PAGE_MC_1: 'Verify the form controls on this page are for authentication, if they are make sure the authorization requirements are met.'
        },
        PURPOSES: [
          'People with cognitive issues relating to memory, reading (for example, dyslexia), numbers (for example, dyscalculia), or perception-processing limitations will be able to authenticate irrespective of the level of their cognitive abilities.'
        ],
        TECHNIQUES: [
          'Email link authentication',
          'Providing properly marked up email and password inputs',
          'Providing WebAuthn as an alternative to username/password',
          'Providing a 3rd party login using OAuth',
          'Using two techniques to provide 2 factor authentication'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type:  REFERENCES.SPECIFICATION,
            title: 'W3C WCAG: Understanding Accessible Authentication (Minimum)',
            url:   'https://www.w3.org/WAI/WCAG22/Understanding/accessible-authentication-minimum.html'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'G218: Email link authentication',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/general/G218'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'H100: Providing properly marked up email and password inputs',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/html/H100'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'F109: Failure of Success Criterion 3.3.8 and 3.3.9 due to preventing password or code re-entry in the same format',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/failures/F109'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'OAuth 2.0 Specficiation',
            url:   'https://oauth.net/'
          }
        ]
  }
};

/* bypassRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const bypassRules$1 = {
  BYPASS_1: {
        ID:                    'Bypass 1',
        DEFINITION:            'Provide a keyboard-supported means of bypassing blocks of content, such as navigation menus and page headers, to get to the main content of the page.',
        SUMMARY:               'Skip to main content link',
        TARGET_RESOURCES_DESC: '@a@ and @a[button]@',
        RULE_RESULT_MESSAGES: {
          FAIL_S :         'Provide a valid target for the "skip to main content" link.',
          FAIL_P :         'Provide a valid target for the "skip to main content" link.',
          MANUAL_CHECK_S:  'Verify that the first link on the page is a "skip to main content" link and that the target of the skip link is a focusable element and is at the start of the main content.',
          MANUAL_CHECK_P:  'Verify that the first link on the page is a "skip to main content" link and that the target of the skip link is a focusable element and is at the start of the main content.',
          HIDDEN_S:        'One link that is hidden was not evaluated.',
          HIDDEN_P:        '%N_H links that are hidden were not evaluated.'
        },
        BASE_RESULT_MESSAGES: {
          ELEMENT_PASS_1:   '"SkipTo" menu button provides navigation to main and navigation landmarks and headings on the page.',
          ELEMENT_PASS_2:   'Link references a target on the page; verify that the target is the first focusable element on the page.',
          ELEMENT_MC_1:     'Target of link; verify that it is at the start of the main content of the page and is focusable.',
          ELEMENT_FAIL_1:   'Link does not reference a valid target on the page.',
          PAGE_PASS_1:      'Page includes "SkipTo" page script that provides a means of skipping to the structural landmarks and headings of the page.',
          PAGE_PASS_2:      'Page includes "SkipTo" link that provides a means of skipping to the main content of the page.',
          PAGE_FAIL_1:      'Link does not reference a valid target on the page.',
          PAGE_MC_1:        'Verify that that the target of the "skip to main content" link is focusable.',
          PAGE_MC_2:        'Verify that the page provides a link or other means of skipping to the main content of the page.'
        },
        PURPOSES: [
          'Most pages of websites typically have navigation menus, page headers and other repeated content before the main content of the page.',
          'For keyboard-only and screen reader users, a link or other means of skipping these types of content blocks makes it easy to go directly to the main content of the page, without first having to tab through the repeated content.'
        ],
        TECHNIQUES: [
          'Make the first link on the page an internal link that references a valid target element at the beginning of the main content of the page.',
          'The @id@ attribute is preferred method to identify the target element for the "Skip to main content" link.',
          'To make any target element focusable, add @tabindex="-1"@ to the element. If the target is an @a@ element, adding @tabindex="-1"@ will remove it from the tab order.',
          'If you use an @h1[id="main"]@ element as the target of the "Skip to main content" link, most screen readers will read the heading level and content when the user activates the skip to link.',
          'The "SkipTo" script automates the skip feature by providing a dynamically generated landmark regions and headings (H1-H2) based on the structural content of the page.'
        ],
        MANUAL_CHECKS: [
          'Using only the keyboard, use the link or "SkipTo" menu to move focus to the main content of the page.',
          'After moving focus to the main content, the next tab should move you to the first link, form control or other interactive element after the main content.'
        ],
        INFORMATIONAL_LINKS: [
          { type:  REFERENCES.SPECIFICATION,
            title: 'WAI-ARIA Authoring Practices: Developing a Keyboard Interface',
            url:   'https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'SkipTo Page Script',
            url:   'https://github.com/skipto-landmarks-headings/page-script-5/blob/main/README.md'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'WebAIM: Skip Navigation Links',
            url:   'https://webaim.org/techniques/skipnav/'
          }

        ]
  }
};

/* colorRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const colorRules$1 = {
  COLOR_1: {
      ID:                    'Color 1',
      DEFINITION:            'Text content must exceed minimum Color Contrast Ratio (CCR) of 3 for large and/or bolded text and 4.5 for any other size or style of text.',
      SUMMARY:               'Color contrast of text: Minimum',
      TARGET_RESOURCES_DESC: 'Text content',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Change the foreground and background colors of the text element to meet the CCR threshold.',
        FAIL_P:   'Change the foreground and background colors of the %N_F text elements to meet the CCR threshold.',
        MANUAL_CHECK_S:     'One element requires manual checking for CCR threshold to the use of a background image.',
        MANUAL_CHECK_P:     '%N_MC elements require manual checking for CCR threshold to the use of background images.',
        HIDDEN_S: 'The element with text content that is hidden was not analyzed for color contrast accessibility.',
        HIDDEN_P: 'The %N_H elements with text content that are hidden were not analyzed for color contrast accessibility.',
        NOT_APPLICABLE:  'No visible text content on this page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   'CCR of %1 meets or exceeds 4.5.',
        ELEMENT_PASS_2:   'CCR of %1 meets or exceeds 3 for large or bolded text.',
        ELEMENT_FAIL_1:   'CCR of %1, adjust foreground and background colors to meets or exceeds 4.5.',
        ELEMENT_FAIL_2:   'CCR of %1 for large or bolded text, adjust foreground and background colors to meet or exceed 3.',
        ELEMENT_MC_1:     'CCR of %1 is is equal to or greater than 4.5, but background image may reduce color contrast.',
        ELEMENT_MC_2:     'CCR of %1 is less than 4.5, but background image may improve color contrast.',
        ELEMENT_MC_3:     'CCR of %1 is equal to or greater than 3 for large or bolded text, but background image may reduce color contrast.',
        ELEMENT_MC_4:     'CCR of %1 is less than 3 for large and bolded text, but background image may improve color contrast.',
        ELEMENT_HIDDEN_1: 'CCR was not tested since the text is hidden from assistive technologies.'
      },
      PURPOSES:       [ 'The higher the color contrast of text the more easy it is to read, especially for people with visual impairments.'
                      ],
      TECHNIQUES:     [ 'Change the foreground color to a more complementary color to the background color.',
                        'Change the background color to a more complementary color to the foreground color.',
                        'Remove background images or verify they do not compromise color contrast requirements.'
                      ],
      MANUAL_CHECKS:  [ 'Use graphic editing tools to analyze the color(s) of the background image and then recacluate the CCR with the range of colors in the background image.',
                        'Verify the range of colors that could be part of the background of text is have a CCR > 4.5.'
      ],
      INFORMATIONAL_LINKS: [{ type:  REFERENCES.SPECIFICATION,
                         title: 'WCAG Success Criterion 1.4.3 Contrast (Minimum): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1, with exceptions',
                         url:   'https://www.w3.org/TR/WCAG/#contrast-minimum'
                       },
                       { type:  REFERENCES.WCAG_TECHNIQUE,
                         title: 'How to meet Success Criterion 1.4.3 Contrast (Minimum): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1, with exceptions',
                         url:   'https://www.w3.org/WAI/WCAG21/quickref/#contrast-minimum'
                       },
                      { type:  REFERENCES.WCAG_TECHNIQUE,
                        title: 'G17: Ensuring that a contrast ratio of at least 7:1 exists between text (and images of text) and background behind the text',
                        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G17'
                      },
                      { type:  REFERENCES.WCAG_TECHNIQUE,
                        title: 'G18: Ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text',
                        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G18'
                      },
                      { type:  REFERENCES.WCAG_TECHNIQUE,
                        title: 'G148: Not specifying background color, not specifying text color, and not using technology features that change those default',
                        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G148'
                      },
                      { type:  REFERENCES.WCAG_TECHNIQUE,
                        title: 'G174: Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast',
                        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G174'
                      }
                      ]
  },
  COLOR_2: {
      ID:                    'Color 2',
      DEFINITION:            'Color must not be the only way to convey information on the page.',
      SUMMARY:               'Use of color',
      TARGET_RESOURCES_DESC: 'Any content on the page that refers to or is a specific color',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:     'Verify color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element on the page.'
      },
      BASE_RESULT_MESSAGES: {
        PAGE_MC_1: 'Verify color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element on the page.'
      },
      PURPOSES:       [ 'For people with color blindness and other forms of visual impairments will not be able to see colors or color differences.',
                        'This requirement also includes references to color of content on page to identify some type of information, there should be redundant labeling of the content, for example using text labels to also identify and refer to the information.'
                      ],
      TECHNIQUES:     [ 'Provide redundant text labels for content presented in color, it the color is presenting meaningful information.',
                        'Use background patterns to also identify information.'
                      ],
      MANUAL_CHECKS:  [ 'Verify the page does not use color alone to identify or refer to information on the page.'
                      ],
      INFORMATIONAL_LINKS: [{ type:  REFERENCES.SPECIFICATION,
                         title: 'WCAG 2.0 Success Criterion 1.4.1 Use of Color',
                         url:   'https://www.w3.org/TR/WCAG20/#visual-audio-contrast-without-color'
                       },
                       { type:  REFERENCES.WCAG_TECHNIQUE,
                         title: 'How to meet Success Criterion 1.4.1 Use of Color',
                         url:   'https://www.w3.org/WAI/WCAG20/quickref/#qr-visual-audio-contrast-without-color'
                       },
                      { type:  REFERENCES.WCAG_TECHNIQUE,
                        title: 'G14: Ensuring that information conveyed by color differences is also available in text',
                        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G14'
                      }
                      ]
  },
  COLOR_3: {
      ID:                    'Color 3',
      DEFINITION:            'Text content must exceed Color Contrast Ratio (CCR) of 4.5 for large and/or bolded text and 7 for any other size or style of text.',
      SUMMARY:               'Color contrast of text: Enhanced',
      TARGET_RESOURCES_DESC: 'All elements with text content',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Change the foreground and background colors of the text element to meet the CCR threshold.',
        FAIL_P:   'Change the foreground and background colors of the %N_F text elements to meet the CCR threshold.',
        MANUAL_CHECK_S:     'One element requires manual checking for CCR threshold to the use of a background image.',
        MANUAL_CHECK_P:     '%N_MC elements require manual checking for CCR thrshold to the use of background images.',
        HIDDEN_S: 'The element with text content that is hidden was not analyzed for color contrast accessibility.',
        HIDDEN_P: 'The %N_H elements with text content that are hidden were not analyzed for color contrast accessibility.',
        NOT_APPLICABLE:  'No visible text content on this page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   'CCR of %1 meets or exceeds 7.',
        ELEMENT_PASS_2:   'CCR of %1 meets or exceeds 4.5 for large or bolded text.',
        ELEMENT_FAIL_1:   'CCR of %1, adjust foreground and background colors to meet or exceed 7.',
        ELEMENT_FAIL_2:   'CCR of %1 for large or bolded text, adjust foreground and background colors to meet or exceed 4.5.',
        ELEMENT_MC_1:     'CCR of %1 is equal to or greater than 7, but background image may reduce color contrast.',
        ELEMENT_MC_2:     'CCR of %1 is less than 7, but background image may improve color contrast.',
        ELEMENT_MC_3:     'CCR of %1 is equal to or greater than 4.5 for large or bolded text, but background image may reduce color contrast.',
        ELEMENT_MC_4:     'CCR of %1 is less than 4.5 for large and bolded text, but background image may improve color contrast.',
        ELEMENT_HIDDEN_1: 'CCR was not tested since the text is hidden from assistive technologies.'
      },
      PURPOSES:       [ 'The higher the color contrast of text the more easy it is to read, especially for people with visual impairments.'
                      ],
      TECHNIQUES:     [ 'Change the foreground color to a more complementary color to the background color.',
                        'Change the background color to a more complementary color to the foreground color.',
                        'Remove background images or verify they do not compromise color contrast requirements.'
                      ],
      MANUAL_CHECKS:  [ 'Use graphic editing tools to analyze the color(s) of the background image and then recacluate the CCR with the range of colors in the background image.',
                        'Verify the range of colors that could be part of the background of text is have a CCR >= 7.'
      ],
      INFORMATIONAL_LINKS: [{ type:  REFERENCES.SPECIFICATION,
                         title: 'WCAG 2.0 Success Criterion 1.4.6 Contrast (Enhanced): The visual presentation of text and images of text has a contrast ratio of at least 7:1, with exceptions',
                         url:   'https://www.w3.org/TR/WCAG/#contrast-enhanced'
                       },
                       { type:  REFERENCES.WCAG_TECHNIQUE,
                         title: 'How to meet Success Criterion 1.4.6 Contrast (Minimum): The visual presentation of text and images of text has a contrast ratio of at least 7:1, with exceptions',
                         url:   'https://www.w3.org/WAI/WCAG21/quickref/#contrast-enhanced'
                       },
                      { type:  REFERENCES.WCAG_TECHNIQUE,
                        title: 'G17: Ensuring that a contrast ratio of at least 7:1 exists between text (and images of text) and background behind the text',
                        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G17'
                      },
                      { type:  REFERENCES.WCAG_TECHNIQUE,
                        title: 'G18: Ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text',
                        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G18'
                      },
                      { type:  REFERENCES.WCAG_TECHNIQUE,
                        title: 'G148: Not specifying background color, not specifying text color, and not using technology features that change those default',
                        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G148'
                      },
                      { type:  REFERENCES.WCAG_TECHNIQUE,
                        title: 'G174: Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast',
                        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G174'
                      }
                      ]
  },
  COLOR_4: {
      ID:                    'Color 4',
      DEFINITION:            'Color contrast of non-text content in user interface controls.',
      SUMMARY:               'Color contrast of user interface controls',
      TARGET_RESOURCES_DESC: 'User interface controls',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:     'Verify the non-text content of an interactive element (e.g. icons for indicating state) has a contrast ratio of at least 3:1 against adjacent color(s).',
        MANUAL_CHECK_P:     'Verify the non-text content of an interactive element (e.g. icons for indicating state) have a contrast ratio of at least 3:1 against adjacent color(s).',
        HIDDEN_S: 'The interactive element with non-text content that is hidden was not analyzed for color contrast accessibility.',
        HIDDEN_P: 'The %N_H interactive elements with non-text content that are hidden were not analyzed for color contrast accessibility.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_MC_1: 'Verify color of non-text content (e.g. icons for indicating state) of the @%1@ element has a contrast ratio of at least 3:1 against adjacent color(s).',
        ELEMENT_HIDDEN_1: 'The @%1@ element was not tested since it is not visible in the graphical rendering.'

      },
      PURPOSES:       [ 'For people with color blindness and other forms of visual impairments will not be able to see colors or color differences.'
                      ],
      TECHNIQUES:     [ 'Identify each user-interface component (link, button, form control) on the page',
                        'Identify the visual (non-text) indicators of the component that are required to identify that a control exists, and indicate the current state.',
                        'Test the visual indicator contrast in each state.'
                      ],
      MANUAL_CHECKS:  [
                      ],
      INFORMATIONAL_LINKS: [
                      { type:  REFERENCES.SPECIFICATION,
                        title: 'Understanding SC 1.4.11: Non-text Contrast',
                        url:   'https://www.w3.org/WAI/WCAG21/Understanding/non-text-contrast.html'
                       },
                       { type:  REFERENCES.WCAG_TECHNIQUE,
                         title: 'G195: Using an author-supplied, visible focus indicator',
                         url: 'https://www.w3.org/WAI/WCAG21/Techniques/general/G195'
                       },
                       { type:  REFERENCES.WCAG_TECHNIQUE,
                         title: 'G174: Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast',
                         url: 'https://www.w3.org/WAI/WCAG21/Techniques/general/G174'
                       }
                      ]
  },
  COLOR_5: {
      ID:                    'Color 5',
      DEFINITION:            'Color contrast of non-text content in graphical objects.',
      SUMMARY:               'Color contrast of graphics',
      TARGET_RESOURCES_DESC: 'Graphical objects',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:     'Verify the colors used in the graphic have a color contrast ratio of at least 3:1 against adjacent color(s).',
        MANUAL_CHECK_P:     'Verify the non-text content of the %N_MC graphics have a contrast ratio of at least 3:1 against adjacent color(s).',
        HIDDEN_S: 'The graphical object that is hidden was not evaluated for color contrast accessibility.',
        HIDDEN_P: 'The %N_H graphical objects that are hidden were not evaluated for color contrast accessibility.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_MC_1:     'Verify the colors used in the @%1@ image have sufficient contrast for the meaning of the image to be conveyed to users.',
        ELEMENT_HIDDEN_1: 'The @%1@ element was not tested since it is not visible in the graphical rendering.'
      },
      PURPOSES:       [ 'For people with color blindness and other forms of visual impairments will not be able to see colors or color differences in the grphic.'
                      ],
      TECHNIQUES:     [ 'Identify each graphic on the page that includes information required for understanding the content (i.e. excluding graphics which have visible text for the same information, or are decorative).',
                        'Check the contrast of the graphical object against its adjacent colors',
                        'If there are multiple colors and/or a gradient, choose the least contrasting area to test',
                        'If the least-contrasting area is less than 3:1, assume that area is invisible, and determine if the graphical object still understandable.',
                      ],
      MANUAL_CHECKS:  [
                      ],
      INFORMATIONAL_LINKS: [{ type:  REFERENCES.SPECIFICATION,
                         title: 'Understanding SC 1.4.11: Non-text Contrast',
                         url:   'https://www.w3.org/WAI/WCAG21/Understanding/non-text-contrast.html'
                       },
                       { type:  REFERENCES.WCAG_TECHNIQUE,
                         title: 'G207: Ensuring that a contrast ratio of 3:1 is provided for icons',
                         url: 'https://www.w3.org/WAI/WCAG21/Techniques/general/G207'
                       },
                       { type:  REFERENCES.WCAG_TECHNIQUE,
                         title: 'G209: Provide sufficient contrast at the boundaries between adjoining colors',
                         url: 'https://www.w3.org/WAI/WCAG21/Techniques/general/G209'
                       }
                      ]
  }
};

/* errorRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const errorRules$1 = {

  ERROR_1: {
      ID:                    'Error 1',
      DEFINITION:            'Form controls with invalid values must provide information to assisive technologies that the values are invalid.',
      SUMMARY:               'Using @aria-invalid@ to identify the validity of control values.',
      TARGET_RESOURCES_DESC: '@textarea@, @select@ and @input@ elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Change the value of @aria-invalid@ property to @true@, on form control that is invalid and @aria-invalid="false"@.',
        FAIL_P:   'Change the value of @aria-invalid@ property to @true@, on %N_F form controls that are invalid and @aria-invalid="false"@.',
        MANUAL_CHECK_S:     'If the form control can be validated make sure it indicates invalid values when invalid.',
        MANUAL_CHECK_P:     'If the %N_MC form controls can be validated make sure they indicates invalid values when invalid.',
        HIDDEN_S: 'The control element that is hidden does not need to be tested for indicating invalid values.',
        HIDDEN_P: 'The %N_H control elements that are hidden do not need to be tested for indicating invalid values.',
        NOT_APPLICABLE:  'No form controls on this page'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_FAIL_1:   '@%1@ is invalid (i.e. validity.valid property of the control is "false") change the value of "@aria-invalid@ attribute from @false@ to @true@.',
        ELEMENT_FAIL_2:   '@%1@ is valid (i.e. validity.valid property of the control is "true") change the value of "@aria-invalid@ attribute from @true@ to @false@.',
        ELEMENT_MC_1:     '@%1@ is invalid (i.e. validity.valid property of the control is "false"), verify the label contains information on the value being invalid or add the @aria-invalid="true"@ attribute to the control.',
        ELEMENT_MC_2:     '@%1@ is being tested for validity (i.e. @pattern@ attribute is present), verify the label contains information on the validity or add the @aria-invalid@ attribute to inidcate the state of validity of the control.',
        ELEMENT_MC_3:     'Verify if the @%1@ is being validated. If it is being validated verify it implements a technique to indicate the state of validity to assistive technologies.',
        ELEMENT_MC_4:     '@%1@ has set @aria-invalid@, verify the value represents the validity of the controls value.',
        ELEMENT_PASS_1:   '@%1@ is invalid (i.e. validity.valid property of the control is "false") and the "@aria-invalid=true@" has been set.',
        ELEMENT_PASS_2:   '@%1@ is valid (i.e. validity.valid property of the control is "true") and the "@aria-invalid=false@" has been set.',
        ELEMENT_HIDDEN_1: '%1 form control was not tested for indicating invalid values because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'Users must be able to identify form control values which are invalid in order to successfully correct the values and submit the form.'
      ],
      TECHNIQUES: [
        'Native HTML form controls have a support for many types of validity testing, these features should be used before using @aria-invalid@ attribute.',
        'For custom ARIA widgets or when native HTML form control validation is not sufficient, the @aria-invalid@ attribute can used to identify invalid values.',
        'Use @aria-invalid@ attribute to indicate the form control has an invalid value.',
        'Add the text "invalid" to the label of the form control, the text can be placed off screen using CSS.',
        'Add the image to the label.  The image should be visible indicating an invalid value with the alt text \'invalid\'.',
        'NOTE: Native form controls with with validity testing should avoid using @aria-valid@ property, if the @aria-invalid@ is used it must be synchronized with the browsers computed validity value.'
      ],
      MANUAL_CHECKS: [
        'Enter invalid values into form controls that are validated and activate the validation event (i.e. form submission, change of focus...).',
        'For the form controls with invalid values check to make sure the technique for indicating the invalid value is present.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @label@ element',
          url:   'https://html.spec.whatwg.org/#the-label-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: aria-invalid',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-invalid'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H44: Using label elements to associate text labels with form controls',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H44'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA21: Using Aria-invalid to Indicate An Error Field',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA21'
        }
      ]
  },
  ERROR_2: {
      ID:                    'Error 2',
      DEFINITION:            'If user input is required for a form control or custom widget the @required@ or @aria-required@ attribute must must used.',
      SUMMARY:               'Using @aria-required@ to identify required form controls and widgets',
      TARGET_RESOURCES_DESC: '@textarea@ and @input[type="text"]@ elements, and ARIA widgets',
      RULE_RESULT_MESSAGES: {
        FAIL_S:         'Update the form control with @aria-required="false"@ and the @required@ attributes to indicate the true required state of the control.',
        FAUL_P:         'Update the %N_F form controls with @aria-required="false"@ and the @required@ attributes to indicate the true required state of the control.',
        HIDDEN_S:       'The form control element that is hidden does not need to be tested for being required.',
        HIDDEN_P:       'The %N_H form control elements that are hidden do not need to be tested for being required.',
        NOT_APPLICABLE: 'No form controls on this page that need testing for being required.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_FAIL_1:   'The @%1@ element with the attribute @aria-required="false"@ which conflicts with presence of the @required@ attribute.',
        ELEMENT_PASS_1:   'The @%1@ element has the @required@ attribute.',
        ELEMENT_PASS_2:   'The @%1@ element has the @aria-required@ attribute.',
        ELEMENT_HIDDEN_1: 'The @%1@ element was not tested because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'Users benefit from information being informed if a input to a control is required for form submission or task completion.'
      ],
      TECHNIQUES: [
        'To identify a required form control, add the HTML5 @required@ attribute to the standard form controls.',
        'For custom ARIA widgets use the @aria-required@ attribute to identify widgets with required values to users.',
        'Use the @required@ attribute (or the @aria-required@ if used) as the CSS selector for visually styling the form control as required.  This ensures that the visual state stays synchronized with the accessibility API state used by assistive technologies.',
        'NOTE: Avoid using @aria-required@ attribute on elements that support the @required@ attribute, since the @required@ attribute value will override the @aria-required@ value.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: required attribute',
          url:   'https://www.w3.org/TR/html5/forms.html#attr-input-required'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: aria-required',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-required'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA2: Identifying a required field with the aria-required property',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA2'
        }
      ]
  },
  ERROR_3: {
      ID:                    'Error 3',
      DEFINITION:            'When input error is automatically detected and suggestions are automatically known, the suggestions must be provided to the user (some exceptions).',
      SUMMARY:               'Error correction suggestions',
      TARGET_RESOURCES_DESC: '@textarea@ and @input[type="text"]@ elements, and ARIA textbox, gridcell and combobox widgets',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S: 'If the form control element or widget can automatically detect errors and suggest corrections, make sure that at least one accessible technique is used to present the suggestion to the user.',
        MANUAL_CHECK_P: 'If the %N_MC form control elements and/or widgets can automatically detect errors and suggest corrections, make sure that at least one accessible technique is used to present the suggestion to the user.',
        HIDDEN_S:       'The form control element and/or widget that is hidden does not need to be tested for accessible suggestions.',
        HIDDEN_P:       'The %N_H form control elements and/or widgets that are hidden does not need to be tested for accessible suggestions.',
        NOT_APPLICABLE: 'No form controls or widgets on this page that typically can provide suggestions.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_MC_1:     'If the @%1@ element can automatically detect errors and suggest corrections, use at least one accessible technique to provide the information to users.',
        ELEMENT_HIDDEN_1: 'The @%1@ element was not tested because it is hidden from assistive technologies.',
      },
      PURPOSES: [
        'Users benefit from being informed of invalid input and on how to correct invalid input.'
      ],
      TECHNIQUES: [
        'Add @aria-describedby@ reference on the form control or widget to reference suggestion information.',
        'Use a popup list to provide suggested values for valid input.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @label@ element',
          url:   'https://html.spec.whatwg.org/#the-label-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: aria-invalid',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-invalid'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H44: Using label elements to associate text labels with form controls',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H44'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA1: Using the aria-describedby property to provide a descriptive label for user interface controls',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA1'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA19: Using ARIA role=alert or Live Regions to Identify Errors',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA19'
        }             ]
  },
  ERROR_4: {
      ID:                    'Error 4',
      DEFINITION:            'To prevent errors when input includes legal and/or financial transactions (e.g. online shopping, banking), the user must be able to either reverse, check or confirm the data before the transaction is finalized.',
      SUMMARY:               'Prevent errors',
      TARGET_RESOURCES_DESC: 'Forms that contain legal or financial transactions including online purchases',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S: 'If the form control or widget on this page are used for legal and/or financial transactions, make sure the actions are either reversible or requires the user to confirm the information before the transaction is finalized.',
        MANUAL_CHECK_P: 'If the %N_MC form controls and widgets on this page are used for legal and/or financial transactions, make sure the actions are either reversible or requires the user to confirm the information before the transaction is finalized.',
        HIDDEN_S:       'The form control element and/or widget that is hidden does not need to be tested for accessible suggestions.',
        HIDDEN_P:       'The %N_H form control elements and/or widgets that are hidden does not need to be tested for accessible suggestions.',
        NOT_APPLICABLE: 'No form controls or widgets on this page that typically can provide suggestions.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_MC_1:     'If the form control or widget is used as part of a legal and/or financial transaction, make sure the information this control provides can be changed and/or confirmed before the transaction is finalized.',
        PAGE_MC_1:        'If form controls and widgets on this page are used for legal and/or financial transactions, make sure the actions are either reversible or requires the user to confirm the information before the transaction is finalized.',
        ELEMENT_HIDDEN_1: 'The form control or widget was not tested because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'The intent of this rule is to help users with disabilities avoid serious consequences as the result of a mistake when performing an action that cannot be reversed. For example, purchasing non-refundable airline tickets or submitting an order to purchase stock in a brokerage account are financial transactions with serious consequences.'
      ],
      TECHNIQUES: [
        'Provide a confirmation page showing all the user inputs before for final submission of the information for modification of user controlled data on a server.',
        'Provide a means for the user to review previous submissions and give them the ability to cancel or modify previous submissions of legal or financial information.',
        'Use a confirmation checkbox in addition to the submit button, to require the user to confirm the data is valid before submission.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'Understanding SC 3.3.4 Error Prevention (Legal, Financial, Data.)',
          url:   'https://www.w3.org/TR/UNDERSTANDING-WCAG20/minimize-error-reversible.html'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G164: Providing a stated time within which an online request (or transaction) may be amended or canceled by the user after making the request.',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G164'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G98: Providing the ability for the user to review and correct answers before submitting.',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G98'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G155: Providing a checkbox in addition to a submit button.',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G155'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G99: Providing the ability to recover deleted information.',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G99'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G168: Requesting confirmation to continue with selected action.',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G168'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G155: Providing a checkbox in addition to a submit button.',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G155'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G98: Providing the ability for the user to review and correct answers before submitting.',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G98'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: ' G168: Requesting confirmation to continue with selected action.',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G168'
        }
      ]
  }
};

/* frameRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const frameRules$1 = {

  FRAME_1: {
    ID:                    'Frame 1',
    DEFINITION:            '@frame@ element must have an accessible name to support screen reader navigation.',
    SUMMARY:               '@frame@ must have accessible name',
    TARGET_RESOURCES_DESC: '@frame@ elements',
    RULE_RESULT_MESSAGES: {
      FAIL_S:   'Add a @title@ attribute to the @frame@ element that describes the contents of the frame.',
      FAIL_P:   'Add a @title@ attribute to the %N_F @frame@ elements that describes the contents of the frame.',
      MANUAL_CHECK_S:  'Verify the @frame@ element with empty accessible name (e.g. @title=""@ attribute) does not contain visible content.',
      MANUAL_CHECK_M:  'Verify the %N_MC @frame@ elements with empty accessible names (e.g. @title=""@ attribute) do not contain visible content.',
      HIDDEN_S: 'The @frame@ element that is hidden was not evaluated.',
      HIDDEN_P: 'The %N_H @frame@ elements that are hidden were not evaluated.',
      NOT_APPLICABLE:  'No visible @frame@ elements on this page.'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_PASS_1:   '@frame@ element has the accessible name: %1.',
      ELEMENT_FAIL_1:   'Add a @title@ attribute to the @frame@ element describing the contents of the frame.',
      ELEMENT_MC_1:     'Verify the @frame@ element with empty accessible name (e.g. @title=""@) is not intended to be a frame navigation target.',
      ELEMENT_HIDDEN_1: '@frame@ element was not evaluated because it is hidden from assistive technologies.'
    },
    PURPOSES:        [ 'Screen readers provide a means to navigate web page content using @frame@ elements.',
                      'The accessible name of the @frame@ element (the @title@ attribute value) must describe the contents of the frame.',
                      'The accessible name helps users decide whether they want to navigate to a frame.'
                    ],
    TECHNIQUES:     [ 'Use the @title@ attribute to provide an accessible name for a @frame@ element.',
                      'Accessible names should be short and describe the contents of the @frame@ element to help users to decide whether to navigate to a @frame@.',
                      'For @frame@s with no visible content, explicitly identify the @frame@ as having no information for the user (e.g. @title="No content"@).'
                    ],
    MANUAL_CHECKS:  [ 'View the accessible names of the frames in the document to verify that they help users identify the contents of each frame.'
    ],
    INFORMATIONAL_LINKS: [
                     { type:  REFERENCES.SPECIFICATION,
                       title: 'WCAG 2.0 Success Criterion 2.4.1 Bypass Blocks: A mechanism is available to bypass blocks of content that are repeated on multiple Web pages',
                       url:   'https://www.w3.org/TR/WCAG20/#navigation-mechanisms-skip'
                     },
                     { type:  REFERENCES.WCAG_TECHNIQUE,
                       title: 'H64: Using the title attribute of the frame and iframe elements',
                       url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H64.html'
                     }
                    ]
  },

  FRAME_2: {
    ID:                    'Frame 2',
    DEFINITION:            '@iframe@ element must have an accessible name to support screen reader navigation.',
    SUMMARY:               '@iframe@ must have accessible name',
    TARGET_RESOURCES_DESC: '@iframe@ elements',
    RULE_RESULT_MESSAGES: {
      FAIL_S:   'Add an accessible name to @iframe@ element that describes the contents of the frame.',
      FAIL_P:   'Add accessible names to %N_F @iframe@ elements that describe the contents of the frame.',
      MANUAL_CHECK_S:  'Verify the @iframe@ elements with empty accessible name (e.g. @title=""@ attribute) does not contain visible content.',
      MANUAL_CHECK_M:  'Verify the %N_MC @iframe@ elements with empty accessible names (e.g. @title=""@ attribute) do not contain visible content.',
      HIDDEN_S: 'The @iframe@ element that is hidden was not evaluated.',
      HIDDEN_P: 'The %N_H @iframe@ elements that are hidden were not evaluated.',
      NOT_APPLICABLE:  'No visible @iframe@ elements on this page.'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_PASS_1:   '@iframe@ element has accessible name.',
      ELEMENT_FAIL_1:   'Add an accessible name to the @iframe@ element describing the contents of the @iframe@.',
      ELEMENT_MC_1:     'Verify the @iframe@ element with empty accessible name (e.g. @title=""@) does not contain visible content.',
      ELEMENT_HIDDEN_1: '@iframe@ element was not evaluated because it is hidden from assistive technologies.'
    },
    PURPOSES:        [ 'Screen readers provide a means to navigate web page content using @iframe@ elements.',
                      'The accessible name of the @iframe@ element must describe the contents of the @iframe@.',
                      'The accessible name helps users to decide whether they want to navigate to a @iframe@.'
    ],
    TECHNIQUES:     [ 'Use the @title@ attribute to define an accessible name for an @iframe@ element.',
                      'Use the @aria-label@ attribute to define an accessible name for an @iframe@ element.',
                      'Use the @aria-labelledby@ attribute to define an accessible name for an @iframe@ element.',
                      'Accessible names should be short and describe the contents of the @iframe@ element to help users to decide whether to navigate to the @iframe@.',
                      'For @iframe@s with no visible content, explicitly identify the @iframe@ as having no information for the user (e.g. @title="No content"@).'
    ],
    MANUAL_CHECKS:  [ 'View the accessible names of the @iframe@s in the page to verify that they help users identify the contents of each frame.'
    ],
    INFORMATIONAL_LINKS: [
                    { type:  REFERENCES.SPECIFICATION,
                      title: 'WCAG 2.0 Success Criterion 2.4.1 Bypass Blocks: A mechanism is available to bypass blocks of content that are repeated on multiple Web pages',
                      url:   'https://www.w3.org/TR/WCAG20/#navigation-mechanisms-skip'
                    },
                    { type:  REFERENCES.WCAG_TECHNIQUE,
                      title: 'H64: Using the title attribute of the frame and iframe elements',
                      url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H64.html'
                    }
    ]
  }
};

/* controlRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const controlRules$1 = {
  CONTROL_1: {
      ID:         'Control 1',
      DEFINITION: 'Each @input@, @select@, @textarea@, @progress@, @meter@ and @output@ element must have an accessible name using @label@ elements.',
      SUMMARY:    'Form controls must have labels',
      TARGET_RESOURCES_DESC: '@input@, @select@, @textarea@, @progress@, @meter@ and @output@ elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Add a label to the form control element that is unlabelled.',
        FAIL_P:   'Add labels to the %N_F form control elements that are unlabelled.',
        NOT_APPLICABLE: 'No @input@, @select@, @textarea@, @progress@, @meter@ or @output@ elements on the page.',
        HIDDEN_S: 'One form control element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H form control elements that are hidden were not evaluated.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   '@%1@ control has the label: "%2"',
        ELEMENT_FAIL_1:   'Add label to @%1@ control.',
        ELEMENT_HIDDEN_1: '@%1@ control was not tested because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'A label associated with a form control ensures that information about the form control is spoken by screen readers when it receives focus.'
      ],
      TECHNIQUES: [
        'The preferred technique for labeling form controls is by reference: First, include an @id@ attribute on the form control to be labeled; then use the @label@ element with a @for@ attribute value that references the @id@ value of the control.',
        'NOTE: The alternative technique of using the @label@ element to encapsulate a the form control element does not fully support some assistve technologies, like speech input for activating the control.',
        'In special cases, the @aria-labelledby@ attribute can be used on the form control element to reference the id(s) of the elements on the page that describe its purpose.',
        'In special cases, the @aria-label@ attribute can be used on the form control element to provide an explicit text description of its purpose.',
        'In special cases, the @title@ attribute on the form control element can be used to provide an explicit text description of its purpose.'
      ],
      MANUAL_CHECKS: [
        'Good labels are both concise and descriptive of the control elements purpose.',
        'If control elements are arranged in groups, use @fieldset/legend@ elements@ to provide a grouping label.',
        'Consider using @aria-describedby@ to provide references to instructions or error information related to the form control.',
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @label@ element',
          url:   'https://html.spec.whatwg.org/multipage/forms.html#the-label-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-label@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-labelledby@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @title@ attribute',
          url:   'https://html.spec.whatwg.org/multipage/dom.html#the-title-attribute'
        },
        {type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'W3C WAI Accessibility Tutorials: Forms Concepts',
          url: 'https://www.w3.org/WAI/tutorials/forms/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H44: Using label elements to associate text labels with form controls',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H44'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H65: Using the title attribute to identify form controls when the label element cannot be used',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H65'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H71: Providing a description for groups of form controls using fieldset and legend elements',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H71'
        }
      ]
  },
  CONTROL_2: {
      ID:         'Control 2',
      DEFINITION: 'Every @input@ type @image@ element must have an @alt@ or @title@ attribute with content.',
      SUMMARY:    'Image button must have alt. content',
      TARGET_RESOURCES_DESC: '@input[type="image"]@ elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Add an @alt@ attribute to the @input[type="image"]@ element that does not have alt. content.',
        FAIL_P:   'Add an @alt@ attribute to the %N_F @input[type="image"]@ elements that do not have alt. content.',
        HIDDEN_S: 'The @input@ type @image@ element that is hidden was not evaluated.',
        HIDDEN_P: 'The %N_H @input@ type @image@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No @input[type="image"]@ elements on this page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1: 'Image button has an accessible name: %1',
        ELEMENT_FAIL_1: 'Add @alt@ attribute with text content.',
        ELEMENT_FAIL_2: 'Add text content to the @alt@ attribute.',
        ELEMENT_HIDDEN_1: 'Image button was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'Alternate content associated with an image-based form control ensures that information about the control is spoken by screen readers when it receives focus.'
      ],
      TECHNIQUES: [
        'The @alt@ attribute is the preferred and most commonly used way to provide an accessible label for @input@ type @image@ elements.',
        'In special cases, the @title@ attribute can be used on the @input@ type @image@ element to provide an explicit text description of its purpose.',
        'In special cases, the @aria-labelledby@ attribute can be used on the form control element to reference the id(s) of the elements on the page that describe its purpose.',
        'In special cases, the @aria-label@ attribute can be used on the form control element to provide an explicit text description of its purpose.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @input[type=image]@ element',
          url:   'https://html.spec.whatwg.org/#image-button-state-(type=image)'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-label@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-labelledby@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @title@ attribute',
          url:   'https://html.spec.whatwg.org/#attr-title'
        },
        {type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'W3C WAI Accessibility Tutorials: Forms Concepts',
          url: 'https://www.w3.org/WAI/tutorials/forms/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H36: Using alt attributes on images used as submit buttons',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H36'
        }
      ]
  },
  CONTROL_3: {
      ID:         'Control 3',
      DEFINITION: 'A related group of radio buttons must have a grouping label.',
      SUMMARY:    'Radio buttons must have grouping label',
      TARGET_RESOURCES_DESC: '@input[type="radio"]@ elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Add a @fieldset@ container with a @legend@ label for the @input[type="radio"]@ element NOT in a grouping container.',
        FAIL_P:   'Add a @fieldset@ container with a @legend@ label for each group of the %N_F @input[type="radio"]@ elements NOT in a grouping container.',
        HIDDEN_S: 'The @input[type="radio"]@ that is hidden was not evaluated.',
        HIDDEN_P: 'The %N_H @input[type="radio"]@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No @input[type="radio"]@ elements on this page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1: 'Radio button has grouping label "%1" from @fieldset/legend@ elements.',
        ELEMENT_PASS_2: 'Radio button has grouping label "%3x" from @%1[role=%2]@ element.',
        ELEMENT_FAIL_1: 'Add a @fieldset@ element with a @legend@ element to provide a grouping label for the radio buttons.',
        ELEMENT_FAIL_2: 'The @fieldset@ element has a missing or empty @legend@ element.',
        ELEMENT_FAIL_3: 'The @%1[role=%2]@ grouping element does not have an accessible name.',
        ELEMENT_HIDDEN_1: 'Radio button was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'Radio buttons that provide a set of related options need grouping information and a common grouping label to provide the overall context for those options.',
        'Screen readers treat grouping labels differently than standard labels, typically speaking the grouping label only once when focus is first moved to one the groups controls.'
      ],
      TECHNIQUES: [
        'The @fieldset@/@legend@ element combination is the preferred technique for providing a grouping information and label for a related group of radio buttons.',
        'If the @fieldset@/@legend@ technique cannot be used, use @[role=group]@ on a container element that contains the related radio buttons, and the container element must have an accessible name representing the grouping label.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @fieldset@ element',
          url:   'https://html.spec.whatwg.org/multipage/form-elements.html#the-fieldset-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @legend@ element',
          url:   'https://html.spec.whatwg.org/multipage/form-elements.html#the-legend-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @group@ role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/roles#group'
        },
        {type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'W3C WAI Accessibility Tutorials: Forms Concepts',
          url: 'https://www.w3.org/WAI/tutorials/forms/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H71: Providing a description for groups of form controls using fieldset and legend elements',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H71'
        },
        { type:  REFERENCES.EXAMPLE,
          title: 'IBM Web checklist: HTML example 6',
          url:   'https://www-03.ibm.com/able/guidelines/web/webstructure.html'
        }
      ]
  },
  CONTROL_4: {
      ID:         'Control 4',
      DEFINITION: '@button@ elements should have visible text content.',
      SUMMARY:    '@button@s should have text content',
      TARGET_RESOURCES_DESC: '@button@ elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Use text content to define the visible label of the element with @role=button@.',
        FAIL_P:   'Use text content to define the visible labels of the %N_F elements with @role=button@.',
        MANUAL_CHECK_S: 'Verify the visual rendering of the SVG content of the element with @role=button@ adapts to operating system and browser color and size settings.',
        MANUAL_CHECK_P: 'Verify the visual rendering of the SVG content of the %N_MC elements with @role=button@ adapt to operating system and browser color and size settings.',
        HIDDEN_S: 'The @button@ that is hidden was not evaluated.',
        HIDDEN_P: 'The %N_H @button@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE:  'No @button@ elements on this page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1: 'The @input[type=%1]@ uses the @value@ attribute to define the graphically rendered label.',
        ELEMENT_FAIL_1: 'Use the @value@ attribute of the @input[type=%1]@ element to define the graphically rendered label.',
        ELEMENT_HIDDEN_1: '@input[type=%1]@ element was not evaluated because it is hidden from the graphical rendering.',
        ELEMENT_PASS_2: '@button@ element uses the text content for the graphically rendered label.',
        ELEMENT_FAIL_2: 'Use text content to define the graphically rendered label for the @button@ element.',
        ELEMENT_MC_2:   'Verify the SVG content of the @button@ element adapts to operating system and browser color preference settings.',
        ELEMENT_HIDDEN_2: '@button@ element was not evaluated because it is hidden from graphical rendering.',
        ELEMENT_PASS_3: 'The @%1[role=button]@ element uses text content for the graphically rendered label.',
        ELEMENT_FAIL_3: 'Use text content to define the graphically rendered label for the @%1[role=button]@ element.',
        ELEMENT_FAIL_4: 'Change the @input[type=image]@ to a button that can use text content for the visual label.',
        ELEMENT_MC_3:   'Verify the SVG content of the @%1[role=button]@ element adapts to operating system and browser color preference settings.',
        ELEMENT_HIDDEN_3: '@%1[role=button]@ element was not evaluated because it is hidden from graphical rendering.'
      },
      PURPOSES: [
        'The use of rendered text supports people with visual impairments and learning disabilities to use operating system and browser settings to adjust size and color to make it esaier to perceive the purpose of the button.',
        'The use of text content as the accessible name insures that the visible name and the accessible name are the same, reducing the chance the accessible name not describing the purpose of the button.'
      ],
      TECHNIQUES: [
        'The accessible name of a @button@ element or an element with @role=button@ by default is its text content.',
        'The accessible name of a @input[type=button]@ element is the @value@ attribute content.',
        'SVG graphics can be used to create content (e.g. icons) that can adapt to operating system and browser settings for color and size, but requires manual testing to insure content adapts to user preferences.',
        'Do not use @input[type=image]@ elements, instead use other botton elements that support text content for the visual label.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @button@ element',
          url:   'https://html.spec.whatwg.org/multipage/form-elements.html#the-button-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @input[type=button]@ element',
          url:   'https://html.spec.whatwg.org/multipage/input.html#button-state-(type=button)'
        },
        {type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'W3C WAI Accessibility Tutorials: Forms Concepts',
          url: 'https://www.w3.org/WAI/tutorials/forms/'
        }
      ]
  },
  CONTROL_5: {
      ID:         'Control 5',
      DEFINITION: 'All @id@ attribute values must be unique on the page.',
      SUMMARY:               '@id@ must be unique',
      TARGET_RESOURCES_DESC: 'Form control elements with @id@ attributes',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Update elements with @id@ attributes so that each attribute value is unique.',
        FAIL_P:   'Update elements with @id@ attributes so that each attribute value is unique.',
        NOT_APPLICABLE:  'No elements or only one element with an @id@ attribute on this page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1: '\'%1\' @id@ attribute value is unique.',
        ELEMENT_FAIL_1: '@%1@ element shares the \'%2\' @id@ value with another element on the page, update the elements to make the @id@s unique.',
        ELEMENT_FAIL_2: 'The hidden @%1@ element shares the \'%2\' @id@ value with another element on the page, update the elements to make the @id@s unique.',
      },
      PURPOSES: [
        '@id@ attribute values on form control elements can be used as references by @label@ elements. When @id@ attribute values on the page are not unique, form controls may be incorrectly labelled.',
        '@aria-labelledby@ and @aria-describedby@ atributes also depend on unique @id@ values for labeling and adding descriptions to form controls.'
      ],
      TECHNIQUES: [
        'If a form control defines an @id@ attribute, ensure that its value is unique on the page.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: @id@ attribute',
          url:   'https://dom.spec.whatwg.org/#concept-id'
        },
        {type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'W3C WAI Accessibility Tutorials: Forms Concepts',
          url: 'https://www.w3.org/WAI/tutorials/forms/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'F77: Failure of Success Criterion 4.1.1 due to duplicate values of type ID',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F77'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H88: Using HTML according to spec',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H88'
        }
      ]
  },
  CONTROL_6: {
      ID:         'Control 6',
      DEFINITION: 'Each @label@ element using the @for@ attribute must reference a form control on the page.',
      SUMMARY:    '@label@ must reference control',
      TARGET_RESOURCES_DESC: '@label@ elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Change the @label@ element to use the @for@ attribute to label its form control.',
        FAIL_P:   'Change the %N_F @label@ elements to use the @for@ attribute to label their respective form controls.',
        MANUAL_CHECK_S: 'There is one form control being labeled by more than one labeling technique.',
        MANUAL_CHECK_P: 'There are %N_MC form controls being labeled by more than one labeling technique.',
        HIDDEN_S: 'The @label@ element that is hidden was not evaluated.',
        HIDDEN_P: 'The %N_H @label@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No visible @label@ elements with invalid @for@ references on this page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1: '@label[for=%1]@ references a form control.',
        ELEMENT_FAIL_1: 'Change the @label@ element with the @for@ attribute value \'%1\' to reference a form control.',
        ELEMENT_MC_1:   'The @label[for=%1]@ is being ingored as a label because the form control is being labeled with @aria-labelledby@ or @aria-label@ attribute.',
        ELEMENT_HIDDEN_1: 'The @label@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        '@label@ elements are useful for accessibility only when they reference form controls.  The use of labels increase the effective size for activation of the control and provide a speak-able label for speech input activation.'
      ],
      TECHNIQUES: [
        'For a @label@ element to properly reference a form control, ensure that the @for@ attribute value on the @label@ element exactly matches the @id@ attribute value on the form control.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @label@ element @for@ attribute',
          url:   'https://html.spec.whatwg.org/#attr-label-for'
        },
        {type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'W3C WAI Accessibility Tutorials: Forms Concepts',
          url: 'https://www.w3.org/WAI/tutorials/forms/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H44: Using label elements to associate text labels with form controls',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H44'
        }
      ]
  },
  CONTROL_7: {
      ID:         'Control 7',
      DEFINITION: 'Every @label@ and @legend@ element must contain text content.',
      SUMMARY:    '@label@ must have content',
      TARGET_RESOURCES_DESC: '@label@ and @legend@ elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Use text content in @label@ or @legend@ element for the visual rendering to adapt to operating system and browser color and size settings.',
        FAIL_P:   'Use text content in %N_F @label@ or @legend@ elements for the visual rendering to adapt to operating system and browser color and size settings.',
        MANUAL_CHECK_S: 'Verify the visual rendering of the SVG content of the @label@ or @legend@ element adapts to operating system and browser color and size settings.',
        MANUAL_CHECK_P: 'Verify the visual rendering of the SVG content of the %N_MC @label@ or @legend@ elements adapt to operating system and browser color and size settings.',
        HIDDEN_S: 'The @label@ or @legend@ element that is hidden was not evaluated.',
        HIDDEN_P: 'The %N_H @label@ or @legend@  elements that are hidden were not evaluated.',
        NOT_APPLICABLE:  'No @label@ or @legend@  elements on this page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1: '@%1@ element uses the text content for the graphically rendered label.',
        ELEMENT_FAIL_1: 'Use text content to define the graphically rendered content for the @%1@ element.',
        ELEMENT_MC_1:   'Verify the SVG content of the @%1@ element adapts to operating system and browser color preference settings.',
        ELEMENT_HIDDEN_1: '@%1@ element was not evaluated because it is hidden from graphical rendering.',
      },
      PURPOSES: [
        'The use of rendered text supports people with visual impairments and learning disabilities to use operating system and browser settings to adjust size and color to make it esaier to perceive the purpose of the button.',
        'The use of text content as the accessible name insures that the visible name and the accessible name are the same, reducing the chance the accessible name not describing the purpose of the button.'
      ],
      TECHNIQUES: [
        'The accessible name of a @label@ and @legend@ elements is its text content.',
        'SVG graphics can be used to create content (e.g. icons) that can adapt to operating system and browser settings for color and size, but requires manual testing to insure content adapts to user preferences.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @label@ element',
          url:   'https://html.spec.whatwg.org/dev/forms.html#the-label-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'MDN <label>: The Input Label element',
          url:   'https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @legend@ element',
          url:   'https://html.spec.whatwg.org/dev/form-elements.html#the-legend-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'MDN <legend>: The Field Set Legend element',
          url:   'https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend'
        },
        {type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'W3C WAI Accessibility Tutorials: Forms Concepts',
          url: 'https://www.w3.org/WAI/tutorials/forms/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H44: Using @label@ elements to associate text labels with form controls',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H44'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H88: Using HTML according to spec',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H88'
        }
      ]
  },
  CONTROL_8: {
      ID:         'Control 8',
      DEFINITION: 'Every @fieldset@ element must contain exactly one @legend@ element.',
      SUMMARY:    '@fieldset@ must have one @legend@',
      TARGET_RESOURCES_DESC: '@fieldset@ and @legend@ elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Update the @fieldset@ element such that it contains only one @legend@ element.',
        FAIL_P:   'Update %N_F @fieldset@ elements such that each contains only one @legend@ element.',
        HIDDEN_S: 'One @fieldset@ element that is hidden was not evaluated.',
        HIDDEN_P: 'The %N_H @fieldset@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No @fieldset@ elements on this page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1: '@fieldset@ has one @legend@ element.',
        ELEMENT_FAIL_1: 'Add @legend@ element.',
        ELEMENT_FAIL_2: '@legend@ element is hidden from assistive technologies. Use CSS off-screen positioning instead of CSS display or visibility properties to remove @legend@ from graphical rendering.',
        ELEMENT_FAIL_3: 'There are %1 @legend@ elements, update the code so the @feildset@ contains only one @legend@ element.',
        ELEMENT_HIDDEN_1: '@fieldset@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'Multiple @legend@ elements contained in the same @fieldset@ may result in the improper calculation of labels for assistive technologies.'
      ],
      TECHNIQUES: [
        'A @fieldset@ element should have one and only one @legend@ element to describe the purpose of the form controls it contains.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @fieldset@ element',
          url:   'https://html.spec.whatwg.org/dev/form-elements.html#the-fieldset-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @legend@ element',
          url:   'https://html.spec.whatwg.org/dev/form-elements.html#the-legend-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'MDN <legend>: The Field Set Legend element',
          url:   'https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend'
        },
        {type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'W3C WAI Accessibility Tutorials: Forms Concepts',
          url: 'https://www.w3.org/WAI/tutorials/forms/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H71: Providing a description for groups of form controls using fieldset and legend elements',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H71'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H88: Using HTML according to spec',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H88'
        }
      ]
  },
  CONTROL_9: {
      ID:         'Control 9',
      DEFINITION: 'Verify that the @title@ attribute content serves as an appropriate label for the form control, and not only as a tooltip.',
      SUMMARY:    'Verify @title@ is the label.',
      TARGET_RESOURCES_DESC: '@textarea@, @select@ and @input@ elements',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S: 'Verify that the @title@ attribute is an appropriate label for the form control, and that it is not being used only as a tooltip.',
        MANUAL_CHECK_P: 'Verify that the @title@ attribute is an appropriate label for each of the %N_F form controls, and that it is not being used only as a tooltip.',
        HIDDEN_S: 'The form control element that is hidden was not evaluated.',
        HIDDEN_P: 'The %N_H form control elements that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No @textarea@, @select@ or @input@ elements on this page with a @title@ attribute.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_MC_1:   'If possible use the @label@ element or an ARIA technique to label %1 form control instead of using the @title@ attribute.',
        ELEMENT_HIDDEN_1: '@%1@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'When the @title@ attribute is used for tooltips, it often uses more words than needed to label a form control for users of assistive technologies.',
        'Use @aria-label@ to provide a shorter label to users of assistive technologies if the @title@ attribute content is determined not to be an optimal label.'
      ],
      TECHNIQUES: [
        'The preferred technique for labeling form controls is to use the @label@ element and its @for@ attribute to reference the @id@ attribute value of the form control element.',
        'NOTE: The alternative technique of using the @label@ element to encapsulate a the form control element does not fully support some assistve technologies, like speech input for activating the control.',
        'In special cases, the @aria-labelledby@ attribute can be used on the form control element to reference the id(s) of the elements on the page that describe its purpose.',
        'In special cases, the @aria-label@ attribute can be used on the form control element to provide an explicit text description of its purpose.',
        'The @title@ attribute will be used as the last resort to provide a label for the form control.'
      ],
      MANUAL_CHECKS: [
        'If the @title@ attribute is the labeling technique of last resort, use other form labeling techniques.',
        'Reserve the @title@ attribute for tooltips if they are needed for your form.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: @title@ attribute',
          url:   'https://html.spec.whatwg.org/dev/dom.html#attr-title'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'MDN title attribute',
          url:   'https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title'
        },
        {type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'W3C WAI Accessibility Tutorials: Forms Concepts',
          url: 'https://www.w3.org/WAI/tutorials/forms/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H88: Using HTML according to spec',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H88'
        }
      ]
  },
  CONTROL_10: {
      ID:         'Control 10',
      DEFINITION: 'Each standard HTML form control and ARIA widget role must have an accessible name that is unique on the page.',
      SUMMARY:    'Accessible name must be unique',
      TARGET_RESOURCES_DESC: '@select@, @textarea@ and @input@ elements of type @text@, @password@, @checkbox@, @radio@, @file@ and ARIA widget roles',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Update the accessible name for the %N_F form controls and ARIA widgets with duplicate names to uniquely identify the purpose of each control on the page.',
        FAIL_P:   'Update the accessible names for the %N_F form controls and ARIA widgets with duplicate names to uniquely identify the purpose of each control on the page.',
        MANUAL_CHECK_S: 'Verify the accessible name of the button accurately describes the function of the button.',
        MANUAL_CHECK_P: 'Verify the accessible names of the %N_MC buttons with duplicate names accurately describe the function of each button.',
        HIDDEN_S: 'The form control or ARIA widget element that is hidden was not evaluated.',
        HIDDEN_P: 'The %N_H form control and/or ARIA widget elements or widgets that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No form controls or only one form control on this page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1: 'Accessible name is unique.',
        ELEMENT_FAIL_1: 'Change the accessible name of the @%1[role=%2]@ element, consider using @fieldset@ and @legend@ elements to provide grouping label or an ARIA technique to make the accessible name unique on the page.',
        ELEMENT_FAIL_2: 'Change the accessible name of the @%1@ element, consider using @fieldset@ and @legend@ elements to provide grouping label or an ARIA technique to make the accessible name unique on the page.',
        ELEMENT_MC_1:   'Verify the accessible name of the @%1[role=%2]@ element accurately describes the action of the button, since it shares the same name as other buttons.',
        ELEMENT_MC_2:   'Verify the accessible name of the @%1@ element accurately describes the action of the button, since it shares the same name as other buttons',
        ELEMENT_HIDDEN_1: '@%1[role=%2]@ control was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: '@%1@ control was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'Accessibe names that are unique make it possible for people to understand the different purposes of form controls on the same page.',
        'For controls with required parent elements, the accessible name only needs to be unique with the sibling controls.'
      ],
      TECHNIQUES: [
        'The preferred technique for labeling standard HTML form controls is by reference: First, include an @id@ attribute on the form control to be labeled; then use the @label@ element with a @for@ attribute value that references the @id@ value of the control.',
        'NOTE: The alternative technique of using the @label@ element to encapsulate a the form control element does not fully support some assistve technologies, like speech input for activating the control.',
        'The @fieldset@ and @legend@ elements can be used add a grouping label to the form controls contained in the @fieldeset@ element.',
        'For ARIA widgets and special cases of standard HTML form controls, the @aria-labelledby@ attribute can be used to reference the id(s) of the elements on the page that describe its purpose.',
        'For ARIA widgets and special cases of standard HTML form controls, the @aria-label@ attribute can be used to provide an explicit text description of its purpose.',
        'For ARIA widgets and special cases of standard HTML form controls, the @title@ attribute can be used to provide an explicit text description of its purpose.',
        'For @input[type=submit]@ the default label is "Submit", but the label can be changed using other labeling techniques if there is more than one submit button on the page.',
        'For @input[type=reset]@ the default label is "Reset", but the label can be changed using other labeling techniques if there is more than one reset button on the page.',
        'For @input[type=image]@ the default label is defined using the @alt@ attribute.',
        'For @input[type=button]@ the default label is defined using the @value@ attribute.',
        'For the @button@ element, the child text content can be used to define its purpose.',
        'For some ARIA widgets (e.g. @menuitem@, @tab@, @treeitem@), the child text content can be used to define its purpose.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        {type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'W3C WAI Accessibility Tutorials: Forms Concepts',
          url: 'https://www.w3.org/WAI/tutorials/forms/'
        },
        {type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA APG: Providing Accessible Names and Descriptions',
          url: 'https://www.w3.org/WAI/ARIA/apg/practices/names-and-descriptions/'
        },        
        { type:  REFERENCES.SPECIFICATION,
          title: 'MDN: The Input Label element',
          url:   'https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'MDN: The Fieldset/Legend element',
          url:   'https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H44: Using label elements to associate text labels with form controls',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H44'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H65: Using the title attribute to identify form controls when the label element cannot be used',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H65'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H71: Providing a description for groups of form controls using fieldset and legend elements',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H71'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @label@ element',
          url:   'https://html.spec.whatwg.org/dev/forms.html#the-label-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @legend@ element',
          url:   'https://html.spec.whatwg.org/dev/form-elements.html#the-legend-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @title@ attribute',
          url:   'https://html.spec.whatwg.org/multipage/dom.html#attr-title'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-label@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-labelledby@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
        }
      ]
  },
  CONTROL_11: {
      ID:         'Control 11',
      DEFINITION: 'If there is more than one form on a page, each submit and reset button must have a unique label.',
      SUMMARY:    'Submit and reset button labels must be unique',
      TARGET_RESOURCES_DESC: 'submit and reset buttons',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Change the labeling of the submit or reset button to uniquely identify which form on the page will be sumnitted or reset on the page.',
        FAIL_P:   'Change the labeling of the %N_F submit or reset buttons to uniquely identify which form on the page will be sumnitted or reset on the page.',
        HIDDEN_S: 'The submit or reset button that is hidden was not evaluated.',
        HIDDEN_P: 'The %N_H submit and/or reset buttons that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No forms or only one form with submit or reset buttons on this page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_FAIL_1: 'Change the accessible name of the @%1[type="%2"]@ element to create a unique name for the form\'s %2 button, current accessible name is "%4".',
        ELEMENT_PASS_1: 'The accessible name of the @%1[type="%2"]@ element is unique for form\'s %2 button on the page, current accessible name is "%3".',
        ELEMENT_HIDDEN_1: '@%1[type="%2"]@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'Labels that are unique make it possible for people to understand the different purposes of form controls on the same page.',
        '@submit@ and @reset@ form controls have default labels and if these are present on more than one form on a page, the user may not understand which form they are submitting.'
      ],
      TECHNIQUES: [
        'The preferred technique for changing the default label for @input[type="submit"]@ and @input[type="reset"]@ controls is the @value@ attribute.',
        'The preferred technique for changing the default label for @button[type="submit"]@ and @button[type="reset"]@ controls is the text content of the button.',
        'In special cases, the @aria-labelledby@ attribute can be used on the form control element to reference the id(s) of the elements on the page that describe its purpose.',
        'In special cases, the @aria-label@ attribute can be used on the form control element to provide an explicit text description of its purpose.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        {type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'W3C WAI Accessibility Tutorials: Forms Concepts',
          url: 'https://www.w3.org/WAI/tutorials/forms/'
        },
        {type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA APG: Providing Accessible Names and Descriptions',
          url: 'https://www.w3.org/WAI/ARIA/apg/practices/names-and-descriptions/'
        } ,
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H44: Using label elements to associate text labels with form controls',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H44'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @form@ element',
          url:   'https://html.spec.whatwg.org/multipage/forms.html#the-form-element'
        },
      ]
  },

  CONTROL_12: {
      ID:         'Control 12',
      DEFINITION: 'Forms must use @input[type="submit"]@ or other form control buttons for submitting forms.',
      SUMMARY:    'Forms submitted using buttons',
      TARGET_RESOURCES_DESC: '@input[type="submit"]@, @input[type="button"]@, @input[type="image"]@, @button@, @[role="button"]@',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S: 'Verify that the form has uses a button to submit the form.',
        MANUAL_CHECK_P: 'Verify that each of the %N_MC forms has a button used to submit the form.',
        FAIL_S:    'No button elements found for submitting the form.',
        FAIL_P:    'No button elements found for submitting %N_MC forms.',
        HIDDEN_S:  'The form that is hidden was not evaluated.',
        HIDDEN_P:  'The %N_H forms that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No form controls on this page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1: 'The form has an @input[type="submit"]@.',
        ELEMENT_PASS_2: '@input[type="submit"]@ is used for form submission.',
        ELEMENT_FAIL_1: 'The form has no button elements.',
        ELEMENT_MC_1: 'Verify that the button element contained in the form can be used for form submission.',
        ELEMENT_MC_2: 'Verify that at least one of the %1 button elements contained in the form can be used for form submission.',
        ELEMENT_MC_3: 'Verify if the @input[type="%1"]@ element can be used to  submit the form.',
        ELEMENT_MC_4: 'Verify if the @button@ element can be used to  submit the form.',
        ELEMENT_MC_5: 'Verify if the @%1[role="button"]@ element can be used to  submit the form.',
        ELEMENT_HIDDEN_1: '@form@ element was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: '@input[type="submit"]@ element was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_3: '@input[type="%1"]@ element was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_4: '@button@ element was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_5: '@%1[role="button"]@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'Using a submit button allows users to easily identify and control how to  submit form information to a server for processing.  Forms that are submitted through changes in focus or selection may result in users prematurely submitting the form or not being aware they submitted the form.'
      ],
      TECHNIQUES: [
        'The preferred technique for submitting forms is with the use of the input[type="submit"] form control.',
        'An alternative techniques include using other HTML form control elements, including @input[type="button"]@, @input[type="image"]@ or @button@ elements with an accessible name indicating that the button is for submitting form information.',
        'In the case when a non-form control element (e.g. @a@ or @div@ element) is being used to submit the form, the element can use ARIA [role="button"] attribute with the accessible name indicating that the button is for submitting form information.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @input[type="submit"]@ element',
          url:   'https://html.spec.whatwg.org/#submit-button-state-(type=submit)'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H32: Providing submit buttons',
          url:   'https://www.w3.org/TR/2016/NOTE-WCAG20-TECHS-20161007/H32'
        }
      ]
  },
 CONTROL_13: {
      ID:         'Control 13',
      DEFINITION: 'For @input@ elements use the @name@ attribute to define inputs that support auto fill.',
      SUMMARY:    '@name@ attribute supports auto fill',
      TARGET_RESOURCES_DESC: '@input@ elements',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:   'Determine if users would benefit if the @input@ element could be auto filled, if the would use the @name@ attribute.',
        MANUAL_CHECK_P:   'Determine if users would benefit if any of the %N_MC @input@ elements could be auto filled, if the would use the @name@ attribute.',
        NOT_APPLICABLE: 'No @input@ elements on the page.',
        HIDDEN_S: 'The @input@ element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H @input@ elements that are hidden were not evaluated.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_MC_1:   'Determine if users would benefit if the @%1@ element would benefit from ',
        ELEMENT_PASS_1:   'The @%1@ element has the @name@ attribute value of @%2@.x',
        ELEMENT_HIDDEN_1: '@%1@ control was not tested because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'People with language and memory related disabilities or disabilities that affects executive function and decision-making benefit from the browser auto-filling personal information (such as name or address) when the autocomplete attribute is used to meet this Success Criterion, which means information does not need to be remembered by the user.',
        'People with cerebral palsy, stroke, head injury, motor neuron disease or learning disability sometimes prefer images for communication. They can employ assistive technology which adds icons to input fields to communicate the purpose of the fields visually.',
        'People with motor impairments also benefit from reducing the need for manual input when filling out forms.'
      ],
      TECHNIQUES: [
        'Use the @name@ attribute to support auto-fill for @input@ elements.'
      ],
      MANUAL_CHECKS: [
        'Determine of the user would benefit from supporting auto-fill',
        'If the user could benefit, use the @name@ attribute and one of the predefined auto-fill values to support auto-fill for the control.',
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.WCAG_SPECIFICATION,
          title: 'Understanding SC 1.3.5: Identify Input Purpose',
          url:   'https://www.w3.org/WAI/WCAG21/Understanding/identify-input-purpose.html'
        },
        { type:  REFERENCES.WCAG_SPECIFICATION,
          title: 'WCAG 2.1 Section 7. Input Purposes for User Interface Componentse',
          url:   'https://www.w3.org/TR/WCAG21/#input-purposes'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'How to Create Autofill Forms',
          url:   'https://www.mightyforms.com/blog/how-to-create-autofill-forms'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'web.dev: Autofill',
          url:   'https://web.dev/learn/forms/autofill/'
        },
        {type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'Technique H98:Using HTML 5.2 autocomplete attributes',
          url: 'https://www.w3.org/WAI/WCAG21/Techniques/html/H98'
        },
        {type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'Technique F107: Failure of Success Criterion 1.3.5 due to incorrect autocomplete attribute values',
          url: 'https://www.w3.org/WAI/WCAG21/Techniques/failures/F107'
        }
      ]
  },
  CONTROL_14: {
        ID:                    'Control 14',
        DEFINITION:            '@button@, @fieldset@, @input@, @option@, @select@ and @textarea@ form controls must use native HTML attribute, instead of related ARIA attributes, when available.',
        SUMMARY:               'Use native HTML attributes when available',
        TARGET_RESOURCES_DESC: '@button@, @fieldset@, @input@, @option@, @select@ and @textarea@',
        RULE_RESULT_MESSAGES: {
          FAIL_S:   'For the form element use a native HTML attribute instead of the related ARIA attribute.',
          FAIL_P:   'For the %N_F form elements use native HTML attributes instead of the related ARIA attributes.',
          MANUAL_CHECK_S:   'Verify for the form control that you do not want the native disabled behavior of the form control when using @aria-disabled@ attribute, instead of the @disabled@ attribute.',
          MANUAL_CHECK_P:   'Verify for the %N_MC form controls that you do not want the native disabled behavior of the form control when using @aria-disabled@ attribute, instead of the @disabled@ attribute.',
          HIDDEN_S: 'The form control is hidden and was not evaluated.',
          HIDDEN_P: 'The %N_H form controls are hidden were not evaluated.',
          NOT_APPLICABLE:  'No form controls related ARIA attributes.'
        },
        BASE_RESULT_MESSAGES: {
          ELEMENT_FAIL_1:   'Use the @%1@ attribute instead of @%2@ attribute on the @%3@ element.',
          ELEMENT_MC_1:     'Verify the use of the @%1@ attribute instead of the native @%2@ attribute on the @%3@ element.',
          ELEMENT_HIDDEN_1: 'The @%1@ element with the @%2@ attribute was not tested because it is hidden from assistive technologies and/or not visible on screen.'
        },
        PURPOSES: [
          'The native HTML form control attributes, including @checked@, @disabled@, @invalid@, @multple@ and @required@ are related to the ARIA attributes @aria-checked@, @aria-disabled@, @aria-invalid@, @aria-multiselectable@ and @aria-required@ attributes since they communicate the same information to assistive technologies.',
          'If both are used on a HTML form control there is the possibility they might provide conflicting information to the assistive technology, for example the @checked@ attribute is @true@ and the @aria-checked@ attribute is set to @false@.',
          'The native HTML form attributes also effect browser behavior, where the ARIA attributes only effect information communicated to assistive technologies. For example, using the @disabled@ attribute removes the form control from the tab sequence of the page, where setting @aria-disabled=true@ does not effect tab sequence.',
          'Browsers are required by the ARIA specification to always communicate the native HTML attribute information to assistive technologies when their is conflicting information. '
        ],
        TECHNIQUES: [
          'To avoid conflicting information to assistive technologies, use native HTML attributes, instead of related ARIA attributes.',
          'Use @checked@ attribute, instead of @aria-checked@, for the for @input[type=checkbox]@ and @input[type=radio@ elements.',
          'Use @disabled@ attribute, instead of @aria-disabled@, for the for @button@, @fieldset@, @input@, @option@, @select@ and @textarea@ elements.',
          'Use @invalid@ attribute, instead of @aria-invalid@, for the for @button@, @fieldset@, @input@, @option@, @select@ and @textarea@ elements.',
          'Use @mutiple@ attribute, instead of @aria-multiselectable@, for the for the @select@ element.',
          'Use @required@ attribute, instead of @aria-required@, for the for @button@, @fieldset@, @input@, @option@, @select@ and @textarea@ elements.'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Conflicts with Host Language Semantics',
            url:   'https://www.w3.org/TR/wai-aria/#host_general_conflict'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'HTML: Button Element',
            url:   'https://html.spec.whatwg.org/#the-button-element'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'HTML: Fieldset Element',
            url:   'https://html.spec.whatwg.org/#the-fieldset-element'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'HTML: Input Element',
            url:   'https://html.spec.whatwg.org/#the-input-element'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'HTML: Option Element',
            url:   'https://html.spec.whatwg.org/#the-option-element'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'HTML: Select Element',
            url:   'https://html.spec.whatwg.org/#the-select-element'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'HTML: Textara Element',
            url:   'https://html.spec.whatwg.org/#the-textarea-element'
          }
        ]
    },

    CONTROL_15: {
        ID:                    'Control 15',
        DEFINITION:            'The labels for controls and widgets that include text or images of text, the name contains the text that is presented visually.',
        SUMMARY:               'Label in Name',
        TARGET_RESOURCES_DESC: '@input@, @output@, @select@, @textarea@ and widgets',
        RULE_RESULT_MESSAGES: {
          MANUAL_CHECK_S:  'Verify the control with images, @aria-label@ and/or references to hidden content contain the same text associated with the visually rendered label associated with the control.',
          MANUAL_CHECK_P:  'Verify tha each of the %N_MC controls with images, @aria-label@ and/or references to hidden content contain the same text associated with each of the visually rendered labels associated with each control.',
          HIDDEN_S:  'One control with images, @aria-label@ and/or references to hidden content was not tested because it is hidden from assistive technologies',
          HIDDEN_P:  '%N_H controls with images, @aria-label@ and/or references were not tested because they are hidden from assistive technologies',
        },
        BASE_RESULT_MESSAGES: {
          ELEMENT_MC_1: 'Verify the image @alt@ text contains any text represented in the image.',
          ELEMENT_MC_2: 'Verify the @aria-label@ contains the same text associated the visually rendered label associated with the control.',
          ELEMENT_MC_3: 'Verify the computed name of all the referenced content, contains the same text associated the visually rendered label associated with the control.',
          ELEMENT_HIDDEN_1: 'The hidden control with an accessible name that includes image content was not tested.',
          ELEMENT_HIDDEN_2: 'The hidden control with an accessible name with @aria-label@ content was not tested.',
          ELEMENT_HIDDEN_3: 'The hidden control with an accessible name that includes references to hidden content was not tested.',
          PAGE_MC_1: 'The pages contains '
        },
        PURPOSES: [
          'Voice recognition users can directly activate controls on a page with fewer surprising changes of focus.',
          'Screen reader users will have a better experience because the labels that they hear match the visible text labels that they see on the screen.',
          'In general avoid using images and hidden text for defining accessible names whenever possible.'
        ],
        TECHNIQUES: [
          'If images of text that are part of an accessible name (e.g. label), the alt text must be the same as the text of the image.',
          'If @aria-label@ is used as part of an accessible name (e.g. label), the @aria-label@ contains the same text associated the visually rendered content associated with the control.',
          'If a hidden @aria-labelledby@ reference is used as part of the accessible name (e.g. label), verify the computed name of all the referenced contain has the same text associated the visually rendered label associated with the control.',
          'Accessible names may contain additional information useful to people using assistive technologies, but should start with the visible text associated with the control.'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type:  REFERENCES.SPECIFICATION,
            title: 'W3C WCAG UNderstanding Label in Name',
            url:   'https://www.w3.org/WAI/WCAG21/Understanding/label-in-name.html'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'W3C Accessible Name and Description Computation 1.1',
            url:   'https://www.w3.org/TR/accname-1.1/'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'G208: Including the text of the visible label as part of the accessible name',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G208'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'G211: Matching the accessible name to the visible label',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G211'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'G162: Positioning labels to maximize predictability of relationships',
            url:   'https://www.w3.org/WAI/GL/2016/WD-WCAG20-TECHS-20160105/G162'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'F96: Failure due to the accessible name not containing the visible label text',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F96'
          }
        ]
    },

    CONTROL_16: {
        ID:                    'Control 16',
        DEFINITION:            'Use @autocomplete@ attributes or other programmatic techniques that support auto-populating form controls with information previously entered by the user, unless the content meets one of the exceptions.',
        SUMMARY:               'Redundant Entry',
        TARGET_RESOURCES_DESC: '@input@, @output@, @select@, @textarea@ and widgets',
        RULE_RESULT_MESSAGES: {
          MANUAL_CHECK_S:  'Verify if the user benefits from the control supporting auto population.',
          MANUAL_CHECK_P:  'Verify if the user benefits from the any of the %N_MC controls supporting auto population.',
          HIDDEN_S:  'One control was not tested for auto-population because it is hidden from assistive technologies.',
          HIDDEN_P:  '%N_H controls were not tested for auto-population because they are hidden from assistive technologies.',
        },
        BASE_RESULT_MESSAGES: {
          ELEMENT_PASS_1: 'The @autocomplete=%1@ supports auto-populating the form control.',
          ELEMENT_MC_1: 'Verify if the @%1@ element would benefit users by using an @autocomplete@ attribute or other programmatic techniques that supports auto-populating the form control.',
          ELEMENT_MC_2: 'Verify if the @%1@ element would benefit users by using a programmatic techniques that supports auto-populating the form control.',
          ELEMENT_HIDDEN_1: 'The @%1% element is hidden and was not tested for auto-population.'
        },
        PURPOSES: [
          'To ensure that users can successfully complete multi-step processes.',
          'Users with cognitive disabilities experience short-term, working memory difficulty. Not having to repeatedly remember particular information reduces stress and the likelihood of mistakes.',
          'Users who experience difficulty forming new memories, recalling information, and other functions related to cognition can complete processes without having to unnecessarily rely on their memory.',
          'Users with mobility impairments, for example using switch control or voice input, benefit from a reduced need for text entry.'
        ],
        TECHNIQUES: [
          'Add an @autocomplete@ attribute to the form control that would support auto-populating the form control from previously entered information.',
          'There are many other programmatic techniques to support auto-population, that are too numerous to discuss here.',
          'EXCEPTION: Essential uses of input re-entry for things like memory games which would be invalidated if the previous answers were supplied.',
          'EXCEPTION: Security measures such as preventing a password string from being shown or copied. When creating a password, it should be a unique and complex string and therefore cannot be validated by the author. If the system requires the user to manually create a password that is not displayed, having users re-validate their new string is allowed as an exception.',
          'EXCEPTION: When the previously entered information is no longer valid, it can be requested that the user enter that information again.'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type:  REFERENCES.SPECIFICATION,
            title: 'W3C ARIA Universtanding Redundant Entry',
            url:   'https://www.w3.org/WAI/WCAG22/Understanding/redundant-entry.html'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'MDN HTML attribute: autocomplete',
            url:   'https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'G221: Provide data from a previous step in a process',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/general/G221'
          }
        ]
    },

  CONTROL_17: {
      ID:                    'Control 17',
      DEFINITION:            'Some assistive technologies, including speech input, do not reliably associate labels with the control when label encapsulation is used for labeling.',
      SUMMARY:               'Avoid label encapsulation',
      TARGET_RESOURCES_DESC: '@input@, @select@, @textarea@, @progress@, @meter@ and @output@ elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Add a an @id@ to the control and use the @ a label to the form control element that is unlabelled.',
        FAIL_P:   'Add labels to the %N_F form control elements that are unlabelled.',
        HIDDEN_S: 'One form control element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H form control elements that are hidden were not evaluated.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   '@%1@ control is labeled using %2',
        ELEMENT_FAIL_1:   'Add a @for@ attribute to the @label@ element to reference an @id@ on the associated @%1@ control',
        ELEMENT_HIDDEN_1: '@%1@ control was not tested because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'Speech input and other assistive technologies cannot reliably use the label encapsulation method for identifying a label with it\'s associated form control.',
        'Speech input uses the label as part of commands to move focus or change the state of form controls.  Examples of speech input commands include: "click first name" for moving focus to a textbox, "click thick crust" to select a radio button associated with a pizza crust selection.'
      ],
      TECHNIQUES: [
        'When using the @label@ element include an @id@ attribute on the form control to be labeled; then use the @label@ element with a @for@ attribute value that references the @id@ value of the control.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @label@ element',
          url:   'https://html.spec.whatwg.org/multipage/forms.html#the-label-element'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H44: Using label elements to associate text labels with form controls',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H44'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'W3C ARIA Authoring Practices Issue: Naming Form Controls with the Label Element',
          url:   'https://github.com/w3c/aria-practices/issues/2870'
        }

      ]
  }
};

/* headingRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const headingRules$1 = {

  HEADING_1: {
    ID:                    'Heading 1',
    DEFINITION:            'The page should contain at least one @h1@ element identifying and describing the main content of the page.',
    SUMMARY:               'Page should have @h1@ element',
    TARGET_RESOURCES_DESC: '@h1@ and @body@ elements',
    RULE_RESULT_MESSAGES: {
      FAIL_S:   'Add a descriptive @h1@ element at the beginning of the main content of the page.',
      FAIL_P:   'Add a descriptive @h1@ element at the beginning of the main content of the page.',
      HIDDEN_S: 'One @h1@ element that is hidden was not evaluated.',
      HIDDEN_P: '%N_H @h1@ elements that are hidden were not evaluated.'
    },
    BASE_RESULT_MESSAGES: {
      PAGE_PASS_1:     'Page has @h1@ element.',
      PAGE_FAIL_1:     'Add an @h1@ element at the beginning of the main content of the page.',
      ELEMENT_PASS_1:  '@h1@ element contributes to passing this rule.',
      ELEMENT_FAIL_1:  'Add an accessible name to the @h1@ element that describes the main content of the page.',
      ELEMENT_HIDDEN_1:'The @h1@ element was not evaluated because it is hidden from assistive technologies.'
    },
    PURPOSES: [
      'An @h1@ heading provides an important navigation point for users of assistive technologies, allowing them to easily find the main content of the page.',
      'An @h1@ heading is often also used in the banner of a web page to identify and describe the website.',
      'Home pages of websites often have a variety of "main" sections (e.g. navigation links, news, calendars, ...) that could be considered having somewhat equal potential interest by a visitor, these sections could each be identified using @h1@ headings.'
    ],
    TECHNIQUES: [
      'Include an @h1@ element at the beginning of the main content.',
      'The accessible name of the @h1@ element should describe the main content of the page.',
      'The accessible name of the @h1@ element in the banner of the page, should identify and describe the website.',
      'The @h1@ element should be visible graphically and to assistive technologies. It should not be hidden using CSS techniques.'
    ],
    MANUAL_CHECKS: [
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML Specification: The h1, h2, h3, h4, h5, and h6 elements',
        url:   'https://html.spec.whatwg.org/#the-h1,-h2,-h3,-h4,-h5,-and-h6-elements'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'G130: Providing descriptive headings',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G130'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'G141: Organizing a page using headings',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G141'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'W3C Web Accessibility Tutorials: Headings',
        url:   'https://www.w3.org/WAI/tutorials/page-structure/headings/'
      }
    ]
  },

  HEADING_2: {
    ID:                    'Heading 2',
    DEFINITION:            'If the page contains @h1@ element and either a @main@ or @banner@ landmark, the @h1@ element should be a child of either the main or @banner@ landmark.',
    SUMMARY:               '@h1@ should be in @main@ or @banner@ landmark',
    TARGET_RESOURCES_DESC: '@h1@ elements and elements with ARIA attribute @role="main"@ or @role="banner"@ ',
    RULE_RESULT_MESSAGES: {
      FAIL_S: 'Move the @h1@ element inside (and preferably at the beginning) of the @main@ element, or change the @h1@ element to another heading level.',
      FAIL_P: 'Move the %N_F @h1@ elements inside (and preferably at the beginning) of @main@ or @banner@ landmark elements, or change the @h1@ elements to other heading levels.',
      HIDDEN_S: 'One @h1@ element that is hidden was not evaluated.',
      HIDDEN_P: '%N_H @h1@ elements that are hidden were not evaluated.',
      NOT_APPLICABLE: 'No @h1@ elements and either a @main@ or @banner@ landmark.'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_PASS_1:   'The @h1@ is a child element of a @main@ landmark.',
      ELEMENT_PASS_2:   'The @h1@ is a child element of a @banner@ landmark.',
      ELEMENT_FAIL_1:   'Position the @h1@ element as one of the first child elements of a @main@ landmark to mark the beginning of main content to identify the main content of this page, or within the @banner@ landmark to provide a label for the website.',
      ELEMENT_HIDDEN_1: 'The @h1@ element was not evaluated because it is hidden from assistive technologies.'
    },
    PURPOSES: [
      'An @h1@ heading should primarily be used to identify the content on the specific page within the website and be placed at the beginning of the main content to provide an important navigation point for users of assistive technologies, allowing them to easily find the main content of the page.',
      'An @h1@ heading can also be used (but not required) to provide a label for the website and when it is used for this purpose it should be placed in the @banner@ element.',
      'Including both a @main@ landmark and an @h1@ element provides a redundant way for users of assistive technologies to find the main content of a web page.'
    ],
    TECHNIQUES: [
      'This rule supports the coding practice of reserving the @h1@ element for titling the main content area of a web page.',
      'Include an @h1@ element at the beginning of each @main@ landmark.',
      'The @h1@ element should describe the main content or purpose of the page.',
      'If there is more than one @main@ landmark, use the @aria-labelledby@ attribute on each to reference an @h1@ element that provides its accessible name.',
      'An @h1@ element being used to label the the website must be placed inside the @banner@ element.'
    ],
    MANUAL_CHECKS: [
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML Specification: The h1, h2, h3, h4, h5, and h6 elements',
        url:   'https://html.spec.whatwg.org/#the-h1,-h2,-h3,-h4,-h5,-and-h6-elements'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: @main@ role',
        url:   'https://www.w3.org/TR/wai-aria-1.2/#main'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: @banner@ role',
        url:   'https://www.w3.org/TR/wai-aria-1.2/#banner'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'W3C Web Accessibility Tutorials: Page Structure',
        url:   'https://www.w3.org/WAI/tutorials/page-structure/'
      }
    ]
  },

  HEADING_3: {
    ID:                    'Heading 3',
    DEFINITION:            'The accessible names of sibling heading elements of the same level should be unique.',
    SUMMARY:               'Sibling headings should be unique',
    TARGET_RESOURCES_DESC: 'Heading elements',
    RULE_RESULT_MESSAGES: {
      FAIL_P: 'Update the accessible names of the %N_F sibling heading elements of the same level to be unique.',
      HIDDEN_S: 'One heading element that is hidden was not evaluated.',
      HIDDEN_P: '%N_H heading elements that are hidden were not evaluated.',
      NOT_APPLICABLE: 'No sibling heading elements of the same level were found on the page.'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_PASS_1:    'The %1 heading content is unique among its sibling headings.',
      ELEMENT_FAIL_1:  'Change the accessible name of %1 heading to make it unique among its sibling headings.',
      ELEMENT_HIDDEN_1:  'The %1 element was not evaluated because it is hidden from assistive technologies.'
    },
    PURPOSES: [
      'If section headings that share the same parent heading are NOT unique, users of assistive technologies will not be able to discern the differences among sibling sections of the web page.'
    ],
    TECHNIQUES: [
      'Make sure the accessible names of sibling headings that share the same parent heading help users understand the unique content of each section they describe.'
    ],
    MANUAL_CHECKS: [
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML Specification: The h1, h2, h3, h4, h5, and h6 elements',
        url:   'https://html.spec.whatwg.org/#the-h1,-h2,-h3,-h4,-h5,-and-h6-elements'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'G130: Providing descriptive headings',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G130'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'G141: Organizing a page using headings',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G141'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'W3C Web Accessibility Tutorials: Headings',
        url:   'https://www.w3.org/WAI/tutorials/page-structure/headings/'
      }
    ]
  },

  HEADING_5: {
    ID:                    'Heading 5',
    DEFINITION:            'Heading elements must be properly nested on the page.',
    SUMMARY:               'Headings must be properly nested',
    TARGET_RESOURCES_DESC: 'Heading elements',
    RULE_RESULT_MESSAGES: {
      FAIL_S:  'Review the entire heading structure and update the heading levels so that the heading element is properly nested in relation to the %N_T headings on the page.',
      FAIL_P:  'Review the entire heading structure and update the heading levels so that the %N_F heading elements are properly nested in relation to the %N_T headings on the page.',
      MANUAL_CHECK_S: 'One heading element requires manual checking for proper nesting level with the headings within landmarks.',
      MANUAL_CHECK_P: '%N_MC headings require manual checking for proper nesting level with the headings within and outside of landmarks.',
      HIDDEN_S: 'One heading element that is hidden was not evaluated.',
      HIDDEN_P: '%N_H heading elements that are hidden were not evaluated.',
      NOT_APPLICABLE: 'No heading elements or only one heading element on this page.'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_PASS_1:   'The %1 element is properly nested.',
      ELEMENT_FAIL_1:   'Adjust the level of the %1 element or other heading elements so that the headings are properly nested on the page.',
      ELEMENT_HIDDEN_1: 'The %1 element was not evaluated because it is hidden from assistive technologies.',
      ELEMENT_HIDDEN_2: 'The %1 element has not text content either add content, or remove it from the page if it is not needed.',
      ELEMENT_MC_1:     'The %1 element is not contained a landmark, verify that it is properly nested with the associated landmarks and other headings not in landmarks.',
      PAGE_PASS_1:      'All heading elements are properly nested',
      PAGE_FAIL_1:      'There are at least %1 header nesting level problems on the page, adjust the use of heading elements on the page so they are properly nested.',
      PAGE_MC_1:       'There is one header element outside of landmarks that needs manual checking for proper nesting level.',
      PAGE_MC_2:       'There are %1 header elements outside of landmarks that need manual checking for proper nesting level.'
    },
    PURPOSES: [
      'Heading elements that are properly nested help users of assistive technologies understand the structure of the information on the web page.'
    ],
    TECHNIQUES: [
      'Include headings elements at the proper level for each section of a web page.',
      'Use headings as labels for ARIA landmarks to provide a redundant way for users of assistive technologies to navigate the page (i.e. header or landmark navigation).',
      'Check headings against other headings in the document to make sure they uniquely describe the content of each section of the web page.',
      'If headings are too similar to each other, users of assistive technologies will not be able to use them to understand the differences between sections of the web page.'
    ],
    MANUAL_CHECKS: [
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML Specification: The h1, h2, h3, h4, h5, and h6 elements',
        url:   'https://html.spec.whatwg.org/#the-h1,-h2,-h3,-h4,-h5,-and-h6-elements'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'G130: Providing descriptive headings',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G130'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'G141: Organizing a page using headings',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G141'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'W3C Web Accessibility Tutorials: Headings',
        url:   'https://www.w3.org/WAI/tutorials/page-structure/headings/'
      }
    ]
  },

  HEADING_6: {
    ID:                    'Heading 6',
    DEFINITION:            'Heading elements should have visible text content.',
    SUMMARY:               'Headings should have text content',
    TARGET_RESOURCES_DESC: 'Heading elements',
    RULE_RESULT_MESSAGES: {
      FAIL_S:   'For the heading element with only image content, replace the image with text content styled using CSS.',
      FAIL_P:   'For the %N_F heading elements with only image content, replace the images with text content styled using CSS.',
      HIDDEN_S: 'One heading element that is hidden was not evaluated.',
      HIDDEN_P: '%N_H heading elements that are hidden were not evaluated.',
      NOT_APPLICABLE:  'No headings with only image content.'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_PASS_1:   'The %1 element contains visible text content.',
      ELEMENT_FAIL_1: 'Add visible text content to the %1 element.',
      ELEMENT_FAIL_2: 'The %1 element does not have an accessible name.  Either remove the heading from the page or add visible text content to describe the section.',
      ELEMENT_HIDDEN_1: 'The %1 element was not evaluated because it is hidden from assistive technologies.',
    },
    PURPOSES: [
      'Heading elements that consist only of image content are not easily restyled for readabilty by people with low vision.'
    ],
    TECHNIQUES: [
      'Use CSS instead of images to style heading text content.'
    ],
    MANUAL_CHECKS: [
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML Specification: The h1, h2, h3, h4, h5, and h6 elements',
        url:   'https://html.spec.whatwg.org/#the-h1,-h2,-h3,-h4,-h5,-and-h6-elements'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'C22: Using CSS to control visual presentation of text',
        url:   'https://www.w3.org/TR/WCAG20-TECHS/C22'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'W3C Web Accessibility Tutorials: Headings',
        url:   'https://www.w3.org/WAI/tutorials/page-structure/headings/'
      }
    ]
  },

  HEADING_7: {
    ID:                    'Heading 7',
    DEFINITION:            'If a @contentinfo@, @complementary@, @form@, @navigation@ or @search@ landmark contains a heading element, the first heading should be an @h2@ element.',
    SUMMARY:               'First landmark heading @h2@',
    TARGET_RESOURCES_DESC: '@contentinfo@, @complementary@, @form@, @navigation@ or @search@ landmarks elements',
    RULE_RESULT_MESSAGES: {
      FAIL_S:   'Adjust the heading structure within the landmark so that the first heading is an @h2@ element.',
      FAIL_P:   'Adjust the heading structures of the %N_F landmarks with headings so that the first heading of each is an @h2@ element.',
      HIDDEN_S: 'One @h2@ element that is hidden was not evaluated.',
      HIDDEN_P: '%N_H @h2@ elements that are hidden were not evaluated.',
      NOT_APPLICABLE:  'No headings in landmarks, or no landmarks on the page.'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_PASS_1:   'The @h2@ element is the first heading in the landmark.',
      ELEMENT_FAIL_1: 'Adjust the headings in the %1 landmark to ensure that the first heading is an @h2@ element instead of an @%2@.',
      ELEMENT_HIDDEN_1: 'The @h2@ element was not evaluated because it is hidden from assistive technologies.'
    },
    PURPOSES: [
      'Headings provide a redundant way for people to navigate and orient themselves to content on a web page.',
      'The use of an @h2@ element as the first heading in a landmark (except the @main@ and @banner@ landmarks) supports a consistent use of headings for finding the main sections in a web page.'
    ],
    TECHNIQUES: [
      'Locate an @h2@ element at the beginning of the content in the landmark to describe the content in the landmark.',
      'The @h2@ element can be used as the accessible name for a landmark using the @aria-labelledby@ attribute on the landmark to point to an @id@ attribute on the @h2@ element.',
      'The @h2@ element can be hidden from the graphical rendering using offscreen CSS positioning (e.g. @position: absolute@ )techniques.'
    ],
    MANUAL_CHECKS: [
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: landmark roles',
        url:   'https://www.w3.org/TR/wai-aria-1.2/#landmark'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML Specification: The h1, h2, h3, h4, h5, and h6 elements',
        url:   'https://html.spec.whatwg.org/#the-h1,-h2,-h3,-h4,-h5,-and-h6-elements'
      }
    ]
  },

  HEADING_8: {
      ID:         'Heading 8',
      DEFINITION: 'Headings must be properly nested within a landmark.',
      SUMMARY:    'Headings nested in landmarks',
      TARGET_RESOURCES_DESC: 'Landmark elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Review the heading structure within the landmark and adjust the heading levels such that all are properly nested.',
        FAIL_P:   'Review the heading structure for each landmark with more than one heading, and adjust the heading levels in each landmark such that all headings are properly nested.',
        HIDDEN_S: 'If the hidden heading element is supposed to be visible to assistive technologies, style it to be positioned off-screen.',
        HIDDEN_P: 'If any of the %N_H hidden heading elements are supposed to be visible to assistive technologies, style them to be positioned off-screen.',
        NOT_APPLICABLE: 'No nested headings found in landmarks.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   '@%1@ heading is properly nested in the @%2@ landmark.',
        ELEMENT_FAIL_1:   'Adjust the level of the @%1@ heading or other heading elements such that the headings are properly nested in the @%2@ landmark.',
        ELEMENT_FAIL_2:   'Add text content to @%1@ element that describes the section it labels or remove it from the @%2@ landmark.',
        ELEMENT_FAIL_3:   'Adjust the level of either the parent @%1@ heading or this @%2@ heading such that they are properly nested in the @%3@ landmark.',
        ELEMENT_HIDDEN_1: 'The @%1@ heading in the @%2@ landmark was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: 'The @%2@ landmark was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        // TODO: what is the purpose?
        'Headings provide a way to indicate the structure and to label the sections of content within a landmark.',
        'Headings and there associated heading levels provide a way for people using assistive technology to understand and navigate the structure of the content within a landmark.'
      ],
      TECHNIQUES: [
        // TODO: what are the techniques?
        'Use an @h1@ element for the first heading in @main@ landmarks.',
        'Use an @h2@ element for the first heading in other top level landmarks.',
        'Use heading elements to identify the content of each section within a landmark.',
        'Properly nest of heading elements within a landmark (e.g. @h2@ follows @h1@ headings, @h3@ follows @h2@ headings, ...).'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: contentinfo role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#contentinfo'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Page Structure',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/'
        }
      ]
  }
};

/* helpRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const helpRules$1 = {
  HELP_1: {
        ID:                    'Help 1',
        DEFINITION:            'Help and contact information occurs in the same order relative to other page content within a website.  Exceptions for websites that do not contain help or contact information or if the user initiated a change in ordering.',
        SUMMARY:               'Consistent ordering of help',
        TARGET_RESOURCES_DESC: 'Pages in a website',
        RULE_RESULT_MESSAGES: {
          MANUAL_CHECK_S:  'The evaluation library can not automatically determine if a page contains help or contact information and if it does, it\'s order on the page.  Verification requires understanding the requirements, determining of the the requirement applies to a page and then verifying through inspection of the page if the ordering requirements have been met.',
        },
        BASE_RESULT_MESSAGES: {
          PAGE_MC_1: 'Verify the consistent ordering of help and contact information on web pages within a website.',
        },
        PURPOSES: [
          'The intent of this Success Criterion is to ensure users can find help for completing tasks on a Web site, when it is available. When the placement of the help mechanism is kept consistent across a set of pages, users looking for help will find it easier to identify. This is distinct from interface-level help, such as contextual help, features like spell checkers, and instructional text in a form. ',
          'ocating the help mechanism in a consistent location across pages makes it easier for users to find it.'
        ],
        TECHNIQUES: [
          'Example: On-line job application: Some of the application questions may be hard for new job seekers to understand even after reading the contextual help. For example, the form may request their identification number, but they may have several and not know which one to enter. Consistently located contact information will enable them to use phone or email so they can get an answer to their question. ',
          'Example: Medical appointment scheduling form: When the service a patient is trying to book is not easily findable within the interface, they may need human help. A consistently located messaging option (chat client) enables them to quickly interact with a staff person that can help, without requiring them to manage a second interface. ',
          'Example: Finding a specific policy or procedure: An employee who needs to complete a work task may have difficulty locating the specific policy or procedure document on their employer\'s Web site. A consistently located "How Do I" page may include the information that enables them to independently complete this task. '
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type:  REFERENCES.SPECIFICATION,
            title: 'W3C WCAG Understanding Consistent Help',
            url:   'https://www.w3.org/WAI/WCAG22/Understanding/consistent-help.html'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'G220: Provide a contact-us link in a consistent location',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/general/G220'
          }
        ]
  }
};

/* htmlRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const htmlRules$1 = {

  HTML_1: {
      ID:                    'HTML 1',
      DEFINITION:            '@marquee@ elements must be removed to improve readability of content.',
      SUMMARY:               'Replace @marquee@ elements',
      TARGET_RESOURCES_DESC: '@marquee@ element',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Replace the @marquee@ element with a standard HTML element. Use CSS techniques to style the content, and JavaScript to provide controls that stop and start the scrolling.',
        FAIL_P:   'Replace the %N_F @marquee@ elements with standard HTML elements. Use CSS techniques to style the content, and JavaScript to provide controls that stop and start the scrolling.',
        HIDDEN_S: 'If the hidden @marquee@ element becomes visible, it must be changed to a standard HTML element.  Use CSS techniques to style the content, and JavaScript to provide controls that stop and start the scrolling.',
        HIDDEN_P: 'If any of the %N_H hidden @marquee@ elements become visible, they must be changed to standard HTML elements. Use CSS techniques to style the content, and JavaScript to provide controls that stop and start the scrolling.',
        NOT_APPLICABLE:  'No @marquee@ elements found on the page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_FAIL_1: 'Change the @marquee@ element to a standard HTML element. Use CSS techniques to style the content, and JavaScript to provide controls that stop and start the scrolling.',
        ELEMENT_HIDDEN_1: '@marquee@ element is hidden, but should be changed to a standard HTML element, in case it becomes visible. Use CSS techniques to style the content, and JavaScript to provide controls that stop and start the scrolling.'
      },
      PURPOSES: [
        'Automatically moving text cannot be read by many people with visual impairments or by people with learning disabilities that affect reading.'
      ],
      TECHNIQUES: [
        'Replace the @marquee@ element with a standard HTML element and use CSS techniques to style the content.',
        'By default, when the page loads, the marquee should be paused.',
        'Use Javascript to provide buttons that start and stop the scrolling of content in the marquee.',
        'Provide a means to see all of the content in the marquee at one time.'
      ],
      MANUAL_CHECKS: [
        'Verify that when the page loads, the content is not scrolling.',
        'Verify that there are start and pause buttons that start and stop the scrolling of content.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'MDN: The Marquee element',
          url:   'https://developer.mozilla.org/en-US/docs/Web/HTML/Element/marquee'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'W3C Schools: The Marquee element',
          url:   'https://www.w3schools.in/html/marquee-tag'
        }
      ]
  }
};

/* imageRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const imageRules$1 = {
  IMAGE_1: {
    ID:         'Image 1',
    DEFINITION: 'Each @img@ element must specify an @alt@ attribute or equivalent markup that either defines a text alternative or identifies the image as being used for decoration, spacing or some other stylistic purpose.',
    SUMMARY:    'Images must have alt text',
    TARGET_RESOURCES_DESC: '@img@ and [role="img"]',
    RULE_RESULT_MESSAGES: {
      FAIL_S:   'Add an @alt@ attribute or equivalent markup to the image element with missing alt text, or identify the image as decorative.',
      FAIL_P:   'Add an @alt@ attribute or equivalent markup to each of the %N_F image elements with missing alt text, or identify the image as decorative.',
      HIDDEN_S: 'One image element that is hidden was not evaluated.',
      HIDDEN_P: '%N_H image elements that are hidden were not evaluated.',
      NOT_APPLICABLE: 'No @img@ or @[role="img"]@ elements found on this page.'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_PASS_1: '@%1@ element has a role of @%1@ attribute to define an accessible name.',
      ELEMENT_FAIL_1: 'Use the  @alt@ attribute on the @%1@ element to add a text alternative, or to indentify the image as purley decorative set @alt=""@ attribute or change the image to a CSS @background-image@.',
      ELEMENT_FAIL_2: 'Use the @aria-labelledby@ or @aria-label@ attribute for the text alternative for @%1[role="img"]@ element, or change the role to @role="none"@ to identify the image as purely decorative.',
      ELEMENT_HIDDEN_1: '@%1@ element was not evaluated because it is hidden from assistive technologies.'
    },
    PURPOSES: [
      'A text alternative for an image, usually specified with an @alt@ attribute, provides a summary of the purpose of the image for people with visual impairments, enabling them to understand the content or purpose of the image on the page.',
      'An image with a text alternative that is an empty string or that has @role="presentation"@ is ignored by assistive technologies. Such markup indicates that the image is being used for decoration, spacing or other stylistic purposes rather than meaningful content.'
    ],
    TECHNIQUES: [
      'A text alternative should summarize the purpose of an image as succinctly as possible (preferably with no more than 100 characters).',
      'The @alt@ attribute is the preferred and most commonly used way to provide a text alternative for @img@ and @area@ elements.',
      'The @aria-labelledby@ attribute can be used to provide a text alternative when an image can be described using text already associated with the image, or for elements with @role="img"@.',
      'The @aria-label@ attribute should only be used to provide a text alternative in the special case when an element has a @role="img"@ attribute. Use the @alt@ attribute for @img@ and @area@ elements.',
      'The @title@ attribute will be used by assistive technologies to provide a text alternative if no other specification technique is found.',
      'Use the attributes @alt=""@, @role="presentation"@ or include the image as a CSS @background-image@ to identify it as being used purely for stylistic or decorative purposes and one that should be ignored by people using assistive technologies.'
    ],
    MANUAL_CHECKS: [
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML 5 Specification: 12.2 The @img@ element',
        url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-img-element'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @img@ role',
        url:   'https://www.w3.org/TR/wai-aria-1.2/#img'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-label@ attribute',
        url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-labelledby@ attribute',
        url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML Specification: IMG element ALT Attribute',
        url:   'https://html.spec.whatwg.org/#attr-img-alt'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'Web Accessibility Tutorials : Images',
        url:   'https://www.w3.org/WAI/tutorials/images/'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'Diagram Center: Image Description',
        url:   'http://diagramcenter.org/making-images-accessible.html'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'G94: Providing text alternative for non-text content that serves the same purpose and presents the same information as the non-text content',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G94'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'G95: Providing text alternatives that provide a brief description of the non-text content',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G95'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'WebAIM: Alternative Text',
        url:   'https://webaim.org/techniques/alttext/'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'Accessibility at Penn State: Text Equivalents for Images',
        url:   'https://accessibility.psu.edu/images/'
      }
    ]
  },

  IMAGE_2: {
    ID:         'Image 2',
    DEFINITION: 'The text alternative for @img@ elements and elements with @[role="img"]@ must summarize the content and/or purpose of the image.',
    SUMMARY:    'Alt text must summarize purpose',
    TARGET_RESOURCES_DESC: '@img@, [role="img"] with short descriptions',
    RULE_RESULT_MESSAGES: {
      MANUAL_CHECK_S: 'Verify that the text alternative of the @img@ element or element with @[role="img"]@ accurately and succinctly summarizes the content and/or purpose of the image.',
      MANUAL_CHECK_P: 'Verify that the text alternative for each of the %N_MC @img@ elements and/or elements with @[role="img"]@ accurately and succinctly summarizes the content and/or purpose of the image.',
      HIDDEN_S: 'One @img@ element or element with @[role="img"]@ element that is hidden was not evaluated.',
      HIDDEN_P: '%N_H @img@ elements and/or elements with @[role="img"]@ that are hidden were not evaluated.',
      NOT_APPLICABLE: 'No @img@ elements and/or elements with @[role="img"]@ on this page.'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_MC_1: 'Verify the @img@ element\'s text alternative accurately and succinctly summarizes the content and/or purpose of the image.',
      ELEMENT_MC_2: 'Verify the @%1[role=img]@ element\'s text alternative accurately and succinctly summarizes the content and/or purpose of the image.',
      ELEMENT_HIDDEN_1: '@img@ element was not evaluated because it is hidden from assistive technologies.',
      ELEMENT_HIDDEN_2: '@%1[role=img]@ element was not evaluated because it is hidden from assistive technologies.'
    },
    PURPOSES: [
      'Images can convey a wide range of content and be used for many different purposes on a web page, from button and icon images that perform simple actions to complex graphics that help people visualize the features and relationships of large data sets.',
      'Markup supports creating both short and long text alternatives. A short text alternative is designed to orient people who cannot see the image to the type of content it contains or its purpose on the page.  A long text alternative or long description provides comprehensive details of the features of an image, e.g., the data used to generate a chart or graph, relationships in a flow chart, or a MathML version of a mathematical equation.',
      'Images that function as buttons and perform an action on the page should have a short text alternative that is as succinct as possible (e.g., "Increase text size").',
      'Informative images of photographs need a short text alternative and additionally can often benefit from long descriptions.',
      'Informative images of charts or graphs need both a short text alternative and a long description to describe its purpose and the data used to create it.',
      'If an image that is informative does not have text alternative content, users of assistive technologies will not have access to the information the image conveys.'
    ],
    TECHNIQUES: [
      'Use the @alt@ attribute on @img@ elements to provide a text alternative for the image. A rule of thumb is to use what you would say to someone over the phone to describe the image.',
      'The @aria-labelledby@ attribute can be used to provide a text alternative when images can be described using text already associated with the image, such as a visible caption, or for elements with @role="img"@.',
      'The @aria-label@ attribute should only be used to provide a text alternative in the special case when an element has a @role="img"@ attribute.',
      'The @title@ attribute will be used by assistive technologies to provide a text alternative if no other specification technique is found.  NOTE: Using the @title@ attribute will also generate a tooltip in some browsers.',
      'Use the attributes @alt=""@, @role="presentation"@ or include the image as a CSS @background-image@ to identify it as being used purely for stylistic or decorative purposes and that it should be ignored by people using assistive technologies.'
    ],
    MANUAL_CHECKS: [
      'Find each image on the page and verify that it is only being used decoratively or is redundant with other information on the page.'
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML 5 Specification: 12.2 The @img@ element',
        url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-img-element'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @img@ role',
        url:   'https://www.w3.org/TR/wai-aria-1.2/#img'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-label@ attribute',
        url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-labelledby@ attribute',
        url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML Specification: IMG element ALT Attribute',
        url:   'https://html.spec.whatwg.org/#attr-img-alt'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'Web Accessibility Tutorials : Images',
        url:   'https://www.w3.org/WAI/tutorials/images/'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'Diagram Center: Image Description',
        url:   'http://diagramcenter.org/making-images-accessible.html'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'G94: Providing text alternative for non-text content that serves the same purpose and presents the same information as the non-text content',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G94'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'G95: Providing text alternatives that provide a brief description of the non-text content',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G95'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'WebAIM: Alternative Text',
        url:   'https://webaim.org/techniques/alttext/'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'Accessibility at Penn State: Text Equivalents for Images',
        url:   'https://accessibility.psu.edu/images/'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'Diagram Center: Digital Image And Graphic Resources for Accessible Materials',
        url:   'https://diagramcenter.org/'
      }

    ]
  },

  IMAGE_3: {
    ID:         'Image 3',
    DEFINITION: 'The source filename of the image element must not be part of its text alternative.',
    SUMMARY:    'Alt text must not include filename',
    TARGET_RESOURCES_DESC: '@img@, @area@ and @[role="img"]@ elements',
    RULE_RESULT_MESSAGES: {
      FAIL_S:   'Change the value of the @alt@ attribute on the image element to summarize the purpose of the image without referencing its source filename.',
      FAIL_P:   'Change the value of the @alt@ attribute on the %N_F out of %N_T image elements to summarize the purpose of each image without referencing its source filename.',
      HIDDEN_S: 'One image element that is hidden was not evaluated.',
      HIDDEN_P: '%N_H image elements that are hidden were not evaluated.',
      NOT_APPLICABLE:  'No @img@, @area@ or @[role="img"]@ elements found on this page.'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_PASS_1: 'The text alternative does not contain the source filename.',
      ELEMENT_FAIL_1: 'Change the text alternative to summarize the purpose of the image without referencing its source filename.',
      ELEMENT_HIDDEN_1: '@%1@ element was not evaluated because it is hidden from assistive technologies.'
    },
    PURPOSES: [
      'A text alternative should summarize the purpose of an image for people with visual impairments.',
      'The source filename of the image should not be included because generally it is not useful information.',
      'An image with a text alternative that is an empty string is ignored by assistive technologies, and indicates that it is being used for styling purposes rather than meaningful content.'
    ],
    TECHNIQUES: [
      'A text alternative should describe the purpose of an image as succinctly as possible (preferably with no more than 100 characters). Do not include the source filename as part of the text content.',
      'The @alt@ attribute is the preferred and most commonly used way to provide a text alternative for @img@ and @area@ elements.',
      'The @aria-labelledby@ attribute can be used to provide a text alternative when images can be described using text already associated with the image, such as a visible caption, or for elements with @role="img"@.',
      'The @aria-label@ attribute should only be used to provide a text alternative in the special case when an element has a @role="img"@ attribute.',
      'The @title@ attribute will be used by assistive technologies to provide a text alternative if no other specification technique is found.'
    ],
    MANUAL_CHECKS: [
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML Specification: IMG element ALT Attribute',
        url:   'https://html.spec.whatwg.org/#attr-img-alt'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'G94: Providing text alternative for non-text content that serves the same purpose and presents the same information as the non-text content',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G94'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'G95: Providing text alternatives that provide a brief description of the non-text content',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G95'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'F30: Failure of Success Criterion 1.1.1 and 1.2.1 due to using text alternatives that are not alternatives (e.g., filenames or placeholder text)',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F30'
      }
    ]
  },

  IMAGE_4_EN: {
    ID:         'Image 4',
    DEFINITION: 'The text alternative  for an image should be no more than 100 characters in length.',
    SUMMARY:    'Alt text no more than 100 characters',
    TARGET_RESOURCES_DESC: '@img@, @area@ and @[role="img"]@ elements',
    RULE_RESULT_MESSAGES: {
      MANUAL_CHECK_S: 'Verify the image with the text alternative longer than 100 characters could not be reworded more succinctly or be rewritten to use a long description.',
      MANUAL_CHECK_P: 'Verify the %N_MC images with text alternatives longer than 100 characters can not be reworded more succinctly or be rewritten to use long descriptions.',
      HIDDEN_S: 'One image element that is hidden was not evaluated.',
      HIDDEN_P: '%N_H image elements that are hidden were not evaluated.',
      NOT_APPLICABLE: 'No @img@ or @[role="img"]@ elements on this page.'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_PASS_1: 'The text alternative is %1 characters long.',
      ELEMENT_MC_1:   'The text alternative is %1 characters long. Check its content to determine whether it can be reworded to be no more than 100 characters. Also consider providing a long description using the @aria-describedby@, @title@ or @longdesc@ attribute, which would then allow shortening the text alternative content.',
      ELEMENT_HIDDEN_1: '@%1@ element was not evaluated because it is hidden from assistive technologies.'
    },
    PURPOSES: [
      'A text alternative should summarize the purpose of an image as succinctly as possible for people with visual impairments.',
      'Overly long text alternatives can reduce usability by increasing the time it takes to read a web page and understand the significance of the included images.',
      'An image with a text alternative that is an empty string (e.g. @alt=""@) is ignored by assistive technologies, and indicates that it is being used for purely decorative, spacing or stylistic purposes rather than for meaningful content.'
    ],
    TECHNIQUES: [
      'A text alternative (e.g. in English and many other Western languages) should describe the purpose of an image as succinctly as possible (preferably with no more than 100 characters).',
      'If a text alternative requires more than 100 characters, consider using the @aria-describedby@, @title@ or @longdesc@ attribute for a longer, more detailed description of the image, along with shortening the text alternative content.'
    ],
    MANUAL_CHECKS: [
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML Specification: IMG element ALT Attribute',
        url:   'https://html.spec.whatwg.org/#attr-img-alt'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'G94: Providing text alternative for non-text content that serves the same purpose and presents the same information as the non-text content',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G94'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'G95: Providing text alternatives that provide a brief description of the non-text content',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G95'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'F30: Failure of Success Criterion 1.1.1 and 1.2.1 due to using text alternatives that are not alternatives (e.g., filenames or placeholder text)',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F30'
      }
    ]
  },

  IMAGE_5: {
    ID:         'Image 5',
    DEFINITION: 'Images with @[alt=""]@ or @[role="presentation"]@ must only be used to identify purely decorative images, spacing or stylistic purposes.',
    SUMMARY:    'Image is decorative',
    TARGET_RESOURCES_DESC: '@img[alt=""]@, @img[role="presentation"]@, @[role="img"]@ with an empty text alternative',
    RULE_RESULT_MESSAGES: {
      MANUAL_CHECK_S: 'Verify the image is being used purely for decorative, spacing or styling purposes.',
      MANUAL_CHECK_P: 'Verify the %N_MC images are being used purely for decorative, spacing or styling purposes.',
      HIDDEN_S: 'One @img@ element or element with @[role="img"]@ element that is hidden was not evaluated.',
      HIDDEN_P: '%N_H @img@ elements and/or elements with @[role="img"]@ that are hidden were not evaluated.',
      NOT_APPLICABLE: 'No @img@ elements or elements with @[role="img"]@ on this page.'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_MC_1: 'Verify that the @img@ element is used only for decorative, spacing or styling purposes.',
      ELEMENT_MC_2: 'Verify that the @%1[role=img]@ element is used only for decorative, spacing or styling purposes.',
      ELEMENT_HIDDEN_1: '@img@ element was not evaluated because it is hidden from assistive technologies.',
      ELEMENT_HIDDEN_2: '@%1[role=img]@ element was not evaluated because it is hidden from assistive technologies.'
    },
    PURPOSES: [
      'If an image is used purely for stylistic or decorative purposes, users of screen readers do not need to know that the image exists and no alternative is needed.',
      'If an image contains information, but is mistakenly identified as decorative, users of assistive technologies will not have access to the information.'
    ],
    TECHNIQUES: [
      'Use the attributes @alt=""@, @role="presentation"@ or include the image as a CSS @background-image@ to identify it as being used purely for stylistic or decorative purposes and that it should be ignored by people using assistive technologies.'
    ],
    MANUAL_CHECKS: [
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML 5 Specification: 12.2 The @img@ element',
        url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-img-element'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @presentation@ role',
        url:   'https://www.w3.org/TR/wai-aria-1.2/#presentation'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'CSS Backgrounds and Borders Module Level 3: The @background-image@ property',
        url:   'https://www.w3.org/TR/css3-background/#the-background-image'
      }
    ]
  },

  IMAGE_6: {
    ID:         'Image 6',
    DEFINITION: 'Complex images, charts or graphs (e.g. images generated from tabular data) must have long descriptions to provide an additional detailed description of the information conveyed by the image.',
    SUMMARY:    'Long description for complex images',
    TARGET_RESOURCES_DESC: '@img@, [role="img"] that represent complex images and images generated from tabular data.',
    RULE_RESULT_MESSAGES: {
      FAIL_S: 'Update the undefined @idrefs@ of the @img@ element or element with @aria-describedby@ to include only defined @id@ values.',
      FAIL_P: 'Update the undefined @idrefs@ of the %N_MC @img@ elements and/or elements with @aria-describedby@ to include only defined @id@ values.',
      MANUAL_CHECK_S: 'Determine if the @img@ element or element with @[role="img"]@ can benefit from a long description, and if so, provide a detailed description of the content of the image.',
      MANUAL_CHECK_P: 'Determine if any of the %N_MC @img@ elements and/or elements with @[role="img"]@ can benefit from a long description, and for each that can, provide a detailed description of the content of the image.',
      HIDDEN_S: 'One @img@ element or element with @[role="img"]@ element that is hidden was not evaluated.',
      HIDDEN_P: '%N_H @img@ elements and/or elements with @[role="img"]@ that are hidden were not evaluated.',
      NOT_APPLICABLE: 'No @img@ elements and/or elements with @[role="img"]@ on this page.'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_FAIL_1: 'The @longdesc@ attribute is not supported by broswers to provide a long description.',
      ELEMENT_MC_1: 'Verify the long description defined by the @%1@ attribute provides a detailed description of the information conveyed by the image.',
      ELEMENT_MC_2: 'Determine whether the image is a complex image, chart or graph that needs a long description, and whether the text alternative could be used to indicate the presence and location of the long description.',
      ELEMENT_HIDDEN_1: 'The image was not evaluated because it is hidden from assistive technologies.',
    },
    PURPOSES: [
      'A long description should provide more information and detail than the text alternative for the image (e.g. @alt@ attribute).',
      'Images can convey a wide range of content and be used for many different purposes on a web page, from purely decorative to complex graphics helping people visualize the features and relationships of large data sets.',
      'All users can benefit from long descriptions by providing another modality for the author to convey information contained in the image and by providing search engines with information to more accurately return relevant results.',
      'Informative images of photographs or paintings can often benefit from long descriptions.',
      'Informative images like charts or graphs need long descriptions to describe the data used to create the chart or graph.'
    ],
    TECHNIQUES: [
      'Ideally, the long description of an image should be accessible to all users by including it as part of the page content, and in close proximity to the image it describes.',
      'Use the @aria-describedby@ attribute to reference one or more @id@s on the page that contain the long description. When this technique is used, assistive technologies extract the text content of the referenced @id@s and make it available as concatenated, unstructured text (i.e., stripping out any list markup, links, paragraphs, etc.).',
      'Use the @title@ attribute to provide a long description.',
      'Use the @alt@ attribute or equivalent markup to indicate the presence and location of the long description when it consists of structured content (e.g. tabular data, lists, links) in close proximity to the image. For example, @alt="..., for more information view the following data table"@.',
      'Use the @longdesc@ attribute, which requires a URI value, to link to a long description for an image. NOTES: (1) The URI can be an internal link on the same page as the image, or a link to an external page or a fragment thereof. (2) There is a discoverability problem with this technique in that the description will typically only be available to screen reader users. Therefore, until browser implementations for @longdesc@ have improved, alternative techniques that enable all users to access the long description are preferred.',
      'Use techniques that allow all users to view the long description. For example, the @summary/details@ elements can be used when the author prefers the detailed description to be initially hidden from users.'
    ],
    MANUAL_CHECKS: [
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML 5 Specification: 12.2 The @img@ element',
        url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-img-element'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @img@ role',
        url:   'https://www.w3.org/TR/wai-aria-1.2/#img'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-describedby@ attribute',
        url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-describedby'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML5 Image Description Extension (longdesc)',
        url:   'https://www.w3.org/TR/html-longdesc/'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML Specification: IMG element ALT Attribute',
        url:   'https://html.spec.whatwg.org/#attr-img-alt'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'Web Accessibility Tutorials : Images',
        url:   'https://www.w3.org/WAI/tutorials/images/'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'Diagram Center: Image Description',
        url:   'http://diagramcenter.org/making-images-accessible.html'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'G94: Providing text alternative for non-text content that serves the same purpose and presents the same information as the non-text content',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G94'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'WebAIM: Alternative Text',
        url:   'https://webaim.org/techniques/alttext/'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'Accessibility at Penn State: Text Equivalents for Images',
        url:   'https://accessibility.psu.edu/images/'
      },
      { type:  REFERENCES.TECHNIQUE,
        title: 'Diagram Center: Digital Image And Graphic Resources for Accessible Materials',
        url:   'https://diagramcenter.org/'
      }
    ]
  },

  IMAGE_7: {
    ID:         'Image 7',
    DEFINITION: 'Mathematical expressions should use MathJax instead of bitmapped images.',
    SUMMARY:    'Use MathJax for mathematical expressions',
    TARGET_RESOURCES_DESC: '@img@ and [role="img"] elements representing mathematical expressions',
    RULE_RESULT_MESSAGES: {
      MANUAL_CHECK_S: 'If the @img@ element or element with @[role="img"]@ represents a mathematical expression, convert the image content to MathML.',
      MANUAL_CHECK_P: 'If the %N_MC @img@ elements and/or elements with @[role="img"]@ represents a mathematical expression, convert the image content to MathML.',
      HIDDEN_S: 'The @img@ element or element with @[role="img"]@ element that is hidden was not evaluated.',
      HIDDEN_P: '%N_H @img@ elements and/or elements with @[role="img"]@ that are hidden were not evaluated.',
      NOT_APPLICABLE: 'No @img@ elements and/or elements with @[role="img"]@ on this page.'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_MC_1: 'If the @img@ element represents a mathematical expression, convert the image content to MathML.',
      ELEMENT_MC_2: 'If the @%1[role=img]@ element represents a mathematical expression, convert the image content to MathML.',
      ELEMENT_HIDDEN_1: '@img@ element was not evaluated because it is hidden from assistive technologies.',
      ELEMENT_HIDDEN_2: '@%1[role=img]@ element was not evaluated because it is hidden from assistive technologies.'
    },
    PURPOSES: [
      'Images used to convey mathematical expressions are not accessible to people with disabilities using assistive technologies.',
      'MathML is a W3C standard for representing mathematical expressions for web technologies and is the most accessible web math format for people using assistive technologies.',
      'MathML has capabilities similar to SVG graphics, providing the abilities to resize and style content without the loss of fidelity of the visual rendering to match the capabilities of people with visual impairments.'
    ],
    TECHNIQUES: [
      'Use MathML to represent the mathematical expressions.',
      'Use MathJax to support MathML rendering in a wide range of browsers with and without native support for rendering MathML.',
      'Design Science MathPlayer is a universal math reader that now enables math to be spoken in many assistive technology products.'
    ],
    MANUAL_CHECKS: [
    ],
    INFORMATIONAL_LINKS: [
      {type:  REFERENCES.SPECIFICATION,
        title: 'Mathematical Markup Language (MathML) Version 3.0',
        url:   'https://www.w3.org/TR/MathML/'
      },
      {type:  REFERENCES.REFERENCE,
        title: 'MathJax Javascript Library',
        url:   'https://www.mathjax.org/'
      },
      {type:  REFERENCES.REFERENCE,
        title: 'PSU Accessibility: MathML and MathJax',
        url:   'https://accessibility.psu.edu/math/mathml/'
      },
      {type:  REFERENCES.REFERENCE,
        title: 'Design Science: Math Type',
        url:   'https://www.dessci.com/en/products/mathtype/'
      },
      {type:  REFERENCES.REFERENCE,
        title: 'Design Science: Math Player',
        url:   'https://www.dessci.com/en/products/mathplayer/'
      },
      {type:  REFERENCES.REFERENCE,
        title: 'MathML in Daisy',
        url:   'https://www.daisy.org/project/mathml'
      },
      {type:  REFERENCES.REFERENCE,
        title: 'EPUB 3 Accessibility Guidelines: MathML',
        url:   'https://www.idpf.org/accessibility/guidelines/content/mathml/desc.php'
      },
      {type:  REFERENCES.REFERENCE,
        title: 'W3C Math Wiki: MathML Tools',
        url:   'https://www.w3.org/Math/wiki/Tools'
      }
    ]
  },
  IMAGE_8: {
    ID:         'Image 8',
    DEFINITION: 'When an image is used to represent stylized text, replace the image with text content and use CSS to style text.',
    SUMMARY:    'Use CSS to stylize text',
    TARGET_RESOURCES_DESC: '@img@ and [role="img"]',
    RULE_RESULT_MESSAGES: {
      MANUAL_CHECK_S:   'If the image is used to stylize text, replace the image with text content styled with CSS.',
      MANUAL_CHECK_P:   'If any of the %N_MC images are used to stylize text, replace the image with text content styled with CSS.',
      HIDDEN_S: 'One image element with an accessible name was not evaluated.',
      HIDDEN_P: '%N_H image elements with accessible names that are hidden were not evaluated.',
      NOT_APPLICABLE: 'No @img@, @area@ or @[role="img"]@ elements found on this page.'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_MC_1: 'If the image is used to represent stylized text, replace the image with text and use CSS to style text.',
      ELEMENT_HIDDEN_1: '@%1@ element was not evaluated because it is hidden from assistive technologies.'
    },
    PURPOSES: [
      'To enable people with visual impairments who require a particular visual presentation of text to be able to adjust the text presentation as needed.',
      'Adjustments include the use of a particular font size, foreground and background color, font family, line spacing or alignment.'
    ],
    TECHNIQUES: [
      'Replace the image of text with text content that is styled using Cascading Style Sheets (CSS).'
    ],
    MANUAL_CHECKS: [
    ],
    INFORMATIONAL_LINKS: [
      {type:  REFERENCES.SPECIFICATION,
        title: 'W3C Understanding Images of Text',
        url:   'https://www.w3.org/WAI/WCAG22/Understanding/images-of-text.html'
      },
      {type:  REFERENCES.SPECIFICATION,
        title: 'W3C CSS Snapshot',
        url:   'https://www.w3.org/TR/css/'
      },
      {type:  REFERENCES.REFERENCE,
        title: 'MDN Cascading Style Sheets',
        url:   'https://developer.mozilla.org/en-US/docs/Web/CSS'
      },
      {type:  REFERENCES.REFERENCE,
        title: '22: Using CSS to control visual presentation of text',
        url:   'https://www.w3.org/WAI/WCAG22/Techniques/css/C22'
      },
      {type:  REFERENCES.REFERENCE,
        title: 'C30: Using CSS to replace text with images of text and providing user interface controls to switch',
        url:   'https://www.w3.org/WAI/WCAG22/Techniques/css/C30'
      },
      {type:  REFERENCES.REFERENCE,
        title: 'G140: Separating information and structure from presentation to enable different presentations',
        url:   'https://www.w3.org/WAI/WCAG22/Techniques/general/G140'
      }
    ]
  }
};

/* keyboardRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const keyboardRules$1 = {
  KEYBOARD_1: {
    ID:                    'Keyboard 1',
    DEFINITION:            'Elements with ARIA widget roles must support the keyboard interactions required by those roles.',
    SUMMARY:               'ARIA widget role requires specific keyboard support',
    TARGET_RESOURCES_DESC: 'Elements with ARIA widget roles',
    RULE_RESULT_MESSAGES: {
      MANUAL_CHECK_S:  'Verify the element with the ARIA widget role implements the keyboard interactions required by its role.',
      MANUAL_CHECK_P:  'Verify the %N_MC elements with ARIA widget roles implement the keyboard interactions required by their roles.',
      HIDDEN_S:        'One hidden element with an ARIA widget role was not evaluated.',
      HIDDEN_P:        '%N_H hidden elements with ARIA widget roles were not evaluated.',
      NOT_APPLICABLE:  'No elements with ARIA widget roles on the page'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_MC_1:     'Verify that the keyboard interactions required by the ARIA @%1@ role are properly implemented.',
      ELEMENT_HIDDEN_1: 'Element with ARIA @%1@ widget role was not evaluated because it is hidden.'
    },
    PURPOSES: [
      'Keyboard support is required by people who cannot use the mouse and/or gestures to select the options and perform the actions made available to them by interactive elements.',
      'Native HTML4 and HTML5 link and form control elements have default keyboard interactions that are built-in and standardized among browsers.',
      'When authors create custom interactive elements they need to support the keyboard interaction patterns that users have come to expect, and a key part of implementing this support is understanding the specific keyboard interactions required by the element\'s ARIA role.',
      'The ARIA Authoring Practices Guide identifies the keyboard interaction patterns that users expect and can rely upon, based on each ARIA widget role.',
      'NOTE: Touch typists often prefer keyboard commands over mouse actions, especially for frequently performed operations, since they are much more efficient from a hand motion perspective.'
    ],
    TECHNIQUES: [
      'Use the ARIA Authoring Practices guide to identify the keyboard interaction support needed for each ARIA widget role being used.',
      'Add custom @keydown@, @keypress@ and/or @keyup@ event handlers to support the keyboard interactions required by the ARIA widget role.',
      'Verify that keyboard interactions are consistent among browsers and devices (e.g., desktop computers and mobile devices using Bluetooth keyboards).'
      ],
    MANUAL_CHECKS: [
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML: Focus',
        url:   'https://html.spec.whatwg.org/multipage/interaction.html#focus'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: Managing Focus and Supporting Keyboard Navigation',
        url:   'https://www.w3.org/TR/wai-aria-1.2/#managingfocus'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: Widget Roles',
        url:   'https://www.w3.org/TR/wai-aria/#widget_roles'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'W3C ARIA Authoring Practices: Design Patterns',
        url:   'https://www.w3.org/WAI/ARIA/apg/patterns/'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'Mozilla Developer Network: DOM on-event handlers',
        url:   'https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Event_handlers'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'Mozilla Developer Network: EventTarget.addEventListener()',
        url:   'https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
      }
    ]
  },
  KEYBOARD_2: {
    ID:                    'Keyboard 2',
    DEFINITION:            'The sequential tab order of all links, form controls, and ARIA widgets on the page must be meaningful.',
    SUMMARY:               'Sequential tab order of focusable elements must be meaningful',
    TARGET_RESOURCES_DESC: '@a@, @area@, @input@, @textarea@, and @select@ elements, and elements with a @tabindex@ value greater than or equal to 0',
    RULE_RESULT_MESSAGES: {
      PASS_S:             'Only one link or form control element on the page and no other elements with @tabindex@ values greater than or equal to 0, so no issues with sequential tab order.',
      PASS_P:             '%N_P link and/or form control elements on the page and no other elements with @tabindex@ values greater than or equal to 0, so no issues with sequential tab order.',
      MANUAL_CHECK_S:     'Verify that the sequential order of traversing all focusable elements on the page using only the tab key is meaningful.',
      MANUAL_CHECK_P:     'Verify that the sequential order of traversing all focusable elements on the page using only the tab key is meaningful.',
      HIDDEN_S:           'The link, form control, or widget element that is hidden does not need to be tested for focus order.',
      HIDDEN_P:           'The %N_H links, form controls and/or widgets that are hidden do not need to be tested for focus order.',
      NOT_APPLICABLE:     'Only one or no focusable elements on the page'
    },
    BASE_RESULT_MESSAGES: {
      PAGE_PASS_1:       'No elements on the page are using @tabindex@ attribute that might affect sequential tab traversal.',
      PAGE_MC_1:         'Use the "tab" key to verify the sequential focus order of the %1 interactive elements on the page (i.e. links, form controls, widgets ...).',
      ELEMENT_PASS_1:    'The @%1@ element does not have a @tabindex@ value, so it effects no change in sequential tab traveral on the page.',
      ELEMENT_MC_1:      'Verify the @%1@ element should be part of the sequential tab order of the page. NOTE: @tabindex@ values greater than 0 should be avoided due to inconsistencies with browser implementations.',
      ELEMENT_MC_2:      'Verify the @%1@ element should be part of the sequential tab order of the page. NOTE: The element by default is part of the tab sequence of the page, there is no need to set @tabindex=0@.',
      ELEMENT_MC_3:      'Verify the @%1@ element should be part of the sequential tab order of the page.',
      ELEMENT_MC_4:      'Verify the @%1@ element should be part of the sequential tab order of the page. NOTE: It is unusual for a non-widget role to be part of the tab sequence of the page.',
      ELEMENT_HIDDEN_1:  'The @%1@ element with the @tabindex=%2@ was not evaluated because it is hidden from assistive technologies.'
    },
    PURPOSES: [
      'Support for tab key traversal of focusable elements is required by people who cannot use the mouse and/or gestures to select the options and perform the actions made available to them by interactive elements.',
      'Native HTML links and form control elements have default keyboard support for tab key traversal that are built-in and standardized among browsers.',
      'When authors create custom interactive elements they need to support the keyboard interaction patterns that users have come to expect, and a key part of implementing this support is understanding how the @tabindex@ attribute can be used for managing keyboard focus.',
      'The ARIA Authoring Practices Guide identifies how to use @tabindex@ to help manage keyboard focus for widget roles.',
      'NOTE: Touch typists often prefer keyboard commands over mouse actions, especially for frequently performed operations, since they are much more efficient from a hand motion perspective.'
    ],
    TECHNIQUES: [
      'HTML form controls and link elements do not need an explicit @tabindex@ value to be part of the sequential tab order; assigning a @tabindex@ value to one of these elements means you intend to change its default behavior.',
      'Setting @tabindex@ attribute to @0@ allows an element to become focusable and makes it part of the tab sequence of the page',
      'Setting @tabindex@ attribute to @-1@ allows an element to become focusable through related keyboard event handlers / scripting',
      'Use the ARIA Authoring Practices Guide to define keyboard support that is appropriate for particular ARIA widget roles.',
      'Use keyboard event handlers to implement keyboard support for interactive behaviors defined on the page.',
      'Avoid using @object@ and @embed@ elements due to the difficulty in providing the corresponding keyboard support for all of their inherent interactive behaviors.',
      'Avoid using @tabindex@ values greater than 0 to change the tabbing order, since tab sequence implementations for values greater than 0 are inconsistent and their associated behaviors can be unpredictable across web browsers.'
    ],
    MANUAL_CHECKS: [
      'Use the tab key to verify the tab sequence of interactive elements of the page is in a logical.',
      'Make a list of the functional feature of a web site.',
      'Using only the keyboard, perform all of the functional features provided the interactive components on the web page.'
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML: Focus',
        url:   'https://html.spec.whatwg.org/multipage/interaction.html#focus'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: Managing Focus and Supporting Keyboard Navigation',
        url:   'https://www.w3.org/TR/wai-aria-1.2/#managingfocus'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'W3C ARIA Authoring Practices: Design Patterns',
        url:   'https://www.w3.org/WAI/ARIA/apg/patterns/'
      }
    ]
  },

  KEYBOARD_3: {
    ID:                    'Keyboard 3',
    DEFINITION:            '@object@ and @embed@ elements must not trap the keyboard.',
    SUMMARY:               'No keyboard trap',
    TARGET_RESOURCES_DESC: '@object@ and @embed@ elements',
    RULE_RESULT_MESSAGES: {
      MANUAL_CHECK_S:  'Verify the embedded application to make sure the application does not trap the keyboard.',
      MANUAL_CHECK_P:  'Verify the %N_MC embedded applications to make sure application does not trap the keyboard.',
      HIDDEN_S:        'One hidden @object@ or @embed@ element was not evaluated.',
      HIDDEN_P:        '%N_H hidden @object@ and/or @embed@ elements were not evaluated.',
      NOT_APPLICABLE:  'No @applet@ and @object@ elements on the page.'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_MC_1:     'Verify the %1 element to see if it traps the keyboard.',
      ELEMENT_HIDDEN_1: '%1 element is hidden, so it cannot trap the keyboard.'
    },
    PURPOSES: [
      'If an embedded application (i.e. @object@ or @embed@ element) traps the keyboard, keyboard users will not be able to use the web page.'
    ],
    TECHNIQUES: [
      'Use @tabindex="-1"@ on the element to remove it from "tab" order of the page.',
      'If the embedded application does support accessibility, use a button to move focus to the application.'
    ],
    MANUAL_CHECKS: [
      'Move keyboard focus to the embedded application and see if you can move focus back to the web content using just the keyboard.'
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
      }
    ]
  },

  KEYBOARD_4: {
    ID:                    'Keyboard 4',
    DEFINITION:            'Avoid @tabindex@ values greater than 0.',
    SUMMARY:               'Avoid @tabindex@ > 0',
    TARGET_RESOURCES_DESC: '@a@, @area@, @input@, @textarea@ and @select@ elements, and elements with widget roles with @tabindex@ values',
    RULE_RESULT_MESSAGES: {
      MANUAL_CHECK_S:     'Verify the sequential "tab" focus order of the page for the element with @tabindex@ greater than 0 is consistent across browsers and operating systems.',
      MANUAL_CHECK_P:     'Verify the sequential "tab" focus order of the page for the %N_MC elements with @tabindex@ greater than 0 is consistent across browsers and operating systems.',
      HIDDEN_S:           'The link, form control, or widget element that is hidden does not need to be tested for focus order.',
      HIDDEN_P:           'The %N_H links, form controls and/or widgets that are hidden do not need to be tested for focus order.',
      NOT_APPLICABLE:     'No elements with @tabindex@ value greater than 0'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_MC_1:      'Verify the @%1@ element with the @tabindex@ value of %2 is consistently in he same sequential order across browsers and operating systemsx.',
      ELEMENT_HIDDEN_1:  'The @%1@ element with the @tabindex=%2@ was not evaluated because it is hidden from assistive technologies.'
    },
    PURPOSES: [
      'Keyboard support is required by people who cannot use the mouse and/or gestures to select the options and perform the actions made available to them by interactive elements.',
      'Native HTML4 and HTML5 link and form control elements have default keyboard interactions that are built-in and standardized among browsers.',
      'When authors create custom interactive elements they need to support the keyboard interaction patterns that users have come to expect, and part of this support is understanding how the @tabindex@ attribute value in managing keyboard focus.',
      'The ARIA Authoring Practices Guide identifies how to use @tabindex@ to help manage keyboard focus for widget roles.',
      'NOTE: Touch typists often prefer keyboard commands over mouse actions, especially for frequently performed operations, since they are much more efficient from a hand motion perspective.'
    ],
    TECHNIQUES: [
      'Avoid using @tabindex@ values greater than 0 to change tabbing order, since tab sequence for values greater than 0 is inconsistent and therefore can be unpredictable across web browsers.',
      'HTML form controls and link elements do not need a @tabindex@ valuable to be part of the sequential tab order, assigning a @tabindex@ value to one of these elements means you intend to change their default behavior.',
      'Setting @tabindex@ attribute to @0@ allows an element to become focusable and makes it part of the tab sequence of the page',
      'Setting @tabindex@ attribute to @-1@ allows an element to become focusable through related keyboard event handlers through scripting',
      'Use the ARIA Authoring Practices to define keyboard support that is appropriate for widget roles.',
      'Use keyboard event handlers to implement keyboard support for interactive behaviors defined on the page.'
    ],
    MANUAL_CHECKS: [
      'Use the tab key to verify the tab sequence of interactive elements of the page is in a logical.',
      'Make sure the elements with @tabindex@ > 0 make sense in the tab sequence of the page.',
      'Test on both Windows, macOS, Android and iOS using more than one browser to make sure there is consistent keyboard navigation support.'
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML: Focus',
        url:   'https://html.spec.whatwg.org/multipage/interaction.html#focus'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: Managing Focus and Supporting Keyboard Navigation',
        url:   'https://www.w3.org/TR/wai-aria-1.2/#managingfocus'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'W3C ARIA Authoring Practices: Design Patterns',
        url:   'https://www.w3.org/WAI/ARIA/apg/patterns/'
      }
    ]
  },

  KEYBOARD_5: {
      ID:                    'Keyboard 5',
      DEFINITION:            'The element with keyboard focus must have a visible focus style that is different from the non-focus state.',
      SUMMARY:               'Focus must be visible',
      TARGET_RESOURCES_DESC: '@a@, @area@, @input@, @textarea@ and @select@ elements and elements with widget roles with @tabindex@ values',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:     'Use the "tab" key to move focus between links, form controls, embedded apps and widgets and check the visibility of focus styling for each element as it receives focus.',
        MANUAL_CHECK_P:     'Use the "tab" key to move focus between links, form controls, embedded apps and widgets and check the visibility of focus styling for each element as it receives focus.',
        HIDDEN_S: 'The link, form control, embedded app or widget element that is hidden does not need to be tested for focus order.',
        HIDDEN_P: 'The %N_H links, form controls, embedded apps and/or widgets that are hidden do not need to be tested for focus order.',
        NOT_APPLICABLE:  'No focusable elements on the page'
      },
      BASE_RESULT_MESSAGES: {
        PAGE_MC_1:        'Use keyboard commands to check the keyboard focus styling of the %1 interactive elements on the page (i.e. links, form controls, ...).',
        PAGE_MC_2:        'Use keyboard commands to check the keyboard focus styling of the %1 interactive elements on the page (i.e. links, form controls, ...); NOTE: %2 interactive elements are hidden.',
        ELEMENT_MC_1:     'Verify the visual focus styling of the @%1@ element includes a solid discernible focus border at least 2 pixels in width.',
        ELEMENT_HIDDEN_1: '%1 element is hidden, so is not visible for observing the focus styling.'
      },
      PURPOSES: [
        'Many browsers don\'t provide a prominent or consistent visible keyboard focus styling for interactive elements, making it difficult for users to identify and track the element with keyboard focus.',
        'Author defined visible keyboard focus style makes it easier for users to know which interactive element has keyboard focus and provides more consistent user experience between browsers and operating systems.'
      ],
      TECHNIQUES: [
        'Use CSS psuedo element selector @:focus@ to change the styling of elements with keyboard focus to include a 2 pixel border.',
        'Use @focus@ and @blur@ event handlers on checkboxes and radio buttons to change the styling of not only the form control, but also its label text to make it easier to see.',
        'Styling changes should include creating at least a 2 pixel border around the interactive element and its label, typically using the CSS @border@ or @outline@ properties.',
        'For consistent look and feel to the website it is often useful for the focus and hover styles to be the same or similar.'
      ],
      MANUAL_CHECKS: [
        'Use the the keyboard (i.e. typically he "tab" key, but in the case of widgets other keys) to move focus through the links, form controls, embedded applications and widgets on the page.',
        'Check if the element with keyboard focus is clearly visible for all focusable elements on the page as you move focus between elements, and that it changes more than just color (i.e. border/outline around element with focus).',
        'Test keyboard focus styling using more than one browser and operating system, since there is a wide variability of between operating systems and browsers for styling keyboard focus.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'C15: Using CSS to change the presentation of a user interface component when it receives focus ',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/css/C15.html'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G195: Using an author-supplied, highly visible focus indicator',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G195'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G149: Using user interface components that are highlighted by the user agent when they receive focus ',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G149.html'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G165: Using the default focus indicator for the platform so that high visibility default focus indicators will carry over ',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G165.html'
        }
      ]
  },

  KEYBOARD_6: {
      ID:                    'Keyboard 6',
      DEFINITION:            '@select@ elements with @onchange@ or other event handlers must not automatically change the user\'s context when keyboard focus moves between options.',
      SUMMARY:               '@select@ must not change context',
      TARGET_RESOURCES_DESC: '@a@, @area@ and @role="link"@ elements',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:     'Check the @select@ element to make sure that when keyboard focus moves between options does not cause a change in context (e.g. moving to a new URL or focus being moved from the @select@ element).',
        MANUAL_CHECK_P:     'Check the %N_MC @select@ elements to make sure that when keyboard focus moves between options in each control does not cause a change in context (e.g. moving to a new URL or focus being moved from the @select@ element).',
        HIDDEN_S: 'The @select@ element that is hidden does not need to be tested for automatically changing user context.',
        HIDDEN_P: 'The %N_H @select@ elements that are hidden do not need to be tested for automatically changing user context.',
        NOT_APPLICABLE:  'No @select@ elements on the page'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_MC_1: 'Check to make sure moving keyboard focus between options in the @select@ box does not move focus from the list of options.',
        ELEMENT_HIDDEN_1: '@select@ element is hidden and therefore not operable by any user.'
      },
      PURPOSES: [
        'User\'s can become disoriented if the focus changes cause unpredicatable actions.',
        'When the user is using the kyboard to explore @select@ box options, the focus must stay on the options, until the user selects one of the options.'
      ],
      TECHNIQUES: [
        'Do not use @onchange@ event handlers on @select@ elements.',
        'Use selections should be made using the enter key.'
      ],
      MANUAL_CHECKS: [
        'Move focus to the @selection@ box and use the keyboard to move the focus between options, check to make sure the focus changes are not causing the context to change (i.e. focus movig to a new window or focus moving from the current option in the select box).'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G200: Opening new windows and tabs from a link only when necessary',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G200'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G201: Giving users advanced warning when opening a new window',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G201'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'F52: Failure of Success Criterion 3.2.1 and 3.2.5 due to opening a new window as soon as a new page is loaded',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F52'
        }
      ]
  },
  KEYBOARD_7: {
        ID:                    'Keyboard 7',
        DEFINITION:            'When pointer hover or keyboard focus triggers additional content to become visible and then hidden, the content is dismissible, hoverable and persistent, there are some exceptions.',
        SUMMARY:               'Content on Hover or Focus',
        TARGET_RESOURCES_DESC: 'Page',
        RULE_RESULT_MESSAGES: {
          MANUAL_CHECK_S:  'The evaluation library can not automatically determine if content becomes visible and then hidden based on pointer or keyboard actions.  Verification requires understanding the requirements, determining of the the requirement applies to a page and then verifying through interaction with the page if the requirements have been met.'
        },
        BASE_RESULT_MESSAGES: {
          PAGE_MC_1: 'The evaluation library can not automatically determine if content becomes visible and then hidden based on pointer or keyboard actions.  Verification requires understanding the requirements, determining of the the requirement applies to a page and then verifying through interaction with the page if the requirements have been met.'
        },
        PURPOSES: [
          'Users with low vision who view content under magnification will be better able to view content on hover or focus without reducing their desired magnification.',
          'Users who increase the size of mouse cursors via platform settings or assistive technology will be able to employ a technique to view obscured content on hover.',
          'Users with low vision or cognitive disabilities will have adequate time to perceive additional content appearing on hover or focus and to view the trigger content with less distraction.',
          'Users with low pointer accuracy will be able to more easily dismiss unintentionally-triggered additional content.'
        ],
        TECHNIQUES: [
          'Dismissible: Make sure content does not interfere with viewing other content on the page by making sure it does not obscure any other content or that the content can be easily dismissed using the pointer or a keyboard command like the escape key.',
          'Hoverable: When content appears it remains visible if the user hovers over it with their pointer.',
          'Persistent: COntent remains visible until the user removes hover or focus form the trigger and the additional content, the user activates a command to hide the information, or the information ois not longer vaild (e.g. a busy message).',
          'Exceptions: There are some exceptions, for example error messages.  Please read the requirements carefully for exceptions.'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type:  REFERENCES.SPECIFICATION,
            title: 'W3C WCAG: Understanding Content on Hover or Focus',
            url:   'https://www.w3.org/WAI/WCAG22/Understanding/content-on-hover-or-focus.html'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'SCR39: Making content on focus or hover hoverable, dismissible, and persistent',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/client-side-script/SCR39'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'F95: Failure of Success Criterion 1.4.13 due to content shown on hover not being hoverable',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/failures/F95'
          }
        ]
  },
  KEYBOARD_8: {
        ID:                    'Keyboard 8',
        DEFINITION:            'If a web page can be navigated sequentially and the navigation sequences affect meaning or operation, focusable components receive focus in an order that preserves meaning and operability.',
        SUMMARY:               'Focus Order',
        TARGET_RESOURCES_DESC: 'Page',
        RULE_RESULT_MESSAGES: {
          MANUAL_CHECK_S: 'The evaluation library can not automatically verify logical focus order.  Verification requires understanding the requirements and then interacting with the page to make sure the focus order requirements are met.'
        },
        BASE_RESULT_MESSAGES: {
          PAGE_MC_1: 'The evaluation library can not automatically verify logical focus order.  Verification requires understanding the requirements and then interacting with the page to make sure the focus order requirements are met.'
        },
        PURPOSES: [
          'People with mobility impairments who must rely on keyboard access for operating a page benefit from a logical, usable focus order.',
          'People with disabilities that make reading difficult can become disoriented when tabbing takes focus someplace unexpected. They benefit from a logical focus order.',
          'People with visual impairments can become disoriented when tabbing takes focus someplace unexpected or when they cannot easily find the content surrounding an interactive element.',
          'Only a small portion of the page may be visible to an individual using a screen magnifier at a high level of magnification. Such a user may interpret a field in the wrong context if the focus order is not logical.'
        ],
        TECHNIQUES: [
          'Example: On a web page that contains a tree of interactive controls, the user can use the up and down arrow keys to move from tree node to tree node. Pressing the right arrow key expands a node, then using the down arrow key moves into the newly expanded nodes.',
          'Example: A Web page implements modeless dialogs via scripting. When the trigger button is activated, a dialog opens. The interactive elements in the dialog are inserted in the focus order immediately after the button. When the dialog is open, the focus order goes from the button to the elements of the dialog, then to the interactive element following the button. When the dialog is closed, the focus order goes from the button to the following element.',
          'Example: A Web page implements modal dialogs via scripting. When the trigger button is activated, a dialog opens and focus is set within the dialog. As long as the dialog is open, focus is limited to the elements of the dialog. When the dialog is dismissed, focus returns to the button or the element following the button.',
          'Example: An HTML Web page is created with the left hand navigation occurring in the HTML after the main body content, and styled with CSS to appear on the left hand side of the page. This is done to allow focus to move to the main body content first without requiring tabIndex attributes or JavaScript.'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type:  REFERENCES.SPECIFICATION,
            title: 'W3C WCAG: Understanding Focus Order',
            url:   'https://www.w3.org/WAI/WCAG21/Understanding/focus-order.html'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'G59: Placing the interactive elements in an order that follows sequences and relationships within the content',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G59'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'C27: Making the DOM order match the visual order',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/css/C27'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'SCR26: Inserting dynamic content into the Document Object Model immediately following its trigger element',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/client-side-script/SCR26'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'SCR37: Creating Custom Dialogs in a Device Independent Way',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/client-side-script/SCR37'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'SCR27: Reordering page sections using the Document Object Model',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/client-side-script/SCR27'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'F44: Failure of Success Criterion 2.4.3 due to using tabindex to create a tab order that does not preserve meaning and operability',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F44'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'F85: Failure of Success Criterion 2.4.3 due to using dialogs or menus that are not adjacent to their trigger control in the sequential navigation order',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F85'
          }
        ]
  },
  KEYBOARD_9: {
        ID:                    'Keyboard 9',
        DEFINITION:            'When a user interface component receives keyboard focus, the component is not entirely hidden due to author-created content.',
        SUMMARY:               'Focus is not obscured (Minimum)',
        TARGET_RESOURCES_DESC: 'Page',
        RULE_RESULT_MESSAGES: {
          MANUAL_CHECK_S: 'The evaluation library can not automatically verify verify if a control or link with keyboard focus is obscured.  Verification requires understanding the requirements and then interacting with the page to make sure that controls receive focus they are not obscured.'
        },
        BASE_RESULT_MESSAGES: {
          PAGE_MC_1: 'The evaluation library can not automatically verify verify if a control or link with keyboard focus is obscured.  Verification requires understanding the requirements and then interacting with the page to make sure that controls receive focus they are not obscured.'
        },
        PURPOSES: [
          'Sighted users who rely on a keyboard interface to operate the page will be able to see the component which gets keyboard focus. Such users include those who rely on a keyboard or on devices which use the keyboard interface, including speech input, sip-and-puff software, onscreen keyboards, scanning software, and a variety of assistive technologies and alternate keyboards.',
          'People with limited or low vision, who may primarily user a pointer for screen orientation and repositioning, nonetheless benefit from a visible indication of the current point of keyboard interaction, especially where magnification reduces the overall viewing portion of the screen.',
          'People with attention limitations, short term memory limitations, or limitations in executive processes benefit by being able to discover where the focus is located.'
        ],
        TECHNIQUES: [
          'Example: A page has a sticky footer (attached to the bottom of the viewport). When tabbing down the page the focused item is not completely hidden by the footer because content in the viewport scrolls up to always display the item with keyboard focus using scroll padding.',
          'Example: A page has a full-width cookie approval dialog. The dialog is modal, preventing access to the other controls in the page until it has been dismissed. Focus is not obscured because the major portion of the cookie approval dialog remains on screen (until selections are made and submitted), and so the major portion of the keyboard focus indicator remains visible.',
          'Example: A notification is implemented as a sticky header and the keyboard focus is moved to the notification so at least part of the focus indicator is in view. The notification disappears when it loses focus so it does not obscure any other controls, and part of the prior keyboard focus indicator is visible.'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type:  REFERENCES.SPECIFICATION,
            title: 'W3C WCAG: Understanding Focus Not Obscured (Minimum)',
            url:   'https://www.w3.org/WAI/WCAG22/Understanding/focus-not-obscured-minimum.html'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'C43: Using CSS scroll-padding to un-obscure content',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/css/C43'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'F110: Failure of Success Criterion 2.4.12 Focus Not Obscured (Minimum) due to a sticky footer or header completely hiding focused elements',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/failures/F110'
          }
        ]
  }



};

/* landmarkRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const landmarkRules$1 = {

  // ----------------------------------------------------------------
  // LANDMARK_1: main landmark: at least one
  // ----------------------------------------------------------------

  LANDMARK_1: {
      ID:         'Landmark 1',
      DEFINITION: 'Each page must have at least one @main@ landmark, used to identify the main content.',
      SUMMARY:    '@main@ landmark: at least one',
      TARGET_RESOURCES_DESC: '@[role="main"]@ and @main@ element',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Add a @main@ landmark to the page.',
        FAIL_P:   'Add a @main@ landmark to the page.',
        HIDDEN_S: 'One @main@ landmark that is hidden was not evaluated.',
        HIDDEN_P: '%N_H @main@ landmarks that are hidden were not evaluated.'
      },
      BASE_RESULT_MESSAGES: {
        PAGE_PASS_1: 'Page has one @main@ landmark.',
        PAGE_PASS_2: 'Page has %1 @main@ landmarks.',
        PAGE_FAIL_1: 'Add a @main@ landmark that identifies the main content of the page.',
        ELEMENT_PASS_1:   '@%1[role="main"]@ defines a @main@ landmark.',
        ELEMENT_PASS_2:   '@main@ element defines a @main@ landmark.',
        ELEMENT_HIDDEN_1: '@%1@ element with @role="main"@ was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: '@main@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'A @main@ landmark provides a navigation point to the primary content of the page for users of assistive technologies.',
        'Most pages only need one @main@ landmark, but in the case of portals or mashups, there may be more than one @main@ landmark on a "page".'
      ],
      TECHNIQUES: [
        'A @main@ element or an element with a @role="main"@ attribute defines a @main@ landmark.',
        'When there is only one @main@ landmark on the page (the typical case), do not use a label.',
        'When there is more than one @main@ landmark, use the @aria-labelledby@ or @aria-label@ attribute to describe the content of each.',
        'If you need to support Microsoft Internet Explorer 8, you must NOT use the @main@ element since the element is supported in the accessibility API, just use @role="main"@ to identify the main landmark.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: main role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#main'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: The MAIN element',
          url:   'https://www.w3.org/TR/html5/sections.html#the-main-element'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
          url:   'https://www.w3.org/WAI/ARIA/apg/#aria_landmark'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
          url:   'https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Page Structure',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
        }
      ]
  },

  // ----------------------------------------------------------------
  // LANDMARK_2: Page structure must/should be defined by landmarks
  // ----------------------------------------------------------------

  LANDMARK_2: {
      ID:         'Landmark 2',
      DEFINITION: 'All rendered content must be placed inside of container elements with appropriate ARIA landmark roles.',
      SUMMARY:    'All content must be contained in landmarks',
      TARGET_RESOURCES_DESC: 'all rendered content',
      RULE_RESULT_MESSAGES: {
        FAIL_S: 'Update the landmark structure of the page by placing the one element not contained in a landmark into a container element with a proper landmark role.',
        FAIL_P: 'Update the landmark structure of the page by placing the %N_F elements not contained in landmarks into one or more container elements with proper landmark roles.',
        MANUAL_CHECK_S: 'One element may contain renderable content.  If so, move it into a container element with proper landmark role.',
        MANUAL_CHECK_P: '%N_MC elements may contain renderable content.  If so, move them into container elements with proper landmark roles.',
        HIDDEN_S: 'One hidden element with renderable content was found.  If it could become visible make sure it is in a container element with a proper landmark role.',
        HIDDEN_P: '%N_H hidden elements with renderable content were found.  If any could become visible make sure they are in container elements with proper landmark roles.',
        NOT_APPLICABLE: 'No renderable content found on this page.'
      },
      BASE_RESULT_MESSAGES: {
        PAGE_PASS_1: 'All %1 elements with content are contained in landmarks.',
        PAGE_MC_1:   '%1 element(s) may contain renderable content. If so, move it/them into appropriate landmarks.',
        PAGE_FAIL_1: 'Move %1 element(s) into appropriate landmarks. (This may require creating additional landmarks.)',
        ELEMENT_PASS_1:   '@%1@ element is contained in @%2@ landmark.',
        ELEMENT_MC_1:     '@%1@ element may contain renderable content. If so, move it into an appropriate landmark.',
        ELEMENT_FAIL_1:   'Move @%1@ element into an appropriate landmark. (This may require creating an additional landmark.)',
        ELEMENT_HIDDEN_1: 'The @%1@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'Landmarks provide a way to organize the various types of content on a page for users of assistive technologies. The organization of content regions using landmarks is functionally similar to the way visual designers organize information for people who rely on a graphical rendering of the content.',
        'When content is not contained in a landmark, it will be unreachable using landmark navigation, which is an important feature provided by assistive technologies such as screen readers.',
        'EXCEPTION: Dialog content is not required to be in a landmark.'
      ],
      TECHNIQUES: [
        'Use the appropriate landmarks to identify the different regions of content on a web page.',
        'The most important landmark roles are @main@ and @navigation@, as nearly every page will include at least those regions.',
        'Other commonly used landmark roles include @banner@, @contentinfo@, @complementary@ and @search@.',
        'Use HTML sectioning elements that have a default ARIA landmark role: @main@ (@main@), @nav@ (@navigation@), @aside@ (@complementary@) and in some situations @header@ (@banner@) and @footer@ (@contentinfo@). When using these elements, the @role@ attribute should NOT be defined.',
        'A landmark can be created using a @div@ element with a @role@ attribute and the appropriate ARIA landmark role value (e.g., @role="main"@).',
        'The @search@ role is typically placed on a @form@ element or a @div@ that surrounds the search form.'
      ],
      MANUAL_CHECKS: [
        '@object@, @embed@ and @applet@ tags may be used to render content. Use inspection tools to determine if any of these elements actually render content on the page.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Landmark Roles',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#landmark_roles'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML: Sections',
          url:   'https://html.spec.whatwg.org/multipage/sections.html'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
          url:   'https://www.w3.org/WAI/ARIA/apg/#aria_landmark'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
          url:   'https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Page Structure',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
        }
      ]
  },

  // ----------------------------------------------------------------
  // LANDMARK_3: navigation landmark: at least one
  // ----------------------------------------------------------------

  LANDMARK_3: {
      ID:         'Landmark 3',
      DEFINITION: 'Each page in a website must have at least one @navigation@ landmark, used to identify website navigation links.',
      SUMMARY:    '@navigation@ landmark: at least one',
      TARGET_RESOURCES_DESC: '@[role="navigation"]@ or top-level @nav@ element',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Add one or more @navigation@ landmarks that identify groups of links that support website navigation.',
        FAIL_P:   'Add one or more @navigation@ landmarks that identify groups of links that support website navigation.',
        HIDDEN_S: 'One @navigation@ landmark that is hidden was not evaluated.',
        HIDDEN_P: '%N_H @navigation@ landmarks that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No lists of links found on page.'
      },
      BASE_RESULT_MESSAGES: {
        WEBSITE_PASS_1: 'The page contains one @navigation@ landmark.',
        WEBSITE_PASS_2: 'The page contains %1 @navigation@ landmarks.',
        WEBSITE_FAIL_1: 'Add at least one @navigation@ landmark to the page to identify the links used for website or page content navigation.',
        ELEMENT_PASS_1:   '@%1[role="navigation"]@ defines a @navigation@ landmark.',
        ELEMENT_PASS_2:   '@nav@ element defines a @navigation@ landmark.',
        ELEMENT_FAIL_1:   '@%1@ list element has %2 links and they are not in a @navigation@ landmark.',
        ELEMENT_HIDDEN_1: '@%1@ element with @role="navigation"@ was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'Navigation landmarks provide a way to identify groups (e.g. lists) of links that are intended to be used for website or page content navigation.'
      ],
      TECHNIQUES: [
        'Reserve the @navigation@ landmark for website and page navigation links.',
        'Website and page navigation links should be top-level @navigation@ landmarks (i.e. not contained in other landmarks).',
        'The @nav@ element or an element with @role="navigation"@ attribute defines a @navigation@ landmark and must be on a container element (e.g., @div@) for @ol@ and @ul@ elements that contain li elements with links. (This may require adding a container element.)',
        'If there is only one @navigation@ landmark on the page, do not use a label.',
        'If there is more than one @navigation@ landmark, use the @aria-labelledby@, @aria-label@ oe @title@ attribute to describe the purpose of the links (e.g., Table of Contents, Site Map, etc.) contained in each.',
        'If the same set of links is used in more than one place on a page, use "Copy 1", "Copy 2" ... "Copy N" as a part of the accessible name to make the navigation labels unique and help orient assistive technology users that the group of links is repeated on the page.'
      ],
      MANUAL_CHECKS: [
        'A list of links to other pages in the website, or to content sections of the current page, should use a @navigation@ landmark.',
        'Verify the links are used for website or page navigation purposes.',
        'Verify the labels uniquely identify each set of navigational links.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: navigation role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#navigation'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: The NAV element',
          url:   'https://www.w3.org/TR/html5/sections.html#the-nav-element'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
          url:   'https://www.w3.org/WAI/ARIA/apg/#aria_landmark'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
          url:   'https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Page Structure',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H97: Grouping related links using the nav element',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H97.html'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
        }
      ]
  },

  // ----------------------------------------------------------------
  // LANDMARK_4: banner landmark: for branding content
  // ----------------------------------------------------------------

  LANDMARK_4: {
      ID:         'Landmark 4',
      DEFINITION: 'Website branding content, typically at the top of a web page, must be identified by using the @banner@ landmark.',
      SUMMARY:    '@banner@ landmark: identifies branding content',
      TARGET_RESOURCES_DESC: '@[role="banner"]@ and top-level @header@ element',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S: 'If there is branding content, typically at the top of the page, use the @banner@ landmark to identify it.',
        MANUAL_CHECK_P: 'If there is branding content, typically at the top of the page, use the @banner@ landmark to identify it.',
        HIDDEN_S: 'One @banner@ landmark that is hidden was not evaluated.',
        HIDDEN_P: '%N_H@ banner@ landmarks that are hidden were not evaluated.'
      },
      BASE_RESULT_MESSAGES: {
        PAGE_PASS_1:   'Page has @banner@ landmark.',
        PAGE_PASS_2:   'Page has %1 @banner@ landmarks.',
        PAGE_MC_1:     'If the page has a branding banner, use @role="banner"@ on its container element.',
        ELEMENT_PASS_1:   '@%1[role="banner"]@ defines a @banner@ landmark.',
        ELEMENT_PASS_2:   'The top level @header@ element defines a @banner@ landmark.',
        ELEMENT_HIDDEN_1: '@%1[role="banner"]@ element was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: 'A top level @header@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'A @banner@ landmark provides a way to identify organizational or company branding content, usually replicated across all pages and located at the top of each page.'
      ],
      TECHNIQUES: [
        'The @header@ element defines a @banner@ landmark, except when it is a descendant of any of the following elements: @article@, @aside@, @main@, @nav@ or @section@.',
        'If the @header@ element technique is not being used, a @role="banner"@ attribute on the container element for the branding content can be used to define a @banner@ landmark.',
        'In websites that support mashups using @iframe@ or custom web components, a @banner@ landmark is allowed in each iframe or shadowRoot.',
        'If the page is part of a website supporting mashups, use the @aria-labelledby@ or @aria-label@ attribute to differentiate @banner@ landmarks in each frame.'
      ],
     MANUAL_CHECKS: [
        'Banners are a convention used on most web sites to convey branding information, and may also be used as a location for advertising information.',
        'The @banner@ landmark identifies the banner content on the page.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: banner role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#banner'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: The FOOTER element',
          url:   'https://www.w3.org/TR/html5/sections.html#the-footer-element'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
          url:   'https://www.w3.org/WAI/ARIA/apg/#aria_landmark'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
          url:   'https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Page Structure',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: Sectioning content',
          url:   'https://www.w3.org/TR/html5/dom.html#sectioning-content-0'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: Sectioning root',
          url:   'https://www.w3.org/TR/html5/sections.html#sectioning-root'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
        }
      ]
  },

  // ----------------------------------------------------------------
  // LANDMARK_5: banner landmark: no more than one
  // ----------------------------------------------------------------

  LANDMARK_5: {
      ID:         'Landmark 5',
      DEFINITION: 'Each page must contain no more than one @banner@ landmark.',
      SUMMARY:    '@banner@ landmark: no more than one',
      TARGET_RESOURCES_DESC: '@[role="banner"]@ and top-level @header@ element',
      RULE_RESULT_MESSAGES: {
        FAIL_S: 'More than one @banner@ landmark found on the page. Only one @banner@ landmark is allowed per page or iframe.',
        FAIL_P: 'More than one @banner@ landmark found on the page. Only one @banner@ landmark is allowed per page or iframe.',
        HIDDEN_S: 'One @banner@ landmark that is hidden was not evaluated.',
        HIDDEN_P: '%N_H@ banner@ landmarks that are hidden were not evaluated.'
      },
      BASE_RESULT_MESSAGES: {
        PAGE_PASS_1:      'The page contains one @banner@ landmark.',
        PAGE_FAIL_1:      'The page contains %1 @banner@ landmarks. Modify the page to have only one container element with a @banner@ landmark role.',
        ELEMENT_PASS_1:   '@%1[role="banner"]@ defines a @banner@ landmark.',
        ELEMENT_PASS_2:   'Top level @header@ element defines a @banner@ landmark.',
        ELEMENT_FAIL_1:   '@%1[role="banner"]@ defines a @banner@ landmark.  Modify the page to include only one @banner@ element.',
        ELEMENT_FAIL_2:   'Top level @header@ element defines a @banner@ landmark.  Modify the page to include only one @banner@ element.',
        ELEMENT_HIDDEN_1: '@%1[role="banner"]@ was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: 'Top level @header@ element  was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'A banner landmark provides a way to identify redundant branding content, usually placed at the top of each web page.'
      ],
      TECHNIQUES: [
        'The @header@ element defines a @banner@ landmark, except when it is a descendant of any of the following elements: @article@, @aside@, @main@, @nav@ or @section@.',
        'If the @header@ element technique is not being used, a @role="banner"@ attribute on the container element for the branding content can be used to define a @banner@ landmark.',
        'In websites that support mashups using @iframe@ or @frame@ elements, a @banner@ landmark is allowed in each frame.',
        'If the page is part of a website supporting mashups, use the @aria-labelledby@ or @aria-label@ attribute to differentiate @banner@ landmarks in each frame.'
      ],
      MANUAL_CHECKS: [
        'Banners are a convention used on most web sites to convey branding information, and may also be used as a location for advertising information.',
        'The @banner@ landmark identifies the banner content on the page.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: banner role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#banner'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: The FOOTER element',
          url:   'https://www.w3.org/TR/html5/sections.html#the-footer-element'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
          url:   'https://www.w3.org/WAI/ARIA/apg/#aria_landmark'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
          url:   'https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Page Structure',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
        }
      ]
  },

  // ----------------------------------------------------------------
  // LANDMARK_6: contentinfo landmark: for admin content
  // ----------------------------------------------------------------

  LANDMARK_6: {
      ID:         'Landmark 6',
      DEFINITION: 'Website administrative content (e.g., copyright, contact, privacy info, etc., typically at the bottom of a web page) must be identified by using the @contentinfo@ landmark.',
      SUMMARY:    '@contentinfo@ landmark: identifies admin content',
      TARGET_RESOURCES_DESC: '@[role="contentinfo"]@ and top-level @footer@ element',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S: 'If there is administrative content (e.g., copyright, contact, privacy info, etc.), typically at the bottom of the page, use the @contentinfo@ landmark or top level @footer@ element to identify it.',
        MANUAL_CHECK_P: 'If there is administrative content (e.g., copyright, contact, privacy info, etc.), typically at the bottom of the page, use the @contentinfo@ landmark or top level @footer@ element to identify it.',
        HIDDEN_S: 'One @contentinfo@ landmark or @footer@ element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H @contentinfo@ landmarks or @footer@ elements that are hidden were not evaluated.'
      },
      BASE_RESULT_MESSAGES: {
        PAGE_PASS_1: 'Page has @contentinfo@ landmark or top level @footer@ element.',
        PAGE_PASS_2: 'Page has %1 @contentinfo@ landmarks and/or top level @footer@ elements.',
        PAGE_MC_1:   'If the page has administrative content, use @role="contentinfo"@ or @footer@ element on its container element.',
        ELEMENT_PASS_1:   '@%1@ element has @role="contentinfo"@.',
        ELEMENT_PASS_2:   'Top level @footer@ element with the default @role="contentinfo"@.',
        ELEMENT_HIDDEN_1: '@%1@ element with @role="contentinfo"@ was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: '@footer@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'The @contentinfo@ landmark provides a way to identify administrative content, typically found at the bottom of each page in a website and referred to as footer information in publishing contexts.',
        'The @contentinfo@ landmark typically includes information and/or links to copyright, contact info, privacy policies and other general information found on all pages in the website.'
      ],
      TECHNIQUES: [
        'The @footer@ element defines a @contentinfo@ landmark, except when it is a descendant of any of the following elements: @article@, @aside@, @main@, @nav@ or @section@.',
        'If the @footer@ element technique is not being used, a @role="contentinfo"@ attribute on the container element for the administrative content can be used to define a @contentinfo@ landmark.',
        'In websites that support mashups using @iframe@ or @frame@ elements, a @contentinfo@ landmark is allowed in each frame.',
        'If the page is part of a website supporting mashups, use the @aria-labelledby@ or @aria-label@ attribute to differentiate possible @contentinfo@ landmarks in each frame.'
      ],
      MANUAL_CHECKS: [
        'Footers are a convention used on most web sites to provide copyright, contact, privacy and other types of adminstrative content.',
        'The @contentinfo@ landmark identifies the footer content on the page.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: contentinfo role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#contentinfo'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: The FOOTER element',
          url:   'https://www.w3.org/TR/html5/sections.html#the-footer-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: Sectioning content',
          url:   'https://www.w3.org/TR/html5/dom.html#sectioning-content-0'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
          url:   'https://www.w3.org/WAI/ARIA/apg/#aria_landmark'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
          url:   'https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Page Structure',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: Sectioning root',
          url:   'https://www.w3.org/TR/html5/sections.html#sectioning-root'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
        }
      ]
  },

  // ----------------------------------------------------------------
  // LANDMARK_7: contentinfo landmark: no more than one
  // ----------------------------------------------------------------

  LANDMARK_7: {
      ID:         'Landmark 7',
      DEFINITION: 'Each page must contain no more than one @contentinfo@ landmark.',
      SUMMARY:    '@contentinfo@ landmark: no more than one',
      TARGET_RESOURCES_DESC: '@[role="contentinfo"]@ and top-level @footer@ element',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'More than one @contentinfo@ landmark found on the page. Only one @contentinfo@ landmark is allowed per page or iframe.',
        FAIL_P:   'More than one @contentinfo@ landmark found on the page. Only one @contentinfo@ landmark is allowed per page or iframe.',
        HIDDEN_S: 'One @contentinfo@ landmark that is hidden was not evaluated.',
        HIDDEN_P: '%N_H @contentinfo@ landmarks that are hidden were not evaluated.'
      },
      BASE_RESULT_MESSAGES: {
        PAGE_PASS_1:      'The page contains one @contentinfo@ landmark.',
        PAGE_FAIL_1:      'The page contains %1 @contentinfo@ landmarks and/or @footer@ elements. Modify the page to have only one container element with a @contentinfo@ landmark role or @footer@ element.',
        ELEMENT_PASS_1:   '@%1[role="contentinfo"]@ defines a @contentinfo@ landmark.',
        ELEMENT_PASS_2:   'Top level @footer@ element defines a @contentinfo@ landmark.',
        ELEMENT_FAIL_1:   '@%1[role="contentinfo"]@ defines a @contentinfo@ landmark.  Modify the page to include only one @contentinfo@ element.',
        ELEMENT_FAIL_2:   'Top level @footer@ element defines a @contentinfo@ landmark.  Modify the page to include only one @contentinfo@ element.',
        ELEMENT_HIDDEN_1: '@%1@ element with @role="contentinfo"@ was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: '@footer@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'The @contentinfo@ landmark provides a way to identify administrative content, typically found at the bottom of each page in a website and referred to as footer information in publishing contexts.',
        'The @contentinfo@ landmark typically includes information and/or links to copyright, contact info, privacy policies and other general information found on all pages in the website.',
        'The @footer@ element that is NOT contained in an @section@ and @aside@ element has the default role of @contentinfo@ landmark.'
      ],
      TECHNIQUES: [
        'The @footer@ element defines a @contentinfo@ landmark, except when it is a descendant of any of the following elements: @article@, @aside@, @main@, @nav@ or @section@.',
        'If the @footer@ element technique is not being used, a @role="contentinfo"@ attribute on the container element for the administrative content can be used to define a @contentinfo@ landmark.',
        'In websites that support mashups using @iframe@ or @frame@ elements, a @contentinfo@ landmark is allowed in each frame.',
        'If the page is part of a website supporting mashups, use the @aria-labelledby@ or @aria-label@ attribute to differentiate possible @contentinfo@ landmarks in each frame.'
      ],
      MANUAL_CHECKS: [
        'Footers are a convention used on most web sites to provide copyright, contact, privacy and other types of adminstrative content.',
        'The @contentinfo@ landmark identifies the footer content on the page.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: contentinfo role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#contentinfo'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: The FOOTER element',
          url:   'https://www.w3.org/TR/html5/sections.html#the-footer-element'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
          url:   'https://www.w3.org/WAI/ARIA/apg/#aria_landmark'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
          url:   'https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Page Structure',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
        }
      ]
  },

  // ----------------------------------------------------------------
  // LANDMARK_8: banner landmark: must/should be top-level
  // ----------------------------------------------------------------

  LANDMARK_8: {
      ID:         'Landmark 8',
      DEFINITION: 'The @banner@ landmark must be a top-level landmark.',
      SUMMARY:    '@banner@ landmark: must be top-level',
      TARGET_RESOURCES_DESC: '@[role="banner"]@ and top-level @header@ element',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Update the @banner@ landmark on the page to ensure that it is a top-level landmark.',
        FAIL_P:   'Update the @banner@ landmarks on the page to ensure that each is a top-level landmark.',
        HIDDEN_S: 'One element with @[role="hidden"]@ attribute or @header@ element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H elements with @[role="hidden"]@ attributes or @header@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No elements with @[role="banner"]@ or @header@ elements on the page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   '@%1[role="banner"]@ defines a top-level @banner@ landmark.',
        ELEMENT_PASS_2:   '@%1[role="banner"]@ defines a top-level @banner@ landmark in the @frame@ or @iframe@.',
        ELEMENT_PASS_3:   '@header@ element defines a top-level @banner@ landmark.',
        ELEMENT_PASS_4:   '@header@ element defines a top-level @banner@ landmark in the @frame@ or @iframe@.',
        ELEMENT_FAIL_1:   'Update the landmark structure on the page such that the @%1[role="banner"]@ element is a top-level landmark (it is currently the child of a @%2@ landmark region).',
        ELEMENT_FAIL_2:   'Update the landmark structure on the page such that the @header@ element is a top-level landmark (it is currently the child of a @%1@ landmark region).',
        ELEMENT_HIDDEN_1: '@%1[role="banner"]@ was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: '@header@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'Top-level landmarks are the easiest to find and navigate to using assistive technologies.',
        'Banner content is usually the content at beginning of a page that repeats on most pages within a website.'
      ],
      TECHNIQUES: [
        'When creating the landmark structure on the page, ensure that the @banner@ landmark or @header@ element is a top-level landmark (i.e., it is not contained within any other landmarks).',
        'A @header@ element with the context of the @body@ element or an element with @[role="contentinfo"]@ attribute defines a @banner@ landmark.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: banner role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#banner'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: The HEADER element',
          url:   'https://www.w3.org/TR/html5/sections.html#the-header-element'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
          url:   'https://www.w3.org/WAI/ARIA/apg/#aria_landmark'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
          url:   'https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Page Structure',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
        }
      ]
  },

  // ----------------------------------------------------------------
  // LANDMARK_9: banner landmark: restrictions
  // ----------------------------------------------------------------

  LANDMARK_9: {
      ID:         'Landmark 9',
      DEFINITION: 'The @banner@ landmark must only contain @navigation@, @region@ or @search@ landmarks.',
      SUMMARY:    '@banner@ landmark: restrictions',
      TARGET_RESOURCES_DESC: '@banner@ landmark',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Update the landmarks on the page to ensure that the @banner@ landmark only contains @navigation@, @region@ and @search@ landmarks.',
        FAIL_P:   'Update the %N_F landmarks that are part of the @banner@ landmark to ensure that the @banner@ landmark only contains @navigation@, @region@ and @search@ landmarks.',
        HIDDEN_S: 'One element with @[role="banner"]@ or top-level @header@ element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H elements with @[role="banner"]@ or top-level @header@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No @[role="banner"]@ or top-level @header@ elements on the page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   '@%1@ landmark can be part of @banner@ landmark.',
        ELEMENT_PASS_2:   '@banner@ landmark does not contain any other landmarks.',
        ELEMENT_PASS_3:   '@banner@ landmark contains one allowed landmark: %1.',
        ELEMENT_PASS_4:   '@banner@ landmark contains %1 allowed landmarks: %2.',
        ELEMENT_FAIL_1:   'Update the landmarks on the page so that the @%1@ landmark is not contained in the @banner@ landmark or @header@ element. Depending on the content in this landmark, consider moving it outside the @banner@ landmark.',
        ELEMENT_FAIL_2:   'The  @banner@ landmark should NOT contain the following landmark: %1.',
        ELEMENT_FAIL_3:   'The  @banner@ landmark should NOT contain the following %1 landmarks: %2.',
        ELEMENT_HIDDEN_1: '@%1[role="banner"]@ was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: '@header@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
         'Ensuring that the landmark structure of a page is not overly complex enables users of assistive technologies to more easily find and navigate to the desired content.'
      ],
      TECHNIQUES: [
        'If landmarks are needed within a @banner@ landmark, use only @navigation@, @region@ or @search@.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: banner role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#banner'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML: The HEADER element',
          url:   'https://html.spec.whatwg.org/multipage/sections.html#the-header-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML: Sections',
          url:   'https://html.spec.whatwg.org/multipage/sections.html'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
          url:   'https://www.w3.org/WAI/ARIA/apg/#aria_landmark'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
          url:   'https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Page Structure',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Landmark Roles',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#landmark_roles'
        }
      ]
  },

  // ----------------------------------------------------------------
  // LANDMARK_10: navigation landmark: restrictions
  // ----------------------------------------------------------------

  LANDMARK_10: {
      ID:         'Landmark 10',
      DEFINITION: 'The @navigation@ landmark must only contain @region@ or @search@ landmarks.',
      SUMMARY:    '@navigation@ landmark: restrictions',
      TARGET_RESOURCES_DESC: '@navigation@ landmark',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Update the landmarks on the page to ensure that the @navigation@ landmark only contains @region@ or @search@ landmarks.',
        FAIL_P:   'Update the %N_F @navigation@ landmarks on the page to ensure that they only contain  @region@ or @search@ landmarks.',
        HIDDEN_S: 'One @navigation@ landmark that is hidden was not evaluated.',
        HIDDEN_P: '%N_H @navigation@ landmarks that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No @navigation@ landmarks on the page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   '@%1@ landmark can be part of @navigation@ landmark.',
        ELEMENT_PASS_2:   '@navigation@ landmark does not contain any other landmarks.',
        ELEMENT_PASS_3:   '@navigation@ landmark contains one allowed landmark: %1.',
        ELEMENT_PASS_4:   '@navigation@ landmark contains %1 allowed landmarks: %2.',
        ELEMENT_FAIL_1:   'Update the landmarks on the page such that the @%1@ landmark is not contained by the @navigation@ landmark. Depending on the content in this landmark, consider moving it outside the @navigation@ landmark.',
        ELEMENT_FAIL_2:   'The  @navigation@ landmark should NOT contain the following landmark: %1.',
        ELEMENT_FAIL_3:   'The  @navigation@ landmark should NOT contain the following %1 landmarks: %2.',
        ELEMENT_HIDDEN_1: '@%1[role="navigation"]@ was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: '@nav@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'Ensuring that the landmark structure of a page is not overly complex enables users of assistive technologies to more easily find and navigate to the desired content.'
      ],
      TECHNIQUES: [
        'If landmarks are needed within a @navigation@ landmark, use only @region@ or @search@.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: navigation role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#navigation'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: The NAV element',
          url:   'https://www.w3.org/TR/html5/sections.html#the-nav-element'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
          url:   'https://www.w3.org/WAI/ARIA/apg/#aria_landmark'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Page Structure',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
          url:   'https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/'
        }
      ]
  },

  // ----------------------------------------------------------------
  // LANDMARK_11: main landmark: must/should be top-level
  // ----------------------------------------------------------------

  LANDMARK_11: {
      ID:         'Landmark 11',
      DEFINITION: 'The @main@ landmark must be a top-level landmark.',
      SUMMARY:    '@main@ landmark: must be top-level',
      TARGET_RESOURCES_DESC: '@main@ landmark',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Update the @main@ landmark on the page to ensure that it is a top-level landmark.',
        FAIL_P:   'Update the  @main@ landmarks on the page to ensure that each is a top-level @main@ landmark.',
        HIDDEN_S: 'One element with @[role="main"]@ attribute or a @main@ element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H elements with @[role="main"]@ attribute and/or @main@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No @[role="main"]@ attributes or @main@ elements on the page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   '@%1[role="main"]@ attribute defines a top-level @main@ landmark.',
        ELEMENT_PASS_2:   '@%1[role="main"]@ attribute defines a top-level @main@ landmark in the @frame@ or @iframe@.',
        ELEMENT_PASS_3:   '@main@ element defines a top-level @main@ landmark.',
        ELEMENT_PASS_4:   '@main@ element defines a top-level @main@ landmark in the @frame@ or @iframe@.',
        ELEMENT_FAIL_1:   'Update the landmark structure on the page such that the @%1[role="main"]@ element defines a top-level @main@ landmark (it is currently the child of a @%2@ landmark).',
        ELEMENT_FAIL_2:   'Update the landmark structure on the page such that the @main@ element defines a top-level @main@ landmark (it is currently the child of a @%1@ landmark).',
        ELEMENT_HIDDEN_1: '@%1[role="main"]@ was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: '@main@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'Top-level landmarks are the easiest landmarks to find and navigate to using assistive technologies.'
      ],
      TECHNIQUES: [
        'When creating the landmark structure on the page, ensure that the @main@ landmark is a top-level landmark (i.e., it is not contained within any other landmarks).',
        'The @main@ element or an element with @[role="main"]@ attribute defines a @main@ landmark.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: main role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#main'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: The MAIN element',
          url:   'https://www.w3.org/TR/html5/sections.html#the-main-element'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
          url:   'https://www.w3.org/WAI/ARIA/apg/#aria_landmark'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
          url:   'https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Page Structure',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
        }
      ]
  },

  // ----------------------------------------------------------------
  // LANDMARK_12: contentinfo landmark: must/should be top-level
  // ----------------------------------------------------------------

  LANDMARK_12: {
      ID:         'Landmark 12',
      DEFINITION: 'The @contentinfo@ landmark must be a top-level landmark.',
      SUMMARY:    '@contentinfo@ landmark: must be top-level',
      TARGET_RESOURCES_DESC: '@contentinfo@ landmark',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Update the @contentinfo@ landmark on the page to ensure that it is a top-level landmark.',
        FAIL_P:   'Update the @contentinfo@ landmarks on the page to ensure that each @contentinfo@ landmark is a top-level landmark.',
        HIDDEN_S: 'One element with @[role="contentinfo"]@ attribute or @footer@ element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H elements with  @[role="contentinfo"]@ attributes and/or @footer@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No elements with @[role="contentinfo"]@ attribute and/or @footer@ elements landmarks on the page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   '@%1[role="contentinfo"]@ attribute defines a top-level @contentinfo@ landmark.',
        ELEMENT_PASS_2:   '@%1[role="contentinfo"]@ attribute defines a top-level @contentinfo@ landmark in the @frame@ or @iframe@.',
        ELEMENT_PASS_3:   '@footer@ element defines a top-level @contentinfo@ landmark.',
        ELEMENT_PASS_4:   '@footer@ element defines a top-level @contentinfo@ landmark in the @frame@ or @iframe@.',
        ELEMENT_FAIL_1:   'Update the landmark structure on the page such that the @%1[role="contentinfo"]@ element defines a top-level @contentinfo@ landmark (it is currently the child of a @%2@ landmark).',
        ELEMENT_FAIL_2:   'Update the landmark structure on the page such that the @footer@ element defines a top-level @contentinfo@ landmark (it is currently the child of a @%1@ landmark).',
        ELEMENT_HIDDEN_1: '@%1@ element with @role="contentinfo"@ was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: '@%1@ element with @role="contentinfo"@ was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'Top-level landmarks are the easiest to find and navigate to using assistive technologies.'
      ],
      TECHNIQUES: [
        'When creating the landmark structure on the page, ensure that the @contentinfo@ landmark is a top-level landmark (i.e., it is not contained within any other landmarks).',
        'A @footer@ element with the context of the @body@ element or an element with @[role="contentinfo"]@ attribute defines a @contentinfo@ landmark.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: contentinfo role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#contentinfo'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: The FOOTER element',
          url:   'https://www.w3.org/TR/html5/sections.html#the-footer-element'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
          url:   'https://www.w3.org/WAI/ARIA/apg/#aria_landmark'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
          url:   'https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Page Structure',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
        }
      ]
  },

  // ----------------------------------------------------------------
  // LANDMARK_13: contentinfo landmark: restrictions
  // ----------------------------------------------------------------

  LANDMARK_13: {
      ID:         'Landmark 13',
      DEFINITION: 'The @contentinfo@ landmark must only contain @navigation@, @region@ or @search@ landmarks.',
      SUMMARY:    '@contentinfo@ landmark: restrictions',
      TARGET_RESOURCES_DESC: '@contentinfo@ landmark',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Update the landmarks on the page to ensure that the @contentinfo@ landmark only contains @navigation@, @region@ and @search@ landmarks.',
        FAIL_P:   'Update the %N_F landmarks that are part of the @contentinfo@ landmark to ensure that the @contentinfo@ landmark only contains @navigation@, @region@ and @search@ landmarks.',
        HIDDEN_S: 'One element with @[role="contentinfo"]@ or top-level @footer@ element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H elements with @[role="contentinfo"]@ or top-level @footer@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No @[role="contentinfo"]@ or top-level @footer@ elements on the page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   '@%1@ landmark can be part of @contentinfo@ landmark.',
        ELEMENT_PASS_2:   '@contentinfo@ landmark does not contain any other landmarks.',
        ELEMENT_PASS_3:   '@contentinfo@ landmark contains one allowed landmark: %1.',
        ELEMENT_PASS_4:   '@contentinfo@ landmark contains %1 allowed landmarks: %2.',
        ELEMENT_FAIL_1:   'Update the landmarks on the page so that the @%1@ landmark is not contained in the @contentinfo@ landmark. Depending on the content in this landmark, consider moving it outside the @contentinfo@ landmark.',
        ELEMENT_FAIL_2:   'The  @contentinfo@ landmark should NOT contain the following landmark: %1.',
        ELEMENT_FAIL_3:   'The  @contentinfo@ landmark should NOT contain the following %1 landmarks: %2.',
        ELEMENT_HIDDEN_1: '@%1[role="contentinfo"]@ was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: '@footer@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
         'Ensuring that the landmark structure of a page is not overly complex enables users of assistive technologies to more easily find and navigate to the desired content.'
      ],
      TECHNIQUES: [
        'If landmarks are needed within a @contentinfo@ landmark, use only @navigation@, @region@ or @search@.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: contentinfo role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#contentinfo'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML: The FOOTER element',
          url:   'https://html.spec.whatwg.org/multipage/sections.html#the-footer-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML: Sections',
          url:   'https://html.spec.whatwg.org/multipage/sections.html'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Landmark Roles',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#landmark_roles'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
          url:   'https://www.w3.org/WAI/ARIA/apg/#aria_landmark'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
          url:   'https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Page Structure',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/'
        }
      ]
  },

  // ----------------------------------------------------------------
  // LANDMARK_14: search landmark: restrictions
  // ----------------------------------------------------------------

  LANDMARK_14: {
      ID:         'Landmark 14',
      DEFINITION: 'The @search@ landmark must only contain @region@ landmarks.',
      SUMMARY:    '@search@ landmark: restrictions',
      TARGET_RESOURCES_DESC: '@search@ landmark',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Update the landmarks on the page to ensure that the @search@ landmark only contains @region@ landmarks.',
        FAIL_P:   'Update the %N_F @search@ landmarks on the page to ensure that each only contains  @region@ landmarks.',
        HIDDEN_S: 'One @search@ landmark that is hidden was not evaluated.',
        HIDDEN_P: '%N_H @search@ landmarks that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No @search@ landmarks on the page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1: '@%1@ landmark can be part of @search@ landmark.',
        ELEMENT_PASS_2: '@search@ landmark does not contain any @region@ landmarks.',
        ELEMENT_PASS_3: '@search@ landmark contains one allowed landmark: %1.',
        ELEMENT_PASS_4: '@search@ landmark contains %1 allowed landmarks: %2.',
        ELEMENT_FAIL_1: 'Update the landmark structure on the page such that the @%1@ landmark is not contained by the @search@ landmark. Depending on the content in this landmark, consider moving it outside the @search@ landmark.',
        ELEMENT_FAIL_2:   'The  @search@ landmark should NOT contain the following landmark: %1.',
        ELEMENT_FAIL_3:   'The  @search@ landmark should NOT contain the following %1 landmarks: %2.',
        ELEMENT_HIDDEN_1: '@%1@ element with @role="search"@ was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: '@%1@ element with @role="@%2"@ was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'A @search@ landmark identifies a form on the page used to search for content across the entire website.',
        'For @search@ landmarks containing more than one search option and where each option can be represented as its own section, use @region@ landmarks to identify these sections.',
        'Ensuring that the landmark structure of a page is not overly complex enables users of assistive technologies to more easily find and navigate to the desired content.'
      ],
      TECHNIQUES: [
        'Website search options should be top-level @search@ landmarks (e.g. not contained in other landmarks).',
        'Include a @role="search"@ attribute on an element that contains all of the search form controls.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: search role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#search'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
          url:   'https://www.w3.org/WAI/ARIA/apg/#aria_landmark'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
          url:   'https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Page Structure',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
        }
      ]
  },

  // ----------------------------------------------------------------
  // LANDMARK_15: form landmark: restrictions
  // ----------------------------------------------------------------

  LANDMARK_15: {
      ID:         'Landmark 15',
      DEFINITION: 'The @form@ landmark must only contain @region@ landmarks.',
      SUMMARY:    '@form@ landmark: restrictions',
      TARGET_RESOURCES_DESC: '@form@ landmark',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Update the landmark structure on the page to ensure that the @form@ landmark only contains @region@ landmarks.',
        FAIL_P:   'Update the %N_F @form@ landmarks on the page to ensure that each only contains @region@ landmarks.',
        HIDDEN_S: 'One @form@ landmark that is hidden was not evaluated.',
        HIDDEN_P: '%N_H @form@ landmarks that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No @form@ landmarks on the page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   '@%1@ landmark can be part of @form@ landmark.',
        ELEMENT_PASS_2:   '@form@ landmark does not contain any @region@ landmarks.',
        ELEMENT_PASS_3:   '@form@ landmark contains one @region@ landmark.',
        ELEMENT_PASS_4:   '@form@ landmark contains %1 @region@ landmarks.',
        ELEMENT_FAIL_1:   'Update the landmark structure on the page such that the @%1@ landmark is not contained by the @form@ landmark. Depending on the content in this landmark, consider moving it outside the @form@ landmark.',
        ELEMENT_FAIL_2:   'Update the landmark structure on the page such that the @form@ landmarks contains only @region@ landmarks, the following %1 landamrks were found: %2.',
        ELEMENT_HIDDEN_1: '@%1@ element with @role="form"@ was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: '@form@ element was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_3: '@%1@ element with @role="%2"@ was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'Form landmarks provide a way to identify groups of form controls and widgets on the page.',
        'For @form@ landmarks containing more than one group of controls, where each is considered its own section, use @region@ landmarks to identify these sections.',
        'Ensuring that the landmark structure of a page is not overly complex enables users of assistive technologies to more easily find and navigate to the desired content.'
      ],
      TECHNIQUES: [
        'A @form@ element or an element with a @role="form"@ attribute, which also has an author-defined accessible name, will be considered an @form@ landmark.',
        'A @form@ landmark should be a container element of all the form controls in the form.',
        'Use a element @[role=region]@ attribute or a @section@ on an element that identifies subgroups or sections of controls.',
        'Use ARIA labeling techniques to give each region an accessible name describing the contents of the region.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: form role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#form'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
          url:   'https://www.w3.org/WAI/ARIA/apg/#aria_landmark'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
          url:   'https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Page Structure',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
        }
      ]
  },

  // ----------------------------------------------------------------
  // LANDMARK_16: region landmark labeling
  // ----------------------------------------------------------------

  LANDMARK_16: {
      ID:         'Landmark 16',
      DEFINITION: 'Each element with an @[role=region]@ that should be an @region@ landmark must have an accessible name.',
      SUMMARY:    '@region@ landmark must have accessible name',
      TARGET_RESOURCES_DESC: 'Elements with @role="region"@ and @section@ elements',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S: 'Determine whether the element with ARIA role of @region@ should be a landmark and if so, add an accessible name to the element.',
        MANUAL_CHECK_P: 'Determine if any of the %N_MC elements with ARIA role of @region@ should be landmarks, and if so, add an accessible name to the those elements.',
        HIDDEN_S: 'One element with ARIA role of @region@ that is hidden was not evaluated.',
        HIDDEN_P: '%N_H elements with ARIA role of @region@ that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No elements with ARIA role of @region@ on the page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   '@%1[role="region"]@ element has an accessible name and is considered an ARIA landmark.',
        ELEMENT_MC_1:     'Determine if the @%1[role="region"]@ element should be an ARIA landmark, and if so, add an accessible name.',
        ELEMENT_HIDDEN_1: '@%1[role="region"]@ element was not evaluated because it is hidden from assistive technologies.',
      },
      PURPOSES: [
        'The @region@ landmark is used to identify subsections of @banner@, @complementary@, @contentinfo@, @main@, @navigation@ and @search@ landmarks.',
        'For an element with an @[role=region]@ to be considered an @region@ landmark on the page, it must have an accessible name that identifies the contents of the region.'
      ],
      TECHNIQUES: [
        'A @section@ element or an element with a @role="region"@ attribute, which also has an author-defined accessible name, will be considered an @region@ landmark.',
        'Use the @aria-labelledby@ attribute to provide an accessible name by referencing the @id@s of one or more heading (e.g. h2, h3, h4 element) or other elements that identify the contents of the region.',
        'Use the @aria-label@ attribute to provide an accessible name that identifies the contents of the region.',
        'The @title@ attribute may also be used to provide an accessible name to identify the contents of the region. Note, however, that this technique also generates a tooltip in many  web browsers.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: region role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#region'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: The SECTION element',
          url:   'https://www.w3.org/TR/html5/sections.html#the-section-element'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
          url:   'https://www.w3.org/WAI/ARIA/apg/#aria_landmark'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
          url:   'https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Page Structure',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA20: Using the region role to identify a region of the page',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA20'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
        }

      ]
  },

  // ----------------------------------------------------------------
  // LANDMARK_17: unique acc. names for landmarks with same role
  // ----------------------------------------------------------------

  LANDMARK_17: {
      ID:         'Landmark 17',
      DEFINITION: 'Multiple instances of landmarks with the same role must have unique accessible names.',
      SUMMARY:    'Landmarks must be uniquely identifiable',
      TARGET_RESOURCES_DESC: 'Landmarks',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Review the landmark labeling to ensure that its accessible name is unique among other landmarks of the same type.',
        FAIL_P:   'Review the labeling of %N_T landmarks to ensure that, if any other landmarks of the same type exist on the page, each has a unique accessible name.',
        HIDDEN_S: 'One landmark that is hidden was not evaluated.',
        HIDDEN_P: '%N_H landmarks that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No landmarks on the page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   '@%1@ landmark has a unique label.',
        ELEMENT_FAIL_1:   'Change the accessible name "%1" of the @%2@ landmark (or the other duplicates) so that it is unique on the page.',
        ELEMENT_HIDDEN_1: '@%1@ element with @role="%2"@ was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'Landmarks identify the regions of content on a page.',
        'When a landmark does not have an author-defined accessible name, assistive technologies will use its ARIA role as an identifier.',
        'When there is more than one landmark of the same type on the page (e.g., multiple @navigation@ and/or @region@ landmarks), additional labeling through the use of author-defined accessible names is needed to allow users to differentiate among them.'
      ],
      TECHNIQUES: [
        'Use the @aria-labelledby@ attribute to provide a unique accessible name by referencing the @id@ of a heading or other element on the page that describes the content of the landmark.',
        'Use the @aria-label@ attribute to provide a unique accessible name that describes the content of the landmark.',
        'The @title@ attribute may be used to provide a unique accessible name that describes the content of the landmark. Note, however, that many browsers will also generate a tooltip from the @title@ attribute value.',
        'While ARIA landmarks may be defined using the @role@ attribute, some HTML5 sectioning elements have default landmark roles (e.g., @main@, @nav@, @aside@, and in some situations, @header@ and @footer@). Thus when multiple @nav@ elements, for example, are used on a page, define a unique accessible name for each of them.'
                    ],
      MANUAL_CHECKS: [
        'Verify that the label describes the content of the landmark.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: region role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#region'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML: Sections',
          url:   'https://html.spec.whatwg.org/multipage/sections.html'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
          url:   'https://www.w3.org/WAI/ARIA/apg/#aria_landmark'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
          url:   'https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Page Structure',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
        }
      ]
  },

  // ----------------------------------------------------------------
  // LANDMARK_18: Landmarks must be descriptive
  // ----------------------------------------------------------------

  LANDMARK_18: {
      ID:         'Landmark 18',
      DEFINITION: 'Landmarks must identify regions of content on the page according to the ARIA Landmark Roles specification.',
      SUMMARY:    'Landmarks must identify content regions',
      TARGET_RESOURCES_DESC: 'Elements with ARIA Landmark roles',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:  'Verify that the landmark role correctly identifies the content region for which the element is a container.',
        MANUAL_CHECK_P:  'Verify that each of the %N_MC landmark roles correctly identifies the content region for which its corresponding element is a container.',
        HIDDEN_S:        'One landmark that is hidden was not evaluated.',
        HIDDEN_P:        '%N_H landmarks that are hidden were not evaluated.',
        NOT_APPLICABLE:  'No landmarks on the page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_MC_1:      'Verify the @%1@ landmark with the label "%2" describes the type of content it contains.',
        ELEMENT_HIDDEN_1:  'The @%1@ landmark was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'When ARIA landmarks are used to identify regions of content on the page, users of assistive technologies gain programmatic access to those regions through built-in navigation commands.',
        'Proper use of landmarks provides a navigable structure where common sections or features of pages can be easily accessed or, conversely, skipped over if they represent repeated blocks of content.',
        'If the appropriate landmark roles are NOT used, the type or purpose of each content region will be less obvious to users of assistive technologies.',
        'In the worst-case scenario, when NO landmark roles are present, the content on the page will be presented to users of assistive technologies as a single undifferentiated block.',
        'Visual styling of blocks of content are often good indicators of potential landmarks (e.g. @banner@, @main@, @navigation@, @contentinfo@).'
      ],
      TECHNIQUES: [
        'Use the appropriate landmarks to identify the different regions of content on a web page.',
        'The most important landmark roles are @main@ and @navigation@, as nearly every page will include at least those regions.',
        'Other commonly used landmark roles include @banner@, @contentinfo@, @complementary@ and @search@.',
        'Use HTML5 sectioning elements that have a default ARIA landmark role: @main@ (@main@), @nav@ (@navigation@), @aside@ (@complementary@) and in some situations @header@ (@banner@) and @footer@ (@contentinfo@). When using these elements, the @role@ attribute should NOT be defined.',
        'In HTML4 and XHTML 1.0 documents, a landmark can be created using a @div@ element with a @role@ attribute and the appropriate ARIA landmark role value (e.g., @role="main"@).',
        'The @search@ role is typically placed on a @form@ element or a @div@ that surrounds the search form.',
        'When there are multiple instances of a particular landmark role on a page, provide a unique accessible name for each landmark with the same role to enable users to differentiate among them.',
        'An alternative landmark can be created in HTML5 by using the @section@ element, which has a default landmark role of @region@, with an author-defined accessible name (e.g., using @aria-labelledby@ to reference a heading element).',
        'Do not nest landmarks with the same role (e.g., do not place navigation landmarks within a navigation landmark). Instead, use the @section@ element technique described above to provide additional subsections within a standard landmark.',
        'If a region on a page does not correspond to one of the defined ARIA landmark roles, the @section@ element technique described above can be used to create a landmark container for the content.'
      ],
      MANUAL_CHECKS: [
        'View the accessible names of the landmarks on the page and verify that each uniquely describes the type of content the landmark contains.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Landmark Roles',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#landmark_roles'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML: Sections',
          url:   'https://html.spec.whatwg.org/multipage/sections.html'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
          url:   'https://www.w3.org/WAI/ARIA/apg/#aria_landmark'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
          url:   'https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Page Structure',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
        }

      ]
  },

  // ----------------------------------------------------------------
  // LANDMARK_19: complementary landmark: restrictions
  // ----------------------------------------------------------------

  LANDMARK_19: {
      ID:         'Landmark 19',
      DEFINITION: 'The @complementary@ landmark must be a top-level landmark.',
      SUMMARY:    '@complementary@ landmark: must be top level',
      TARGET_RESOURCES_DESC: '@complementary@ landmark',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Update the @complementary@ landmark on the page to ensure that it is a top-level @complementary@ landmark.',
        FAIL_P:   'Update the @complementary@ landmarks on the page to ensure that each is a top-level  @complementary@ landmark or a child of a @main@ landmark.',
        HIDDEN_S: 'One element with @[role="complementary"]@ attribute or @aside@ element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H elements with @[role="complementary"]@ attribute and/or @aside@ elements  that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No @[role="complementary"]@ attributes and/or @aside@ elements on the page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   '@%1[role="complementary"]@ attribute defines a @complementary@ landmark that is a top-level landmark.',
        ELEMENT_PASS_2:   '@%1[role="complementary"]@ attribute defines a @complementary@ landmark that is a top-level landmark in the @frame@ or @iframe@.',
        ELEMENT_PASS_3:   '@aside@ element defines a @complementary@ landmark that is a top-level landmark.',
        ELEMENT_PASS_4:   '@aside@ element defines a @complementary@ landmark is a top-level landmark in the @frame@ or @iframe@.',
        ELEMENT_FAIL_1:   'Update the landmark structure on the page such that the @%1[role="complementary"]@ attribute defines a @complementary@ that is a top-level landmark (it is currently the child of a @%2@ landmark).',
        ELEMENT_FAIL_2:   'Update the landmark structure on the page such that the @aside@ element is a top-level landmark (it is currently the child of a @%1@ landmark).',
        ELEMENT_HIDDEN_1: '@%1[role="complementary"]@ was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: '@aside@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        '@complementary@ landmarks provide a way to identify sections of a page that may not be considered the main content, but that provide important supporting or related information to the main content.',
        'Top-level landmarks are the easiest to find and navigate to using assistive technologies.'
      ],
      TECHNIQUES: [
        'Use an @aside@ element to define a @complementary@ landmark.',
        'If the @aside@ element technique is not being used, a @role="complementary"@ attribute on the container element of the supporting content can be used to define a @complementary@ landmark.',
        'When creating the landmark structure on the page, ensure that the @complementary@ landmark is a top-level landmark (i.e., it is not contained within any other landmarks).'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: complementary role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#complementary'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: The ASIDE element',
          url:   'https://www.w3.org/TR/html5/sections.html#the-aside-element'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
          url:   'https://www.w3.org/WAI/ARIA/apg/#aria_landmark'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
          url:   'https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Page Structure',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
        }
      ]
  }
};

/* languageRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const languageRules$1 = {

    LANGUAGE_1: {
        ID:                    'Language 1',
        DEFINITION:            'Page must define the language of its principal content using a valid IANA language code.',
        SUMMARY:               'Page must use language code',
        TARGET_RESOURCES_DESC: 'HTML element',
        RULE_RESULT_MESSAGES: {
          FAIL_S:  'Identify the principal language of the web page by using the @lang@ attribute on its @html@ element.'
        },
        BASE_RESULT_MESSAGES: {
          PAGE_PASS_1: 'The @html@ element defines the \'%1\' language code.',
          PAGE_FAIL_1: 'Add a @lang@ attribute with a valid IANA code to the  @html@ element of the page.',
          PAGE_FAIL_2: 'Change the language code \'%1\' defined in the @lang@ attribute of the @html@ element to a valid IANA code.'
        },
        PURPOSES: [
          'Assistive technologies like screen readers and other speech output technologies need to know the languages represented by the characters in order to speak the text content correctly.'
        ],
        TECHNIQUES: [
          'Use the @lang@ attribute on the @html@ or @xhtml@ element to define the principal language of the web page.',
          'Use the IANA codes to identify the principal language (e.g. en, fr, ...).'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type:  REFERENCES.SPECIFICATION,
            title: 'HTML: The lang and xml:lang attributes',
            url:   'https://html.spec.whatwg.org/multipage/dom.html#attr-lang'
          },
          { type:  REFERENCES.OTHER,
            title: 'W3 Schools: HTML lang Attribute',
            url:   'https://www.w3schools.com/tags/att_global_lang.asp'
          },
          { type:  REFERENCES.OTHER,
            title: 'MDN: lang attribute',
            url:   'https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang'
          },
          { type:  REFERENCES.WCAG_TECHNIQUE,
            title: 'H58: Using language attributes to identify changes in the human language',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H58'
          }
        ]
    },
    LANGUAGE_2: {
        ID:                    'Language 2',
        DEFINITION:            'Elements with text content in a different language from the principal language of the page must use the @lang@ attribute with a valid IANA language code to identify the change.',
        SUMMARY:               'Identify language changes',
        TARGET_RESOURCES_DESC: 'Elements with text content that is in a different language than the principal language of the page',
        RULE_RESULT_MESSAGES: {
          FAIL_S:  'Change the @lang@ attribute value to a valid IANA language code for the element with the @lang@ attribute.',
          FAIL_P:  'Change the @lang@ attribute values of the %N_F elements with invalid codes to valid IANA language codes.',
          MANUAL_CHECK_S: 'Review the page for any text content that is different than the principal language of the page. If such content is found, use the @lang@ attribute on the appropriate container element to identify the language change.',
          MANUAL_CHECK_P: 'Review the page for any text content that is different than the principal language of the page. If any such content sections are found, use the @lang@ attribute on each of the appropriate container elements to identify the language changes.'
        },
        BASE_RESULT_MESSAGES: {
          PAGE_FAIL_1: 'Change the @lang@ attribute value on the element with an invalid code to a valid IANA language code.',
          PAGE_FAIL_2: 'Change the @lang@ attribute values on the %1 elements with invalid codes to valid IANA language codes.',
          PAGE_MC_1: 'One change in language was found on the page. Review the page for any other text content in languages that are different than the principal language of the page. If any more changes in language are found, use the @lang@ attribute to identify them.',
          PAGE_MC_2: '%1 changes in language were found on the page. Review the page for any other text content in languages that are different than the principal language of the page. If any more changes in language are found, use the @lang@ attribute to identify them.',
          PAGE_MC_3: 'Review the page for any text content in a languages that are different than the principal language of the page. If any changes in language are found, use the @lang@ attribute to identify them.',
          ELEMENT_PASS_1: 'The @%1@ element has the valid language value of \'%2\'',
          ELEMENT_FAIL_1: 'Change the @lang@ attribute value \'%2\' on the @%1@ element to a valid IANA language code.',
          ELEMENT_HIDDEN_1: 'The @%1@ element with the language code \'%2\' is hidden'
        },
        PURPOSES: [
          'Assistive technologies like screen readers and other speech output technologies need to know the language of the characters of an element to speak the text content correctly.'
        ],
        TECHNIQUES: [
          'Use the @lang@ attribute to define the IANA language of the text content of the element.',
          'Use the IANA codes to identify the language of the text in the element (e.g. en, fr, ...).'
        ],
        MANUAL_CHECKS: [
          'Review the page for any text content in languages that are different than the principal language of the page.',
          'If any changes in language are found, use the @lang@ attribute to identify them.'
        ],
        INFORMATIONAL_LINKS: [
          { type:  REFERENCES.SPECIFICATION,
            title: 'HTML: The lang and xml:lang attributes',
            url:   'https://html.spec.whatwg.org/multipage/dom.html#attr-lang'
          },
          { type:  REFERENCES.OTHER,
            title: 'W3 Schools: HTML lang Attribute',
            url:   'https://www.w3schools.com/tags/att_global_lang.asp'
          },
          { type:  REFERENCES.OTHER,
            title: 'MDN: lang attribute',
            url:   'https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang'
          },
          { type:  REFERENCES.WCAG_TECHNIQUE,
            title: 'H58: Using language attributes to identify changes in the human language',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H58'
          }
        ]
    }
};

/* layoutRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const layoutRules$1 = {
  LAYOUT_1: {
      ID:                    'Layout 1',
      DEFINITION:            'Layout tables must organize content in a meaningful sequence.',
      SUMMARY:               'Layout tables must have meaningful sequence',
      TARGET_RESOURCES_DESC: '@table@ elements used for layout',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:    'Verify document has a meaningful sequence when layout table markup is disabled.  If content does not have a meaningful sequence, reorganize content on the page to have a meaningful sequence when layout tables are disabled.',
        MANUAL_CHECK_P:    'Verify document has a meaningful sequence when layout table markup is disabled.  If content does not have a meaningful sequence, reorganize content on the page to have a meaningful sequence when layout tables are disabled.',
        HIDDEN_S:          'One @table@ element that is hidden was not evaluated.',
        HIDDEN_P:          '%N_H @table@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No layout tables found on this page.'
      },
      BASE_RESULT_MESSAGES: {
        PAGE_PASS_1:      'Page does not have any tables or layout tables are only one column wide.',
        PAGE_MC_1:        '%1 tables being used for layout were found, verify the page has a meaningful sequence of content when table markup is disabled.',
        ELEMENT_PASS_1:   'Table is one column wide, and will have the same document sequence when table markup is disabled.',
        ELEMENT_MC_1:     'Verify document has a meaningful sequence of content when layout table markup is disabled.',
        ELEMENT_MC_2:     'Verify the content in the %1x%2 layout table has a meaningful sequence of content when table markup is disabled, if the table is actually a data table add data table markup to give the table an effective caption and the data tables headings.',
        ELEMENT_MC_3:     'Verify the nesting of tables for layout of content maintains a meaningful sequence of content when table markup is disabled.',
        ELEMENT_HIDDEN_1: 'Meaningful sequence was not tested The layout @table@ is hidden from assistive technologies.'
      },
      PURPOSES: [
        'The sequence of the content (i.e. reading order) in a web page affects the conveyed meaning, especially for users of assistive technologies who cannot see the relationships between sections of content as provided by the visual cues in a graphical layout.',
        'Using table markup for page layout is one way in which the DOM order of web content can be altered such that it makes sense visually, but the reading order rendered by assistive technologies is no longer meaningful.'
      ],
      TECHNIQUES: [
        'Use CSS and web standards techniques for the coding of content, and the graphical styling and positioning of content.',
        'Avoid using table markup for graphical layout, if you do use tables for layout make sure the content still is meaningful when the table markup is disabled.',
        'Avoid using nested tables for layout, the deeper the level of nesting the more chance there of having a confusing sequence of content.',
        'Tables that are used for layout should use only @tr@ and @td@ elements, and the @table@, @tr@ and @td@ elements should have a @role="presentation"@ attribute to clearly indicate the table markup is being used for layout.'
      ],
      MANUAL_CHECKS: [
        'Use browser developer tools to disable table markup or enable a user stylesheet to change table cells to be rendered as block level elements.',
        'With layout tables disabled, view the content to make sure the reading order and structure of the document makes sense.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification: Visual formatting model',
          url:   'https://www.w3.org/TR/CSS21/visuren.html'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G57: Ordering the content in a meaningful sequence',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G57'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'C6: Positioning content based on structural markup',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/css/C6'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'C8: Using CSS letter-spacing to control spacing within a word',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/css/C8'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'C27: Making the DOM order match the visual order',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/css/C27'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'F1: Failure of Success Criterion 1.3.2 due to changing the meaning of content by positioning information with CSS',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F1'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'F33: Failure of Success Criterion 1.3.1 and 1.3.2 due to using white space characters to create multiple columns in plain text content',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F33'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'F34: Failure of Success Criterion 1.3.1 and 1.3.2 due to using white space characters to format tables in plain text content',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F34'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'F49: Failure of Success Criterion 1.3.2 due to using an HTML layout table that does not make sense when linearized',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F49'
        }
      ]
  },
  LAYOUT_2: {
      ID:                    'Layout 2',
      DEFINITION:            'Tables must not be nested for layout of content.',
      SUMMARY:               'Do not nest layout tables',
      TARGET_RESOURCES_DESC: '@table@ elements used for layout',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Update the markup and CSS on this page to remove the nesting of the layout table that is nested.',
        FAIL_P:   'Update the markup and CSS on this page to remove the nesting of %N_F layout tables that are nested.',
        HIDDEN_S: 'One table element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H table elements that are hidden were not evaluated.',
        NOT_APPLICABLE:  'No table elements used for layout.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:    'Table is not nested with another layout table.',
        ELEMENT_PASS_2:    'Table is one column wide, and will have the same document sequence when table markup is disabled.',
        ELEMENT_FAIL_1:  'Update the markup and CSS on this page to remove the nesting of this layout table.',
        ELEMENT_HIDDEN_1:  'Table nesting was not tested beacuse the @table@ is hidden from assistive technology.'
      },
      PURPOSES: [
        'The sequence of content (i.e. order) in the document code affects its meaning, nesting layout tables often makes the sequence of content less understandable.'
      ],
      TECHNIQUES: [
        'Use CSS and web standards techniques for the coding of content, and the graphical styling and positioning of content.',
        'Avoid using table markup for graphical layout, if you do use tables for layout make sure the content still is meaningful when the table markup is disabled.',
        'Avoid using nested tables for layout, the deeper the level of nesting the more chance there of having a confusing sequence of content.',
        'Tables that are used for layout should use only @tr@ and @td@ elements, and the @table@, @tr@ and @td@ elements should have a @role="presentation"@ attribute to clearly indicate the table markup is being used for layout.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification: Visual formatting model',
          url:   'https://www.w3.org/TR/CSS21/visuren.html'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'F33: Failure of Success Criterion 1.3.1 and 1.3.2 due to using white space characters to create multiple columns in plain text content',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F33'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'F49: Failure of Success Criterion 1.3.2 due to using an HTML layout table that does not make sense when linearized',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F49'
        }
      ]
  },
  LAYOUT_3: {
      ID:                    'Layout 3',
      DEFINITION:            'The @aria-flowto@ attribute changes the reading order of content on the page from the DOM order of content for screen readers.',
      SUMMARY:               '@aria-flowto@ changes reading order',
      TARGET_RESOURCES_DESC: 'Elements with @aria-flowto@ attribute',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:    'Verify the element with the @aria-flowto@ attribute contributes to the intended reading order of content on the page.',
        MANUAL_CHECK_P:    'Verify the %N_MC elements with the @aria-flowto@ attributes contribute to the intended reading order of content on the page.',
        HIDDEN_S:          'One element with @aria-flowto@ attribute that is hidden was not evaluated.',
        HIDDEN_P:          '%N_H elements with @aria-flowto@ attribute that are hidden were not evaluated.',
        NOT_APPLICABLE:  'No elements with @aria-flowto@ attribute found.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_MC_1:     'Verify the @%1@ element with an @aria-reflow@ value of @%2@ on the defines a meaningful reading order.',
        ELEMENT_HIDDEN_1: '@%1@ element with @aria-flowto@ value of @%2@ was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'The reading order of content on the page can, in some cases, be made easier to understand by users of assistive technology with the use of @aria-flowto@.',
        'By default the reading order used by assistive technologies is the same as the DOM ordering of content.',
        'When the DOM order of content is interspersed with unrelated content, @aria-flowto@ can be used to keep related content together.  For example a multi-column newspaper where an article spans several columns, @aria-flowto@ can be used to make it look like one continuous column to assistive technology.',
        'The @aria-flowto@ reorganizes the content by changing the order of how the content is represented in accessibility Application Programming Interfaces (APIs) used by operating systems to communicate to screen readers.'
      ],
      TECHNIQUES: [
        'The @aria-flowto@ attribute value contains a sequence of @idrefs@ that changes the reading order of content on the page as rendered by assistive technologies.',
        'Since @aria-flowto@ changes reading order to assistive technologies, it is important to read the page with a screen reader to verify the content affected by the @aria-flowto@ places related information in the proper sequence.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: flowto property',
          url:   'https://www.w3.org/TR/wai-aria/states_and_properties#aria-flowto'
        }
      ]
  },
  LAYOUT_4: {
    ID:                    'Layout 4',
    DEFINITION:            'Do not restrict view or operation to a single display orientation, such as portrait or landscape.',
    SUMMARY:               'Do not restrict view or operation.',
    TARGET_RESOURCES_DESC: 'page',
    RULE_RESULT_MESSAGES: {
      MANUAL_CHECK_S: 'Verify the page can be viewed or operated in either portrait or landscape orientations.',
    },
    BASE_RESULT_MESSAGES: {
      PAGE_MC_1:      'Verify the page can be viewed or operated in either portrait or landscape orientations.',
    },
    PURPOSES: [
      'Users with dexterity impairments, who have a mounted device will be able to use the content in their fixed orientation.',
      'Users with low-vision will be able to view content in the orientation that works best for them, for example to increase the text size by viewing content in landscape.'
    ],
    TECHNIQUES: [
      'Create views and user experiences that can adapt to either portrait or landscape operation.'
    ],
    MANUAL_CHECKS: [
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.SPECIFICATION,
        title: 'Understanding Success Criteria 1.3.4: Orientation',
        url:   'https://www.w3.org/WAI/WCAG21/Understanding/orientation.html'
      }
    ]
  }
};

/* linkRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const linkRules$1 = {

  LINK_1: {
    ID:                    'Link 1',
    DEFINITION:            'The accessible name of a link must accurately describe the target or purpose of the link.',
    SUMMARY:               'Link text must describe the link target',
    TARGET_RESOURCES_DESC: '@a@ and @area@ elements and elements with @role="link"@ attribute',
    RULE_RESULT_MESSAGES: {
      MANUAL_CHECK_S: 'Verify the accessible name of the @a@, @area@ or @[role=link]@ element describes the target of the link.',
      MANUAL_CHECK_P: 'Verify the accessible name of each of the %N_MC @a@, @area@ or @[role=link]@ elements describes the target of the link.',
      FAIL_S:         'Add text content to the empty link that describes the target of the link.',
      FAIL_P:         'Add text content to the %N_F empty links that describes the target of each link.',
      HIDDEN_S:       'One hidden link was not evaluated.',
      HIDDEN_P:       '%N_H hidden links were not evaluated.',
      NOT_APPLICABLE: 'No @a@, @area@ or @[role=link]@ elements on the page.'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_MC_1:     '@%1@ element has accessible name "%2". Verify that the name accurately describes the target of the link, or if not, change the accessible name to be more descriptive.',
      ELEMENT_MC_2:     '@%1@ element has accessible name "%2" with text content "%3". Verify that the name and text content, along with its surrounding context, each accurately describes the target of the link, or if not, change the accessible name, text content and/or context so that they are more descriptive.',
      ELEMENT_FAIL_1:   'The @%1@ element does NOT have an accessible name. Add text content to the link or use an ARIA labeling technique so that the accessible name describes the target of the link.',
      ELEMENT_HIDDEN_1: '@%1@ element was not evaluated because it is hidden from assistive technologies.'
    },
    PURPOSES: [
      'When the accessible name of a link does not describe its target or purpose, users will not have the information they need to determine the usefulness of the target resources.',
      'Following links to target resources that do not provide the expected informational value is inefficient and potentially frustrating.'
    ],
    TECHNIQUES: [
      'The text content of a link, which is its default accessible name, should uniquely describe the target or purpose of the link.',
      'Use @aria-label@, @aria-labelledby@ or the @title@ attribute to provide a more descriptive accessible name when the text content of the link cannot be changed.',
      'Use @aria-describedby@ to provide additional information for links that share the same accessible name but have different contexts to allow users to differentiate among them.',
      'If the content of a link includes an @img@ element, the accessible name for the link will incorporate the text alternative specified for the image.'
    ],
    MANUAL_CHECKS: [
      'Read the accessible name for each link aloud and make sure that it describes the target or purpose of the link.'
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML Specification: The A element',
        url:   'https://html.spec.whatwg.org/#the-a-element'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-label@ attribute',
        url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-labelledby@ attribute',
        url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-describedby@ attribute',
        url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-describedby'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML Specification: The @title@ attribute',
        url:   'https://html.spec.whatwg.org/#attr-title'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'H30: Providing link text that describes the purpose of a link for anchor elements',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H30'
      },
      { type:  REFERENCES.EXAMPLE,
        title: 'OAA Example 44 - Using aria-describedby to satisfy WCAG 2.4.4 Link Purpose in Context',
        url:   'https://oaa-accessibility.org/example/44/'
      }
    ]
  },

  LINK_2: {
    ID:                    'Link 2',
    DEFINITION:            'Links with different @href@s should have unique accessible names or descriptions.',
    SUMMARY:               'Link text should be unique',
    TARGET_RESOURCES_DESC: '@a@ and @area@ elements and elements with @role="link"@',
    RULE_RESULT_MESSAGES: {
      FAIL_P:   'Change the accessible names or add @aria-describedby@ attributes to the %N_F @a@, @area@ or @[role=link]@ elements to provide additional information that makes each accessible name or description unique.',
      NOT_APPLICABLE:  'No @a@, @area@ or @[role=link]@ elements on the page share the same accessible name.'
    },
    BASE_RESULT_MESSAGES: {
      ELEMENT_PASS_1: 'There is one other link that shares the same accessible name and @href@ value.',
      ELEMENT_PASS_2: 'There are %1 other links that share the same accessible name and @href@ value.',
      ELEMENT_PASS_3: 'The link shares has same accessible name anoother link with different @href@ value, but has a different accessible description.',
      ELEMENT_PASS_4: 'The link shares has same accessible name as %1 other links with different @href@ values, but has a different accessible description.',
      ELEMENT_FAIL_1: 'Update the accessible names of the %1 link elements that share the same accessible name, but have different @href@ values to clearly indicate the target of the links.'
    },
    PURPOSES: [
      'Screen reader programs provide commands that list all links on a page by their accessible names. When links are taken out of their page context and placed in the context of such a list, links with the same accessible name appear to refer to the same informational resource.',
      'When links that point to different URLs have the same accessible name or description, screen reader users may be unable to determine which link among them references the information they are seeking.'
    ],
    TECHNIQUES: [
      'The link text (i.e. its accessible name and/or description) should uniquely describe the target of a link.',
      'Use the @aria-label@, @aria-labelledby@ or @title@ attribute to provide a more descriptive accessible name when the text content of the link cannot be changed.',
      'Use @aria-describedby@ to provide additional information for links that share the same accessible name but have different contexts to allow users to differentiate among them.'
    ],
    MANUAL_CHECKS: [
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML Specification: The A element',
        url:   'https://html.spec.whatwg.org/#the-a-element'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-label@ attribute',
        url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-labelledby@ attribute',
        url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-describedby@ attribute',
        url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-describedby'
      },
      { type:  REFERENCES.SPECIFICATION,
        title: 'HTML Specification: The @title@ attribute',
        url:   'https://html.spec.whatwg.org/#attr-title'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'H30: Providing link text that describes the purpose of a link for anchor elements',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H30'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'ARIA1: Using the aria-describedby property to provide a descriptive label for user interface controls',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA1'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'ARIA7: Using aria-labelledby for link purpose',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA7'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'ARIA8: Using aria-label for link purpose',
        url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA8'
      }
    ]
  },

  LINK_3: {
      ID:                    'Link 3',
      DEFINITION:            'The target of a link should result in focus in the content the window if the target results in more than one window opening.',
      SUMMARY:               'Target focus should be in content window',
      TARGET_RESOURCES_DESC: '@a@, @area@ and @role="link"@ elements',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:     'Check the link to make sure that if the link opens more than one window that the focus is in the content window.',
        MANUAL_CHECK_P:     'Check the %N_MC links to make sure that if any of the links opens more than one window that the focus is in the content window.',
        HIDDEN_S: 'The link element that is hidden does not need to be tested for content focus.',
        HIDDEN_P: 'The %N_H link elements that are hidden do not need to be tested for content focus.',
        NOT_APPLICABLE:  'No link elements on the page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_MC_1: 'If the target of the @%1@ element opens multiple windows (i.e. typically advertisements or other promotional information) make sure keyboard focus is on the content window.',
        ELEMENT_HIDDEN_1: 'The @%1@ element is hidden, so cannot open any new windows.'
      },
      PURPOSES: [
        'User\'s can become disoriented if the focus causes unpredictable actions, including new URLs and popup windows for advertisements or promotions.'
      ],
      TECHNIQUES: [
        'Do not link to URLs that open multiple windows and do not manage the focus to be in the content windoow the user was expecting by following the link.'
      ],
      MANUAL_CHECKS: [
        'After selecting a link and if it opens multiple windows, make sure the keyboard focus is in the content window.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G200: Opening new windows and tabs from a link only when necessary',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G200'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G201: Giving users advanced warning when opening a new window',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G201'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'F52: Failure of Success Criterion 3.2.1 and 3.2.5 due to opening a new window as soon as a new page is loaded',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F52'
        }
      ]
  }
};

/* listRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const listRules$1 = {

  LIST_1: {
      ID:                    'List 1',
      DEFINITION:            'Page must use semantic markup for lists: to identify the type of list container (ordered, unordered or description list) and to group its related list item elements.',
      SUMMARY:               'Use semantic markup for lists',
      TARGET_RESOURCES_DESC: '@ul@, @ol@ and @li@ elements, and elements with @[role="list"]@ and @[role="listitem"]@',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:   'Verify the list element is used semantically.',
        MANUAL_CHECK_P:   'Verify the %N_MC list elements are used semantically.',
        HIDDEN_S:         'The hidden list element was not evaluated.',
        HIDDEN_P:         'The %N_H hidden list elements were not evaluated.',
        NOT_APPLICABLE:   'No list elements found on the page.'
      },
      BASE_RESULT_MESSAGES: {
        PAGE_MC_1:         'Verify the %1 list elements are used semantically and that list markup was not omitted.',
        ELEMENT_MC_1:      'Verify the @%1@ element identifies a container element for a related group of list items.',
        ELEMENT_MC_2:      'Verify the @%1@ element identifies a list item element in a meaningfully grouped list of items.',
        ELEMENT_HIDDEN_1:  'The hidden @%1@ element was not evaluated.'
      },
      PURPOSES: [
        'When list markup is used semantically, assistive technologies are able to convey information to users as they navigate to and within lists, such as the total number of items and the relative position of each item in the list.',
        'Assistive technologies also provide additional navigation commands for lists, such as "Go to next list item" and "Go to next list".',
        'Concision of list item content is important for accessibility, since assistive technologies read the entire content of each list item when users navigate through lists.',
        'When list markup is used in ways that violate the semantics of lists, it will be confusing to users of assistive technologies and diminish the accessibility of the page.'
      ],
      TECHNIQUES: [
        'Ensure that list item content is concise.',
        'You can use ARIA labeling techniques to give a list container element a descriptive label.',
        'Use @ol@ as a container element for an ordered list of items.',
        'Use @ul@ as a container element for an unordered list of items.',
        'Use @li@ elements to identify items in ordered (@ol@) and unordered (@ul@) lists.',
        'Use @dl@ as a container element for a description list (a.k.a. definition list) that contains contiguous groupings of terms and their associated descriptions or definitions.',
        'Use @dt@ elements to identify terms being described or defined in a description list (@dl@).',
        'Use @dd@ elements to identify descriptions or definitions for a term in a description list (@dl@).',
        'For repairing existing content that does not use list elements, you can use the ARIA @role@ attributes with value @[role="list"]@ or @[role="group"]to identify list container elements and @[role="listitem"]@ to identify list item elements.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: ol element',
          url:   'https://www.w3.org/TR/html5/grouping-content.html#the-ol-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: ul element',
          url:   'https://www.w3.org/TR/html5/grouping-content.html#the-ul-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: li element',
          url:   'https://www.w3.org/TR/html5/grouping-content.html#the-li-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: dl element',
          url:   'https://www.w3.org/TR/html5/grouping-content.html#the-dl-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: dt element',
          url:   'https://www.w3.org/TR/html5/grouping-content.html#the-dt-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: dd element',
          url:   'https://www.w3.org/TR/html5/grouping-content.html#the-dd-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: group role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#group'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: list role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#list'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: listitem role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#listitem'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: aria-posinset',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-posinset'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: aria-setsize',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-setsize'
        }
      ]
  },
  LIST_2: {
      ID:                    'List 2',
      DEFINITION:            'When appropriate, a list container element (@ul@, @ol@, @[role="list"]@ should include a label that describes the purpose or contents of the list.',
      SUMMARY:               'Provide list labels when appropriate',
      TARGET_RESOURCES_DESC: '@ul@ and @ol@ elements, and container elements with @[role="list"]@',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:   'Determine whether the container element benefits from a label and, if so, verify that it accurately describes the contents of the list.',
        MANUAL_CHECK_P:   'Determine whether the %N_MC list container elements benefit from labels and, if so, verify that each accurately describes the contents of the list.',
        HIDDEN_S:         'The hidden list element was not evaluated.',
        HIDDEN_P:         'The %N_H hidden list elements were not evaluated.',
        NOT_APPLICABLE:   'No list elements elements found on the page'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_MC_1:      'Verify the label "%1" accurately describes the contents of the list.',
        ELEMENT_MC_2:      'Verify the @%1@ list container element does not benefit from a label, or add a label that describes the contents of the list.',
        ELEMENT_HIDDEN_1:  'The hidden @%1@ element was not evaluated.'
      },
      PURPOSES: [
        'Assistive technologies use labels on @ul@ and @ol@ elements, and elements with @[role="list"]@ attributes to help screen reader users understand the purpose or contents of lists.'
      ],
      TECHNIQUES: [
        'Use the @aria-labelledby@ attribute to add a label to a list container element to reference the @id@(s) of one or more elements on the page that describe its contents.',
        'Use the @aria-label@ attribute to add a label to a list container element to provide an explicit text description of its contents.',
        'The @title@ attribute can also be used to add a label to a list container element to provide an explicit text description of its contents.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: ol element',
          url:   'https://www.w3.org/TR/html5/grouping-content.html#the-ol-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML5: ul element',
          url:   'https://www.w3.org/TR/html5/grouping-content.html#the-ul-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: list role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#list'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-label@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-labelledby@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @title@ attribute',
          url:   'https://html.spec.whatwg.org/#attr-title'
        }
      ]
  }
};

/* liveRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const liveRules$1 = {
    LIVE_1: {
        ID:                    'Live 1',
        DEFINITION:            'Live regions identify how and when regions on a page will be automatically announced when changes occur in content, for example status or error messages.',
        SUMMARY:               'Live regions for status and error messages',
        TARGET_RESOURCES_DESC: 'Elements with @alert@, @log@ or @status@ roles or the @aria-live@ attribute',
        RULE_RESULT_MESSAGES: {
          MANUAL_CHECK_S:  'Verify the page has properly identified live regions for status and error messages.',
          MANUAL_CHECK_P:  'Verify the page has properly identified live regions for status and error messages, and the %N_MC live regions identified have appropriate ARIA markup for the type of change in status or error messages that can occur.',
          HIDDEN_S:        'One element identified as a live region is hidden and was not evaluated.',
          HIDDEN_P:        '%N_H elements identified as live regions are hidden and were not evaluated.',
          NOT_APPLICABLE:  'No elements were identified as live regions on the page.'
        },
        BASE_RESULT_MESSAGES: {
          ELEMENT_MC_1:       'Verify the @aria-live@ attribute value of "%1" is appropriate for the type of informational change that can occur in the region.',
          ELEMENT_MC_2:       'Verify the @alert@ role identifies a live region with critical time-sensitive information.',
          ELEMENT_MC_3:       'Verify the @log@ role identifies a live region where new information added and deleted in a meaningful order.',
          ELEMENT_MC_4:       'Verify the @status@ role identifies a live region with advisory information.',
          ELEMENT_HIDDEN_1:   '@%1[aria-live=%2]@ was not evaluated because it is hidden from assistive technologies.',
          ELEMENT_HIDDEN_2:   '@%1[role="%2"]@ was not evaluated because it is hidden from assistive technologies.',
          PAGE_MC_1:          'Verify the %1 live regions include all of the status and error messages on the page.',
          PAGE_MC_2:          'Verify if the page contains any status or error messages that must be represented by live regions.'
        },
        PURPOSES: [
          'ARIA live regions provide a mechanism for identifying status and error messages on a page such that changes in the content will be automatically announced to screen reader users while they are focusing on other parts of the page.',
          'The manner in which informational changes in live regions are announced to screen reader users is controlled by three separate ARIA roles that may be assigned to the region: @alert@, @log@ and @status@.',
          'In general, live regions should be used sparingly, since live regions that are constantly announcing changes become distracting, and may prevent the user from completing the task they are working on.',
          'A common misuse of live regions is to announce the opening of pull down menus or dialog boxes: These types of announcements are better handled through the appropriate use of other ARIA markup such as the @menu@ and @dialog@ roles.'
        ],
        TECHNIQUES: [
          'The @alert@ role identifies a live region with very important, and usually time-sensitive, information. When the information changes in this type of live region, a message is typically sent that interrupts the current speech being spoken by a screen reader. Examples includes transaction errors that are cancelling or impeding the progress of completing a financial transaction.',
          'The @log@ role identifies a type of live region where new information is added in a meaningful order and old information may disappear. Examples include chat logs, messaging history, game log, or an error log.',
          'The @status@ role identifies a live region that contains an advisory message, but one that is not important enough to justify an @alert@ role. This type of region is often, but not necessarily, presented as a status bar, and announcements of informational changes are typically delayed until a break occurs in the current speech being read by the screen reader software.',
          'When the @aria-atomic@ attribute is specified for a live region, it indicates to assistive technologies that when a change occurs, it should re-render all of the content or just the changes.',
          'The optional @aria-relevant@ attribute on a live region indicates what types of informational changes should be communicated to the user (e.g. @additions@, @deletions@, @text@ and @all@).',
          'The @aria-live@ attribute can be used to create custom live regions, with possible values of @polite@, @assertive@ and @off@. When used in conjunction with the ARIA @alert@, @log@ or @status@ roles, care must be taken in order to avoid conflicts with the default properties of those roles.'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type: REFERENCES.OTHER,
            title: 'Mozilla Developer Network: ARIA Live Regions',
            url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/WIDGET_Live_Regions'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Alert Role',
            url:   'https://www.w3.org/TR/wai-aria-1.2/roles#alert'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Log Role',
            url:   'https://www.w3.org/TR/wai-aria-1.2/roles#log'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Status Role',
            url:   'https://www.w3.org/TR/wai-aria-1.2/roles#status'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: aria-live',
            url:   'https://www.w3.org/TR/wai-aria-1.2/states_and_properties#aria-live'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: aria-atomic',
            url:   'https://www.w3.org/TR/wai-aria-1.2/states_and_properties#aria-atomic'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: aria-relevant',
            url:   'https://www.w3.org/TR/wai-aria-1.2/states_and_properties#aria-relevant'
          }
        ]
    }
};

/* motionRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const motionRules$1 = {
  MOTION_1: {
        ID:                    'Motion 1',
        DEFINITION:            'Functionality that can be operated by device motion or user motion can also be operated by user interface components and responding to the motion can be disabled to prevent accidental actuation.  There are some exceptions.',
        SUMMARY:               'Motion Actuation',
        TARGET_RESOURCES_DESC: 'Page',
        RULE_RESULT_MESSAGES: {
          MANUAL_CHECK_S:  'The evaluation can not automatically determine if their is any functionality activated by motion, but there is scripting on the page so it is possible.  Please review the WCAG requirements for accessibility and determine if the motions requirements apply to this page or if one of the exceptions is met.'
        },
        BASE_RESULT_MESSAGES: {
          PAGE_MC_1: 'The evaluation can not automatically determine if their is any functionality activated by motion, but there is scripting on the page so it is possible.  Please review the WCAG requirements for accessibility and determine if the motions requirements apply to this page or if one of the exceptions is met.',
        },
        PURPOSES: [
          'The intent of this success criterion is to ensure that functions triggered by moving a device (for example, shaking or tilting) or by gesturing towards the device (so that sensors like a camera can pick up and interpret the gesturing), can also be operated by more conventional user interface components.',
          'Alternatives to motion activation helps people who may be unable to perform particular motions (such as tilting, shaking, or gesturing) because the device may be mounted or users may be physically unable to perform the necessary movement. This success criterion ensures that users can still operate all functionality by other means such as touch or via assistive technologies. ',
          'All users benefit when they are in situations where they are unable to move their devices.'
        ],
        TECHNIQUES: [
          'Example: A user can choose an application setting which turns off Shake to Undo and other motion-activated features. ',
          'Example: After text is input in a field, shaking a device shows a dialog offering users to undo the input. A cancel button next to the text field offers the same functionality.',
          'Example: A user can tilt a device to advance to the next or a previous page. Buttons are also provided to perform the same function. ',
          'Example: A user can move or pan a device to change the view in an interactive photo. A control is also available to perform these same functions. ',
          'Example: A user can gesture towards the device to navigate content. Controls are also available to navigate. '
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type:  REFERENCES.SPECIFICATION,
            title: 'W3C WCAG Understanding Motion Actuation',
            url:   'https://www.w3.org/WAI/WCAG22/Understanding/motion-actuation.html'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'G213: Provide conventional controls and an application setting for motion activated input',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/general/G213'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'F106: Failure due to inability to deactivate motion actuation',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/failures/F106'
          }
        ]
  }
};

/* navigationRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const navigationRules$1 = {

  NAVIGATION_1: {
      ID:         'Navigation 1',
      DEFINITION: 'At least two of the following features must be provided for finding content in a website: a website search feature; a list of links on the home page to all pages in the website; a list of links on each page for navigation between pages; bread crumb links on each page for hierarchical navigation of the website and/or a dedicated page that serves as a site map of all the pages in the website.',
      SUMMARY:    'At least two ways of finding content',
      TARGET_RESOURCES_DESC: 'Website navigational links and search form controls',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S: 'Verify that this page can be found from other pages in the website using at least two of the following features: a website search feature; a list of links for navigation from at least one other page in the website and/or from a page in the web site that serves as a site map.',
        MANUAL_CHECK_P: 'Verify that this page can be found from other pages in the website using at least two of the following features: a website search feature; a list of links for navigation from at least one other page in the website and/or from a page in the web site that serves as a site map.',
        NOT_APPLICABLE: 'Single page web resource: no other pages to link to or to search from.'
      },
      BASE_RESULT_MESSAGES: {
        WEBSITE_MC_1: 'This page has both @navigation@ and @search@ landmarks. Verify that they provide links for navigating and the ability to search for content in this website.',
        WEBSITE_MC_2: 'Verify that this page can be found from at least two of the following website features: a website search feature; a list of links for navigation from at least one other page in the website and/or from a page in the web site that serves as a site map.',
        ELEMENT_MC_1: 'Verify that this @navigation@ landmark can be used for navigation of the content in this website.',
        ELEMENT_MC_2: 'Verify that this @search@ landmark can be used to search for content in this website.'
      },
      PURPOSES: [
        'One of the fundamental features of the web is the provision of easy access to useful information. By providing multiple ways to find information within a website, people with disabilities are able to locate content in a manner that best meets their needs.'
      ],
      TECHNIQUES: [
        'Website search feature identified by the @search@ landmark.',
        'A list of links for navigation between pages using the @navigation@ landmark.',
        'Sandtrail/bread crumb links for hierarchical navigation of the website using the @navigation@ landmark.',
        'A dedicated page that serves as a site map of all the pages in the website.'
      ],
      MANUAL_CHECKS: [
        'Verify that at least two of the techniques are implemented for finding content on this page.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: Landmark Roles',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#landmark_roles'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G63: Providing a site map',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G63'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G64: Providing a Table of Contents',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G64'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G125: Providing links to navigate to related Web pages',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G125'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G126: Providing a list of links to all other Web pages',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G126'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G161: Providing a search function to help users find content',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G161'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G185: Linking to all of the pages on the site from the home page',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G185'
        }
      ]
  },
  NAVIGATION_2: {
      ID:         'Navigation 2',
      DEFINITION: 'Consistent ordering of @main@, @navigation@, @search@, @banner@, @contentinfo@, @complementary@ and any other shared landmarks used across all pages in a website.',
      SUMMARY:    'Consistent ordering of landmarks',
      TARGET_RESOURCES_DESC: '@main@, @navigation@, @search@, @banner@ and @contentinfo@ landmarks',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S: 'Verify that this page uses the same ordering of @main@, @navigation@, @search@, @banner@, @contentinfo@, @complementary@ and any other shared landmarks as other pages within the website.',
        MANUAL_CHECK_P: 'Verify that this page uses the same ordering of @main@, @navigation@, @search@, @banner@, @contentinfo@, @complementary@ and any other shared landmarks as other pages within the website.',
        NOT_APPLICABLE: 'No landmarks found on the page.'
      },
      BASE_RESULT_MESSAGES: {
        WEBSITE_MC_1:   'Verify that this page uses the same ordering of the following landmarks as other pages in the website: %1.',
        ELEMENT_MC_1:   'Verify that the ordering of the @%1@ landmark relative to other landmarks on this page is the same as the ordering used on the other pages in this website.',
      },
      PURPOSES: [
        'One of the fundamental features of the web is the provision of easy access to useful information. Providing consistent ordering of landmarks across all pages of a website will make it easier for people to find the information they are seeking and to navigate between and within pages.'
      ],
      TECHNIQUES: [
        'Include the basic @main@, @navigation@, @banner@ and @contentinfo@ landmarks in your page templates for the website.',
        'If the page includes a website search form, use the @search@ landmark.',
        'Use consistent ordering of the @main@, @navigation@, @search@, @banner@, @contentinfo@, @complementary@ and any other landmarks that are a part of each page within a website.'
      ],
      MANUAL_CHECKS: [
        'Verify that the ordering of the @main@, @navigation@, @search@, @banner@, @contentinfo@, @complementary@ and any other landmarks that are part of each page is consistent with the ordering of these landmarks on other pages.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: Landmark Roles',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#landmark_roles'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G61: Presenting repeated components in the same relative order each time they appear',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G61'
        }
      ]
  },
  NAVIGATION_3: {
      ID:         'Navigation 3',
      DEFINITION: 'Consistent ordering of @h1@ and @h2@ elements that label recurring page sections common across all pages in a website.',
      SUMMARY:    'Consistent ordering of @h1@ and @h2@ labels',
      TARGET_RESOURCES_DESC: '@h1@ and @h2@ elements used to identify recurring sections of pages within a website',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S: 'Verify that this page uses the same ordering of @h1@ and @h2@ elements used to mark recurring page sections as the ordering used on the other pages within the website.',
        MANUAL_CHECK_P: 'Verify that this page uses the same ordering of @h1@ and @h2@ elements used to mark recurring page sections as the ordering used on the other pages within the website.',
        FAIL_S:         'No @h1@ or @h2@ elements found on the page.',
        FAIL_P:         'No @h1@ or @h2@ elements found on the page.',
        NOT_APPLICABLE: 'Single page web resource: consistent ordering of @h1@ and @h2@ does not apply.'
      },
      BASE_RESULT_MESSAGES: {
        WEBSITE_FAIL_1: 'No @h1@ or @h2@ elements found on the page.',
        WEBSITE_MC_1:   'Verify that the ordering of @h1@ and @h2@ elements used to mark recurring page sections on this page is the same as the ordering used on the other pages within the website.',
        ELEMENT_MC_1:   'Verify that if this @h1@ heading is used to identify the main content of the page, it is in the same order relative to any @h2@ elements that identify recurring page sections as the ordering used on the other pages within the website.',
        ELEMENT_MC_2:   'Verify that if this @h2@ heading is used to identify a recurring page section, it is in the same order relative to other comparable @h2@ elements as the ordering used on the other pages within the website.'
      },
      PURPOSES: [
        'One of the fundamental features of the web is the provision of easy access to useful information. Consistent ordering of @h1@ and @h2@ elements used to identify recurring page sections common across all pages in the website will make it easier for people to find information they are seeking and to navigate between and within pages.'
      ],
      TECHNIQUES: [
        'Use an @h1@ element to identify the main content within a page.',
        'Use @h2@ elements to identify other recurring page sections such as navigation bars, web site search forms, footer information, etc.'
      ],
      MANUAL_CHECKS: [
        'View the @h1@ and @h2@ heading structure of the page, and verify that it has the same or a similar structure as other pages within the website, especially with respect to recurring page sections.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: Landmark Roles',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#landmark_roles'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G61: Presenting repeated components in the same relative order each time they appear',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G61'
        }
      ]
  },
  NAVIGATION_4: {
      ID:         'Navigation 4',
      DEFINITION: 'Consistent labeling of landmarks across all pages in a website.',
      SUMMARY:    'Consistent labeling of landmarks',
      TARGET_RESOURCES_DESC: '@main@, @navigation@, @search@, @banner@, @complementary@ and @contentinfo@ landmarks',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S: 'Verify that the labeling of the @main@, @navigation@, @search@, @banner@, @complementary@ and @contentinfo@ landmarks on this page is consistent with the labeling of all comparable landmarks on all other pages within the website.',
        MANUAL_CHECK_P: 'Verify that the labeling of the @main@, @navigation@, @search@, @banner@, @complementary@ and @contentinfo@ landmarks on this page is consistent with the labeling of all comparable landmarks on all other pages within the website.',
        NOT_APPLICABLE:  'No landmarks found on the page.'
      },
      BASE_RESULT_MESSAGES: {
        WEBSITE_MC_1: 'Verify that the labeling of landmarks on this page is consistent with the labeling of comparable landmarks on all other pages within the website.',
        ELEMENT_MC_1: 'Verify that the labeling of the @%1@ landmark on this page is consistent with the labeling of comparable @main@ landmarks on all other pages within the website.',
      },
      PURPOSES: [
        'One of the fundamental features of the web is the provision of easy access to useful information. Consistent labeling of comparable landmark-identified content across all pages of a website will make it easier for people to find information they are seeking and to navigate between and within pages.'
      ],
      TECHNIQUES: [
        'Most pages have sections associated with the @main@, @navigation@, @banner@ and @contentinfo@ landmarks in your page templates for the website.',
        'If the page includes a website search form, use the @search@ landmark.',
        'Landmarks only need labels (using @aria-label@ or @aria-labelledby@) if there is more than one landmark of the same type on a page.',
        'If landmarks have labels, use consistent labeling of the landmarks across all pages within the website.'
      ],
      MANUAL_CHECKS: [
        'Verify that the main content of the page is contained within the @main@ landmark.',
        'Verify that recurring content at the top of each page is contained within a @banner@ landmark.',
        'Verify that website navigational links are contained within @navigation@ landmarks.',
        'Verify that recurring content at the bottom of each page is contained within a @contentinfo@ landmark.',
        'Verify that if a landmark has a label and there are comparable landmarks on other pages in the website, the labels are the same on each page.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: Landmark Roles',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#landmark_roles'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G61: Presenting repeated components in the same relative order each time they appear',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G61'
        }
      ]
  },
  NAVIGATION_5: {
      ID:         'Navigation 5',
      DEFINITION: 'Consistent accessible names for @h1@ and @h2@ elements that identify recurring page sections common across all pages in a website.',
      SUMMARY:    'Consistent @h1@ and @h2@ page section labels',
      TARGET_RESOURCES_DESC: '@h1@ and @h2@ elements used to identify recurring page sections within a website',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S: 'Verify that the accessible names of @h1@ and @h2@ elements used to identify recurring page sections are consistent with those on all other pages within the website.',
        MANUAL_CHECK_P: 'Verify that the accessible names of @h1@ and @h2@ elements used to identify recurring page sections are consistent with those on all other pages within the website.',
        FAIL_S: 'No @h1@ or @h2@ elements found on the page.',
        FAIL_P: 'No @h1@ or @h2@ elements found on the page.',
        NOT_APPLICABLE: 'Single page web resource: consistency of accessible names does not apply.'
      },
      BASE_RESULT_MESSAGES: {
        WEBSITE_FAIL_1: 'No @h1@ or @h2@ elements found on the page',
        WEBSITE_MC_1:   'Verify that the accessible names of @h1@ and @h2@ elements used to identify recurring page sections are the same as those of comparable @h1@ and @h2@ elements found on the other pages within the website.',
        ELEMENT_MC_1:   'Verify that if this @h1@ heading is used to identify the main content of the page, it has the same accessible name as comparable @h1@ elements on the other pages within the website.',
        ELEMENT_MC_2:   'Verify that if this @h2@ heading is used to identify a recurring page section, it has the same accessible name as comparable @h2@ elements on the other pages within the website.'
      },
      PURPOSES: [
        'One of the fundamental features of the web is the provision of easy access to useful information. Consistent accessible names of @h1@ and @h2@ elements used to identify recurring page sections common across all pages in the website will make it easier for people to find information they are seeking and to navigate between and within pages.'
      ],
      TECHNIQUES: [
        'Use @h1@ elements to identify the main content within a page.',
        'Use @h2@ elements to identify other major sections within pages, e.g. navigation bars, web site search forms, footer information, etc.'
      ],
      MANUAL_CHECKS: [
        'View the @h1@ and @h2@ heading structure of the page, and verify that it has the same relative order as other pages within the website'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: Landmark Roles',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#landmark_roles'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G61: Presenting repeated components in the same relative order each time they appear',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G61'
        }
      ]
  }
};

/* pointerRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const pointerRules$1 = {
  POINTER_1: {
        ID:                    'Pointer 1',
        DEFINITION:            'All functionality that uses multipoint or path-based gestures for operation can be operated with a single pointer without a path-based gesture, unless a multipoint or path-based gesture is essential.',
        SUMMARY:               'Pointer Gestures',
        TARGET_RESOURCES_DESC: 'Page',
        RULE_RESULT_MESSAGES: {
          MANUAL_CHECK_S:  'The evaluation can not automatically determine if their is any functionality activated by multi-touch or tracing a path with a pointer, but there is scripting on the page so it is possible.  Please review the WCAG requirements for accessibility and determine if the requirements apply to this page or the exception is met.',
        },
        BASE_RESULT_MESSAGES: {
          PAGE_MC_1: 'The evaluation can not automatically determine if their is any functionality activated by multi-touch or tracing a path with a pointer, but there is scripting on the page so it is possible.  Please review the WCAG requirements for accessibility and determine if the requirements apply to this page or the exception is met.',
        },
        PURPOSES: [
          'Alternatives to multi-touch and path specific movements is required to ensure that content can be controlled with a range of pointing devices, abilities, and assistive technologies. Some people cannot perform gestures in a precise manner, or they may use a specialized or adapted input device such as a head pointer, eye-gaze system, or speech-controlled mouse emulator. Some pointing methods lack the capability or accuracy to perform multipoint or path-based gestures.',
          'A path-based gesture involves an interaction where not just the endpoints matter. If going through an intermediate point (usually near the start of the gesture) also affects its meaning then it is a path-based gesture. The user engages a pointer (starting point), carries out a movement that goes through at least one intermediate-point before disengaging the pointer (end point). The intermediate point defines the gesture as requiring a specific path, even if the complete path is not defined.'
        ],
        TECHNIQUES: [
          'Example: A web site includes a map view that supports the pinch gesture to zoom into the map content. User interface controls offer the operation using plus and minus buttons to zoom in and out. ',
          'Example: A web site includes a map view that supports the pinch gesture to zoom into the map content. As an single-pointer alternative, the map also allows users to double-tap, hold, and then move the pointer up or down to zoom in or out. ',
          'Example: A news site has a horizontal content slider with hidden news teasers that can moved into the viewport via a fast horizontal swipe/flicking motion. It also offers forward and backward arrow buttons for single-point activation to navigate to adjacent slider content. ',
          'Example: A kanban widget with several vertical areas representing states in a defined process allows the user to right- or left-swipe elements to move them to an adjacent silo. The user can also accomplish this by selecting the element with a single tap or click, and then activating an arrow button to move the selected element. ',
          'Example: A custom slider requires movement in a strict left/right direction when operated by dragging the thumb control. Buttons on both sides of the slider increment and decrement the selected value and update the thumb position. '        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type:  REFERENCES.SPECIFICATION,
            title: 'W3C WCAG: Understanding Pointer Gestures',
            url:   'https://www.w3.org/WAI/WCAG22/Understanding/pointer-gestures.html'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'G215: Providing controls to achieve the same result as path based or multipoint gestures',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/general/G215'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'G216: Providing single point activation for a control slider',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/general/G216'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'F105: Failure of Success Criterion 2.5.1 due to providing functionality via a path-based gesture without simple pointer alternative',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/failures/F105'
          }
        ]
  },

  POINTER_2: {
        ID:                    'Pointer 2',
        DEFINITION:            'For functionality that can be operated using a single pointer, at least one of the following is true: "No Down-Event", "abort or undo", "up Reversal" techniques, unless completing the function is essential.',
        SUMMARY:               'Pointer Cancellation',
        TARGET_RESOURCES_DESC: 'Page',
        RULE_RESULT_MESSAGES: {
          MANUAL_CHECK_S:  'The evaluation can not automatically determine if their is any functionality activated by pointer interaction, but there is scripting on the page so it is possible.  Please review the WCAG requirements for accessibility and determine if using a single pointer requirements apply to this page, if they do verify at least one of the following is true: "No Down-Event", "abort or undo", "up Reversal" techniques; or the essential exception is met.',
        },
        BASE_RESULT_MESSAGES: {
          PAGE_MC_1: 'The evaluation can not automatically determine if their is any functionality activated by pointer interaction, but there is scripting on the page so it is possible.  Please review the WCAG requirements for accessibility and determine if using a single pointer requirements apply to this page, if they do verify at least one of the following is true: "No Down-Event", "abort or undo", "up Reversal" techniques; or the essential exception is met.',
        },
        PURPOSES: [
          'Pointer events that can be cancelled make it easier for users to prevent accidental or erroneous pointer input. People with various disabilities can inadvertently initiate touch or mouse events with unwanted results.',
          'Makes it easier for all users to recover from hitting the wrong target.',
          'Helps people with visual disabilities, cognitive limitations, and motor impairments by reducing the chance that a control will be accidentally activated or an action will occur unexpectedly, and also ensures that where complex controls are activated, a means of Undoing or Aborting the action is available. ',
          'Individuals who are unable to detect changes of context are less likely to become disoriented while navigating a site. '
        ],
        TECHNIQUES: [
          'No Down-Event: The down-event of the pointer is not used to execute any part of the function',
          'Abort or Undo: Completion of the function is on the up-event, and a mechanism is available to abort the function before completion or to undo the function after completion.',
          'Up Reversal: The up-event reverses any outcome of the preceding down-event.',
          'Essential: Completing the function on the down-event is essential.',
          'Example: For interface elements that have a single tap or long press as input, the corresponding event is triggered when the finger is lifted inside that element. ',
          'Example: A drag-and-drop interface allows users to sort vertically stacked cards by picking up one card with the pointer (down-event), move it to a new position, and insert it at the new location when the pointer is released (up-event). Releasing the pointer outside the drop target area reverts the action, i.e., it moves the card back to the old position before the interaction started.'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type:  REFERENCES.SPECIFICATION,
            title: 'W3C WCAG: Understanding Pointer Cancellation',
            url:   'https://www.w3.org/WAI/WCAG22/Understanding/pointer-cancellation.html'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'G210: Ensuring that drag-and-drop actions can be cancelled',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/general/G210'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'G212: Using native controls to ensure functionality is triggered on the up-event.',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/general/G212'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'F101: Failure of Success Criterion 2.5.2 due to activating a control on the down-event',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/failures/F101'
          }
        ]
  },

  POINTER_3: {
        ID:                    'Pointer 3',
        DEFINITION:            'All functionality that uses a dragging movement for operation can be achieved by a single pointer without dragging, unless dragging is essential or the functionality is determined by the user agent and not modified by the author.',
        SUMMARY:               'Dragging Movements',
        TARGET_RESOURCES_DESC: 'Page',
        RULE_RESULT_MESSAGES: {
          MANUAL_CHECK_S: 'The evaluation library can not automatically determine if any dragging operations exist on a page and if they do if the operation can be completed with a single pointer without dragging.  Verification requires understanding the requirements to see if they apply to the page and if they do interacting with the page with a single pointer to verify the requirement is met or that essential exception applies.'
        },
        BASE_RESULT_MESSAGES: {
          PAGE_MC_1: 'The evaluation library can not automatically determine if any dragging operations exist on a page and if they do if the operation can be completed with a single pointer without dragging.  Verification requires understanding the requirements to see if they apply to the page and if they do interacting with the page with a single pointer to verify the requirement is met or that essential exception applies.'
        },
        PURPOSES: [
          'Users who struggle with performing dragging movements can still operate an interface with a pointer interface.'
        ],
        TECHNIQUES: [
          'Example: A map allows users to drag the view of the map around, and the map has up/down/left/right buttons to move the view as well.',
          'Example: A sortable list of elements may, after tapping or clicking on a list element, provide adjacent controls for moving the element up or down in the list by simply tapping or clicking on those controls.',
          'Example: A taskboard that allows users to drag and drop items between columns also provides an additional pop-up menu after tapping or clicking on items for moving the selected element to another column by tapping or clicking on pop-up menu entries.',
          'Example: A radial control widget (color wheel) where the value can be set by dragging the marker for the currently selected color to another position, also allows picking another color value by tapping or clicking on another place in the color wheel.',
          'Example: A linear slider control widget, where the value can be set by dragging the visual indicator (thumb) showing the current value, allows tapping or clicking on any point of the slider track to change the value and set the thumb to that position.',
          'Example: A widget where you can drag a gift to one person in a photo of a group of people also has a menu alternative where users can select the person that should receive the gift from the menu.'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type:  REFERENCES.SPECIFICATION,
            title: 'W3C WCAG: Understanding Dragging Movements',
            url:   'https://www.w3.org/WAI/WCAG22/Understanding/dragging-movements.html'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'G219: Ensuring that an alternative is available for dragging movements that operate on content',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/general/G219'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'F108: Failure of Success Criterion 2.5.7 Dragging Movements due to not providing a single pointer method for the user to operate a function that does not require a dragging movement',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/failures/F108'
          }
        ]
  }
};

/* readingOrderRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const readingOrderRules$1 = {

  ORDER_1: {
    ID:                    'Order 1',
    DEFINITION:            'Elements positioned using CSS @absolute@, @relative@ or @fixed@ must maintain a meaningful reading order of content.',
    SUMMARY:               'Reading order: CSS positioning',
    TARGET_RESOURCES_DESC: 'Elements with absolute, relative and fixed position values',
    RULE_RESULT_MESSAGES: {
      MANUAL_CHECK_S:   'Verify the element positioned with CSS maintains a reading order meaningful to users of assistive technologies.',
      MANUAL_CHECK_P:   'Verify the %N_MC elements positioned with CSS maintain a reading order meaningful to users of assistive technologies.',
      HIDDEN_S:         'The element positioned with CSS that is hidden was not evaluated.',
      HIDDEN_P:         '%N_H elements positioned with CSS that are hidden were not evaluated.'
      },
    BASE_RESULT_MESSAGES: {
      ELEMENT_MC_1:     'Verify the @%1@ element with @position: %2@ maintains a meaningful reading order with other content on the page.',
      ELEMENT_HIDDEN_1: 'The @%1@ element with @position: %2@ was not evaluated because it is hidden from assistive technologies.'
    },
    PURPOSES: [
      'If the reading order of text content on the page is presented to users of assistive technologies in an order that does not match the intension of the author, reading comprehension will be affected. In worst-case scenarios, the meaning of the out-of-order content may contradict or bear little resemblance to the intended meaning.',
      'Assistive technologies render web page content based upon the sequence of the DOM elements within the HTML document.',
      'Web page designs that rely upon @table@ markup for layout or advanced CSS positioning techniques and JavaScript to rearrange content may result in a visual rendering of content that differs in reading order from the actual DOM ordering used by assistive technologies. Thus while the visual rendering may appear to have the correct or desired reading order, when rendered by assistive technologies such as screen readers, the actual reading order will be incorrect and correspondingly illogical.',
      'The relationship of the DOM order of content to the intended reading order is therefore very important for ensuring that information is logically presented to users of assistive technologies.'
    ],
    TECHNIQUES: [
      'Minimize the use of CSS @position@ values of @absolute@,  @relative@ and @fixed@.',
      'Make sure related content moves as a block when repositioning content on a page.'
    ],
    MANUAL_CHECKS: [
      'Disable layout tables (e.g. table[role="presentation"]) and CSS to make sure the content rendered has a meaningful sequence.'
    ],
    INFORMATIONAL_LINKS: [
      {
        type:  REFERENCES.SPECIFICATION,
        title: 'WCAG 2.0 Success Criterion 1.3.2 Meaningful Sequence',
        url:   'https://www.w3.org/TR/WCAG20/#content-structure-separation-sequence'
      },
      {
        type:  REFERENCES.SPECIFICATION,
        title: 'Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification: position property',
        url:   'https://www.w3.org/TR/CSS2/visuren.html#propdef-position'
      }
    ]
  }
};

/* resizeRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const resizeRules$1 = {

 RESIZE_1: {
      ID:                    'Resize 1',
      DEFINITION:            'When the text of a page is resized the text content must reflow to fill available view and all text content should remain visible (e.g. text is not clipped by iframe sizes or CSS overflow limits).',
      SUMMARY:               'Resize text content',
      TARGET_RESOURCES_DESC: 'Page',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:  'Resize the text using the zoom feature of the browser to check to make sure text content is visible (e.g. text is not clipped by iframe sizes or CSS overflow limits).'
      },
      BASE_RESULT_MESSAGES: {
        PAGE_MC_1:      'Resize the text using the zoom feature of the browser to check to make sure text content is visible (e.g. text is not clipped by iframe sizes or CSS overflow limits).'
      },
      PURPOSES: [
        'People with visual impairments may increase the size of text and the text should reflow to fit the available viewing area to make it easier to read.',
        'If text is clipped by limits on iframe sizes or CSS overflow properties some text content will be impossible to view.'
      ],
      TECHNIQUES: [
        'Use relative CSS sized like @em@ and @percentage@ rather than pixels and point sizes.',
        'If using the CSS overflow property, @iframe@ or @frame@ check to make sure content reflows and is not clipped by changes in zoom levels.',
        'Verify when font sizes are increased to at least 400% (4 times the original size of the font), the content reflows and does not require horizontal scrolling.',
        'Verify that font sizes are descreases content reflows to fill the width of the screen.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'How to meet 1.4.4 Resize Text',
          url:   'https://www.w3.org/WAI/WCAG20/quickref/#qr-visual-audio-contrast-scale'
        }
      ]
  },

  RESIZE_2: {
      ID:                    'Resize 2',
      DEFINITION:            'Content is viewable without scrolling for window dimensions as small as 320 x 256 pixels.',
      SUMMARY:               'Support small screen dimensions',
      TARGET_RESOURCES_DESC: 'Page',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S: 'Resize the screen to 320 x 256 CSS pixels and check to make sure content is viewable without using horizontal or vertical scrolling.'
      },
      BASE_RESULT_MESSAGES: {
        PAGE_MC_1:  'Resize the screen to the equivalent of 320 x 256 CSS pixels by either adjusting the window size or using the browser\'s zoom features and check to make sure content is viewable without using horizontal or vertical scrolling.'
      },
      PURPOSES: [
        'People with visual impairments using the browser zoom features benefit when content on the site reflows to fit the screen without scrolling.'
      ],
      TECHNIQUES: [
        'Use CSS media queries or flexbox code to reflow content based on screen width and height.',
        'No vertical scrolling required when the window width is the equivalent to 320 CSS pixels.',
        'No horizontal scrolling required when the window width is the equivalent to 256 CSS pixels.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.WCAG_SPECIFICATION,
          title: 'How to meet 1.4.10 Reflow',
          url:   'https://www.w3.org/TR/WCAG21/#reflow'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'C32: Using media queries and grid CSS to reflow columns',
          url:   'https://www.w3.org/WAI/WCAG21/Understanding/reflow.html'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'C31: Using CSS Flexbox to reflow content',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/css/C31'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'C33: Allowing for Reflow with Long URLs and Strings of Text',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/css/C33'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'C38: Using CSS width, max-width and flexbox to fit labels and inputs',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/css/C38'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'SCR34: Calculating size and position in a way that scales with text size',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/client-side-script/SCR34'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'G206: Providing options within the content to switch to a layout that does not require the user to scroll horizontally to read a line of text',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G206'
        }
      ]
  }

};

/* sensoryRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const sensoryRules$1 = {

  SENSORY_1: {
    ID:                    'Sensory 1',
    DEFINITION:            'Understanding and operating on content on the page must not rely solely on the shape, size, visual location, orientation, or sound.',
    SUMMARY:               'Not only shape, size and location',
    TARGET_RESOURCES_DESC: 'Images used for links and controls',
    RULE_RESULT_MESSAGES: {
      MANUAL_CHECK_S:     'Verify that understanding the content, navigation of links and operation of controls and widgets does not depend solely on the shape, size, visual location, orientation, or sound.'
    },
    BASE_RESULT_MESSAGES: {
      PAGE_MC_1: 'Verify that understanding the content, navigation of links and operation of controls and widgets does not depend solely on the shape, size, visual location, orientation, or sound.'
    },
    PURPOSES: [
      'People with visual impairments and learning disabilities that affect the visual processing of information may not be able to perceive the content or identify the purpose of links and controls.',
      'People with hearing impairments and learning disabilities that affect the auditory processing of information may not be able to perceive the content or identify the purpose of links and controls.'
    ],
    TECHNIQUES: [
      'Provide redundant text labels and references in addition to references to shape, size, visual location or sound.'
    ],
    MANUAL_CHECKS: [
      'Verify that understanding the content, navigation of links and operation of controls and widgets does not depend solely on the shape, size, visual location, orientation, or sound.'
    ],
    INFORMATIONAL_LINKS: [
      { type:  REFERENCES.SPECIFICATION,
        title: 'WCAG 2.0 Success Criterion 1.3.3 Sensory Characteristics',
        url:   'https://www.w3.org/TR/WCAG20/#content-structure-separation-understanding'
      },
      { type:  REFERENCES.WCAG_TECHNIQUE,
        title: 'How to meet Success Criterion 1.3.3 Sensory Characteristics',
        url:   'https://www.w3.org/WAI/WCAG20/quickref/#qr-content-structure-separation-understanding'
      }
    ]
}
};

/* shortcutRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const shortcutRules$1 = {
  SHORTCUT_1: {
        ID:                    'Shortcut 1',
        DEFINITION:            'When a keyboard shortcut is implemented in content using only letter, punctuation, number, or symbol characters, then users should be able to either turn off the shortcuts, change the characters or the shortcuts only activate in the context a specific widget.',
        SUMMARY:               'Character Key Shortcuts',
        TARGET_RESOURCES_DESC: 'Page',
        RULE_RESULT_MESSAGES: {
          MANUAL_CHECK_S:  'The evaluation can not automatically determine if their is any functionality activated by keyboard shortcuts defined by the page author, but there is scripting on the page so it is possible.  Please review the WCAG requirements for accessibility and determine if there are any keyboard shortcut and if their are that the user can either turn off the shortcuts, change the characters or the shortcuts only activate in the context a specific widget.',
        },
        BASE_RESULT_MESSAGES: {
          PAGE_MC_1: 'The evaluation can not automatically determine if their is any functionality activated by keyboard shortcuts defined by the page author, but there is scripting on the page so it is possible.  Please review the WCAG requirements for accessibility and determine if there are any keyboard shortcut and if their are that the user can either turn off the shortcuts, change the characters or the shortcuts only activate in the context a specific widget.',
        },
        PURPOSES: [
          'Screen reader users will be able to turn off single-key shortcuts so they can avoid accidentally firing batches of them at once. This will allow speech users to make full use of programs that offer single-key shortcuts to keyboard users.',
          'Keyboard-only users who have dexterity challenges can also be prone to accidentally hitting keys. Those users would be able to avoid problematic single character shortcuts by turning them off or modifying them to include at least one non-character key.',
          'Allowing all shortcut keys to be remapped can help users with some cognitive disabilities, since the same shortcuts can be assigned to perform the same actions across different applications.'
        ],
        TECHNIQUES: [
          'The shortcut can be turned off.',
          'Provide a way to change the shortcut to include one or more non-printable keyboard keys, for example Ctrl or Alt.',
          'The keyboard shortcut for a user interface component is only active when that component has focus.'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type:  REFERENCES.SPECIFICATION,
            title: 'W3C Understanding Character Key Shortcuts ',
            url:   'https://www.w3.org/WAI/WCAG21/Understanding/character-key-shortcuts.html'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'G217: Providing a mechanism to allow users to remap or turn off character key shortcuts',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G217'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'F99: Failure of Success Criterion 2.1.4 due to implementing character key shortcuts that cannot be turned off or remapped',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F99'
          }
        ]
  },
  SHORTCUT_2: {
        ID:                    'Shortcut 2',
        DEFINITION:            'Avoid using @accesskey@ attribute for shortcuts due to potential conflicts with browser and assistive technology shortcuts.',
        SUMMARY:               'Avoid using @accesskey@ for shortcuts',
        TARGET_RESOURCES_DESC: 'Element',
        RULE_RESULT_MESSAGES: {
          MANUAL_CHECK_S:  'Verify the accesskey does not interfere with shortcuts used by the browser or assistive technologies.',
          MANUAL_CHECK_P:  'Verify none of the %N_MC accesskeys interfere with shortcuts used by the browser or assistive technologies.',
        },
        BASE_RESULT_MESSAGES: {
          ELEMENT_MC_1:     'Verify the @%1@ accesskey does not interfere with shortcuts used by the browser or assistive technologies.',
          ELEMENT_HIDDEN_1: 'The @%1@ accesskey is on a hidden element and not tested for accessibility.',
        },
        PURPOSES: [
          'An @accesskey@ value can conflict with a system or browser keyboard shortcut, or assistive technology functionality. What may work for one combination of operating system, assistive technology, and browser may not work with other combinations.',
          'Certain @accesskey@ values may not be present on certain keyboards, especially when internationalization is a concern. So adapting to specific languages could cause further problems.',
          '@accesskey@ values that rely on numbers may be confusing to individuals experiencing cognitive concerns, where the number doesn\'t have a logical association with the functionality it triggers.',
          'Informing the user that @accesskey@s are present, so that they are aware of the functionality. If the system lacks a method of notifying the user about this feature, the user might accidentally activate @accesskey@s.'
        ],
        TECHNIQUES: [
          'Remove the use of the @accesskey@ attribute.',
          'Use scripting instead of @accesskey@ attribute to define shortcuts.  The scripting must meet the WCAG 2.1.4 requirements for shortcuts.'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type:  REFERENCES.SPECIFICATION,
            title: 'W3C Understanding Character Key Shortcuts ',
            url:   'https://www.w3.org/WAI/WCAG21/Understanding/character-key-shortcuts.html'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'MDN: accesskey',
            url:   'https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'WebAIM: Accesskey',
            url:   'https://webaim.org/techniques/keyboard/accesskey#spec'
          }
        ]
  }

};

/* spacingRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const spacingRules$1 = {
  SPACING_1: {
        ID:                    'Spacing 1',
        DEFINITION:            'No loss of content or functionality occurs by users adjusting any of the following text styling properties: line height (line spacing), paragraph spacing, letter spacing and word spacing.  There are some exceptions for some languages and scripts.',
        SUMMARY:               'Text Spacing',
        TARGET_RESOURCES_DESC: 'Page',
        RULE_RESULT_MESSAGES: {
          MANUAL_CHECK_S:  'The evaluation can not automatically determine if the page supports text spacing requirements.  Use a browser add-on or assistive technology that supports changes in text spacing to verify support for this requirements.'
        },
        BASE_RESULT_MESSAGES: {
          PAGE_MC_1: 'Verify all functionality that uses multi-touch or tracing a path for operation can be operated with a single pointer without a path-based gesture, unless a multipoint or path-based gesture is essential.'
        },
        PURPOSES: [
          'People with low vision who require increased space between lines, words, and letters are able to read text.',
          'People with dyslexia may increase space between lines, words, and letters to increase reading speed.',
          'White space between blocks of text can help people with cognitive disabilities discern sections and call out boxes.'
        ],
        TECHNIQUES: [
          'This requirement does not require authors to set any of their content to a specified metric, nor does it intend to imply that all users will adjust the specified metrics. Rather, it specifies that should a user choose to set any of these metrics they can do so without any loss of content or functionality. The author requirement is both to not interfere with a user\'s ability to override the author settings, and to ensure that modified content is not visually distorted within the adjustment ranges of the requirement.',
          'Range: Line height (line spacing) to at least 1.5 times the font size.',
          'Range: Spacing following paragraphs to at least 2 times the font size.',
          'Range: Letter spacing (tracking) to at least 0.12 times the font size.',
          'Range: Word spacing to at least 0.16 times the font size.'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type:  REFERENCES.SPECIFICATION,
            title: 'W3C WCAG: Understanding Text Spacing',
            url:   'https://www.w3.org/WAI/WCAG22/Understanding/text-spacing.html'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'Chrome Extension: Text Spacing Editor',
            url:   'https://chromewebstore.google.com/detail/text-spacing-editor/amnelgbfbdlfjeaobejkfmjjnmeddaoj'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'Firefox Extension: Text Spacing Editor',
            url:   'https://addons.mozilla.org/en-US/firefox/addon/text-spacing-editor-actum/'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'HOLISTICA11Y: Text Spacing Bookmarklet',
            url:   'https://holistica11y.com/text-spacing-bookmarklet-for-accessibility-testing/'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'C36:Allowing for text spacing override',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/css/C36'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'C35: Allowing for text spacing without wrapping',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/css/C35'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'C8: Using CSS letter-spacing to control spacing within a word ',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/css/C8'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'C21: Specifying line spacing in CSS',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/css/C21'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'C28:Specifying the size of text containers using em units',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/css/C21'
          },
          { type:  REFERENCES.TECHNIQUE,
            title: 'F104: Failure of Success Criterion 1.4.12 due to clipped or overlapped content when text spacing is adjusted',
            url:   'https://www.w3.org/WAI/WCAG22/Techniques/failures/F104'
          }
        ]
  }
};

/* tableRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English              */
/* --------------------------------------------------------------------------- */

const tableRules$1 = {
  TABLE_1: {
      ID:                    'Table 1',
      DEFINITION:            'Data cells in data tables must have row and/or column header cells or use the @headers@ attribute.',
      SUMMARY:               'Data cells must have row/column headers',
      TARGET_RESOURCES_DESC: '@td@ elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:         'Add @th@ elements to the first row and/or column of the data table or use the @header@ attribute to provide headers to the data cell without headers.',
        FAIL_P:         'Add @th@ elements to the first row and/or column of the data table or use the @header@ attribute to provide headers to the %N_F data cells in the table without headers.',
        MANUAL_CHECK_S: 'The @td@ element does not have any text content. Verify that this cell is being used for formatting and does not need row or column headers.',
        MANUAL_CHECK_P: '%N_MC @td@ elements do not have any text content. Verify that these cells are being used for formatting and do not need row or column headers.',
        HIDDEN_S:       'One @td@ element that is hidden was not evaluated.',
        HIDDEN_P:       '%N_H @td@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No data tables and/or @td@ cells on the page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   'The @%1@ element has 1 header defined using row and/or column headers cells, header content: "%2".',
        ELEMENT_PASS_2:   'The @%1@ element has %2 headers defined using row and/or column headers cells, header content: "%3".',
        ELEMENT_PASS_3:   'The @%1@ element has 1 header defined using the @header@ attribute, header content: "%2".',
        ELEMENT_PASS_4:   'The @%1@ element has %2 headers defined using the @header@ attribute, header content: "%3".',
        ELEMENT_FAIL_1:   'Add table cells to be used as header cells for the @%1@ element using either row/column headers or the @headers@ attribute.',
        ELEMENT_MC_1:     'The @%1@ element does not have any text content and it does not have any header cells. Verify that this cell is being used for formatting and does not need headers.',
        ELEMENT_MC_2:     'The @%1@ element does not have any text content.  Verify it is not being used for identifying the context of a data cell.',
        ELEMENT_HIDDEN_1: 'The @%1@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'For screen reader users to understand the the context or meaning of the content in a data cell, the headings for the cell must be identified',
        'When header cells are properly identified, screen reader users can distinguish between header and data table cells.'
      ],
      TECHNIQUES: [
        'Use a @th@ element as the first cell in each row and/or column to define row and column headers in simple data tables.',
        'While not recommended, it is also valid to use @td@ element with a @scope@ attribute as a header cell.',
        'Avoid using empty rows and columns for formatting data tables. Use CSS instead.',
        'When row and/or column headers are not sufficient to describe a data cell, use the @header@ attribute to identify the appropriate header cells.  For example, when a data cell spans more than one column or row the column and row headers.'
      ],
      MANUAL_CHECKS: [
        'Verify that empty @td@ and @th@ elements do not need table headers.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: 4.9.1 The table element',
          url:   'https://html.spec.whatwg.org/multipage/tables.html#the-table-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: headers attribute',
          url:   'https://html.spec.whatwg.org/multipage/tables.html#attr-tdth-headers'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: scope attribute',
          url:   'https://html.spec.whatwg.org/multipage/tables.html#attr-th-scope'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H51: Using table markup to present tabular information',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H51'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H63: Using the scope attribute to associate header cells and data cells in data tables',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H63'
        },
        { type:  REFERENCES.EXAMPLE,
          title: 'MDN: The Table element',
          url:   'https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table'
        },
        { type:  REFERENCES.EXAMPLE,
          title: 'IBM Accessibility Requirements: 502.3.3 Row, Column and Headers',
          url:   'https://www.ibm.com/able/requirements/requirements/#502_3_3'
        },
        { type:  REFERENCES.EXAMPLE,
          title: 'W3C Web Accessibility Tutorials: Tables',
          url:   'https://www.w3.org/WAI/tutorials/tables/'
        }
      ]
  },
  TABLE_2: {
      ID:                    'Table 2',
      DEFINITION:            'Data tables must have an accessible name to identify the purpose of the table.',
      SUMMARY:               'Data tables must have name',
      TARGET_RESOURCES_DESC: '@table@',
      RULE_RESULT_MESSAGES: {
        FAIL_S:           'Add an accessible name for the data table using either the @caption@ element; or one of the following @table@ element attributes: @aria-label@ or @aria-labelledby@.',
        FAIL_P:           'Add an accessible name to each of the %N_F out of %N_T data tables using either the @caption@ element; or one of the following @table@ element attributes: @aria-label@ or @aria-labelledby@.',
        HIDDEN_S:         'One data table that is hidden was not evaluated.',
        HIDDEN_P:         '%N_H data tables that are hidden were not evaluated.',
        NOT_APPLICABLE:   'No data tables found on the page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   'The @%1@ element\'s accessible name defined using: @%2@.',
        ELEMENT_FAIL_1:   'Add accessible name using either the @caption@ element; or one of the following @table@ element attributes: @aria-label@ or @aria-labelledby@.',
        ELEMENT_HIDDEN_1: 'The @table@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'An accessible name for a data table enables people using assistive technologies to identify the purpose of the table and to differentiate among multiple data tables on the same page.',
        'Screen readers include table navigation commands and the accessible name will provides context to the table.'
      ],
      TECHNIQUES: [
        'Use @caption@ element to provide an accessible name for a data table.',
        'Use @title@ attribute to provide an accessible name for a data table.',
        'Use @aria-label@ attribute to provide an accessible name for a data table (NOTE: inconsistent browser/AT support).',
        'Use @aria-labelledby@ attribute to provide an accessible name for a data table (NOTE: inconsistent browser/AT support).',
        'If the table is not used for tabular data, but instead for layout of content, use the @role="presentation"@ on the @table@ element.'
      ],
      MANUAL_CHECKS: [
        'Make sure the the accessible name accurately and succinctly identifies the purpose of the data table.',
        'If the table markup is actually being used for laying out content in rows or columns, use @role="presentation"@ on the @table@ element.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: 4.9.1 The table element',
          url:   'https://html.spec.whatwg.org/multipage/tables.html#the-table-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: 4.9.1 The caption element',
          url:   'https://html.spec.whatwg.org/multipage/tables.html#the-caption-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-label@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-labelledby@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @title@ attribute',
          url:   'https://html.spec.whatwg.org/#attr-title'
        },
        { type:  REFERENCES.EXAMPLE,
          title: 'W3C Web Accessibility Tutorials: Tables',
          url:   'https://www.w3.org/WAI/tutorials/tables/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H39: Using caption elements to associate data table captions with data tables',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H39'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'F46: Failure of Success Criterion 1.3.1 due to using th elements, caption elements, or non-empty summary attributes in layout tables',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F46'
        }
      ]
  },
  TABLE_3: {
      ID:                    'Table 3',
      DEFINITION:            'Some data tables may have an accessible description (e.g. summary) of contents of the table.',
      SUMMARY:               'Data tables may have description',
      TARGET_RESOURCES_DESC: '@table[title]@ or @aria-describedby@ attribute',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S: 'For the data table without a summary, consider adding a @aria-describedby@ attribute to reference summary content on the page or adding additional information to the @caption@ element to the table.',
        MANUAL_CHECK_P: 'For the %N_F data tables without summary, consider adding an @aria-describedby@ attribute to reference summary content on the page or adding additional information to the @caption@ element in each table.',
        HIDDEN_S:       'One data @table@ element that is hidden was not evaluated.',
        HIDDEN_P:       'The %N_H data @table@ elements elements that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No data tables on the page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   'The @%1@ element has an accessible description through the @aria-describedby@ reference.',
        ELEMENT_PASS_2:   'The @%1@ element has an accessible description through the @title@ attribute.',
        ELEMENT_MC_1:     'The @%1@ element is a simple table, consider adding a @aria-describedby@ attribute to reference a accessible description (e.g. a summary) of the content of the table.',
        ELEMENT_MC_2:     'The @%1@ element a complex table, it is highly recommended to add a @aria-describedby@ attribute to reference a accessible description (e.g. a summary) of the content of the table.',
        ELEMENT_HIDDEN_1: 'The @%1@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'Complex data tables are defined as tables with row and/or column spans, or more than one header cell (e.g. @th@ element) in any row or column of the table.',
        'An accessible description providing a summary of the organization of the table or numerical values reduces the time for users of assistive technology to explore and understand the content of a table.',
        'An accessible description that includes a synopsis of the authors intended conclusions of viewing the content of a table make it easier for people using assistive technologies to understand importance of why the author provided the data table.'
        ],
      TECHNIQUES: [
        'Use the  @aria-describedby@ attribute to provide a reference to an accessible description of the information in a data table.',
        'Use the  @title@ attribute to provide a accessible description of the information in a data table.',
        'NOTE: The @summary@ attribute is no longer supported by HTML specifications, and there for should no longer be used for accessible names or descriptions.'
      ],
      MANUAL_CHECKS: [
        'Verify the content of the accessible description accurately summarizes the organization, numerical information in the table or authors intended conclusions from viewing the table.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: 4.9.1 The table element',
          url:   'https://html.spec.whatwg.org/multipage/tables.html#the-table-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-describedby@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-describedby'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @title@ attribute',
          url:   'https://html.spec.whatwg.org/#attr-title'
        },
        { type:  REFERENCES.EXAMPLE,
          title: 'W3C Web Accessibility Tutorials: Tables',
          url:   'https://www.w3.org/WAI/tutorials/tables/'
        }
      ]
  },
  TABLE_4: {
      ID:                    'Table 4',
      DEFINITION:            'Data tables should have unique accessible names to help users identify and differentiate the data tables on a page.',
      SUMMARY:               'Data tables should have unique names',
      TARGET_RESOURCES_DESC: '@table@ elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:         'Change the accessible name of the @table@ to be unique.',
        FAIL_P:         'Change the accessible name of the %N_F out of %N_T data tables that do not have unique names to be unique.',
        HIDDEN_S:       'One @table@ element that is hidden was not evaluated.',
        HIDDEN_P:       '%N_H @table@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE: 'Multiple data tables were not found on the page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   'The table\'s accessible name "%1" for @%2@ element is unique on the page.',
        ELEMENT_FAIL_1:   'The table\'s accessible name "%1" is not unique on the page for the @%2@ element, update the accessible table names to be unique and descriptive of the table content.',
        ELEMENT_HIDDEN_1: 'The @%1@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'Data tables that share the same accessible name make it difficult to users of assistive technologies to differentiate the differences in content of the data tables on the same page.',
        'In rare cases when multiple data tables have duplicate data, use "Copy 1", "Copy 2" and "Copy X" as part of the accessible name of each table to make it clear that there is more than one copy of the same information on the page.'
      ],
      TECHNIQUES: [
        'Use @caption@ element to provide an accessible name for a data table.',
        'Use @aria-label@ attribute to provide an accessible name for a data table (NOTE: inconsistent browser/AT support).',
        'Use @aria-labelledby@ attribute to provide an accessible name for a data table (NOTE: inconsistent browser/AT support).',
        'Use @title@ attribute to provide an accessible name for a data table.',
        'If the table is not used for tabular data, but instead for layout of content, use the @role="presentation"@ on the @table@ element.',
        'NOTE: The @summary@ attribute is no longer supported by HTML specifications, and there for should no longer be used for accessible names or desciptions.'
      ],
      MANUAL_CHECKS: [
        'Verify the accessible names for tables are unique and identify the content in the data tables.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: 4.9.1 The table element',
          url:   'https://html.spec.whatwg.org/multipage/tables.html#the-table-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: 4.9.1 The caption element',
          url:   'https://html.spec.whatwg.org/multipage/tables.html#the-caption-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-label@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-labelledby@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The @title@ attribute',
          url:   'https://html.spec.whatwg.org/multipage/dom.html#the-title-attribute'
        },
        { type:  REFERENCES.EXAMPLE,
          title: 'W3C Web Accessibility Tutorials: Tables',
          url:   'https://www.w3.org/WAI/tutorials/tables/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H39: Using caption elements to associate data table captions with data tables',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H39'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'F46: Failure of Success Criterion 1.3.1 due to using th elements, caption elements, or non-empty summary attributes in layout tables',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F46'
        },
        { type:  REFERENCES.EXAMPLE,
          title: 'IBM Web checklist Checkpoint 1.3e: Tables',
          url:   'https://www-03.ibm.com/able/guidelines/web/webtableheaders.html'
        }
      ]
  },
  TABLE_5: {
      ID:                    'Table 5',
      DEFINITION:            'Table markup must identify a table as either a data table or a layout table.',
      SUMMARY:               'Identify table markup as data or layout',
      TARGET_RESOURCES_DESC: '@table@ elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'The table without headers or @role="none"@, define the purpose of the table by adding header cells if the table is being used for tabular data or use @role="presentation"@ on the table elements if the table is being used to layout content.',
        FAIL_P:   'For the %N_F tables without headers or @role=none"@, define the purpose of the table by adding header cells if the table is being used for tabular data or use @role="presentation"@ on the table elements if the table is being used to layout content.',
        MANUAL_CHECK_S: 'Verify the @table@ element that only has one row or column is used only only for layout.',
        MANUAL_CHECK_P: 'Verify the %N_H @table@ elements that only have one row or column are used only only for layout.',
        HIDDEN_S: 'One @table@ element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H @table@ elements elements that are hidden were not evaluated.',
        NOT_APPLICABLE:  'No table markup found on this page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   'The @%1@ element is a layout table, since it has @role="%2"@.',
        ELEMENT_PASS_2:   'The @%1@ element is a simple data table, since it has header cells and/or an accessible name.',
        ELEMENT_PASS_3:   'The @%1@ element is a complex data table, since it has columns/row spans or multiple headers in a row or column.',
        ELEMENT_PASS_4:   'The @%1@ element is table, since it is using @role=table@.',
        ELEMENT_PASS_5:   'The @%1@ element is grid, since it is using @role=grid@.',
        ELEMENT_PASS_6:   'The @%1@ element is treegrid, since it is using @role=treegrid@.',
        ELEMENT_MC_1:     'Verify the @%1@ element with only one row is only used for layout purposes, if so add the @role@ attribute with a value of @none@.',
        ELEMENT_MC_2:     'Verify the @%1@ element with only one column is only used for layout purposes, if so add the @role@ attribute with a value of @none@.',
        ELEMENT_FAIL_1:   'Define the purpose of the @%1@ element by adding header cells if the table is being used for tabular data or use @role="none"@ on the table element if the table is being used to layout content.',
        ELEMENT_HIDDEN_1: 'The @%1@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'The @table@ element is designed for representing tabular data in a web page, but table markup has also been used by web developers as a means to layout content in rows and columns.',
        'Users of assistive technology are confused when the purpose of table markup is not clearly identified (i.e. layout or for tabular data).',
        'Use @role="presentation"@ on the @table@ element to clearly identify a table markup for layout.',
        'Adding an accessible name and/or description to a @table@ element identifies table markup as a data table (e.g. layout tables must not have an accessible name or description).',
        'The use header cells (e.g. @th@ or @td[scope]@ elements) identifies a @table@ element as a data table.'
      ],
      TECHNIQUES: [
        'Use @th@ elements in the first row and/or first column to identify a table as a data table.',
        'Use @caption@ element; @aria-label@ or @aria-labelledby@ attribute to add an accessible name to a @table@ element.',
        'Use the @aria-describedby@ attribute to add an accessible description to a @table@ element.',
        'Use @role="presentation"@ on the @table@ element to identify a table and its child table elements (e.g. @tr@ and @td@ elements) are being used for layout.',
        'Layout tables must only use the @tr@ and @td@ table elements for layout content and must NOT have an accessible name or description.'
      ],
      MANUAL_CHECKS: [
        'If a table is used for layout verify the order of content still makes sense when the table markup is disabled.',
        'If a table is used for data tables, verify the each data cell has header cells that clearly identify the meaning of the content of the data cell.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: presentation role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#presentation'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The TD elements',
          url:   'https://html.spec.whatwg.org/#the-td-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The TH elements',
          url:   'https://html.spec.whatwg.org/#the-th-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The CAPTION element',
          url:   'https://html.spec.whatwg.org/#the-caption-element'
        },
        { type:  REFERENCES.EXAMPLE,
          title: 'W3C Web Accessibility Tutorials: Tables',
          url:   'https://www.w3.org/WAI/tutorials/tables/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H51: Using table markup to present tabular information',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H51'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H63: Using the scope attribute to associate header cells and data cells in data tables',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H63'
        },
        { type:  REFERENCES.EXAMPLE,
          title: 'IBM Web checklist Checkpoint 1.3e: Tables',
          url:   'https://www-03.ibm.com/able/guidelines/web/webtableheaders.html'
        }
      ]
  },
  TABLE_6: {
      ID:                    'Table 6',
      DEFINITION:            'Each data table header cell should use @th@ elements rather than @td@ element with a @scope@ attribute.',
      SUMMARY:               'Header cells should be @th@ elements',
      TARGET_RESOURCES_DESC: '@th@ and @td[scope]@ elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Change the @td[scope]@ element to a @th@ element',
        FAIL_P:   'Change the @td[scope]@ element to a @th@ element for each of the %N_F header cells using @td[scope]@',
        HIDDEN_S: 'One @table@ element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H @table@ elements elements that are hidden were not evaluated.',
        NOT_APPLICABLE:  'No td[scope]@ elements on the page'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   'The @th@ element is used for header cell',
        ELEMENT_FAIL_1:   'Change the @td[scope]@ element to a @th[scope]@ element',
        ELEMENT_HIDDEN_1: 'The cells of the table were not evaluated because the table is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: 'The @%1@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        '@th@ element is the web standards way to identify header cells in a table, and makes the data table source code easier to read and debug for accessibility problems.'
      ],
      TECHNIQUES: [
        'Use @th@ elements in the first row or column to identify row and column headers in a simple data tables.',
        'Use @headers@ attribute on each @td@ element to identify header information in complex data tables.',
        'Use @th@ element for cells used as header cells in the table.'
      ],
      MANUAL_CHECKS: [
        'Verify the each data cell has header cells that clearly identify the meaning of the content of the data cell.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The TD elements',
          url:   'https://html.spec.whatwg.org/#the-td-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The TH elements',
          url:   'https://html.spec.whatwg.org/#the-th-element'
        },
        { type:  REFERENCES.EXAMPLE,
          title: 'W3C Web Accessibility Tutorials: Tables',
          url:   'https://www.w3.org/WAI/tutorials/tables/'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H51: Using table markup to present tabular information',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H51'
        },
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'H63: Using the scope attribute to associate header cells and data cells in data tables',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H63'
        },
        { type:  REFERENCES.EXAMPLE,
          title: 'IBM Web checklist Checkpoint 1.3e: Tables',
          url:   'https://www-03.ibm.com/able/guidelines/web/webtableheaders.html'
        }
      ]
  },
  TABLE_7: {
      ID:                    'Table 7',
      DEFINITION:            'Data cells in complex data tables must use @headers@ attribute to identify header cells.',
      SUMMARY:               'Data cells must use @headers@ attribute',
      TARGET_RESOURCES_DESC: '@td@ elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:         'Add a @headers@ attribute to the data cell to identify the header cells for the data cell.',
        FAIL_P:         'Add %N_F data cells use the @headers@ attribute to identify the header cells for the data cell.',
        HIDDEN_S:       'One @td@ element that is hidden was not evaluated.',
        HIDDEN_P:       '%N_H @td@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No complex data tables on the page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   '@headers@ attribute references the following header: \'%1\'.',
        ELEMENT_PASS_2:   '@headers@ attribute references the following %1 headers: \'%2\'.',
        ELEMENT_FAIL_1:   'Add header cells using the @headers@ attribute, since the cell spans more than one row and/or column table.',
        ELEMENT_HIDDEN_1: 'The cells of the table were not evaluated because the table is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: 'Data cell was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'The data cells in complex data tables need to use the @headers@ attribute to identify the appropriate header cells, since simple row/column relationships cannot be relied upon to provide header information.',
        'Complex data tables are defined as tables with row and/or column spans, or more than one header cell (e.g. @th@ element) in any row or column of the table.'
      ],
      TECHNIQUES: [
        'Use @headers@ attribute on each @td@ element used as a data cell to identify header information in complex data tables.'
      ],
      MANUAL_CHECKS: [
        'Verify the each data cell has header cells that clearly identify the meaning of the content of the data cell.',
        'Verify that empty @td@ and @th@ elements and does not need table headers.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The TD elements',
          url:   'https://html.spec.whatwg.org/#the-td-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The TH elements',
          url:   'https://html.spec.whatwg.org/#the-th-element'
        },
        { type:  REFERENCES.EXAMPLE,
          title: 'W3C Web Accessibility Tutorials: Tables',
          url:   'https://www.w3.org/WAI/tutorials/tables/'
        },
        { type:  REFERENCES.EXAMPLE,
          title: 'IBM Web checklist Checkpoint 1.3e: Tables',
          url:   'https://www-03.ibm.com/able/guidelines/web/webtableheaders.html'
        }
      ]
  },
  TABLE_8: {
      ID:                    'Table 8',
      DEFINITION:            'The accessible name of a data table must be different from its accessible description.',
      SUMMARY:               'Name must be different than description',
      TARGET_RESOURCES_DESC: 'Data tables with both an accessible name and accessible description',
      RULE_RESULT_MESSAGES: {
        FAIL_S:         'Change the accessible name and/or accessible description of the data table with accessible name that is the same as the accessible description, make sure the accessible name identifies the content of the data table and the description provides a summary of the content.',
        FAIL_P:         'Change the accessible name and/or accessible description of the %N_F data tables with accessible name that is the same as the accessible description, make sure the accessible name identifies the content of each data table and the description provides a summary of the content.',
        MANUAL_CHECK_S: 'Verify the data table with an accessible name that is longer than the accessible description is actually providing a useful summary of the contents of the data table.',
        MANUAL_CHECK_P: 'Verify the %N_MC data tables with an accessible name that is longer than the accessible description is actually providing a useful summary of the contents of the data table.',
        HIDDEN_S:       'One @table@ element that is hidden was not evaluated.',
        HIDDEN_P:       '%N_H @table@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No data tables with both an accessible name and description on the page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   'Accessible name and description are different.',
        ELEMENT_FAIL_1:   'Change the accessible name and/or accessible description, make sure the accessible name identifies the content of the table and the description provides a summary of the content.',
        ELEMENT_MC_1:     'Verify the data table with an accessible name that is longer than the accessible description is actually providing a useful summary of the contents of the data table.',
        ELEMENT_HIDDEN_1: 'The table was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSES: [
        'Accessible name and description are designed to provide two different types of information to users of assistive technologies and therefore should not duplicate each other.',
        'Accessible name is designed to provide a short title to identify the data table, so when users of assistive technology are using table navigation commands they can identify the table.',
        'Accessible description is designed to provide a longer summary of the table, this could include author intended conclusions of the data.'
      ],
      TECHNIQUES: [
        'Accessible name is typically defined using the @caption@ element, but the @title@, @aria-label@ and @aria-labelledby@ attribute can also be used.',
        'Accessible description is typically defined using the @aria-describedby@ attribute, but the @title@ attribute can also be used.',
        'NOTE: The @summary@ attribute is no longer supported in HTML.'
      ],
      MANUAL_CHECKS: [
        'Verify the accessible name clearly identifies the purpose of the table.',
        'Verify the description summarizes the content of the table.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The TD elements',
          url:   'https://html.spec.whatwg.org/#the-td-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HTML Specification: The TH elements',
          url:   'https://html.spec.whatwg.org/#the-th-element'
        },
        { type:  REFERENCES.EXAMPLE,
          title: 'W3C Web Accessibility Tutorials: Tables',
          url:   'https://www.w3.org/WAI/tutorials/tables/'
        }
      ]
  }
};

/* targetSizeRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const targetSizeRules$1 = {

 TARGET_SIZE_1: {
      ID:                    'Target Size 1',
      DEFINITION:            'Author sizing of links have at least the dimensions of 24 by 24 CSS pixels, unless it meets one of the four exceptions.',
      SUMMARY:               'Author sizing of links (Minimum)',
      TARGET_RESOURCES_DESC: 'links',
      RULE_RESULT_MESSAGES: {
        FAIL_S:  'Remove or increase the author sizing of the area to activate the undersized link to at least 24 by 24 CSS pixels.',
        FAIL_P:  'Remove or increase the author sizing of the area to activate the %N_F undersized links to at least 24 by 24 CSS pixel.',
        HIDDEN_S:  'One undersized link was not evaluated because it is not visible.',
        HIDDEN_P:  '%N_H undersized links were not evaluated because they are not visible.',
        NOT_APPLICABLE:  'No undersized links found on the page'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   'The current dimensions are %1 by %2 and meet the target size requirement',
        ELEMENT_FAIL_1:   'The current dimensions are %1 by %2, so either remove author sizing of the link dimensions or increase the authoring sizing dimensions to at least 24 x 24 CSS pixels.',
        ELEMENT_HIDDEN_1: 'The author sized link is visually hidden and is not tested for target size.'
      },
      PURPOSES: [
        'The intent of this success criterion is to help users who may have trouble activating a small target because of hand tremors, limited dexterity or other reasons. If the target is too small, it may be difficult to aim at the target.',
        'Mice and similar pointing devices can be hard to use for these users, and a larger target will help them greatly in having positive outcomes on the web page.',
        'EXCEPTION (common) Inline: When links are in sentences (e.g. part of a paragraph), the target size requirement does not apply, unless the author has specifically defined the width or height using CSS.',
        'EXCEPTION (common) User Agent Control: If the size of the target is not modified by the author through CSS or other size properties, then the target does not need to meet the target size of 44 by 44 CSS pixels.',
        'EXCEPTION (uncommon) Equivalent Target Exception: If there is more than one target on a screen that performs the same action, only one of the targets need to meet the target size of 44 by 44 CSS pixels.',
        'EXCEPTION (uncommon) Essential Exception: If the target is required to be a particular target size and cannot be provided in another way.'
      ],
      TECHNIQUES: [
        'Remove author styling of the rendered size of the link, allowing the browser to render the link using the preferences of the user.',
        'If the link does not meet one of the exceptions, increase the author defined dimensions to at least 24 by 24 pixels.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type: REFERENCES.WCAG_SPECIFICATION,
          title: 'WCAG Understanding Target Size (Minimum)',
          url: 'https://www.w3.org/WAI/WCAG22/Understanding/target-size-minimum.html'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Windows UWP Guidelines for touch targets',
          url:   'https://docs.microsoft.com/en-us/windows/uwp/design/input/guidelines-for-targeting'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Google Material Design Touch targets',
          url:   'https://material.io/design/layout/spacing-methods.html#touch-targets'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'web.dev Accessible tap targets',
          url:   'https://web.dev/accessible-tap-targets/'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Human Fingertips to Investigate the Mechanics of Tactile Sense (PDF)',
          url:   'http://touchlab.mit.edu/publications/2003_009.pdf'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'One-Handed Thumb Use on Small Touchscreen Devices',
          url:   'http://www.cs.umd.edu/hcil/trs/2006-11/2006-11.htm'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Microsoft Guidelines for Building Touch Friendly Sites',
          url:   'https://learn.microsoft.com/en-us/windows/apps/design/input/guidelines-for-targeting'
        }
      ]
  },


 TARGET_SIZE_2: {
      ID:                    'Target Size 2',
      DEFINITION:            'Author sizing of links have at least the dimensions of 44 by 44 CSS pixels, unless it meets one of the four exceptions.',
      SUMMARY:               'Author sizing of links (Enhanced)',
      TARGET_RESOURCES_DESC: 'links',
      RULE_RESULT_MESSAGES: {
        FAIL_S:  'Remove or increase the author sizing of the area to activate the undersized link to at least 44 by 44 CSS pixels.',
        FAIL_P:  'Remove or increase the author sizing of the area to activate the %N_F undersized links to at least 44 by 44 CSS pixel.',
        HIDDEN_S:  'One undersized link was not evaluated because it is not visible.',
        HIDDEN_P:  '%N_H undersized links were not evaluated because they are not visible.',
        NOT_APPLICABLE:  'No undersized links found on the page'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   'The current dimensions are %1 by %2 and meet the target size requirement',
        ELEMENT_FAIL_1:   'The current dimensions are %1 by %2, so either remove author sizing of the link dimensions or increase the authoring sizing dimensions to at least 44 x 44 CSS pixels.',
        ELEMENT_HIDDEN_1: 'The author sized link is visually hidden and is not tested for target size.'
      },
      PURPOSES: [
        'The intent of this success criterion is to help users who may have trouble activating a small target because of hand tremors, limited dexterity or other reasons. If the target is too small, it may be difficult to aim at the target.',
        'Mice and similar pointing devices can be hard to use for these users, and a larger target will help them greatly in having positive outcomes on the web page.',
        'EXCEPTION (common) Inline: When links are in sentences (e.g. part of a paragraph), the target size requirement does not apply, unless the author has specifically defined the width or height using CSS.',
        'EXCEPTION (common) User Agent Control: If the size of the target is not modified by the author through CSS or other size properties, then the target does not need to meet the target size of 44 by 44 CSS pixels.',
        'EXCEPTION (uncommon) Equivalent Target Exception: If there is more than one target on a screen that performs the same action, only one of the targets need to meet the target size of 44 by 44 CSS pixels.',
        'EXCEPTION (uncommon) Essential Exception: If the target is required to be a particular target size and cannot be provided in another way.'
      ],
      TECHNIQUES: [
        'Remove author styling of the rendered size of the link, allowing the browser to render the link using the preferences of the user.',
        'If the link does not meet one of the exceptions, increase the author defined dimensions to at least 44 by 44 pixels.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type: REFERENCES.WCAG_SPECIFICATION,
          title: 'WCAG Understanding Target Size (Enhanced)',
          url: 'https://www.w3.org/WAI/WCAG22/Understanding/target-size-enhanced.html'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Windows UWP Guidelines for touch targets',
          url:   'https://docs.microsoft.com/en-us/windows/uwp/design/input/guidelines-for-targeting'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Google Material Design Touch targets',
          url:   'https://material.io/design/layout/spacing-methods.html#touch-targets'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'web.dev Accessible tap targets',
          url:   'https://web.dev/accessible-tap-targets/'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Human Fingertips to Investigate the Mechanics of Tactile Sense (PDF)',
          url:   'http://touchlab.mit.edu/publications/2003_009.pdf'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'One-Handed Thumb Use on Small Touchscreen Devices',
          url:   'http://www.cs.umd.edu/hcil/trs/2006-11/2006-11.htm'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Microsoft Guidelines for Building Touch Friendly Sites',
          url:   'https://learn.microsoft.com/en-us/windows/apps/design/input/guidelines-for-targeting'
        }
      ]
  },

  TARGET_SIZE_3: {
      ID:                    'Target Size 3',
      DEFINITION:            'Button dimensions are at least 24 by 24 CSS pixels.',
      SUMMARY:               'Button target size (Minimum)',
      TARGET_RESOURCES_DESC: 'buttons',
      RULE_RESULT_MESSAGES: {
        FAIL_S:  'Use CSS to increase the size of the area to activate the undersized button to at least 24 by 24 CSS pixels.',
        FAIL_P:  'Use CSS to increase the size of the area to activate the %N_F undersized buttons to at least 24 by 24 CSS pixel.',
        HIDDEN_S:  'One undersized button was not evaluated because it is not visible.',
        HIDDEN_P:  '%N_H undersized buttons were not evaluated because they are not visible.',
        NOT_APPLICABLE:  'No undersized buttons found on the page'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   'The current dimensions of the @%1@ element is %2 by %3 and meet the target size requirement',
        ELEMENT_FAIL_1:   'The current dimensions of the @%1@ element is %2 by %3, use CSS to increase the button dimensions to at least 24 x 24 CSS pixels.',
        ELEMENT_HIDDEN_1: 'The @%1@ element is visually hidden and is not tested for target size.'
      },
      PURPOSES: [
        'The intent of this success criterion is to help users who may have trouble activating a small target because of hand tremors, limited dexterity or other reasons. If the target is too small, it may be difficult to aim at the target.',
        'Mice and similar pointing devices can be hard to use for these users, and a larger target will help them greatly in having positive outcomes on the web page.'
      ],
      TECHNIQUES: [
        'Use CSS to increase the dimensions of the button to at least 24 by 24 pixels.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type: REFERENCES.WCAG_SPECIFICATION,
          title: 'WCAG Understanding Target Size (Minimum)',
          url: 'https://www.w3.org/WAI/WCAG22/Understanding/target-size-minimum.html'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Windows UWP Guidelines for touch targets',
          url:   'https://docs.microsoft.com/en-us/windows/uwp/design/input/guidelines-for-targeting'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Google Material Design Touch targets',
          url:   'https://material.io/design/layout/spacing-methods.html#touch-targets'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'web.dev Accessible tap targets',
          url:   'https://web.dev/accessible-tap-targets/'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Human Fingertips to Investigate the Mechanics of Tactile Sense (PDF)',
          url:   'http://touchlab.mit.edu/publications/2003_009.pdf'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'One-Handed Thumb Use on Small Touchscreen Devices',
          url:   'http://www.cs.umd.edu/hcil/trs/2006-11/2006-11.htm'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Microsoft Guidelines for Building Touch Friendly Sites',
          url:   'https://learn.microsoft.com/en-us/windows/apps/design/input/guidelines-for-targeting'
        }
      ]
  },

 TARGET_SIZE_4: {
      ID:                    'Target Size 4',
      DEFINITION:            'Button dimensions are at least 44 by 44 CSS pixels.',
      SUMMARY:               'Button target size (Enhanced)',
      TARGET_RESOURCES_DESC: 'buttons',
      RULE_RESULT_MESSAGES: {
        FAIL_S:  'Use CSS to increase the size of the area to activate the undersized button to at least 44 by 44 CSS pixels.',
        FAIL_P:  'Use CSS to increase the size of the area to activate the %N_F undersized buttons to at least 44 by 44 CSS pixel.',
        HIDDEN_S:  'One undersized button was not evaluated because it is not visible.',
        HIDDEN_P:  '%N_H undersized buttons were not evaluated because they are not visible.',
        NOT_APPLICABLE:  'No undersized buttons found on the page'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   'The current dimensions of the @%1@ element is %2 by %3 and meet the target size requirement',
        ELEMENT_FAIL_1:   'The current dimensions of the @%1@ element is %2 by %3, use CSS to increase the button dimensions to at least 44 x 44 CSS pixels.',
        ELEMENT_HIDDEN_1: 'The @%1@ element is visually hidden and is not tested for target size.'
      },
      PURPOSES: [
        'The intent of this success criterion is to help users who may have trouble activating a small target because of hand tremors, limited dexterity or other reasons. If the target is too small, it may be difficult to aim at the target.',
        'Mice and similar pointing devices can be hard to use for these users, and a larger target will help them greatly in having positive outcomes on the web page.'
      ],
      TECHNIQUES: [
        'Use CSS to increase the dimensions of the button to at least 44 by 44 pixels.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type: REFERENCES.WCAG_SPECIFICATION,
          title: 'WCAG Understanding Target Size (Enhanced)',
          url: 'https://www.w3.org/WAI/WCAG22/Understanding/target-size-enhanced.html'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Windows UWP Guidelines for touch targets',
          url:   'https://docs.microsoft.com/en-us/windows/uwp/design/input/guidelines-for-targeting'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Google Material Design Touch targets',
          url:   'https://material.io/design/layout/spacing-methods.html#touch-targets'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'web.dev Accessible tap targets',
          url:   'https://web.dev/accessible-tap-targets/'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Human Fingertips to Investigate the Mechanics of Tactile Sense (PDF)',
          url:   'http://touchlab.mit.edu/publications/2003_009.pdf'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'One-Handed Thumb Use on Small Touchscreen Devices',
          url:   'http://www.cs.umd.edu/hcil/trs/2006-11/2006-11.htm'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Microsoft Guidelines for Building Touch Friendly Sites',
          url:   'https://learn.microsoft.com/en-us/windows/apps/design/input/guidelines-for-targeting'
        }
      ]
  },

  TARGET_SIZE_5: {
      ID:                    'Target Size 5',
      DEFINITION:            'Radio button and checkbox activation areas are at least 24 by 24 CSS pixels.',
      SUMMARY:               'Radio button and checkbox target size (Minimum)',
      TARGET_RESOURCES_DESC: 'radio buttons and checkboxes',
      RULE_RESULT_MESSAGES: {
        FAIL_S:  'Use CSS to increase the size of the area to activate the undersized radio button or checkbox to at least 24 by 24 CSS pixels.',
        FAIL_P:  'Use CSS to increase the size of the area to activate the %N_F undersized radio buttons and checkboxes to at least 24 by 24 CSS pixel.',
        HIDDEN_S:  'One undersized radio button or checkbox was not evaluated because it is not visible.',
        HIDDEN_P:  '%N_H undersized radio buttons or checkboxes were not evaluated because they are not visible.',
        NOT_APPLICABLE:  'No undersized radio buttons or checkboxes found on the page'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   'The current dimensions of the @%1@ element is %2 by %3 and meet the target size requirement',
        ELEMENT_FAIL_1:   'The current dimensions of the @%1@ element is %2 by %3, use CSS to increase the button dimensions to at least 24 x 24 CSS pixels.',
        ELEMENT_PASS_2:   'The current dimensions of the associated @label@ element is %1 by %2 and meet the target size requirement',
        ELEMENT_FAIL_2:   'The current dimensions of the associated @label@ element is %1 by %2, use CSS to increase the button dimensions to at least 24 x 24 CSS pixels.',
        ELEMENT_HIDDEN_1: 'The @%1@ element is visually hidden and is not tested for target size.'
      },
      PURPOSES: [
        'The intent of this success criterion is to help users who may have trouble activating a small target because of hand tremors, limited dexterity or other reasons. If the target is too small, it may be difficult to aim at the target.',
        'Mice and similar pointing devices can be hard to use for these users, and a larger target will help them greatly in having positive outcomes on the web page.'
      ],
      TECHNIQUES: [
        'Use CSS to increase the dimensions of the radio buttons or checkbox or the associated label elements to at least 24 by 24 pixels.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type: REFERENCES.WCAG_SPECIFICATION,
          title: 'WCAG Understanding Target Size (Minimum)',
          url: 'https://www.w3.org/WAI/WCAG22/Understanding/target-size-minimum.html'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Windows UWP Guidelines for touch targets',
          url:   'https://docs.microsoft.com/en-us/windows/uwp/design/input/guidelines-for-targeting'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Google Material Design Touch targets',
          url:   'https://material.io/design/layout/spacing-methods.html#touch-targets'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'web.dev Accessible tap targets',
          url:   'https://web.dev/accessible-tap-targets/'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Human Fingertips to Investigate the Mechanics of Tactile Sense (PDF)',
          url:   'http://touchlab.mit.edu/publications/2003_009.pdf'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'One-Handed Thumb Use on Small Touchscreen Devices',
          url:   'http://www.cs.umd.edu/hcil/trs/2006-11/2006-11.htm'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Microsoft Guidelines for Building Touch Friendly Sites',
          url:   'https://learn.microsoft.com/en-us/windows/apps/design/input/guidelines-for-targeting'
        }
      ]
  },

  TARGET_SIZE_6: {
      ID:                    'Target Size 6',
      DEFINITION:            'Radio button and checkbox activation areas are at least 44 by 44 CSS pixels.',
      SUMMARY:               'Radio button and checkbox target size (Enhanced)',
      TARGET_RESOURCES_DESC: 'radio buttons and checkboxes',
      RULE_RESULT_MESSAGES: {
        FAIL_S:  'Use CSS to increase the size of the area to activate the undersized radio button or checkbox to at least 44 by 44 CSS pixels.',
        FAIL_P:  'Use CSS to increase the size of the area to activate the %N_F undersized radio buttons and checkboxes to at least 44 by 44 CSS pixel.',
        HIDDEN_S:  'One undersized radio button or checkbox was not evaluated because it is not visible.',
        HIDDEN_P:  '%N_H undersized radio buttons or checkboxes were not evaluated because they are not visible.',
        NOT_APPLICABLE:  'No undersized radio buttons or checkboxes found on the page'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   'The current dimensions of the @%1@ element is %2 by %3 and meet the target size requirement',
        ELEMENT_FAIL_1:   'The current dimensions of the @%1@ element is %2 by %3, use CSS to increase the button dimensions to at least 44 x 44 CSS pixels.',
        ELEMENT_PASS_2:   'The current dimensions of the associated @label@ element is %1 by %2 and meet the target size requirement',
        ELEMENT_FAIL_2:   'The current dimensions of the associated @label@ element is %1 by %2, use CSS to increase the button dimensions to at least 44 x 44 CSS pixels.',
        ELEMENT_HIDDEN_1: 'The @%1@ element is visually hidden and is not tested for target size.'
      },
      PURPOSES: [
        'The intent of this success criterion is to help users who may have trouble activating a small target because of hand tremors, limited dexterity or other reasons. If the target is too small, it may be difficult to aim at the target.',
        'Mice and similar pointing devices can be hard to use for these users, and a larger target will help them greatly in having positive outcomes on the web page.'
      ],
      TECHNIQUES: [
        'Use CSS to increase the dimensions of the radio buttons or checkbox or the associated label elements to at least 44 by 44 pixels.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type: REFERENCES.WCAG_SPECIFICATION,
          title: 'WCAG Understanding Target Size (Minimum)',
          url: 'https://www.w3.org/WAI/WCAG22/Understanding/target-size-minimum.html'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Windows UWP Guidelines for touch targets',
          url:   'https://docs.microsoft.com/en-us/windows/uwp/design/input/guidelines-for-targeting'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Google Material Design Touch targets',
          url:   'https://material.io/design/layout/spacing-methods.html#touch-targets'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'web.dev Accessible tap targets',
          url:   'https://web.dev/accessible-tap-targets/'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Human Fingertips to Investigate the Mechanics of Tactile Sense (PDF)',
          url:   'http://touchlab.mit.edu/publications/2003_009.pdf'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'One-Handed Thumb Use on Small Touchscreen Devices',
          url:   'http://www.cs.umd.edu/hcil/trs/2006-11/2006-11.htm'
        },
        { type:  REFERENCES.REFERENCE,
          title: 'Microsoft Guidelines for Building Touch Friendly Sites',
          url:   'https://learn.microsoft.com/en-us/windows/apps/design/input/guidelines-for-targeting'
        }
      ]
  }
};

/* timingRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English              */
/* --------------------------------------------------------------------------- */

const timingRules$1 = {
  TIMING_1: {
      ID:                    'Timing 1',
      DEFINITION:            'A page that contains time limits for user interaction or viewing content must provide a way to turn off, adjust or extend the time limits.',
      SUMMARY:               'Control time limits',
      TARGET_RESOURCES_DESC: 'Pages with scripting or other embedded technologies to control the response time for input or the amount of time to view content',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:  'If the page contains time limits, verify that there is a way to turn off, adjust or extend the time limits; or that one of the three exceptions applies.'
      },
      BASE_RESULT_MESSAGES: {
        PAGE_MC_1:      'If the page contains time limits, verify that there is a way to turn off, adjust or extend the time limits; or that one of the three exceptions applies.'
      },
      PURPOSES: [
        'People with physical disabilities may need more time to respond to web sites with time limits for selecting an option.',
        'People with visual impairments and visual processing learning disabilities may need more time to read material if the rendering of the material is automatically removed or obscured after a time period.',
        'Providing adjustable time periods in line with the persons capabilities makes it possible for people to complete the tasks associated with the website.'
      ],
      TECHNIQUES: [
        'Turn off: The user is allowed to turn off the time limit before encountering it.',
        'Adjust: The user is allowed to adjust the time limit before encountering it over a wide range that is at least ten times the length of the default setting.',
        'Extend: The user is warned before time expires and given at least 20 seconds to extend the time limit with a simple action (for example, "press the space bar"), and the user is allowed to extend the time limit at least ten time.',
        'Real-time Exception: The time limit is a required part of a real-time event (for example, an auction), and no alternative to the time limit is possible.',
        'Essential Exception: The time limit is essential and extending it would invalidate the activity.',
        '20 Hour Exception: The time limit is longer than 20 hours.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'Understanding 2.2.1 Timing Adjustable',
          url:   'https://www.w3.org/WAI/WCAG21/Understanding/timing-adjustable.html'
        }
      ]
  },
  TIMING_2: {
      ID:                    'Timing 2',
      DEFINITION:            'A page that includes moving, blinking, scrolling or auto-updating content that starts automatically and lasts more than 5 seconds must have a mechanism to pause, stop, or hide such content.',
      SUMMARY:               'Control moving, blinking or auto-updating content',
      TARGET_RESOURCES_DESC: 'Canvas, SVG and image animations; moving, blinking, scrolling or auto-updating text content; and embedded applications',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:     'If the page includes moving, blinking, scrolling or auto-updating content, verify there has a mechanism to pause, stop, or hide the information.',
        MANUAL_CHECK_P:     'If the page includes moving, blinking, scrolling or auto-updating content, verify there has a mechanism to pause, stop, or hide the information.',
        HIDDEN_S:  'One timing element was not tested, since it is hidden from assistive technologies.',
        HIDDEN_P:  '%N_H timing elements were not tested, since, they are hidden from assistive technologies.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_MC_1:     'If the %1 element includes moving, blinking, scrolling or auto-updating content, verify there has a mechanism to pause, stop, or hide the information.',
        ELEMENT_HIDDEN_1: 'The %1 element has not evaluated for moving, blinking, scrolling or auto-updating content',
        PAGE_MC_1:        'If the page includes moving, blinking, scrolling or auto-updating content, verify there has a mechanism to pause, stop, or hide the information.'
      },
      PURPOSES: [
        'People with visual impairments and visual processing learning disabilities may not be able to read or understand content that is blinking, scrolling or auto updating'
      ],
      TECHNIQUES: [
        'Pause/Resume: Through configuration or controls on the page, enable the user to pause and resume the moving, blinking, scrolling or auto-updating content.',
        'Stop: Through configuration or controls on the page, enable the user to stop the moving, blinking, scrolling or auto-updating content and see all of the content at one time.',
        'Hide: Through configuration or controls on the page, enable the user to hide the moving, blinking, scrolling or auto-updating content if it is not essential for the activity.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'Understanding 2.2.2 Pause, Stop, Hide',
          url:   'https://www.w3.org/WAI/WCAG21/Understanding/pause-stop-hide.html'
        }
      ]
  },
  TIMING_3: {
      ID:                    'Timing 3',
      DEFINITION:            'A page must not include content that flashes more than three times in one second, unless below general flash and red flash thresholds.',
      SUMMARY:               'Flashing limits',
      TARGET_RESOURCES_DESC: 'Canvas, SVG and image animations; flashing text content; video; and embedded applications',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:     'Verify the page does not include content that flashes more than three times in one second, unless below general flash and red flash thresholds.',
        MANUAL_CHECK_P:     'Verify the page does not include content that flashes more than three times in one second, unless below general flash and red flash thresholds.',
        HIDDEN_S:  'One potential element that could flash was not tested, since it is hidden from assistive technologies.',
        HIDDEN_P:  '%N_H potential elements that could flash were not tested, since they are hidden from assistive technologies.'
       },
      BASE_RESULT_MESSAGES: {
        ELEMENT_MC_1:     'Verify the %1 element does not include content that flashes more than three times in one second, unless below general flash and red flash thresholds.',
        ELEMENT_HIDDEN_1: 'The %1 element has not evaluated for moving, blinking, scrolling or auto-updating content',
        PAGE_MC_1:        'Verify the page does not include any content that flashes more than three times in one second, unless below general flash and red flash thresholds.'
      },
      PURPOSES: [
        'People who have photosensitive seizure disorders can have a seizure triggered by content that flashes at certain frequencies for more than a few flashes.',
        'People are even more sensitive to red flashing than to other colors.',
        'NOTE: The WCAG flashing requirements was adapted from the broadcasting industry standards (e.g. content is viewed from a closer distance and using a larger angle of vision).'
      ],
      TECHNIQUES: [
        'There is no remediation technique, the content must be removed or disabled from flashing.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.WCAG_TECHNIQUE,
          title: 'Understanding 2.3.1 Three Flashes or Below Threshold',
          url:   'https://www.w3.org/WAI/WCAG20/Understanding/three-flashes-or-below-threshold'
        }
      ]
  }
};

/* titleRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const titleRules$1 = {

    TITLE_1: {
        ID:            'Title 1',
        DEFINITION:    '@title@ element must identify both the website and page content.',
        SUMMARY:       '@title@ must identify website and page',
        TARGET_RESOURCES_DESC: '@title@',
        RULE_RESULT_MESSAGES: {
          MANUAL_CHECK_S: 'Verify that the @title@ element identifies both the website (if applicable) and the page content.',
          FAIL_S: 'Add a @title@ element to the @head@ element section with text content that identifies both the website (if applicable) and the page content.'
        },
        BASE_RESULT_MESSAGES: {
          PAGE_MC_1:   'Verify that the @title@ content "%1" identifies both the website (if applicable) and the page content.',
          PAGE_FAIL_1: 'Add content to the @title@ element in the @head@ element of the document to identify both the website (if applicable) and the page content.',
        },
        PURPOSES: [
          'The @title@ element content can be accessed by assistive technologies to orient the user to the website and page content.'
        ],
        TECHNIQUES: [
          'Use a @title@ element to identify the website and page content.',
          'If the page is part of a sequence of web pages, include the sequence number and total number of steps in the @title@ element.'
        ],
        MANUAL_CHECKS: [
          'If applicable, verify that the title of the page identifies the website to which it belongs.',
          'Verify that the title of the page also identifies the page content.',
          'If the page is part of a sequence of web pages, verify that the title describes which step it is in the sequence.'
        ],
        INFORMATIONAL_LINKS: [
          { type:  REFERENCES.SPECIFICATION,
            title: 'HTML: TITLE Element Specification',
            url:   'https://html.spec.whatwg.org/multipage/semantics.html#the-title-element'
          },
          { type:  REFERENCES.SPECIFICATION,
            title: 'MDN: TITLE Element',
            url:   'https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title'
          },
          { type:  REFERENCES.WCAG_TECHNIQUE,
            title: 'G88: Providing descriptive titles for Web pages',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G88'
          },
          { type:  REFERENCES.WCAG_TECHNIQUE,
            title: 'H25: Providing a title using the title element',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H25'
          }
        ]
    },
    TITLE_2: {
        ID:            'Title 2',
        DEFINITION:    '@h1@ elements must match part of the @title@ element content.',
        SUMMARY:       '@h1@ must match part of the @title@',
        TARGET_RESOURCES_DESC: '@title@ and @h1@',
        RULE_RESULT_MESSAGES: {
          FAIL_S: 'The page has missing, hidden or empty @title@ and/or @h1@ elements or the @h1@ element content is not similar to the @title@ content.',
          FAIL_P: 'The page has missing, hidden or empty @title@ and/or @h1@ elements or the content of the @h1@ elements is not similar to the @title@ content.',
          MANUAL_CHECK_S: 'Verify that both the @title@ and @h1@ elements describe the purpose or content of the page and @h1@ elements are use to identify and describe the major sections of the page.',
          MANUAL_CHECK_P: 'Verify that both the @title@ and @h1@ elements describe the purpose or content of the page and @h1@ elements are use to identify and describe the major sections of the page.',
          HIDDEN_S: 'The page has a hidden @h1@ element that was not evaluated.',
          HIDDEN_P: 'The page has %N_H hidden @h1@ elements that were not evaluated.'
        },
        BASE_RESULT_MESSAGES: {
          PAGE_MC_1:   'The @h1@ element has the same or similar content as the @title@ element.',
          PAGE_PASS_1: 'The @h1@ element has the same or similar content as the @title@ element.',
          PAGE_PASS_2: 'The @h1@ elements have the same or similar content as the @title@ element.',
          PAGE_FAIL_1: 'Add a @title@ element to the page to enable the evaluation of @h1@ elements for similarity.',
          PAGE_FAIL_2: 'Add an @h1@ element to the page at the beginning of the main content.',
          PAGE_FAIL_3: 'Update the @h1@ element to have the same or similar content as the @title@ element.',
          PAGE_FAIL_4: 'Update the @h1@ elements to have the same or similar content as the @title@ element.',
          ELEMENT_MC_1:   'Verify @h1@ element identifies and describes a major section of the page.',
          ELEMENT_PASS_1: 'The @h1@ element has the same or similar content as the @title@ element.',
          ELEMENT_FAIL_1: 'The @h1@ element does NOT have the same or similar content as the @title@ element.',
          ELEMENT_FAIL_2: 'Add content to the @h1@ element, or remove it from the page.',
          ELEMENT_HIDDEN_1: 'The @h1@ element is hidden from assistive technology and therefore does not describe the purpose or content of the page.'
        },
        PURPOSES: [
          '@h1@ elements can be accessed by assistive technologies to identify the page content and to orient users within the website. The @h1@ element may also be used to identify the website.'
        ],
        TECHNIQUES: [
          'Use the @h1@ element to identify the page content in the same or similar way as the @title@ element.',
          'The @h1@ element may also be used to identify the website in the same or similar way as the @title@ element.',
          'If the page is part of a sequence of web pages, the @h1@ element should indicate the step in the sequence.'
        ],
        MANUAL_CHECKS: [
          'Verify that the @h1@ content identifies the page content.',
          'If applicable, verify that the @h1@ content of the page identifies the website to which it belongs.',
          'If the web page is part of a sequence of web pages, verify that the @h1@ content indicates the step number of the sequence.'
        ],
        INFORMATIONAL_LINKS: [
          { type:  REFERENCES.SPECIFICATION,
            title: 'HTML: TITLE Element Specification',
            url:   'https://html.spec.whatwg.org/multipage/semantics.html#the-title-element'
          },
          { type:  REFERENCES.SPECIFICATION,
            title: 'MDN: TITLE Element',
            url:   'https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title'
          },
          { type:  REFERENCES.WCAG_TECHNIQUE,
            title: 'G88: Providing descriptive titles for Web pages',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G88'
          },
          { type:  REFERENCES.WCAG_TECHNIQUE,
            title: 'H25: Providing a title using the title element',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H25'
          }
        ]
    }
};

/* audioRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const videoRules$1 = {
  VIDEO_1: {
      ID:                    'Video 1',
      DEFINITION:            '@video@ elements used for prerecorded video only content must have text or audio description of the video content.',
      SUMMARY:               '@video@ for video only must have alternative',
      TARGET_RESOURCES_DESC: '@video@ elements',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:     'Verify the @video@ element with the @aria-describedby@ attributes is used for video only content.   If so, verify the text description reference using the @aria-describedby@ describes the video only content.',
        MANUAL_CHECK_P:     'Verify if any of the %N_MC @video@ elements with the @aria-describedby@ attributes are used for video only content.   If so, verify the text description reference using the @aria-describedby@ describes the video only content.',
        HIDDEN_S: 'The @video@ element that is hidden was not evaluated.',
        HIDDEN_P: 'The %N_H @video@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE:  'No @video@ elements found on this page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:    '@video@ element has audio description track',
        ELEMENT_MC_1:      'Verify the @video@ element is used for video only content.   If so, verify the text description reference using the @aria-describedby@ describes the video only content.',
        ELEMENT_MC_2:      'Verify the @video@ element is used for video only content provides an audio track to describe the video content or text description of the video.',
        ELEMENT_HIDDEN_1:  'The @video@ element is hidden and therefore not evaluated.'
      },
      PURPOSES: [
        'Text and audio descriptions provide a means for people who cannot see the video to understand the video content.',
        'Some types of learning disabilities affect visual processing, text and audio descriptions provide an alternative way to understand the video content.'
      ],
      TECHNIQUES: [
        'Use the @track@ element to add audio descriptions to the video content.',
        'Use @aria-describedby@ to reference a text description of the video content.',
        'Include an audio sound track that describes the video content.'
      ],
      MANUAL_CHECKS: [
        'When audio descriptions are enabled on the media player, check to make sure the audio description can be heard.',
        'If there is a audio description make sure the description accurately describes the video content.',
        'If there is a text description make sure the description accurately describes the video content.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C: Making Audio and Video Media Accessible',
          url:   'https://www.w3.org/WAI/media/av/'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HMTL: The video element',
          url:   'https://html.spec.whatwg.org/multipage/media.html#the-video-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HMTL: The track element',
          url:   'https://html.spec.whatwg.org/multipage/media.html#the-track-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (ARIA) 1.2: aria-describedby',
          url:   'https://www.w3.org/TR/wai-aria/#aria-describedby'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'University of Washington: Creating Accessible Videos',
          url:   'https://www.washington.edu/accessibility/videos/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
          url:   'https://webaim.org/techniques/captions/'
        }
      ]
  },
  VIDEO_2: {
      ID:                    'Video 2',
      DEFINITION:            '@object@ elements used for prerecorded video only content must have text or audio descriptions of the video content.',
      SUMMARY:               '@object@ for video only must have alternative',
      TARGET_RESOURCES_DESC: '@object@ elements',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:     'Verify the @object@ element is used for prerecorded video only content.  If it is used for video only, verify it has either a text or audio description of the video content.',
        MANUAL_CHECK_P:     'Verify if any of the %N_MC @object@ elements are used for prerecorded video only content.  If any are used for video only, verify they have either a text or audio description of the video content.',
        HIDDEN_S: 'The @object@ element that is hidden was not evaluated.',
        HIDDEN_P: 'The %N_H @object@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE:  'No @object@ elements found on this page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_MC_1: 'Verify the @object@ element with @video@ in its @type@ attrbute is used for video only content.  If so verify the @aria-describedby@ references a text description of the video only content.',
        ELEMENT_MC_2: 'Verify the @object@ element with @video@ in its @type@ attrbute is used for video only content.  If so verify the video only content has a text or audio descriptions.',
        ELEMENT_MC_3: 'Verify if the @object@ element is used for video only content.  If so verify the @aria-describedby@ references a text description of the video only content.',
        ELEMENT_MC_4: 'Verify if the @object@ element is used for video only content.  If so verify the video only content has a text or audio description.',
        ELEMENT_HIDDEN_1:       'The @object@ element is hidden and cannot render video content.'
      },
      PURPOSES: [
        'Text and audio descriptions provide a means for people who cannot see the video to understand the video content.',
        'Some types of learning disabilities affect visual processing, text and audio descriptions provide an alternative way to understand the video content.'
      ],
      TECHNIQUES: [
        'Use the @video@ element instead of the @object@ element for video only content, since the @video@ element provides better support for audio description tracks.',
        'Include an audio track in the video that describes the video content.',
        'Use @aria-describedby@ attribute to point to a text description of the video only content.'
      ],
      MANUAL_CHECKS: [
        'When audio descriptions are enabled on the media player, check to make sure the audio description can be heard.',
        'If there is a audio description make sure the description accurately describes the video content.',
        'If there is a text description make sure the description accurately describes the video content.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C: Making Audio and Video Media Accessible',
          url:   'https://www.w3.org/WAI/media/av/'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HMTL: The object element',
          url:   'https://html.spec.whatwg.org/multipage/iframe-embed-object.html#the-object-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (ARIA) 1.2: aria-describedby',
          url:   'https://www.w3.org/TR/wai-aria/#aria-describedby'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'University of Washington: Creating Accessible Videos',
          url:   'https://www.washington.edu/accessibility/videos/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
          url:   'https://webaim.org/techniques/captions/'
        }
      ]
  },
  VIDEO_3: {
      ID:                    'Video 3',
      DEFINITION:            '@embed@ elements used for video only content must have caption or text transcription of the audio content.',
      SUMMARY:               '@embed@ for video only must have alternative',
      TARGET_RESOURCES_DESC: '@embed@ elements',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:     'Verify the @embed@ element is used for prerecorded video only content.  If it is used for video only, verify it has either a text or audio description of the video content.',
        MANUAL_CHECK_P:     'Verify if any of the %N_MC @embed@ elements are used for prerecorded video only content.  If any are used for video only, verify they have either a text or audio description of the video content.',
        HIDDEN_S: 'The @embed@ element that is hidden was not evaluated.',
        HIDDEN_P: 'The %N_H @embed@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE:  'No @embed@ elements found on this page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_MC_1: 'Verify the @embed@ element with @video@ in its @type@ attribute is used for video only content.  If so verify the @aria-describedby@ references a text description of the video only content.',
        ELEMENT_MC_2: 'Verify the @embed@ element with @video@ in its @type@ attribute is used for video only content.  If so verify the video only content has a text or audio description.',
        ELEMENT_MC_3: 'Verify if the @embed@ element is used for video only content.  If so verify the @aria-describedby@ references a text description of the video only content.',
        ELEMENT_MC_4: 'Verify if the @embed@ element is used for video only content.  If so verify the video only content has a text or audio description.',
        ELEMENT_HIDDEN_1:       'The @embed@ element is hidden and cannot render video content.'
      },
      PURPOSES: [
        'Text and audio descriptions provide a means for people who cannot see the video to understand the video content.',
        'Some types of learning disabilities affect visual processing, text and audio descriptions provide an alternative way to understand the video content.'
      ],
      TECHNIQUES: [
        'Use the @video@ element instead of the @embed@ element for video only content, since the @video@ element provides better support for audio description tracks.',
        'Include an audio track in the video that describes the video content.',
        'Use @aria-describedby@ attribute to point to a text description of the video only content.'
      ],
      MANUAL_CHECKS: [
        'When audio descriptions are enabled on the media player, check to make sure the audio description can be heard.',
        'If there is a audio description make sure the description accurately describes the video content.',
        'If there is a text description make sure the description accurately describes the video content.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C: Making Audio and Video Media Accessible',
          url:   'https://www.w3.org/WAI/media/av/'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HMTL: The embed element',
          url:   'https://html.spec.whatwg.org/multipage/iframe-embed-object.html#the-embed-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (ARIA) 1.2: aria-describedby',
          url:   'https://www.w3.org/TR/wai-aria/#aria-describedby'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'University of Washington: Creating Accessible Videos',
          url:   'https://www.washington.edu/accessibility/videos/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
          url:   'https://webaim.org/techniques/captions/'
        }
      ]
  },
  VIDEO_4: {
      ID:                    'Video 4',
      DEFINITION:            'Live and prerecorded video with synchronized audio (i.e. a movie, lecture) using the @video@ element must have synchronized captions.',
      SUMMARY:               '@video@ must have caption',
      TARGET_RESOURCES_DESC: '@video@ elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Add caption @track@ element to the @video@ element.',
        FAIL_P:   'Add caption @track@ element to each of the %N_F @video@ elements with out caption tracks.',
        MANUAL_CHECK_S:     'Verify that the @video@ element without a caption track has open captions.',
        MANUAL_CHECK_P:     'Verify that the %N_MC @video@ elements without caption tracks have open captions.',
        HIDDEN_S: 'The @video@ element that is hidden was not evaluated.',
        HIDDEN_P: 'The %N_H @video@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE:  'No @video@ elements found on this page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:         '@video@ element has caption track.',
        ELEMENT_FAIL_1:       'Add caption @track@ element to @video@ element.',
        ELEMENT_MC_1: 'Verify the video content includes open captions.',
        ELEMENT_HIDDEN_1:       'The @video@ element is hidden and cannot render content.'
      },
      PURPOSES: [
        'Synchronized captions provide a means for people who cannot hear the audio content of a video to understand the audio content of the video.',
        'Some types of learning disabilities affect auditory processing, captions provide an alternative way to understand the audio content of a video.',
        'This rule covers the requirements of both WCAG 2.0 Success Criteria 1.2.2 and 1.2.4, and therefore covers both live and prerecorded video content.'
       ],
      TECHNIQUES: [
        'Use the @track@ element to add a caption track to the video content.',
        'Use open captions to include the captions as part of the video.',
        'If closed captions are not support, use open captioning to include captions as part of the video.',
        'Open captioning is the only way to insure that captions are available on most cells phones and tablet computers connecting through wireless services.'
      ],
      MANUAL_CHECKS: [
        'When captions are enabled on the media player, verify the captions are visible.',
        'Verify that the captions accurately represent and are synchronized with the speech and sounds in the video.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C: Making Audio and Video Media Accessible',
          url:   'https://www.w3.org/WAI/media/av/'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HMTL: The video element',
          url:   'https://html.spec.whatwg.org/multipage/media.html#the-video-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HMTL: The track element',
          url:   'https://html.spec.whatwg.org/multipage/media.html#the-track-element'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'University of Washington: Creating Accessible Videos',
          url:   'https://www.washington.edu/accessibility/videos/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
          url:   'https://webaim.org/techniques/captions/'
        }
      ]
  },
  VIDEO_5: {
      ID:                    'Video 5',
      DEFINITION:            'Live and prerecorded video with synchronized audio (i.e. a movie, lecture) using the @object@ element must have synchronized captions.',
      SUMMARY:               '@object@ for video must have captions',
      TARGET_RESOURCES_DESC: '@object@ elements',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:     'Verify the @object@ element is used for video content with synchronized audio (i.e movie, lecture).  If it is video with synchronized audio, verify it has open or closed captioning of the audio content.',
        MANUAL_CHECK_P:     'Verify if any of the %N_MC @object@ elements are used for video content with synchronized audio (i.e movie, lecture).  If any are used for video with synchronized audio, verify it has open or closed captioning of the audio content.',
        HIDDEN_S: 'The @object@ element that is hidden was not evaluated.',
        HIDDEN_P: 'The %N_H @object@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE:  'No @object@ elements found on this page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_MC_1: 'Verify the @object@ element with @video@ in its @type@ attribute has synchronized audio (i.e. movie, lecture).  If so, verify there is open or closed captioning of the audio content.',
        ELEMENT_MC_2: 'Verify the @object@ element renders video content with synchronized audio (i.e. movie, lecture).  If so, verify there is open or closed captioning of the audio content.',
        ELEMENT_HIDDEN_1: 'The @object@ element is hidden and cannot render video content.'
      },
      PURPOSES: [
        'Synchronized captions provide a means for people who cannot hear the audio content of a video to have access to the speech and sounds of the video.',
        'Some types of learning disabilities effect auditory processing, captions provide an alternative way to understand the audio content of a video.',
        'This rule covers the requirements of both WCAG 2.0 Success Criteria 1.2.2 and 1.2.4, and therefore covers both live and prerecorded content.'
      ],
      TECHNIQUES: [
        'Consider using the @video@ element instead of the @object@ element for video containing synchronized audio.  The @video@ element has better support for adding caption tracks.',
        'Use video authoring tools and player technologies that support captioning.  Use the features of the authoring system and player to add open or closed captions to the video.',
        'If closed captions are not support, use open captioning to include captions as part of the video.',
        'Open captioning is the only way to insure that captions are available on most cells phones and tablet computers.'
      ],
      MANUAL_CHECKS: [
        'When captions are enabled on the media player, verify the captions are visible.',
        'Verify that the captions accurately represent and are synchronized with the speech and sounds in the video.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C: Making Audio and Video Media Accessible',
          url:   'https://www.w3.org/WAI/media/av/'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HMTL 5: The object element',
          url:   'https://html.spec.whatwg.org/multipage/iframe-embed-object.html#the-object-element'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'University of Washington: Creating Accessible Videos',
          url:   'https://www.washington.edu/accessibility/videos/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
          url:   'https://webaim.org/techniques/captions/'
        }
      ]
  },
  VIDEO_6: {
      ID:                    'Video 6',
      DEFINITION:            'Live and prerecorded video with synchronized audio (i.e. a movie, lecture) using the @embed@ element must have synchronized captions.',
      SUMMARY:               '@embed@ for video must have captions',
      TARGET_RESOURCES_DESC: '@embed@ elements',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:     'Verify the @embed@ element is used for video content with synchronized audio (i.e movie, lecture).  If it is video with synchronized audio, verify it has captions of the audio content.',
        MANUAL_CHECK_P:     'Verify if any of the %N_MC @embed@ elements are used for video content with synchronized audio (i.e movie, lecture).  If any are used for video with synchronized audio, verify it has captions of the audio content.',
        HIDDEN_S: 'The @embed@ element that is hidden was not evaluated.',
        HIDDEN_P: 'The %N_H @embed@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE:  'No @embed@ elements found on this page'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_MC_1: 'Verify the @embed@ element with @video@ in its @type@ attribute has synchronized audio (i.e. movie, lecture).  If so, verify their are captions avialble for the audio content.',
        ELEMENT_MC_2: 'Verify the @embed@ element renders video content with synchronized audio (i.e. movie, lecture).  If so, verify their are captions avialble for the audio content.',
        ELEMENT_HIDDEN_1:       'The @embed@ element is hidden and cannot render video content.'
      },
      PURPOSES: [
        'Synchronized captions provide a means for people who cannot hear the audio content of a video to have access to the speech and sounds of the video.',
        'Some types of learning disabilities effect auditory processing, captoins provide an alternative way to understand the audio content of a video.',
        'This rule covers the requirements of both WCAG 2.0 Success Criteria 1.2.2 and 1.2.4, and therefore covers both live and prerecorded content.'
      ],
      TECHNIQUES: [
        'Consider using the @video@ element instead of the @object@ element for video containing synchronized audio.  The @video@ element has better support for adding caption tracks.',
        'Use video authoring tools and player technologies that support captioning.  Use the features of the authoring system and player to add open or closed captions to the video.',
        'If closed captions are not support, use open captioning to include captions as part of the video.',
        'Open captioning is the only way to insure that captions are available on most cells phones and tablet computers.'
      ],
      MANUAL_CHECKS: [
        'When captions are enabled on the media player, verify the captions are visible.',
        'Verify that the captions accurately represent and are synchronized with the speech and sounds in the video.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C: Making Audio and Video Media Accessible',
          url:   'https://www.w3.org/WAI/media/av/'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HMTL: The embed element',
          url:   'https://html.spec.whatwg.org/multipage/iframe-embed-object.html#the-embed-element'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'University of Washington: Creating Accessible Videos',
          url:   'https://www.washington.edu/accessibility/videos/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
          url:   'https://webaim.org/techniques/captions/'
        }
      ]
  },
  VIDEO_7: {
      ID:                    'Video 7',
      DEFINITION:            '@video@ elements used for prerecorded video with synchronized audio (i.e. a movie, archived lecture) must have an audio description of the video content.',
      SUMMARY:               '@video@ element must have audio description.',
      TARGET_RESOURCES_DESC: '@video@ elements.',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Add audio description track to @video@ element without an audio description track.',
        FAIL_P:   'Add audio description track to each of the %N_F the @video@ elements without audio description tracks.',
        MANUAL_CHECK_S:     'Verify the @video@ element with is used for prerecorded video with synchronized audio.   If so, verify the video includes an audio description of the video content.',
        MANUAL_CHECK_P:     'Verify if any of the %N_MC @video@ elements are used for prerecorded video with synchronized audio.   If so, verify each of the videos includes an audio description of the video content.',
        HIDDEN_S: 'The @video@ element that is hidden was not evaluated.',
        HIDDEN_P: 'The %N_H @video@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE:  'No @video@ elements found on this page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:         '@video@ element has audio description track.',
        ELEMENT_FAIL_1:       'Add audio description track to @video@ element.',
        ELEMENT_MC_1: 'Verify an audio description of the video content is included in the audio track of the video.',
        ELEMENT_HIDDEN_1:       'The @video@ element is hidden and cannot render content.'
      },
      PURPOSES: [
        'Text and audio descriptions provide a means for people who cannot see the video to understand the video content.',
        'Some types of learning disabilities affect visual processing, text and audio descriptions provide an alternative way to understand the video content.',
        'This rule covers the requirements of both WCAG 2.0 Success Criteria 1.2.3 and 1.2.5, that is why a text description of the video content cannot be used to satisfy this rule.'
      ],
      TECHNIQUES: [
        'Use the @track@ element to add audio descriptions to the video content.',
        'Use @aria-describedby@ to reference a text description of the video content.'
      ],
      MANUAL_CHECKS: [
        'When audio descriptions are enabled on the media player, check to make sure the audio description can be heard.',
        'If there is a audio description make sure the description accurately describes the video content.',
        'If there is a text description make sure the description accurately describes the video content.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C: Making Audio and Video Media Accessible',
          url:   'https://www.w3.org/WAI/media/av/'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HMTL: The video element',
          url:   'https://html.spec.whatwg.org/multipage/media.html#the-video-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HMTL: The track element',
          url:   'https://html.spec.whatwg.org/multipage/media.html#the-track-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (ARIA) 1.0: aria-describedby',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-describedby'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'University of Washington: Creating Accessible Videos',
          url:   'https://www.washington.edu/accessibility/videos/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
          url:   'https://webaim.org/techniques/captions/'
        }
      ]
  },
  VIDEO_8: {
      ID:                    'Video 8',
      DEFINITION:            '@object@ elements used for prerecorded video with synchronized audio (i.e. a movie, archived lecture) must have an audio description of the video content.',
      SUMMARY:               '@object@ for video must have audio description.',
      TARGET_RESOURCES_DESC: '@object@ elements',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:     'Verify the @object@ element is used for prerecorded video with synchronized audio (i.e. a movie, archived lecture).  If so, verify the video includes an audio description of the video content.',
        MANUAL_CHECK_P:     'Verify if any of the %N_MC @object@ elements are used for prerecorded video with synchronized audio (i.e. a movie, archived lecture).  If so, verify each video includes an audio description of the video content.',
        HIDDEN_S: 'The @object@ element that is hidden was not evaluated.',
        HIDDEN_P: 'The %N_H @object@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE:  'No @object@ elements found on this page'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_MC_1: 'Verify the @object@ element with @video@ in its @type@ attrbute is used for prerecorded video with synchronized audio (i.e. a movie, archived lecture).  If so verify an audio description of the video content is available.',
        ELEMENT_MC_2: 'Verify if the @object@ element is used for prerecorded video with synchronized audio (i.e. a movie, archived lecture).  If so verify an audio description of the video content is available.',
        ELEMENT_HIDDEN_1:       'The @object@ element is hidden and cannot render video content.'
      },
      PURPOSES: [
        'Text and audio descriptions provide a means for people who cannot see the video to understand the video content.',
        'Some types of learning disabilities affect visual processing, text and audio descriptions provide an alternative way to understand the video content.',
        'This rule covers the requirements of both WCAG 2.0 Success Criteria 1.2.3 and 1.2.5, that is why a text description of the video content cannot be used to satisfy this rule.'
      ],
      TECHNIQUES: [
        'Use the @video@ element instead of the @object@ element for video only content, since the @video@ element provides better support for audio description tracks.',
        'Include an audio track in the video that describes the video content.',
        'Use @aria-describedby@ attribute to point to a text description of the video only content.'
      ],
      MANUAL_CHECKS: [
        'When audio descriptions are enabled on the media player, check to make sure the audio description can be heard.',
        'If there is a audio description make sure the description accurately describes the video content.',
        'If there is a text description make sure the description accurately describes the video content.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C: Making Audio and Video Media Accessible',
          url:   'https://www.w3.org/WAI/media/av/'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HMTL 5: The object element',
          url:   'https://html.spec.whatwg.org/multipage/iframe-embed-object.html#the-object-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (ARIA) 1.0: aria-describedby',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-describedby'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'University of Washington: Creating Accessible Videos',
          url:   'https://www.washington.edu/accessibility/videos/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
          url:   'https://webaim.org/techniques/captions/'
        }
      ]
  },
  VIDEO_9: {
      ID:                    'Video 9',
      DEFINITION:            '@embed@ elements used for prerecorded video with synchronized audio (i.e. a movie, archived lecture) must have audio description of the video content.',
      SUMMARY:               '@embed@ for video must have audio description',
      TARGET_RESOURCES_DESC: '@embed@ elements',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:     'Verify the @embed@ element is used for prerecorded video with synchronized audio (i.e. a movie, archived lecture).   If so, verify the video includes an audio description of the video content.',
        MANUAL_CHECK_P:     'Verify if any of the %N_MC @embed@ elements are used for prerecorded video with synchronized audio (i.e. a movie, archived lecture).   If so, verify each of the videos include an audio description of the video content.',
        HIDDEN_S: 'The @embed@ element that is hidden was not evaluated.',
        HIDDEN_P: 'The %N_H @embed@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE:  'No @embed@ elements found on this page.'
      },
      BASE_RESULT_MESSAGES: {
        ELEMENT_MC_1: 'Verify the @embed@ element with @video@ in its @type@ attrbute is used for video with synchronized audio (i.e. a movie, archived lecture).  If so, verify the video includes an audio description of the video content.',
        ELEMENT_MC_2: 'Verify if the @embed@ element is used for video with synchronized audio (i.e. a movie, archived lecture).  If so, verify the video includes an audio description of the video content.',
        ELEMENT_HIDDEN_1:       'The @embed@ element is hidden and cannot render video content.'
      },
      PURPOSES: [
        'Text and audio descriptions provide a means for people who cannot see the video to understand the video content.',
        'Some types of learning disabilities affect visual processing, text and audio descriptions provide an alternative way to understand the video content.',
        'This rule covers the requirements of both WCAG 2.0 Success Criteria 1.2.3 and 1.2.5, that is why a text description of the video content cannot be used to satisfy this rule.'
      ],
      TECHNIQUES: [
        'Use the @video@ element instead of the @embed@ element for video only content, since the @video@ element provides better support for audio description tracks.',
        'Include an audio track in the video that describes the video content.',
        'Use @aria-describedby@ attribute to point to a text description of the video only content.'
      ],
      MANUAL_CHECKS: [
        'When audio descriptions are enabled on the media player, check to make sure the audio description can be heard.',
        'If there is a audio description make sure the description accurately describes the video content.',
        'If there is a text description make sure the description accurately describes the video content.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  REFERENCES.TECHNIQUE,
          title: 'W3C: Making Audio and Video Media Accessible',
          url:   'https://www.w3.org/WAI/media/av/'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'HMTL: The embed element',
          url:   'https://html.spec.whatwg.org/multipage/iframe-embed-object.html#the-embed-element'
        },
        { type:  REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (ARIA) 1.2: aria-describedby',
          url:   'https://www.w3.org/TR/wai-aria/#aria-describedby'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'University of Washington: Creating Accessible Videos',
          url:   'https://www.washington.edu/accessibility/videos/'
        },
        { type:  REFERENCES.TECHNIQUE,
          title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
          url:   'https://webaim.org/techniques/captions/'
        }
      ]
  }
};

/* widgetRules.js */

/* --------------------------------------------------------------------------- */
/*       OpenA11y Rules Localized Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

const widgetRules$1 = {
    WIDGET_1: {
        ID:                    'Widget 1',
        DEFINITION:            'Elements with ARIA widget roles must have an accessible name that describes the purpose of the control.',
        SUMMARY:               'Accessible name is required',
        TARGET_RESOURCES_DESC: 'Elements with widget roles that allow accessible names',
        RULE_RESULT_MESSAGES: {
          FAIL_S:         'Add an accessible name to the element with a widget role that requires an accessible name.',
          FAIL_P:         'Add accessible names to the %N_F elements with widget roles that require an accessible name.',
          MANUAL_CHECK_S: 'Check the element with a role that may need an accessible name.',
          MANUAL_CHECK_P: 'Check the %N_MC elements with widget roles that may need an accessible name.',
          HIDDEN_S:       'An element with a ARIA widget role that allows an accessible name is hidden and was not evaluated.',
          HIDDEN_P:       '%N_H elements with ARIA widget roles that allow an accessible name are hidden and were not evaluated.',
          NOT_APPLICABLE: 'No elements with ARIA widget roles that allow an accessible name'
        },
        BASE_RESULT_MESSAGES: {
          ELEMENT_PASS_1: '@%1[role=%2]@ element has the accessible name: %3.',
          ELEMENT_MC_1:   '@%1[role=%2]@ element may require an accessible name depending on context (i.e multiple elements with the same widget role) in the page, adding an accessible name will improve accessibility.',
          ELEMENT_FAIL_1: 'Add an accessible name to the @%1[role=%2]@ element.',
          ELEMENT_HIDDEN_1: '@%1[role=%2]@ element is hidden from assistive technologies and was not evaluated.'
        },
        PURPOSES: [
          'An accessible name identifies the purpose or action of a widget on the page.',
          'For example when a ARIA widget role receives keyboard focus, both the role and the accessible name is spoken by screen readers.',
          'This rule does not test HTML form controls and links, since the accessible name requirement for them is covered in other rules.'
        ],
        TECHNIQUES: [
          'Some ARIA roles allow child text content and @alt@ attribute content from descendant image elements to be used for the accessible name.',
          'Use the @aria-labelledby@ attribute to reference the id(s) of visible content on the page to define an accessible name.',
          'Use the @aria-label@ attribute to provide an explicit accessible name for an element.',
          'Elements with ARIA grouping widget roles may not receive keyboard focus, but giving them a label provides users of assistive technologies a more accurate description of the purpose of the element'
        ],
        MANUAL_CHECKS: [
          'Good labels are both concise and descriptive of the element with widget role purpose.',
          'If element with ARIA widget roles are arranged in groups, make sure labels include grouping information.',
          'Consider using @aria-describedby@ to provide references to instructions or error information.',
          'When there is more than one widget of the same type on a page, they need an label for users to uniquely identify the form control.'
        ],
        INFORMATIONAL_LINKS: [
          { type: REFERENCES.SPECIFICATION,
            title: 'ARIA Authoring Practices: Providing Accessible Names and Descriptions',
            url:   'https://www.w3.org/WAI/ARIA/apg/practices/names-and-descriptions/'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: aria-labelledby',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: aria-label',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Accessible Name (e.g. label) Calculation',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#namecalculation'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'ARIA6: Using aria-label to provide labels for objects',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA6'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'ARIA9: Using aria-labelledby to concatenate a label from several text nodes',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA9'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'MDN Web Docs: ARIA ',
            url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'Web Fundamentals: Introduction to ARIA',
            url:   'https://developers.google.com/web/fundamentals/accessibility/semantics-aria'
          }
        ]
    },
    WIDGET_2: {
        ID:                    'Widget 2',
        DEFINITION:            'Elements with @onClick@ event handlers must be a link, button or have a widget role.',
        SUMMARY:               '@onClick@ event handlers must have widget role',
        TARGET_RESOURCES_DESC: 'Elements with @onClick@ event handler values that are defined as widgets',
        RULE_RESULT_MESSAGES: {
          FAIL_S:   'Add ARIA widget role name to element.',
          FAIL_P:   'Add ARIA widget roles to each of the %N_F elements.',
          MANUAL_CHECK_S:     'Verify that any child elements that can respond to element with an @onclick@ event handler are a link, form control or has a widget role, and can be accessed with the keyboard alone.',
          MANUAL_CHECK_P:     'Verify that any child elements that can respond to %N_MC elements with an @onclick@ event handler are a link, form control or has a widget role, and can be accessed with the keyboard alone.',
          HIDDEN_S: 'The element with an @onClick@ event handler that is hidden and was not evaluated.',
          HIDDEN_P: '%N_H elements with @onClick@ events handler that are hidden were not evaluated.',
          NOT_APPLICABLE:  'No elements with @onClick@ event handlers on the page'
        },
        BASE_RESULT_MESSAGES: {
          ELEMENT_PASS_1:   '@%1@ element has the @%2@ widget role.',
          ELEMENT_FAIL_1:   'Change the role of the @%1[role=%2]@ element to a widget role.',
          ELEMENT_FAIL_2:   'Add a widget role to the @%1@ element that describes the action of the element.',
          ELEMENT_MC_1:     'The @%1@ element has an @onclick@ event handler, verify any child elements that can respond to the @onclick@ event handler are a link, form control or have a widget role, and can be access with the keyboard alone.',
          ELEMENT_HIDDEN_1: 'The @%1@ element with an onClick events having a @role@ was not tested because %1 element with @onClick@ event handler is hidden from assistive technologies and/or not visible on screen.'
        },
        PURPOSES: [
          'Elements with @onClick@ event handlers must be a link, form control or have a widget role.',
          'NOTE: This rule can only identify elements using the @onclick@ attribute.  There is currently no programatic way to detect elements with @click@ events added using @addEventListener@.'
        ],
        TECHNIQUES: [
          'Use ARIA widget roles on non-form controls to describe their function on the page.'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Widget Roles',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#widget_roles'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'ARIA Authoring Practices:  Keyboard Navigation Inside Components',
            url:   'https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'ARIA4: Using a WAI-ARIA role to expose the role of a user interface component',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA4.html'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'ARIA Authoring Practices',
            url:   'https://www.w3.org/WAI/ARIA/apg/patterns/'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'MDN Web Docs: ARIA ',
            url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'Web Fundamentals: Introduction to ARIA',
            url:   'https://developers.google.com/web/fundamentals/accessibility/semantics-aria'
          }
        ]
    },
    WIDGET_3: {
        ID:                    'Widget 3',
        DEFINITION:            '@role@ attribute value must be a widget, section, landmark or live region role.',
        SUMMARY:               '@role@ must be valid',
        TARGET_RESOURCES_DESC: 'Elements with @role@ attribute values',
        RULE_RESULT_MESSAGES: {
          FAIL_S:   'Add a valid widget, section, landmark or live region role value to the element.',
          FAIL_P:   'Add a valid widget, section, landmark or live region role values to %N_F out of %N_T elements with @role@ attributes.',
          HIDDEN_S: 'The element with a role that is hidden and was not evaluated.',
          HIDDEN_P: '%N_H elements with a role that are hidden were not evaluated.',
          NOT_APPLICABLE:  'No elements with @role@ attribute on this page'
        },
        BASE_RESULT_MESSAGES: {
          ELEMENT_PASS_1:   '@%1@ is a widget role.',
          ELEMENT_PASS_2:   '@%1@ is a landmark role.',
          ELEMENT_PASS_3:   '@%1@ is a live region role.',
          ELEMENT_PASS_4:   '@%1@ is a section role.',
          ELEMENT_PASS_5:   '@%1@ is a valid ARIA role.',
          ELEMENT_FAIL_1:   '@%1@ is not a defined ARIA role, change the @role@ attribute value to an appropriate widget, landmark, section or live region role.',
          ELEMENT_FAIL_2:   '@%1@ is an abstract ARIA role, change the role attribute to a widget, landmark or live region role.',
          ELEMENT_HIDDEN_1: '@role@ attribute value was not validated because the %1 element is hidden from assistive technologies and/or not visible on screen.'
        },
        PURPOSES: [
          'Elements with @role@ attributes describe the sections of a document (i.e landmarks) or the types of interactive elements (i.e. widgets) to users of assistive technologies, especially screen reader users.'
        ],
        TECHNIQUES: [
          'Use ARIA landmark roles to describe the sections of a web page.',
          'Use ARIA widget roles to describe interactive elements on a web page'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Widget Roles',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#widget_roles'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Landmark Roles',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#landmark_roles'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'ARIA4: Using a WAI-ARIA role to expose the role of a user interface component',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA4.html'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'ARIA19: Using ARIA role=alert or Live Regions to Identify Errors',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA19.html'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'ARIA Authoring Practices',
            url:   'https://www.w3.org/WAI/ARIA/apg/'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'MDN Web Docs: ARIA ',
            url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'Web Fundamentals: Introduction to ARIA',
            url:   'https://developers.google.com/web/fundamentals/accessibility/semantics-aria'
          }
        ]
    },
    WIDGET_4: {
        ID:                    'Widget 4',
        DEFINITION:            'ARIA property and state values must be valid types.',
        SUMMARY:               'Values must be valid',
        TARGET_RESOURCES_DESC: 'Elements with aria attributes',
        RULE_RESULT_MESSAGES: {
          FAIL_S:   'Change ARIA attribute to a valid type.',
          FAIL_P:   'Change %N_F out of %N_T ARIA attributes to a valid types.',
          HIDDEN_S: 'The widget that is hidden and was not evaluated.',
          HIDDEN_P: '%N_H widgets that are hidden were not evaluated.',
          NOT_APPLICABLE:  'No ARIA attributes on this page'
        },
        BASE_RESULT_MESSAGES: {
          ELEMENT_PASS_1: 'The @%1@ attribute with the value "@%2@" is a valid.',
          ELEMENT_PASS_2: 'The @%1@ attribute with the value "@%2@" is a valid "%3" type.',
          ELEMENT_FAIL_1: 'The @%1@ attribute must have one of the following values: %2.',
          ELEMENT_FAIL_2: 'The @%1@ attribute with the value "@%2@" must change to one of the following values: %3.',
          ELEMENT_FAIL_3: 'The @%1@ attribute must have one or more of the following values: %2.',
          ELEMENT_FAIL_4: 'The @%1@ attribute with the value "@%2@" must change to one or more of the following values: %3.',
          ELEMENT_FAIL_5: 'The @%1@ attribute is empty and must change to a valid integer value.',
          ELEMENT_FAIL_6: 'The @%1@ attribute with the value "@%2@" must change to a integer greater than or equal to 0, if the value cannot be determined use "-1".',
          ELEMENT_FAIL_7: 'The @%1@ attribute with the value "@%2@" must change to a integer greater than or equal to 1.',
          ELEMENT_FAIL_8: 'The @%1@ attribute with the value "@%2@" must change to a value with type of \'%3\'.',
          ELEMENT_HIDDEN_1: 'The @%1@ attribute with an empty value was not tested for validity because it is hidden from assistive technologies.',
          ELEMENT_HIDDEN_2: 'The @%1@ attribute with the value "@%2@" was not tested for validity because it is hidden from assistive technologies.'
        },
        PURPOSES: [
          'ARIA attributes must be a valid type to accurately describe web content to users of assistive technologies, especially screen reader users.'
        ],
        TECHNIQUES: [
          'Use valid values for ARIA attributes.',
          'Check W3C WAI Accessible Rich Internet Applications specification for allowed values for ARIA attributes.'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Supported Property and States',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#states_and_properties'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'ARIA5: Using WAI-ARIA state and property attributes to expose the state of a user interface component',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA5.html'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'ARIA Authoring Practices',
            url:   'https://www.w3.org/WAI/ARIA/apg/'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'MDN Web Docs: ARIA ',
            url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'Web Fundamentals: Introduction to ARIA',
            url:   'https://developers.google.com/web/fundamentals/accessibility/semantics-aria'
          }
        ]
  },
  WIDGET_5: {
        ID:                    'Widget 5',
        DEFINITION:            'Elements with the attributes that start with @aria-@must be a valid ARIA property or state.',
        SUMMARY:               'Attributes that start with @aria-@ must be defined.',
        TARGET_RESOURCES_DESC: 'Elements with aria attributes',
        RULE_RESULT_MESSAGES: {
          FAIL_S:   'Change ARIA attribute to a defined property or state.',
          FAIL_P:   'Change all %N_F out of %N_T ARIA attributes to a defined properties or states.',
          HIDDEN_S: 'The widget that is hidden and was not evaluated.',
          HIDDEN_P: '%N_H widgets that are hidden were not evaluated.',
          NOT_APPLICABLE:  'No undefined ARIA attributes on this page.'
        },
        BASE_RESULT_MESSAGES: {
          ELEMENT_PASS_1:    'The @%1@ attribute is a defined ARIA property or state.',
          ELEMENT_FAIL_1:  'The @%1@ attribute must be changed to a defined ARIA property or state, otherwise remove.',
          ELEMENT_HIDDEN_1:  'Valid ARIA attribute was not tested becasue the @%1@ attribute with the value "@%2@" is hidden from assistive technologies.'
        },
        PURPOSES: [
          'ARIA attributes must be defined properties or states to accurately describe web content to users of assistive technologies, especially screen reader users'
        ],
        TECHNIQUES: [
          'Use defined ARIA properties and states in the ARIA specification.',
          'Check W3C WAI Accessible Rich Internet Applications specifications for allowed values for ARIA attributes.'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Supported Property and States',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#states_and_properties'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'ARIA5: Using WAI-ARIA state and property attributes to expose the state of a user interface component',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA5.html'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'ARIA Authoring Practices',
            url:   'https://www.w3.org/WAI/ARIA/apg/'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'MDN Web Docs: ARIA ',
            url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'Web Fundamentals: Introduction to ARIA',
            url:   'https://developers.google.com/web/fundamentals/accessibility/semantics-aria'
          }
        ]
  },
  WIDGET_6: {
        ID:                    'Widget 6',
        DEFINITION:            'Elements with ARIA widget roles must set required properties and states.',
        SUMMARY:               'Widgets must set properties',
        TARGET_RESOURCES_DESC: 'Widgets with required properties and states',
        RULE_RESULT_MESSAGES: {
          FAIL_S:   'Add required properties and states to ARIA widget.',
          FAIL_P:   'Add required properties and states to the %N_F of the %N_T ARIA widgets with required properties and/or states on the page.',
          HIDDEN_S: 'The widget with required properties and states that is hidden and was not evaluated.',
          HIDDEN_P: '%N_H widgets that have required properties and states that are hidden were not evaluated.',
          NOT_APPLICABLE:  'No widgets with required properties and states on this page.'
        },
        BASE_RESULT_MESSAGES: {
          ELEMENT_PASS_1: '@%1@ widget has the required @%2@ attribute with the value @%3@.',
          ELEMENT_FAIL_1: 'Add the required @%2@ attribute to the @%1@ widget.',
          ELEMENT_HIDDEN_1: 'Required ARA properties and states was not tested because the %1 widget is hidden from assistive technologies and/or not visible on screen.'
        },
        PURPOSES: [
          'ARIA roles, properties and states describe the features and options of widgets to users of assistive technologies, especially screen reader users.'
        ],
        TECHNIQUES: [
          'Required ARIA properties and states are needed accurately describe the features and options of a widget.'
        ],
        MANUAL_CHECKS: [
          'Verify that the values of properties and states accurately describe a widget'
        ],
        INFORMATIONAL_LINKS: [
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Widget Roles',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#widget_roles'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'ARIA5: Using WAI-ARIA state and property attributes to expose the state of a user interface component',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA5.html'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'ARIA Authoring Practices',
            url:   'https://www.w3.org/WAI/ARIA/apg/'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'MDN Web Docs: ARIA ',
            url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'Web Fundamentals: Introduction to ARIA',
            url:   'https://developers.google.com/web/fundamentals/accessibility/semantics-aria'
          }
        ]
    },
  WIDGET_7: {
        ID:                    'Widget 7',
        DEFINITION:            'Container widgets must have required owned elements.',
        SUMMARY:               'Widgets must have owned elements',
        TARGET_RESOURCES_DESC: 'Widgets with required owned elements',
        RULE_RESULT_MESSAGES: {
          FAIL_S:   'Add required child element to the widget.',
          FAIL_P:   'Add required child elements for the %N_F out of %N_T widgets missing required child elements.',
          MANUAL_CHECK_S: 'Verify the widget with @aria-busy=true@ children are being populated with required child elements.',
          MANUAL_CHECK_P: 'Verify the %N_MC widgets with @aria-busy=true@ children are being populated with required child elements.',
          HIDDEN_S: 'The widget with requires child elements that is is hidden and was not evaluated.',
          HIDDEN_P: '%N_H hidden widgets that require child elements were not evaluated.',
          NOT_APPLICABLE:  'No widgets with required child elements on this page.'
        },
        BASE_RESULT_MESSAGES: {
          ELEMENT_PASS_1:   '@%1@ widget contains at least one required owned element with the role of: @%2@.',
          ELEMENT_MC_1:     'When @aria-busy@ is set to @true@, verify for the child nodes are being populated.',
          ELEMENT_FAIL_1:   '@%1@ widget does not contain one or more of following required owned elements with a role of: @%2@.',
          ELEMENT_HIDDEN_1: 'Required owned elements was not tested because the @%1@ widget is hidden from assistive technologies and not visible on screen.'
        },
        PURPOSES: [
          'ARIA roles, properties and states describes the features of interactive widgets to users of assistive technologies, especially screen reader users.',
          'Roles that are associated with container widgets have important parent/child relationships with other roles.',
          'Parent/Child relationships are used by assistive technologies for computing the number of items in a container and the item position.',
          'Container roles are also used by assistive technologies to provide enhanced navigation features for moving between items in lists, tables, grids and treegrids.'
        ],
        TECHNIQUES: [
          'Required owned elements can be defined using the HTML DOM structure or the @aria-owns@ attribute.',
          'Use the DOM structure to add required owned elements by making them a descendant of the container element.',
          'When the owned elements are not descendants of the container element, use the @aria-owns@ attribute on the container element to reference the owned elements.',
          'When @aria-busy@ attribute is set to @true@ on the container element, the container element does not need to own any required elements.  @aria-busy@ should be used when a container element is being dynamically populated.',
          'NOTE: The DOM structure technique is preferred over the @aria-owns@ technique, since it is less likely to result in authoring errors associated with creating and referencing elements with unique @id@s.'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Owned Element definition',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#dfn-owned-element'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: aria-owns attribute',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-owns'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'ARIA Authoring Practices',
            url:   'https://www.w3.org/WAI/ARIA/apg/'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'MDN Web Docs: ARIA ',
            url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'Web Fundamentals: Introduction to ARIA',
            url:   'https://developers.google.com/web/fundamentals/accessibility/semantics-aria'
          }
        ]
    },
 WIDGET_8: {
        ID:                    'Widget 8',
        DEFINITION:            'Role must have a required parent role using the HTML DOM structure or the @aria-owns@ attribute.',
        SUMMARY:               'Role must have parent',
        TARGET_RESOURCES_DESC: 'Role with required parent role',
        RULE_RESULT_MESSAGES: {
          FAIL_S:   'Update the parent/child structure of the page so the element descends from a required parent role.',
          FAIL_P:   'Update the parent/child structure of the page so the %N_F elements descend from a required parent role.',
          HIDDEN_S: 'The role that requires a parent role that is hidden and was not evaluated.',
          HIDDEN_P: '%N_H widgets that require a parent roles that are hidden were not evaluated.',
          NOT_APPLICABLE:  'No widgets with required parent role on this page'
        },
        BASE_RESULT_MESSAGES: {
          ELEMENT_PASS_1:   '@%1@ role is a descendant of the a @%2@ role.',
          ELEMENT_FAIL_1:   'The @%1@ role requires a ancestor role of "@%2@", check your HTML DOM structure to ensure an ancestor element or an @aria-owns@ attributes identifies a required parent role.',
          ELEMENT_HIDDEN_1: 'Required parent role was not tested because the @%1@ widget is hidden from assistive technologies and/or not visible on screen.'
        },
        PURPOSES: [
          'ARIA roles, properties and states describes the features of interactive widgets to users of assistive technologies, especially screen reader users.',
          'Roles that are associated with container widgets have important parent/child relationships with other roles.',
          'Parent/child relationships are used by assistive technologies for computing the number of items owned by a container and the position of an item (e.g. "third of five links").',
          'Container roles are also used by assistive technologies to provide enhanced navigation features for moving between items in lists, tables, grids and treegrids.'
        ],
        TECHNIQUES: [
          'Parent roles can be defined using the HTML DOM structure or the @aria-owns@ attribute.',
          'Required parent role is a DOM ancestor of the element.',
          'Required parent role references the element using the @aria-owns@ attribute.',
          'NOTE: HTML DOM parent/child relationships for defining relationships is preferred over the use of @aria-owns@ attribute, since it is less likely to result in authoring errors associated with creating and referencing elements with unique @id@s.'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Owned Element definition',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#dfn-owned-element'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: aria-owns attribute',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-owns'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'ARIA Authoring Practices',
            url:   'https://www.w3.org/WAI/ARIA/apg/'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'MDN Web Docs: ARIA ',
            url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'Web Fundamentals: Introduction to ARIA',
            url:   'https://developers.google.com/web/fundamentals/accessibility/semantics-aria'
          }
        ]
    },
 WIDGET_9: {
        ID:                    'Widget 9',
        DEFINITION:            'Elements must be owned by only one parent role.',
        SUMMARY:               'Only one owner',
        TARGET_RESOURCES_DESC: 'Roles with required parent roles',
        RULE_RESULT_MESSAGES: {
          FAIL_S:   'Update elements with aria-owns to make sure elements are only referenced once.',
          FAIL_P:   'Update %N_F out of %N_T elements with aria-owns to make sure they reference an element only once.',
          NOT_APPLICABLE:  'No elements are referenced using aria-owns on this page.'
        },
        BASE_RESULT_MESSAGES: {
          ELEMENT_PASS_1: '@%1@ element is referenced only by one container element using aria-owns.',
          ELEMENT_FAIL_1: '@%1@ element is referenced only by %2 container elements using aria-owns.',
        },
        PURPOSES: [
          'ARIA container elements  have require child elements.',
          'When the HTML DOM parent/child relationships do not identify the child elements the @aria-owns@ attribute can be used to reference the child elements.',
          'A child element can only be referenced using @aria-owns@ by one container element.'
        ],
        TECHNIQUES: [
          'Container elements using @aria-owns@ attribute must accurately reference the associated child elements.',
          'A child element can only be referenced by one container element using the @aria-owns@ attribute.',
          'Update the application to use the DOM parent/child relationships instead of using @aria-owns@ technique.',
          'NOTE: HTML DOM parent/child relationships for defining relationships is preferred over the use of @aria-owns@ attribute, since it is less likely to result in authoring errors associated with creating and referencing elements with unique @id@s.'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Owned Element definition',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#dfn-owned-element'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: aria-owns attribute',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-owns'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'ARIA Authoring Practices',
            url:   'https://www.w3.org/WAI/ARIA/apg/'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'MDN Web Docs: ARIA ',
            url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'Web Fundamentals: Introduction to ARIA',
            url:   'https://developers.google.com/web/fundamentals/accessibility/semantics-aria'
          }
        ]
    },
 WIDGET_10: {
        ID:                    'Widget 10',
        DEFINITION:            'Range widget must have value between minimum and maximum values, or have an indeterminate state.',
        SUMMARY:               'Value in range',
        TARGET_RESOURCES_DESC: 'Range widgets',
        RULE_RESULT_MESSAGES: {
          FAIL_S:   'Update @range@ widget attributes of the range widget so the @aria-valuenow@ attribute is in the range defined by @aria-valuemin@ and @aria-valuemax@ attributes.',
          FAIL_P:   'Update @range@ widget attributes of the %N_F out of %N_T range widgets so the @aria-valuenow@ attribute of each widget is in the range defined by @aria-valuemin@ and @aria-valuemax@ attributes.',
          HIDDEN_S: 'The @range@ widget that is hidden and was not evaluated.',
          HIDDEN_P: '%N_H @range@ widgets that are hidden were not evaluated.',
          NOT_APPLICABLE:  'No @range@ widgets on the page.'
        },
        BASE_RESULT_MESSAGES: {
          ELEMENT_PASS_1:  '@%1@ is using @aria-valuetext@ attribute with a value of @%2@ which should provide a better description of the value than the @aria-valuenow@ of @%3@.',
          ELEMENT_PASS_2:  '@%1@ has a value of %2 is in the range %3 and %4.',
          ELEMENT_PASS_3:  '@%1@ has no @aria-valuenow@ value and is considered an indeterminate.',
          ELEMENT_FAIL_1:  'Update the numeric values of @aria-valuenow@ ("%1"), @aria-valuemin@ ("%2") and @aria-valuemax@ ("%3") so the @aria-valuenow@ value is between the minimum and maximum values.',
          ELEMENT_FAIL_2:  'Update the values of @aria-valuemin@ ("%1") and @aria-valuemax@ ("%2") to be numeric values, make sure the @aria-valuemin@ value is less than the @aria-valuemax@ value.',
          ELEMENT_FAIL_3:  'Update the value of @aria-valuenow@ ("%1") to be a valid numeric value.',
          ELEMENT_FAIL_4:  '@%1@ is missing the @aria-valuenow@ attribute.',
          ELEMENT_HIDDEN_1:  'Widget range values were not tested because the @%1@ range widget is hidden from assistive technologies.'
        },
        PURPOSES: [
          'Range roles identify a value between a minimum or maximum value and whether the value can be changed by the user (e.g. @scrollbar@, @slider@ or @spinbutton@).',
          'Screen readers typically render the value of a range widget as a percentage of the total range defined by the minimum and maximum values.',
          'Elements with the role @separator@ that are focusable (e.r. @tabindex=0@) are considered a range role with the same requirements as a @scrollbar@.',
          '@aria-valuetext@ can be used to render an alternative to the percentage when a numerical values and/or a units of measure are more descriptive.',
          'Some range roles (e.g. @progress@ and @spinbutton@) allow an unknown current value indicating indeterminate or no current value.'
        ],
        TECHNIQUES: [
          'Use the numerical value of the @aria-valuenow@ attribute must be in the range defined by @aria-valuemin@ and @aria-valuemax@.',
          'Screen readers typically render the range value as a percentage, requiring a valid @aria-valuenow@ attribute.',
          'Use the @aria-valuetext@ to provide an alternative to the percentage typically spoken by assistive technologies (e.g. "32 dollars", "78 degrees")',
          'For most range roles, if @aria-valuemin@ is not defined it\'s default value is 0.',
          'For most range roles, if @aria-valuemax@ is not defined it\'s default value is 100.'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type: REFERENCES.EXAMPLE,
            title: 'ARIA Authoring Practices: Communicating Value and Limits for Range Widgets',
            url:   'https://www.w3.org/WAI/ARIA/apg/#range_related_properties'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Meter',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#meter'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Progress',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#progress'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Scollbar',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#scollbar'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Separator',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#separator'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Slider',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#slider'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Spinbutton',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#spinbutton'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'ARIA5: Using WAI-ARIA state and property attributes to expose the state of a user interface component',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA5.html'
          }
        ]
    },
 WIDGET_11: {
        ID:                    'Widget 11',
        DEFINITION:            'Verify that @aria-valuetext@ describes the value of a range control.',
        SUMMARY:               'Verify @aria-valuetext@ value.',
        TARGET_RESOURCES_DESC: 'Range widgets using @aria-valuetext@',
        RULE_RESULT_MESSAGES: {
          FAIL_S:          'Add @aria-valuenow@ to the range widgets using @aria-valuetext@.',
          FAIL_P:          'Add @aria-valuenow@ to the %N_F range widgets using @aria-valuetext@.',
          MANUAL_CHECK_S:  'Verify range widget using @aria-valuetext@ describes the value of the widget.',
          MANUAL_CHECK_P:  'Verify %N_MC range widgets using @aria-valuetext@ describe the value of the widget.',
          HIDDEN_S:        'The hidden range widgets using @aria-valuetext@ was not evaluated.',
          HIDDEN_P:        'The %N_H hidden range widgets using @aria-valuetext@ were not evaluated.',
          NOT_APPLICABLE:  'No range widgets using @aria-valuetext@ were found on this page.'
        },
        BASE_RESULT_MESSAGES: {
          ELEMENT_MC_1:     'Verify the @aria-valuetext@ value ("%1") is a better description of the value of the range control than just the @aria-valuenow@ value ("%2").',
          ELEMENT_FAIL_1:   'The @aria-valuetext@ attribute must be used in conjunction with the @aria-valuenow@ attribute.',
          ELEMENT_HIDDEN_1: 'The range widget with @aria-valuetext@ attribute was not tested because the %1 element is hidden from assistive technologies.'
        },
        PURPOSES: [
          'Range roles identify a value between a minimum or maximum value and whether the value can be changed by the user (e.g. @scrollbar@, @slider@ or @spinbutton@).',
          'When @aria-valuetext@ is used in conjunction with @aria-valuenow@, screen readers render the value of @aria-valuetext@.',
          'The advantage of using @aria-valuetext@ is providing a better description of the value, for example a media player control could define the time position in a video (e.g. 2 minutes and 20 seconds).'
        ],
        TECHNIQUES: [
          'The @aria-valuetext@ attribute must be used in conjunction with the @aria-valuenow@ attribute.',
          'Use the @aria-valuetext@ to provide an alternative to the percentage typically spoken by assistive technologies (e.g. "32 dollars", "78 degrees")'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type: REFERENCES.EXAMPLE,
            title: 'ARIA Authoring Practices: Communicating Value and Limits for Range Widgets',
            url:   'https://www.w3.org/WAI/ARIA/apg/#range_related_properties'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Meter',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#meter'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Progress',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#progress'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Scollbar',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#scollbar'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Separator',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#separator'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Slider',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#slider'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Spinbutton',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#spinbutton'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'ARIA5: Using WAI-ARIA state and property attributes to expose the state of a user interface component',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA5.html'
          }
        ]
    },
    WIDGET_12: {
        ID:         'Widget 12',
        DEFINITION: 'The accessible name for elements with ARIA widget roles on a page must sufficiently describe its purpose.',
        SUMMARY:    'Accessible name is descriptive',
        TARGET_RESOURCES_DESC: 'Elements with widget roles',
        RULE_RESULT_MESSAGES: {
          FAIL_S:   'To the element with ARIA widget role missing a accessible name, add an accessible name that describes its purpose.',
          FAIL_P:   'To each of the %N_F element with ARIA widget roles missing accessible name, add an accessible name that uniquely describes its purpose.',
          MANUAL_CHECK_S: 'Verify that the label uniquely describes the purpose of the element with widget role.',
          MANUAL_CHECK_P: 'Verify that the label for each of the %N_MC element with widget roles uniquely describes its purpose.',
          HIDDEN_S: 'The control element that is hidden was not evaluated.',
          HIDDEN_P: 'The %N_H control elements that are hidden were not evaluated.',
          NOT_APPLICABLE: 'No element with ARIA widget roles on this page.'
        },
        BASE_RESULT_MESSAGES: {
          ELEMENT_MC_1:     'Verify the accessible name "%1" for the @%2@ element describes its purpose.',
          ELEMENT_MC_2:     'Verify the @%1@ element with @%2@ widget role does not need a label, a label is only needed  if it clarifies the purpose of the widget on the page.',
          ELEMENT_FAIL_1:   'Add an accessible name to the @%1@ element with @%2@ widget role.',
          ELEMENT_HIDDEN_1: '@%1@ element with the %2@ widget role was not evaluated because it is hidden from assistive technologies.'
        },
        PURPOSES: [
          'Labels that are sufficiently descriptive make it possible for people to understand the purposes of elements with widget roles on the page.'
        ],
        TECHNIQUES: [
          'In some cases the child text nodes and @alt@ from descendant image elements will be used as the label for elements with widget roles.',
          'Use @aria-labelledby@ attribute to reference the id(s) of the elements on the page to label elements with ARIA widget roles.',
          'Use @aria-label@ attribute to provide a explicit label for an element with a ARIA widget role.',
          'Elements with grouping widget roles may not receive keyboard focus, but giving them a label provides users of assistive technologies a more accurate description of the purpose of the widget'
        ],
        MANUAL_CHECKS: [
          'Good labels are both concise and descriptive of the element with widget role purpose.',
          'If element with widget roles are arranged in groups, make sure labels include grouping information.',
          'Consider using @aria-describedby@ to provide references to instructions or error information.',
          'When there is more than one widget of the same type on a page, they need an label for users to uniquely identify the form control.'
        ],
        INFORMATIONAL_LINKS: [
          { type: REFERENCES.SPECIFICATION,
            title: 'HTML Specification: The @label@ element',
            url:   'https://html.spec.whatwg.org/#the-label-element'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-label@ attribute',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-labelledby@ attribute',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'HTML Specification: The @title@ attribute',
            url:   'https://html.spec.whatwg.org/#the-title-attribute'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'H65: Using the title attribute to identify form controls when the label element cannot be used',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H65'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'ARIA6: Using aria-label to provide labels for objects',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA6'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'ARIA9: Using aria-labelledby to concatenate a label from several text nodes',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA9'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'H71: Providing a description for groups of form controls using fieldset and legend elements',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H71'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'MDN Web Docs: ARIA ',
            url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'Web Fundamentals: Introduction to ARIA',
            url:   'https://developers.google.com/web/fundamentals/accessibility/semantics-aria'
          }
        ]
    },
    WIDGET_13: {
        ID:                    'Widget 13',
        DEFINITION:            'ARIA roles that prohibit accessible names should not have an accessible name defined using @aria-label@ or @aria-labelledby@ attributes.',
        SUMMARY:               'Role does not support accessible name.',
        TARGET_RESOURCES_DESC: 'ARIA roles which prohibit an accessible name',
        RULE_RESULT_MESSAGES: {
          FAIL_S:   'Remove @aria-label@ or @aria-labelledby@ from the element with a role that prohibits the use of naming techniques.',
          FAIL_P:   'Remove @aria-label@ or @aria-labelledby@ from the %N_F elements with roles that prohibit the use of naming techniques.',
          HIDDEN_S: 'The element with an ARIA widget role that is hidden and was not evaluated.',
          HIDDEN_P: '%N_H elements with @aria-label@ or @aria-labelledby@ that are on elements and/or have roles that prohibit the use of naming techniques.',
          NOT_APPLICABLE:  'No elements with @aria-label@ or @aria-labelledby@ that are on elements and/or have roles that prohibit the use of naming techniques where found.'
        },
        BASE_RESULT_MESSAGES: {
          ELEMENT_FAIL_1:    'Remove @aria-label@ or @aria-labelledby@ attribute from @%1@ element.',
          ELEMENT_HIDDEN_1:  'Element @%%2@ was not tested because it is hidden from assistive technologies.',
        },
        PURPOSES: [
          'Providing an accessible name for elements or roles provides a way for users to identify the purpose of each landmark, widget, link, table and form control on a web page.',
          'Versions of the ARIA specification before 1.2 allowed @aria-label@ or @aria-labelledby@  to be used on any element, even if an accessible name was not useful .',
          'For example, defining an accessible name on a @p@ element or an element with @role=none@ does not provide any useful accessibility information to assistive technologies.  For a @p@ element the text content is the only part that is needed by assistive technologies.'
        ],
        TECHNIQUES: [
          'Remove @aria-label@ or @aria-labelledby@ attribute from the element.'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Widget Roles',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#widget_roles'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'ARIA Authoring Practices',
            url:   'https://www.w3.org/WAI/ARIA/apg/'
          }
        ]
    },
    WIDGET_14: {
        ID:                    'Widget 14',
        DEFINITION:            'ARIA attributes that have been deprecated for a role should be removed.',
        SUMMARY:               'Remove deprecated ARIA attributes.',
        TARGET_RESOURCES_DESC: 'Roles where ARIA attributes are deprecated.',
        RULE_RESULT_MESSAGES: {
          FAIL_S:   'Remove the deprecated ARIA attribute from the element.',
          FAIL_P:   'Remove the deprecated ARIA attributes from the %N_F elements.',
          HIDDEN_S: 'The element with deprecated ARIA attribute that is hidden and was not evaluated.',
          HIDDEN_P: '%N_H elements with deprecated ARIA attributes that are hidden were not evaluated.',
          NOT_APPLICABLE:  'No elements with deprecated ARIA attributes found.'
        },
        BASE_RESULT_MESSAGES: {
          ELEMENT_FAIL_1:    'Remove @%1@ attribute from @%2@ element.',
          ELEMENT_HIDDEN_1:  'The @%1@ attribute on the @%2@ element was not tested because it is hidden from assistive technologies.'
        },
        PURPOSES: [
          'Not all ARIA properties and states are useful on every ARIA role and starting with ARIA 1.2 certain states and properties that were once considered global have been deprecated on specific roles.',
          'The ARIA in HTML specification defines implicit roles for most HTML elememnts.',
          'The same ARIA property and state restrictions on explicit roles apply to implicit roles.'
        ],
        TECHNIQUES: [
          'Remove the deprecated ARIA attribute from the element.'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Widget Roles',
            url:   'https://www.w3.org/TR/wai-aria-1.2/#widget_roles'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'ARIA in HTML',
            url:   'https://www.w3.org/TR/html-aria/'
          },
          { type: REFERENCES.WCAG_TECHNIQUE,
            title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
            url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'ARIA Authoring Practices',
            url:   'https://www.w3.org/WAI/ARIA/apg/'
          }
        ]
    },
    WIDGET_15: {
        ID:                    'Widget 15',
        DEFINITION:            'Custom elements (HTML elements created using the Web Components APIs) with closed Shadow DOMs must be manually checked for accessibility requirements.',
        SUMMARY:               'Closed shadow DOM requires manual check.',
        TARGET_RESOURCES_DESC: 'Custom elements created using web components API with closed shadow DOM.',
        RULE_RESULT_MESSAGES: {
          MANUAL_CHECK_S:  'Verify the custom element with a closed shadow DOM meets WCAG accessibility requirments.',
          MANUAL_CHECK_P:  'Verify the %N_MC custom elements with a closed shadow DOM meet WCAG accessibility requirments.',
          HIDDEN_S: 'A custom element with a closed shadow DOM is hidden and only needs to be checked if has features that become visible need to be checked for accessbility.',
          HIDDEN_P: '%N_H custom elements with a closed shadow DOM are hidden and only the custom elements with features that may become visible need to be checked for accessibility.',
          NOT_APPLICABLE:  'No custom elements found on the page.'
        },
        BASE_RESULT_MESSAGES: {
          ELEMENT_MC_1:       'Verify the accessibility of the "@%1@"" custom component with a closed shadow DOM using manual checking techniques or automated tools that can anlyze the shadow DOM of custom elements.',
          ELEMENT_HIDDEN_1:  'The @%1@ custom element with a closed shadow DOM is hidden from assistive technologies.',
        },
        PURPOSES: [
          'Custom elements, defined using the Web Components APIs of HTML 5, are typically used for creating interactive widgets on a web page. A custom element effectively creates a self-scoped package of HTML, CSS and JavaScript that uses the Shadow DOM to insulate itself from other CSS and JavaScript defined by the parent document.',
          'Because custom elements use the Shadow DOM and thus are not part of the legacy DOM, they can only be accessed by the evaluation library for programmatic checking of accessibility features when the shadow DOM is "open".',
          'The evaluation library is unable to analyze custom elements created with "closed" shadow DOMs. In the case of the "closed" shadow DOM all accessibility requirements require manual checks, possibly by using other DOM inspection tools to identify accessibility issues and features.'
        ],
        TECHNIQUES: [
          'In evaluating custom elements with "closed" shadow DOMs that render as interactive widgets, the most important manual checks involve keyboard navigation and operability, and focus styling, which are related to the various ways a user may interact with the widget.',
          'Test with screen readers to verify functionality is operable by a screen reader user.',
          'Test the graphical rendering in operating system using high contrast settings to verify content is perceivable by people with visual impairments.',
          'Use accessibility tools in browser DOM inspectors to assist with manual inspection, since the DOM inspector of most  browsers allows access to the Shadow DOM of the custom element.',
          'You can use the accessibility rules in this tool to help guide your manual testing procedures.'
        ],
        MANUAL_CHECKS: [
        ],
        INFORMATIONAL_LINKS: [
          { type: REFERENCES.SPECIFICATION,
            title: 'MDN: Web Components',
            url:   'https://developer.mozilla.org/en-US/docs/Web/Web_Components'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'WebComponents.org: Introduction',
            url:   'https://www.webcomponents.org/introduction'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Web Content Accessibility Guidelines (WCAG)',
            url:   'https://www.w3.org/TR/WCAG/'
          },
          { type: REFERENCES.SPECIFICATION,
            title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification',
            url:   'https://www.w3.org/TR/wai-aria-1.2/'
          },
          { type: REFERENCES.EXAMPLE,
            title: 'ARIA Authoring Practices',
            url:   'https://www.w3.org/WAI/ARIA/apg/'
          }
        ]
    }
};

/* messages.js for English messages */

const messages$1 = {
  common: common,
  ruleCategories: ruleCategories,
  ruleScopes: ruleScopes,
  rulesets: rulesets,
  wcag: wcag,
  rules: {}
};

messages$1.rules = Object.assign(messages$1.rules, audioRules$1);
messages$1.rules = Object.assign(messages$1.rules, authorizationRules$1);
messages$1.rules = Object.assign(messages$1.rules, bypassRules$1);
messages$1.rules = Object.assign(messages$1.rules, colorRules$1);
messages$1.rules = Object.assign(messages$1.rules, errorRules$1);
messages$1.rules = Object.assign(messages$1.rules, frameRules$1);
messages$1.rules = Object.assign(messages$1.rules, controlRules$1);
messages$1.rules = Object.assign(messages$1.rules, headingRules$1);
messages$1.rules = Object.assign(messages$1.rules, htmlRules$1);
messages$1.rules = Object.assign(messages$1.rules, helpRules$1);
messages$1.rules = Object.assign(messages$1.rules, imageRules$1);
messages$1.rules = Object.assign(messages$1.rules, keyboardRules$1);
messages$1.rules = Object.assign(messages$1.rules, landmarkRules$1);
messages$1.rules = Object.assign(messages$1.rules, languageRules$1);
messages$1.rules = Object.assign(messages$1.rules, layoutRules$1);
messages$1.rules = Object.assign(messages$1.rules, linkRules$1);
messages$1.rules = Object.assign(messages$1.rules, listRules$1);
messages$1.rules = Object.assign(messages$1.rules, liveRules$1);
messages$1.rules = Object.assign(messages$1.rules, motionRules$1);
messages$1.rules = Object.assign(messages$1.rules, navigationRules$1);
messages$1.rules = Object.assign(messages$1.rules, pointerRules$1);
messages$1.rules = Object.assign(messages$1.rules, readingOrderRules$1);
messages$1.rules = Object.assign(messages$1.rules, resizeRules$1);
messages$1.rules = Object.assign(messages$1.rules, sensoryRules$1);
messages$1.rules = Object.assign(messages$1.rules, shortcutRules$1);
messages$1.rules = Object.assign(messages$1.rules, spacingRules$1);
messages$1.rules = Object.assign(messages$1.rules, tableRules$1);
messages$1.rules = Object.assign(messages$1.rules, targetSizeRules$1);
messages$1.rules = Object.assign(messages$1.rules, timingRules$1);
messages$1.rules = Object.assign(messages$1.rules, titleRules$1);
messages$1.rules = Object.assign(messages$1.rules, videoRules$1);
messages$1.rules = Object.assign(messages$1.rules, widgetRules$1);

/* locale.js */

/* Constants */
const debug$L = new DebugLogging('locale', false);

var globalUseCodeTags = false;

const messages = {
  en: messages$1
};

// Default language is 'en' for English
var locale = 'en';

/**
 * @function setUseCodeTags
 *
 * @desc Set the global default for transformating markup with code segments
 *       identified with opening and closing '@' characters
 *
 * @param {Boolen} value - If true use code tags
 */

function setUseCodeTags(value=false) {
  globalUseCodeTags = (value === true) ? true : false;
}

/**
 * @function getWCAG
 *
 * @desc Get reference to localized version of WCAG requirements object
 *
 * @param {Object} @desc
 */

function getWCAG() {
  return messages[locale].wcag;
}

/**
 * @function getWCAGLevel
 *
 * @desc Get string representing the WCAG Level
 *
 * @param {Object} @desc
 */

function getWCAGLevel(primaryId) {
  const csInfo = getSuccessCriterionInfo(primaryId);
  return messages[locale].common.level[csInfo.level];
}

/**
 * @function getCommonMessage
 *
 * @desc Gets a string associated with strings in the common messages
 *
 * @param {String} id     - id is used as the key into the common messages
 * @param {integer} value - If the key identifies an array the value is used to
 *                          select a value from the array
 */

function getCommonMessage(id, value=0) {
  let message = messages[locale].common[id];
  if (Array.isArray(message) ||
      (typeof message === 'object')) {
    message = message[value];
  }

  if (!message) {
    message = `[common][error]: id="${id}"`;
  }
  debug$L.flag && debug$L.log(`[${id}][${value}]: ${message}`);
  return message;
}

/**
 * @function getImplementationValue
 *
 * @desc Gets a localized string description for a implementation level
 *
 * @param {integer} implementationId - If the id is an index into an array
 *                                     of strings
 */

function getImplementationValue(implementationId) {
  let message = messages[locale].common.implementationValues[implementationId];
  return message;
}


/**
 * @function getRuleCategories
 *
 * @desc Gets localized rule categories object
 *
 * @return {Object}  see @desc
 */

function getRuleCategories() {
  return messages[locale].ruleCategories;
}

/**
 * @function getRuleCategoryInfo
 *
 * @desc Gets a object with keys into strings with rule category information,
 *       keys are:
 *       'title'
 *       'url'
 *       'description'
 *
 * @param {Integer} categoryId - Used to identify the rule category
 * 
 * @return {Object}  see @desc
 */

function getRuleCategoryInfo(categoryId) {
  const ruleCategories = messages[locale].ruleCategories;
  for (let i = 0; i < ruleCategories.length; i +=1) {
    let rc = ruleCategories[i];
    if (rc.id === categoryId) {
      return rc;
    }
  }
  return null;
}

/**
 * @function getRuleScopes
 *
 * @desc Gets localized rule scope object
 *
 * @return {Object}  see @desc
 */

function getRuleScopes() {
  return messages[locale].ruleScopes;
}

/**
 * @function getRuleScopeInfo
 *
 * @desc Gets a object with keys into strings with scope information,
 *       keys are:
 *       'title'
 *       'url'
 *       'description'
 *
 * @param {Integer} categoryId - Used to identify the rule scope
 *
 * @return {Object}  see @desc
 */

function getRuleScopeInfo(scopeId) {
  const ruleScopes = messages[locale].ruleScopes;
  for (let i = 0; i < ruleScopes.length; i +=1) {
    let rs = ruleScopes[i];
    if (rs.id === scopeId) {
      return rs;
    }
  }
  return null;
}

/**
 * @function getGuidelineInfo
 *
 * @desc Gets a object with keys into strings with WCAG Guideline information,
 *       keys are:
 *       'title'
 *       'url'
 *       'description'
 *
 * @param {Integer} categoryId - Used to identify the WCAG guideline
 */

function getGuidelineInfo(guidelineId) {
  const principles = messages[locale].wcag.principles;
  for (const p in principles) {
    const principle = principles[p];
    for (const g in principle.guidelines) {
      const guideline = principle.guidelines[g];
      if (guideline.id === guidelineId) {
        debug$L.flag && debug$L.log(`[getGuidelineInfo][${guidelineId}]: ${guideline.title}`);
        return {
          num: g,
          title: guideline.title,
          url: guideline.url_spec,
          description: guideline.description
        }
      }
    }
  }
  debug$L.flag && debug$L.log(`[getGuidelineInfo][${guidelineId}][ERROR]: `);
  // Assume all rules
  return {
    title: messages[locale].common.allRules,
    url: '',
    description: ''
  };
}

/**
 * @function getSuccessCriterionInfo
 *
 * @desc Gets a object with keys into strings with WCAG Success Criteria information,
 *       keys are:
 *       'level'
 *       'title'
 *       'url'
 *       'description'
 *
 * @param {String} successCriteriaIds - Used to idenitify the rule category (e.g. P.G.SC)
 *
 * @return {Object} see @desc
 */

function getSuccessCriterionInfo(successCriterionId) {
  const principles = messages[locale].wcag.principles;
  for (const p in principles) {
    const principle = principles[p];
    for (const g in principle.guidelines) {
      const guideline = principle.guidelines[g];
      for (const sc in guideline.success_criteria) {
        const success_criterion = guideline.success_criteria[sc];
        if (sc === successCriterionId) {
          debug$L.flag && debug$L.log(`[getSuccessCriterionInfo][${successCriterionId}]: ${success_criterion.title}`);
          return {
            id: successCriterionId,
            level: success_criterion.level,
            title: success_criterion.title,
            url: success_criterion.url_spec,
            description: success_criterion.description
          }
        }
      }
    }
  }
  debug$L.flag && debug$L.log(`[getSuccessCriterionInfo][${successCriterionId}]: ERROR`);
  return null;
}

/**
 * @function getSuccessCriteriaInfo
 *
 * @desc Gets an array of objects, each object has a keys to a string with WCAG Success Criteria information,
 *       keys are:
 *       'level'
 *       'title'
 *       'url'
 *       'description'
 *
 * @param {Array of String} successCriteriaIds - An array of success criterion reference (e.g. P.G.SC)
 *
 * @return {Array od Objects} see @desc
 */

function getSuccessCriteriaInfo(successCriteriaIds) {
  debug$L.flag && debug$L.log(`[getSuccessCriteriaInfo]: ${successCriteriaIds.length}`);
  const scInfoArray = [];
  successCriteriaIds.forEach( sc => {
    scInfoArray.push(getSuccessCriterionInfo(sc));
  });
  return scInfoArray;
}

/**
 * @function getScope
 *
 * @desc Gets a localize string for the rule scope id
 *
 * @param {Integer} scopeId - Numberical id associates with the rule scope
 *
 * @returns {String} see @desc
 */

function getScope (scopeId) {
  return messages[locale].common.ruleScopes[scopeId];
}

/**
 * @function getRuleId
 *
 * @desc Gets a localize string for the rule id
 *
 * @param {String} ruleId - String id associated with the rule
 *
 * @returns {String} see @desc
 */

function getRuleId (ruleId) {
  return messages[locale].rules[ruleId].ID;
}

/**
 * @function getRuleDefinition
 *
 * @desc Gets a localize string for a rule definition
 *
 * @param {String} ruleId - String id associated with the rule
 *
 * @returns {String} see @desc
 */

function getRuleDefinition (ruleId) {
  debug$L.flag && debug$L.log(`[getRuleDefinition][${ruleId}]: ${messages[locale].rules[ruleId].DEFINITION}`);
  return transformElementMarkup(messages[locale].rules[ruleId].DEFINITION);
}

/**
 * @function getRuleSummary
 *
 * @desc Gets a localize string for a rule summary
 *
 * @param {String} ruleId - String id associated with the rule
 *
 * @returns {String} see @desc
 */

function getRuleSummary (ruleId) {
  debug$L.flag && debug$L.log(`[getRuleSummary][${ruleId}]: ${messages[locale].rules[ruleId].SUMMARY}`);
  return transformElementMarkup(messages[locale].rules[ruleId].SUMMARY);
}

/**
 * @function getTargetResourcesDesc
 *
 * @desc Gets a description of the target resources
 *
 * @param {String} ruleId - String id associated with the rule
 *
 * @returns {String} see @desc
 */

function getTargetResourcesDesc (ruleId) {
  debug$L.flag && debug$L.log(`[getTargetResourcesDesc][${ruleId}]: ${messages[locale].rules[ruleId].TARGET_RESOURCES_DESC}`);
  return transformElementMarkup(messages[locale].rules[ruleId].TARGET_RESOURCES_DESC);
}

/**
 * @function getPurposes
 *
 * @desc Gets an array of localized strings describing the purpose of the rule
 *
 * @param {String} ruleId - String id associated with the rule
 *
 * @returns {Array of Strings} see @desc
 */

function getPurposes (ruleId) {
  const purposes = [];
  messages[locale].rules[ruleId].PURPOSES.forEach ( p => {
    purposes.push(transformElementMarkup(p));
  });
  debug$L.flag && debug$L.log(`[getPurposes][${ruleId}]: ${purposes.join('; ')}`);
  return purposes;
}

/**
 * @function getTechniques
 *
 * @desc Gets an array of localized strings describing the techniques to implement the rule requirements
 *
 * @param {String} ruleId - String id associated with the rule
 *
 * @returns {Array of Strings} see @desc
 */

function getTechniques (ruleId) {
  const techniques = [];
  messages[locale].rules[ruleId].TECHNIQUES.forEach ( t => {
    techniques.push(transformElementMarkup(t));
  });
  debug$L.flag && debug$L.log(`[getTechniques][${ruleId}]: ${techniques.join('; ')}`);
  return techniques;
}

/**
 * @function getInformationLinks
 *
 * @desc Gets an array of objects with keys to localized strings to more information about the rule,
 *       the keys include:
 *       'type': Integer
 *       'title' : String
 *       'url' : String
 *
 * @param {String} ruleId - String id associated with the rule
 *
 * @returns {Array} see @desc
 */

function getInformationLinks (ruleId) {
  const infoLinks = [];
  messages[locale].rules[ruleId].INFORMATIONAL_LINKS.forEach( infoLink => {
    infoLinks.push(
      {
        type: infoLink.type,
        title: transformElementMarkup(infoLink.title),
        url: infoLink.url
      }
    );
    debug$L.flag && debug$L.log(`[infoLink][title]: ${infoLink.title}`);
    debug$L.flag && debug$L.log(`[infoLink][  url]: ${infoLink.url}`);
  });
  return infoLinks;
}

/**
 * @function getManualChecks
 *
 * @desc Gets an array of localized strings describing manual checks for verifying rule requirements
 *
 * @param {String} ruleId - String id associated with the rule
 *
 * @returns {Array of Strings} see @desc
 */

function getManualChecks (ruleId) {
  const manualChecks = [];
  messages[locale].rules[ruleId].MANUAL_CHECKS.forEach ( mc => {
    manualChecks.push(transformElementMarkup(mc));
  });
  debug$L.flag && debug$L.log(`[getManualChecks][${ruleId}]: ${manualChecks.join('; ')}`);
  return manualChecks;
}

/**
 * @function getRuleResultMessages
 *
 * @desc Gets an array of localized strings for rule results
 *
 * @param {String} ruleId - String id associated with the rule
 *
 * @returns {Array of Strings} see @desc
 */

function getRuleResultMessages (ruleId) {
  const resultMessages = {};
  const msgs = messages[locale].rules[ruleId].RULE_RESULT_MESSAGES;
  for ( const key in msgs ) {
    resultMessages[key] = transformElementMarkup(msgs[key]);
    debug$L.flag && debug$L.log(`[getRuleResultMessages][${ruleId}][${key}]: ${resultMessages[key]}`);
  }
  return resultMessages;
}

/**
 * @function getBaseResultMessages
 *
 * @desc Gets an array of localized strings for element results
 *
 * @param {String} ruleId - String id associated with the rule
 *
 * @returns {Array of Strings} see @desc
 */

function getBaseResultMessages (ruleId) {
  const resultMessages = {};
  const msgs = messages[locale].rules[ruleId].BASE_RESULT_MESSAGES;
  for ( const key in msgs ) {
    resultMessages[key] = transformElementMarkup(msgs[key]);
    debug$L.flag && debug$L.log(`[getBaseResultMessages][${ruleId}][${key}]: ${resultMessages[key]}`);
  }
  return resultMessages;
}

/**
 * @method getBaseResultMessage
 *
 * @desc Returns an localized element result message
 *
 * @return {String} String with element result message
 */

function getBaseResultMessage (msg, msgArgs) {
  let message = msg;
  msgArgs.forEach( (arg, index) => {
    const argId = "%" + (index + 1);

    if (typeof arg === 'string') {
      arg = filterTextContent(arg);
    }
    else {
      if (typeof arg === 'number') {
        arg = arg.toString();
      }
      else {
        arg = "";
      }
    }
    message = message.replace(argId, arg);
  });
  return transformElementMarkup(message);
}

/**
 * @function transformElementMarkup
 *
 * @desc Converts element markup identified in strings with '@' characters will be capitalized text
 *       or encapsulated within a code element.
 *
 * @param {String}   elemStr     - Element result message to convert content inside '@' to caps
 * @param {Boolean}  useCodeTags - If true content between '@' characters will be encapsulated
 *                                 in either a code element or if false or ommitted capitalized
 * @return  String
 */

function transformElementMarkup (elemStr, useCodeTags=globalUseCodeTags) {
  let newStr = "";
  let transform_flag = false;

  if (typeof elemStr === 'string') {
    for (let c of elemStr) {
      if (c === '@') {
        transform_flag = !transform_flag;
        if (useCodeTags) {
          newStr += (transform_flag ? '<code>' : '</code>');
        }
        continue;
      }
      newStr += (transform_flag && !useCodeTags) ? c.toUpperCase() : c;
    }
  }
  return newStr;
}

function getHasManualChecks (ruleId) {
  const msgs = messages[locale].rules[ruleId].BASE_RESULT_MESSAGES;
  for ( const key in msgs ) {
    if (key.includes('_MC')) {
      return true;
    }
  }
  return false;
}

function getHasFailures (ruleId) {
  const msgs = messages[locale].rules[ruleId].BASE_RESULT_MESSAGES;
  for ( const key in msgs ) {
    if (key.includes('_FAIL')) {
      return true;
    }
  }
  return false;
}

function getHasPass (ruleId) {
  const msgs = messages[locale].rules[ruleId].BASE_RESULT_MESSAGES;
  for ( const key in msgs ) {
    if (key.includes('_PASS')) {
      return true;
    }
  }
  return false;
}

function getHasHidden (ruleId) {
  const msgs = messages[locale].rules[ruleId].BASE_RESULT_MESSAGES;
  for ( const key in msgs ) {
    if (key.includes('_HIDDEN')) {
      return true;
    }
  }
  return false;
}

function getManualCheckMessage (ruleId) {
  const msgs = messages[locale].rules[ruleId].RULE_RESULT_MESSAGES;
  for ( const key in msgs ) {
    if (key.includes('MANUAL_CHECK')) {
      return messages[locale].rules[ruleId].RULE_RESULT_MESSAGES[key];
    }
  }
  return 'not found';
}

/* helper functions */

function getWCAGVersion (primaryId) {
  if (WCAG21_SC.includes(primaryId)) {
    return 'WCAG21';
  }
  if (WCAG22_SC.includes(primaryId)) {
    return 'WCAG22';
  }
  return 'WCAG20';
}

/* tableInfo.js */

/* Constants */
const debug$K = new DebugLogging('tableInfo', false);
debug$K.flag = false;
debug$K.rows = false;
debug$K.cells = false;
debug$K.tableTree = false;
debug$K.headerCalc = false;

/**
 * @class TableElement
 *
 * @desc Identifies a DOM element as table.
 *
 * @param  {Object}  domElement    - Structural Information
 * @param  {Object}  tableElement  - Parent TableElement
 */

class TableElement {
  constructor (parentTableElement, domElement) {
    domElement.tableElement = this;
    this.domElement = domElement;
    this.parentTableElement = parentTableElement;

    this.tableType = TABLE_TYPE.UNKNOWN;
    this.hasCaption = false;

    this.nestingLevel = parentTableElement ?
                        parentTableElement.nestingLevel + 1 :
                        0;

    this.children = [];

    this.rows = [];
    this.row = null;
    this.rowCount = 0;
    this.colCount = 0;

    this.cells = [];

    this.rowGroupCount = 0;
    this.cellCount = 0;
    this.headerCellCount = 0;

    this.spannedDataCells = 0;

    this.currentParent = this;
  }

  addCaption (rowGroup, domElement) {
    this.hasCaption = true;
    const caption = new TableCaption(domElement);
    rowGroup.children.push(caption);
  }

  addRowGroup (rowGroup, domElement) {
    this.rowGroupCount += 1;
    const newRowGroup = new TableRowGroup(domElement);
    rowGroup.children.push(newRowGroup);
    return newRowGroup;
  }

  addRow (rowGroup, domElement) {
    this.rowCount += 1;
    this.row = this.getRow(this.rowCount, domElement);
    rowGroup.children.push(this.row);
  }

  addCell (domElement) {
    let rowSpan, colSpan;
    const tagName = domElement.tagName;
    const node    = domElement.node;

    if (tagName === 'th' || tagName === 'td') {
      rowSpan =  node.hasAttribute('rowspan') ? parseInt(node.getAttribute('rowspan')) : 1;
      colSpan =  node.hasAttribute('colspan') ? parseInt(node.getAttribute('colspan')) : 1;
    }
    else {
      rowSpan =  node.hasAttribute('aria-rowspan') ? parseInt(node.getAttribute('aria-rowspan')) : 1;
      colSpan =  node.hasAttribute('aria-colspan') ? parseInt(node.getAttribute('aria-colspan')) : 1;
    }

    rowSpan = isNaN(rowSpan) ? 1 : rowSpan;
    colSpan = isNaN(colSpan) ? 1 : colSpan;
    let row = this.getRow(this.rowCount);

    const column = row.getNextEmptyColumn();
    const cell = new TableCell(domElement, row.rowNumber, column, rowSpan, colSpan);
    this.cells.push(cell);

    this.cellCount += 1;
    if (cell.isHeader) {
      this.headerCellCount += 1;
    }

    for (let i = column; i < (column + colSpan); i++) {
      for (let j = 0; j < rowSpan; j++) {
        row = this.getRow(this.rowCount + j);
        row.setCell(i, cell);
      }
    }

    if (!cell.isHeader &&
        ((cell.rowSpan > 1) || (cell.colSpan > 1))) {
      this.spannedDataCells += 1;
    }

    return column;
  }

  updateColumnCount (col) {
    this.colCount = Math.max(this.colCount, col);
  }

  getRow(rowNumber, domElement=null) {
    let rowIndex = rowNumber >= 1 ? (rowNumber - 1) : 0;
    if (!this.rows[rowIndex]) {
      this.rows[rowIndex] = new TableRow(domElement, rowNumber);
    }
    else {
      if (domElement) {
        this.rows[rowIndex].setDomElement(domElement);
      }
    }
    return this.rows[rowIndex];
  }

  getCell(rowNumber, columnNumber) {
    for (let i = 0; i < this.cells.length; i += 1) {
      const cell = this.cells[i];
      if ((rowNumber >= cell.startRow) &&
          (rowNumber < cell.endRow) &&
          (columnNumber >= cell.startColumn ) &&
          (columnNumber < cell.endColumn )) {
        return  cell;
      }
    }
    return null;
  }

  computeHeaders (domCache) {
    const tableElement = this;
    this.rows.forEach( row => {
      row.cells.forEach( cell => {
        debug$K.headerCalc && debug$K.log(`${cell}`, 1);
        if (cell.headerSource === HEADER_SOURCE.HEADER_NONE) {
          if (!cell.isHeader) {
            const node = cell.domElement.node;
            if (node.hasAttribute('headers')) {
              const ids = node.getAttribute('headers').split(' ');
              debug$K.headesCalc && debug$K.log(`[headers]: ${ids.join(' ')}`);
              for (let i = 0; i < ids.length; i += 1) {
                const de = domCache.getDomElementById(ids[i]);
                if (de && de.accName.name) {
                  cell.headers.push(de.accName.name);
                }
              }
              if (cell.headers.length) {
                cell.headerSource = HEADER_SOURCE.HEADERS_ATTR;
              }
            }
            else {
              // get Column Headers
              for (let i = 1; i < row.rowNumber; i += 1) {
                const hc = tableElement.getCell(i, cell.startColumn);
                debug$K.headerCalc && debug$K.log(`[columnHeaders][${i}][${cell.startColumn}]: ${hc}`);
                if (hc && hc.isHeader &&
                    (!hc.hasScope || hc.isScopeColumn) &&
                    hc.domElement.accName.name) {
                  cell.headers.push(hc.domElement.accName.name);
                }
              }

              // get Row Headers
              for (let i = 1; i < cell.startColumn; i += 1) {
                const hc = tableElement.getCell(row.rowNumber, i);
                debug$K.headerCalc && debug$K.log(`[rowHeaders][${row.rowNumber}][${i}]: ${hc}`);
                if (hc && hc.isHeader &&
                    (!hc.hasScope || hc.isScopeRow) &&
                    hc.domElement.accName.name) {
                  cell.headers.push(hc.domElement.accName.name);
                }
              }

              if (cell.headers.length) {
                cell.headerSource = HEADER_SOURCE.ROW_COLUMN;
              }
            }
            debug$K.headerCalc && debug$K.log(`${cell}`);
          }
        }
      });
    });
  }

  getTableType () {

    const de = this.domElement;

    if (de.hasRole) {
      switch (de.role) {
        case 'none':
        case 'presentation':
          return TABLE_TYPE.LAYOUT;

        case 'grid':
          return TABLE_TYPE.ARIA_GRID;

        case 'table':
          return TABLE_TYPE.ARIA_TABLE;

        case 'treegrid':
          return TABLE_TYPE.ARIA_TREEGRID;
      }
    }

    if (((this.headerCellCount > 0) ||
         (this.domElement.accName.name)) &&
       (this.rowCount > 1) &&
       (this.colCount > 1)) {
      if (this.spannedDataCells > 0) {
        return TABLE_TYPE.COMPLEX;
      }
      else {
        return TABLE_TYPE.DATA;
      }
    }
    return TABLE_TYPE.UNKNOWN;
  }

  toString () {
    return `[TableElement][type=${getCommonMessage('tableType', this.tableType)}][role=${this.domElement.role}]: ${this.children.length} children ${this.rows.length} rows`;
  }

  debugRowGroup (prefix, item) {
    debug$K.log(`${prefix}${item}`);
    if (item.isGroup) {
      item.children.forEach( child => {
        if (child) {
          this.debugRowGroup(prefix + '  ', child);
        }
      });
    }
  }

  debug () {
    if (debug$K.flag) {
      debug$K.log(`${this}`);
      if (debug$K.tableTree) {
        this.children.forEach( child => {
          this.debugRowGroup('  ', child);
        });
      }
      debug$K.separator();
      for (let i = 0; i < this.rows.length; i += 1) {
        this.rows[i].debug('  ');
      }
    }
  }
}

/**
 * @class TableCaption
 *
 * @desc Identifies a DOM element as caption (e.g. CAPTION) in a table
 *
 * @param  {Object}  domElement - Structural Information
 */

class TableCaption {
  constructor (domElement) {
    if (domElement) {
      this.domElement   = domElement;
    }
  }

  get isGroup () {
    return false;
  }

  get isRow () {
    return false;
  }

  toString() {
    return `[TableCaption]: ${this.domElement.accName.name}`;
  }
}

/**
 * @class TableRowGroup
 *
 * @desc Identifies a DOM element as row group (e.g. THEAD or TBODY) in a table
 *
 * @param  {Object}  domElement - Structural Information
 */

class TableRowGroup {
  constructor (domElement) {
    if (domElement) {
      this.domElement   = domElement;
    }
    this.children = [];
  }

  get isGroup () {
    return true;
  }

  get isRow () {
    return false;
  }

  toString() {
    return `[TableRowGroup][${this.domElement.tagName}]: ${this.children.length} children`;
  }
}


/**
 * @class TableRow
 *
 * @desc Identifies a DOM element as row in a table
 *
 * @param  {Object}  domElement - Structural Information
 * @param  {Number}  rowNumber  - Number of the row in the table
 */

class TableRow {
  constructor (domElement, rowNumber) {
    if (domElement) {
      this.domElement   = domElement;
    }
    this.cells = [];
    this.rowNumber = rowNumber;
  }

  get isGroup () {
    return false;
  }

  get isRow () {
    return true;
  }

  getNextEmptyColumn () {
    let nextColumn = 1;
    while (this.cells[nextColumn-1]) {
      nextColumn += 1;
    }
    return nextColumn;
  }

  setDomElement(domElement) {
    this.domElement = domElement;
  }

  setCell(columnNumber, cell) {
    if (columnNumber > 0) {
      this.cells[columnNumber - 1] = cell;
    }
  }

  toString () {
    return `[TableRow]: Row ${this.rowNumber} with ${this.cells.length} columns`;
  }

  debug (prefix='') {
    if (debug$K.flag && debug$K.rows) {
      debug$K.log(`${prefix}${this}`);
      for (let i = 0; i < this.cells.length; i += 1) {
        const cell = this.cells[i];
        if (cell) {
          cell.debug(prefix + '  ');
        }
        else {
          debug$K.log(`${prefix}[${this.rowNumber}][${i+1}]: undefined`);
        }
      }
    }
  }
}

/**
 * @class TableCell
 *
 * @desc Identifies a DOM element as a table or grid cell
 *
 * @param  {Object}  domElement    - Structural Information
 * @param  {Number}  row        - Starting row in table
 * @param  {Number}  column     - Starting column in table
 * @param  {Number}  rowSpan    - Number of rows the cell spans, default is 1
 * @param  {Number}  columnSpan - Number of columns the cell spans, default is 1
 */

class TableCell {
  constructor (domElement, rowNumber, columnNumber, rowSpan=1, columnSpan=1) {
    // Provide a reference for elementResult object to get information about table cells
    domElement.tableCell = this;

    this.domElement   = domElement;

    const node    = domElement.node;
    const tagName = domElement.tagName;
    const role    = domElement.role;
    const scope   = node.hasAttribute('scope') ?
                    node.getAttribute('scope').toLowerCase() :
                    '';

    this.isScopeRow    = (scope === 'row') || (role == 'rowheader');
    this.isScopeColumn = (scope === 'col') || (role == 'columnheader');
    this.hasScope = this.isScopeRow || this.isScopeColumn;
    this.isParentTHead = node.parentNode ?
                         node.parentNode.tagName.toLowerCase() === 'thead' :
                         false;

    this.isHeader = (tagName === 'th') ||
                    (role == 'columnheader') ||
                    (role == 'rowheader') ||
                    this.hasScope ||
                    this.isParentTHead;

    this.startRow    = rowNumber;
    this.startColumn = columnNumber;

    this.endRow    = rowNumber    + rowSpan;
    this.endColumn = columnNumber + columnSpan;

    this.headers = [];
    this.headersSource = HEADER_SOURCE.NONE;

    this.hasContent = (node.textContent.trim().length > 0) || (node.firstElementChild !== null);

  }

  get columnSpan () {
    let span = this.endColumn - this.startColumn;
    span = isNaN(span) ? 1 : span;
    return span;
  }

  get rowSpan () {
    let span = this.endRow - this.startRow;
    span = isNaN(span) ? 1 : span;
    return span;
  }

  toString () {
    const node = this.domElement.node;
    let str = `[TableCell][${this.startRow}][${this.startColumn}]`;
    str += ` ${node.textContent}`;
    str += ` ${this.isHeader ? '(Header)' : ''}`;
    const headerSource = getCommonMessage('headerSource', this.headerSource);
    const headerInfo = this.headers.length ? `${this.headers.join(' | ')} (${headerSource})` : 'none';
    str += !this.isHeader ? ` Headers: ${headerInfo}` : '';
    return str;
  }

  debug (prefix='') {
    if (debug$K.flag) {
      debug$K.log(`${prefix}${this}`);
    }
  }

}

/**
 * @class TableInfo
 *
 * @desc Collects information on table elements and their children
 */

class TableInfo {
  constructor () {
    this.allTableElements = [];
  }

  update (tableElement, rowGroup, domElement) {

    let te = tableElement;
    let rg = rowGroup;

    switch (domElement.tagName) {

      case 'table':
        te = new TableElement(te, domElement);
        this.allTableElements.push(te);
        rg = te;
        break;

      case 'caption':
        if (te) {
          te.addCaption(rg, domElement);
        }
        break;

      case 'thead':
        if (te) {
          rg = te.addRowGroup(rg, domElement);
        }
        break;

      case 'tbody':
        if (te) {
          rg= te.addRowGroup(rg, domElement);
        }
        break;

      case 'tr':
        if (te) {
          te.addRow(rg, domElement);
        }
        break;

      case 'th':
      case 'td':
        if (te) {
          te.updateColumnCount(te.addCell(domElement));
        }
        break;

      default:

        // Tables defined using ARIA markup

        switch (domElement.role) {

          case 'table':
            te = new TableElement(te, domElement);
            this.allTableElements.push(te);
            rg = te;
            break;

          case 'row':
            if (te) {
              te.addRow(rg, domElement);
            }
            break;

          case 'rowgroup':
            if (te) {
              rg = te.addRowGroup(rg, domElement);
            }
            break;

          case 'rowheader':
          case 'colheader':
          case 'cell':
          case 'gridcell':
            if (te) {
              te.addCell(domElement);
            }
            break;

        }
      break;
    }

    return [te, rg];
  }

  computeHeaders (domCache) {
    this.allTableElements.forEach( te => {
      te.computeHeaders(domCache);
    });
  }

  computeTableTypes () {
    this.allTableElements.forEach( te => {
      te.tableType = te.getTableType();
    });
  }


  /**
   * @method showTableInfo
   *
   * @desc showTableInfo is used for debugging the TableInfo objects
   */

  showTableInfo () {
    if (debug$K.flag) {
      debug$K.log('== All Tables ==', 1);
        this.allTableElements.forEach( te => {
          te.debug();
        });
    }
  }
}

/* timingInfo.js */

/* Constants */
const debug$J = new DebugLogging('TimingInfo', false);

/**
 * @class TimingInfo
 *
 * @desc Collects information on the elements with possible animations on a web page
 *       for use in rules
 */

class TimingInfo {
  constructor () {
    this.allTimingDomElements  = [];
  }

  /**
   * @method isTimingElement
   *
   * @desc Tests if a domElement for being a possible element with visual animations
   *
   * @param  {Object}  domElement - DOMElement object representing an element in the DOM
   */

  isTimingElement (domElement) {
    return (domElement.tagName === 'canvas') ||
           (domElement.tagName === 'embed')  ||
           (domElement.tagName === 'img')    ||
           (domElement.tagName === 'object') ||
           (domElement.tagName === 'svg');
  }

  /**
   * @method update
   *
   * @desc Checks to see if the domElement could be an animation, if so save reference
   *
   * @param  {Object}  domElement        - DOMElement object representing an element in the DOM
   */

  update (domElement) {
    if (this.isTimingElement(domElement)) {
      this.allTimingDomElements.push(domElement);
    }
  }

  /**
   * @method showImageInfo
   *
   * @desc showImageInfo is used for debugging the ImageInfo, ImageElement and MapElement objects
   */

  showTimingInfo () {
    if (debug$J.flag) {
      debug$J.log('== All Timing elements ==', 1);
      this.allTimingDomElements.forEach( de => {
        debug$J.log(`[fileName]: ${de.tagName}`, true);
      });
    }
  }
}

/* domCache.js */

/* Constants */
const debug$I = new DebugLogging('domCache', false);
debug$I.flag = false;
debug$I.showDomTexts = false;
debug$I.showDomElems = false;
debug$I.showTree = false;

const skipableElements = [
  'base',
  'content',
  'input[type=hidden]',
  'link',
  'meta',
  'noscript',
  'script',
  'style',
  'template',
  'shadow',
  'title'
];

/**
 * @class ParentInfo
 *
 * @desc Contains reference to ancestor objects in the DOMCache
 *
 * @param  {Object}  info - Parent ParentInfo object
 */

class ParentInfo {
  constructor (info) {
    this.controlElement  = null;
    this.document        = null;
    this.parentDocument  = null;
    this.useParentDocForName = false;
    this.documentIndex   = 0;
    this.domElement      = null;
    this.landmarkElement = null;
    this.listElement     = null;
    this.mapElement      = null;
    this.mediaElement    = null;
    this.tableElement    = null;
    this.tableRowGroup   = null;

    this.inLink      = false;
    this.inParagraph = false;
    this.inDialog    = false;

    if (info) {
      this.controlElement  = info.controlElement;
      this.document        = info.document;
      this.parentDocument  = info.parentDocument;
      this.useParentDocForName = info.useParentDocForName;
      this.documentIndex   = info.documentIndex;
      this.domElement      = info.domElement;
      this.landmarkElement = info.landmarkElement;
      this.listElement     = info.listElement;
      this.mapElement      = info.mapElement;
      this.mediaElement    = info.mediaElement;
      this.tableElement    = info.tableElement;
      this.tableRowGroup   = info.tableRowGroup;

      this.inLink       = info.inLink;
      this.inParagraph  = info.inParagraph;
      this.inDialog     = info.inDialog;
    }
  }
}

/**
 * @class DOMCache
 *
 * @desc Builds a cache of the dom from the startingNode and computes
 *       information useful for accessibility rules
 *       The dom cache is passed into rules for computing evaluation
 *       results
 *
 * @param  {Object}  startingDoc     - Browser document object model (DOM) to build cache
 * @param  {Object}  startingElement - DOM node to start evalution, if not defined use
 *                                     document.body
 */

class DOMCache {
  constructor (startingDoc, startingElement) {
    if (typeof startingElement !== 'object') {
      startingElement = startingDoc.body;
    }

    this.hasTitle = startingDoc.title.trim().length > 0;
    this.title = startingDoc.title;
    try {
      this.lang = startingDoc.documentElement.getAttribute('lang');
    }
    catch (error) {
      this.lang = '';
    }

    this.document = startingDoc;

    this.ordinalPosition = 2;
    this.documentIndex = 0;

    this.allDomElements = [];
    this.allDomTexts    = [];

    const parentInfo = new ParentInfo();
    parentInfo.document        = startingDoc;
    parentInfo.accNameDocument = startingDoc;

    this.controlInfo   = new ControlInfo();
    this.idInfo        = new IdInfo();
    this.imageInfo     = new ImageInfo();
    this.linkInfo      = new LinkInfo();
    this.listInfo      = new ListInfo();
    this.mediaInfo      = new MediaInfo();
    this.structureInfo = new StructureInfo();
    this.tableInfo     = new TableInfo();
    this.timingInfo    = new TimingInfo();
    this.iframeInfo    = new IframeInfo();

    this.startingDomElement = new DOMElement(parentInfo, startingElement, 1);
    this.allDomElements.push(this.startingDomElement);

    // Information on rule results associated with page
    this.resultsHidden       = [];
    this.resultsPassed       = [];
    this.resultsViolations   = [];
    this.resultsWarnings     = [];
    this.resultsManualChecks = [];

    this.transverseDOM(parentInfo, startingElement);
    this.computeAriaOwnsRefs();
    this.tableInfo.computeTableTypes();
    this.tableInfo.computeHeaders(this);
    this.controlInfo.updateLabelForReferences();

    this.hasScripting = startingDoc.querySelector('script') ? true : false;
  }

  getDomElementById(id) {
    return this.allDomElements.find( de => de.id === id);
  }

  // Tests if a tag name can be skipped
  isSkipableElement(tagName, type) {
    const elemSelector = (tagName === 'input') && (typeof type === 'string') ? 
                         `${tagName}[type=${type}]` :
                         tagName;
    return skipableElements.includes(elemSelector);
  }

  // Tests if a tag name is a custom element
  isCustomElement(tagName) {
    return tagName.indexOf('-') >= 0;
  }

  // Tests if a node is a iframe element
  isIFrameElement(tagName) {
    return tagName === 'iframe';
  }

  // Tests if a node is a slot element
  isSlotElement(node) {
    return (node instanceof HTMLSlotElement);
  }

  /**
   * @method transverseDOM
   *
   * @desc Used to collect accessibility information for all the element nd text
   *       nodes on a web page for use the the rules.  It pre-computes values
   *       that are used by the accessibility rules to test accessibility 
   *       requirements 
   *
   * @param {Object}  parentinfo      - Parent DomElement associated with the
   *                                    parent element node of the starting node
   * @param {Object}  startingNode    - The dom element to start transversing the
   *                                    dom
   */

  transverseDOM(parentInfo, startingNode) {
    let tagName, newParentInfo;
    let domItem = null;
    let parentDomElement = parentInfo.domElement;
    for (let node = startingNode.firstChild; node !== null; node = node.nextSibling ) {

      switch (node.nodeType) {

        case Node.TEXT_NODE:
          domItem = new DOMText(parentDomElement, node);
          // Check to see if text node has any renderable content
          if (domItem.hasContent) {
            // Merge text nodes in to a single DomText node if sibling text nodes
            if (parentDomElement) {
              parentDomElement.hasContent = true;
              // if last child node of parent is a DomText node merge text content
              if (parentDomElement.isLastChildDomText) {
                parentDomElement.addTextToLastChild(domItem.text);
              } else {
                parentDomElement.addChild(domItem);
                this.allDomTexts.push(domItem);
              }
            }

            if (parentInfo.listElement) {
              parentInfo.listElement.textContent += domItem.text.length;
              if (parentInfo.inLink) {
                parentInfo.listElement.linkTextContent += domItem.text.length;
              }
            }
          }
          break;

        case Node.ELEMENT_NODE:
          tagName = node.tagName.toLowerCase();

          if (tagName === 'script') {
            this.hasScripting = true;
          }

          if (!this.isSkipableElement(tagName, node.getAttribute('type'))) {
            // check for slotted content
            if (this.isSlotElement(node)) {
              // if no slotted elements, check for default slotted content
              const isSlotContent = node.assignedNodes().length > 0;

              const assignedNodes = isSlotContent ?
                                    node.assignedNodes() :
                                    node.assignedNodes({ flatten: true });

              for (let i = 0; i < assignedNodes.length; i += 1) {
                const assignedNode = assignedNodes[i];
                if (assignedNode.nodeType === Node.TEXT_NODE) ;

                if (assignedNode.nodeType === Node.ELEMENT_NODE) {
                  domItem = new DOMElement(parentInfo, assignedNode, this.ordinalPosition);

                  this.ordinalPosition += 1;
                  this.allDomElements.push(domItem);

                  if (parentDomElement) {
                    parentDomElement.addChild(domItem);
                  }

                  newParentInfo = this.updateDOMElementInformation(parentInfo, domItem);
                  newParentInfo.useParentDocForName = isSlotContent;

                  this.transverseDOM(newParentInfo, assignedNode);
                }
              }
            } else {
              domItem = new DOMElement(parentInfo, node, this.ordinalPosition);
              this.ordinalPosition += 1;
              this.allDomElements.push(domItem);

              if (parentDomElement) {
                parentDomElement.addChild(domItem);
              }
              newParentInfo = this.updateDOMElementInformation(parentInfo, domItem);

              // check for custom elements
              if (this.isCustomElement(tagName)) {
                if (node.shadowRoot) {
                  domItem.isShadowClosed = false;
                  newParentInfo.parentDocument  = newParentInfo.document;
                  newParentInfo.document        = node.shadowRoot;
                  this.documentIndex += 1;
                  newParentInfo.documentIndex = this.documentIndex;
                  this.transverseDOM(newParentInfo, node.shadowRoot);
                }
                else {
                  domItem.isShadowClosed = true;
                  this.transverseDOM(newParentInfo, node);
                }
              } else {
                // Check for iframe tag
                if (this.isIFrameElement(tagName)) {
                  let isCrossDomain = false;
                  try {
                    const doc = node.contentDocument || node.contentWindow.document;
                    newParentInfo.document = doc;
                    this.documentIndex += 1;
                    newParentInfo.documentIndex = this.documentIndex;
                    this.transverseDOM(newParentInfo, doc);
                  } catch (error) {
                    isCrossDomain = true;
                  }                    
                  this.iframeInfo.update(domItem, isCrossDomain);
                } else {
                  this.transverseDOM(newParentInfo, node);
                }
              }
            }
          }   
          break;

      } /* end switch */
    } /* end for */
  }


  /**
   * @method updateDOMElementInformation
   *
   * @desc  Updates page level collections of elements for landmarks, headings and controls
   *
   * @param {Object}  parentInfo       - Parent DomElement associated DOMElement
   * @param {Object}  domElement       - The DOM element to start transversal of the DOM
   *
   * @returns {Object} ParentInfo  - updated ParentInfo object for use in the transversal
   */

  updateDOMElementInformation (parentInfo, domElement) {
    const documentIndex   = parentInfo.documentIndex;

    const controlElement  = parentInfo.controlElement;
    const landmarkElement = parentInfo.landmarkElement;
    const listElement     = parentInfo.listElement;
    const mapElement      = parentInfo.mapElement;
    const mediaElement    = parentInfo.mediaElement;
    const tableElement    = parentInfo.tableElement;
    const tableRowGroup   = parentInfo.tableRowGroup;

    let newParentInfo = new ParentInfo(parentInfo);
    newParentInfo.domElement = domElement;

    newParentInfo.controlElement  = this.controlInfo.update(controlElement, domElement);
    newParentInfo.mapElement      = this.imageInfo.update(mapElement, domElement);
    newParentInfo.inLink          = this.linkInfo.update(domElement, parentInfo.inLink);
    newParentInfo.listElement     = this.listInfo.update(listElement, domElement);
    newParentInfo.mediaElement    = this.mediaInfo.update(mediaElement, domElement);
    newParentInfo.landmarkElement = this.structureInfo.update(landmarkElement, domElement, documentIndex);
    [newParentInfo.tableElement, newParentInfo.tableRowGroup] = this.tableInfo.update(tableElement, tableRowGroup, domElement);

    newParentInfo.inParagraph = domElement.tagName === 'p' ? true : parentInfo.inParagraph;
    newParentInfo.inDialog    = domElement.isInDialog;

    this.idInfo.update(documentIndex, domElement);
    this.timingInfo.update(domElement);

    return newParentInfo;
  }

  /**
   * @method computeAriaOwnsRefs
   *
   * @desc  If aria-owns is defined, identify parent child relationships
   */

  computeAriaOwnsRefs() {

    function addOwenedByRefToDescendants(ownerDomElement, domElement) {
      domElement.ariaInfo.ownedByDomElements.push(ownerDomElement);
      for (let i = 0; i < domElement.children.length; i += 1) {
        const child = domElement.children[i];
        if (child.isDomElement) {
          addOwenedByRefToDescendants(ownerDomElement, child);
        }
      }
    }

    for (let i = 0; i < this.allDomElements.length; i += 1) {
      const de = this.allDomElements[i];
      if (de.ariaInfo.hasAriaOwns) {
        for (let j = 0; j < de.ariaInfo.ariaOwnsIds.length; j += 1) {
          const id = de.ariaInfo.ariaOwnsIds[j];
          if (id) {
            const ode = this.getDomElementById(id);
            if (ode) {
              de.ariaInfo.ownedDomElements.push(ode);
              addOwenedByRefToDescendants(de, ode);
            }
          }
        }
      }
    }
  }

  /**
   * @method showDomElementTree
   *
   * @desc  Used for debugging the DOMElement tree
   */

  showDomElementTree () {
    if (debug$I.flag) {
      if (debug$I.showDomElems) {
        debug$I.log(' === AllDomElements ===', true);
        this.allDomElements.forEach( de => {
          debug$I.domElement(de);
        });
      }

      if (debug$I.showDomTexts) {
        debug$I.log(' === AllDomTexts ===', true);
        this.allDomTexts.forEach( dt => {
          debug$I.domText(dt);
        });
      }

      if (debug$I.showTree) {
        debug$I.log(' === DOMCache Tree ===', true);
        debug$I.domElement(this.startingDomElement);
        this.startingDomElement.showDomElementTree(' ');
      }
    }
  }
}

/* audioRules.js */

/* Constants */
const debug$H = new DebugLogging('Audio Rules', false);
debug$H.flag = false;


/*
 * OpenA11y Rules
 * Rule Category: Audio Rules
 */

const audioRules = [

  /**
   * @object AUDIO_1
   *
   * @desc Audio elements must have captions or text transcripts
   */

  { rule_id             : 'AUDIO_1',
    last_updated        : '2023-08-11',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.AUDIO_VIDEO,
    rule_required       : true,
    wcag_primary_id     : '1.2.1',
    wcag_related_ids    : ['1.2.2', '1.2.4', '1.2.9'],
    target_resources    : ['audio', 'track'],
    validate          : function (dom_cache, rule_result) {

      dom_cache.mediaInfo.audioElements.forEach( ae => {
        const de = ae.domElement;
        if (de.visibility.isVisibleToAT || ae.hasAutoPlay) {
          if (ae.tracks.length) {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', []);
          }
          else {
            if (de.accDescription.name) {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', []);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', []);
            }
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
        }
      });

    } // end validate function
  },

  /**
   * @object AUDIO_2
   *
   * @desc If object element is used for audio only, object must have captions or text transcript
   */

  { rule_id             : 'AUDIO_2',
    last_updated        : '2023-08-11',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.AUDIO_VIDEO,
    rule_required       : true,
    wcag_primary_id     : '1.2.1',
    wcag_related_ids    : ['1.2.2', '1.2.4', '1.2.9'],
    target_resources    : ['object', 'param'],
    validate          : function (dom_cache, rule_result) {

      dom_cache.mediaInfo.objectElements.forEach( oe => {
        const de = oe.domElement;
        if (de.visibility.isVisibleToAT) {
          if (de.accDescription.name) {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', []);
          }
          else {
            if (oe.type.includes('audio')) {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', []);
            }
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
        }
      });

    } // end validate function
  },

  /**
   * @object AUDIO_3
   *
   * @desc If embed element is used for audio only, embed  must have captions or text transcript
   */

  { rule_id             : 'AUDIO_3',
    last_updated        : '2023-08-11',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.AUDIO_VIDEO,
    rule_required       : true,
    wcag_primary_id     : '1.2.1',
    wcag_related_ids    : ['1.2.2', '1.2.4', '1.2.9'],
    target_resources    : ['embed'],
    validate          : function (dom_cache, rule_result) {

      dom_cache.mediaInfo.embedElements.forEach( ee => {
        const de = ee.domElement;
        if (de.visibility.isVisibleToAT) {
          if (de.accDescription.name) {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', []);
          }
          else {
            if (ee.type.includes('audio')) {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', []);
            }
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
        }
      });

    } // end validate function
  },

    /**
     * @object AUDIO_4
     *
     * @desc  Audio automatically starts
     */

  { rule_id             : 'AUDIO_4',
    last_updated        : '2023-08-11',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.AUDIO_VIDEO,
    rule_required       : true,
    wcag_primary_id     : '1.4.2',
    wcag_related_ids    : [],
    target_resources    : [],
    validate            : function (dom_cache, rule_result) {

      rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);

    } // end validate function
  }

];

/* authorizationRules.js */

/* Constants */
const debug$G = new DebugLogging('Authorization Rules', false);
debug$G.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: Autyhorizatiom Rules
 */

const authorizationRules = [

  /**
   * @object AUTHORIZATION_1
   *
   * @desc ccessible Authorization (Minimum)
   */

  { rule_id             : 'AUTHORIZATION_1',
    last_updated        : '2023-12-16',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.FORMS,
    rule_required       : true,
    wcag_primary_id     : '3.3.8',
    wcag_related_ids    : [],
    target_resources    : ['widgets'],
    validate          : function (dom_cache, rule_result) {

      if (dom_cache.controlInfo.hasTextInput) {
        rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);
      }

    } // end validate function
  }
];

/* bypassRules.js */

/* Constants */
const debug$F = new DebugLogging('Bypass Rules', false);
debug$F.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: Bypass Rules
 */

const bypassRules = [

  /**
   * @object BYPASS_1
   *
   * @desc Looking for links or that support bypassing blocks of content
  */

  { rule_id             : 'BYPASS_1',
    last_updated        : '2023-08-25',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.KEYBOARD_SUPPORT,
    rule_required       : true,
    wcag_primary_id     : '2.4.1',
    wcag_related_ids    : ['2.4.4'],
    target_resources    : ['a'],
    validate            : function (dom_cache, rule_result) {

      const bypassTargets = [
        'content',
        'content-main',
        'main',
        'maincontent',
        'main-content',
        'site-content'
        ];

      const domElements     = dom_cache.allDomElements;
      const linkDomElements = dom_cache.linkInfo.allLinkDomElements;

      let de;
      let hasSkipToButton = false;
      let hasBypassLink = false;
      let linkDomElem = false;
      let targetDomElem = false;

      // Check for SkipTo.js page script button
      for (let i = 0; (i < domElements.length) && !hasSkipToButton; i += 1) {
        de = domElements[i];
        if (de.id === 'id-skip-to') {
          rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', []);
          hasSkipToButton = true;
        }
      }

      // Check for bypass block links
      for (let i = 0; (i < linkDomElements.length) && !hasSkipToButton && !hasBypassLink; i += 1) {
        linkDomElem = linkDomElements[i];

        let href = linkDomElem.node.href;

        if ((typeof href === 'string') && href.indexOf('#') >= 0) {
          let  targetId = href.slice(href.indexOf('#')+1);

          if (bypassTargets.includes(targetId)) {
            hasBypassLink = true;

            for (let i = 0; (i < domElements.length) && (!targetDomElem); i += 1) {
              de = domElements[i];
              if ((de.id === targetId) || (de.name === targetId)) {
                targetDomElem = de;
              }
            }

            if (targetDomElem) {
              rule_result.addElementResult(TEST_RESULT.PASS, linkDomElem, 'ELEMENT_PASS_2', []);
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, targetDomElem, 'ELEMENT_MC_1', []);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.FAIL, linkDomElem,   'ELEMENT_FAIL_1', []);
            }

          }

        }

      }

      if (hasSkipToButton) {
        rule_result.addPageResult(TEST_RESULT.PASS, dom_cache, 'PAGE_PASS_1', []);
      }
      else {
        if (hasBypassLink) {
          if (targetDomElem) {
            rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);
          }
          else {
            rule_result.addPageResult(TEST_RESULT.FAIL, dom_cache, 'PAGE_FAIL_1', []);
          }
        }
        else {
          rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_2', []);
        }
      }
    } // end validation function  }
  }
];

/* colorRules.js */

/* Constants */
const debug$E = new DebugLogging('Color Rules', false);
debug$E.flag = false;


/*
 * OpenA11y Alliance Rules
 * Rule Category: Color Rules
 */

const colorRules = [
  /**
   * @object COLOR_1
   *
   * @desc  Color contrast ratio must be > 4.5 for normal text, or > 3 for large text
   */

  { rule_id             : 'COLOR_1',
    last_updated        : '2022-04-21',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.COLOR_CONTENT,
    rule_required       : true,
    wcag_primary_id     : '1.4.3',
    wcag_related_ids    : ['1.4.1','1.4.6'],
    target_resources    : ['text content'],
    validate            : function (dom_cache, rule_result) {

      let index = 0;
      function checkResult(domElement, result) {
        const node    = domElement.node;
        const tagName = node.tagName;
        const id      = node.id ? `[id=${node.id}]` : '';
        const cc      = domElement.colorContrast;
        const crr     = cc.colorContrastRatio;
        debug$E.flag && debug$E.log(`[${index += 1}][${result}][${tagName}]${id}: ${crr}`);
      }


      const MIN_CCR_NORMAL_FONT = 4.5;
      const MIN_CCR_LARGE_FONT  = 3;

      debug$E.flag && debug$E.log(`===== COLOR 1 ====`);

      dom_cache.allDomTexts.forEach( domText => {
        const de  = domText.parentDomElement;
        const cc  = de.colorContrast;
        const ccr = cc.colorContrastRatio;

        if (de.visibility.isVisibleOnScreen) {
          if (cc.isLargeFont) {
            if (ccr >= MIN_CCR_LARGE_FONT) {
              // Passes color contrast requirements
              if (cc.hasBackgroundImage) {
                checkResult(de, 'MC');
                rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, domText, 'ELEMENT_MC_3', [ccr]);
              }
              else {
                checkResult(de, 'PASS');
                rule_result.addElementResult(TEST_RESULT.PASS, domText, 'ELEMENT_PASS_2', [ccr]);
              }
            }
            else {
              // Fails color contrast requirements
              if (cc.hasBackgroundImage) {
                checkResult(de, 'MC');
                rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, domText, 'ELEMENT_MC_4', [ccr]);
              }
              else {
                checkResult(de, 'FAIL');
                rule_result.addElementResult(TEST_RESULT.FAIL, domText, 'ELEMENT_FAIL_2', [ccr]);
              }
            }
          }
          else {
            if (ccr >= MIN_CCR_NORMAL_FONT) {
              // Passes color contrast requirements
              if (cc.hasBackgroundImage) {
                checkResult(de, 'MC');
                rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, domText, 'ELEMENT_MC_1', [ccr]);
              }
              else {
                checkResult(de, 'PASS');
                rule_result.addElementResult(TEST_RESULT.PASS, domText, 'ELEMENT_PASS_1', [ccr]);
              }
            }
            else {
              // Fails color contrast requirements
              if (cc.hasBackgroundImage) {
                checkResult(de, 'MC');
                rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, domText, 'ELEMENT_MC_2', [ccr]);
              }
              else {
                checkResult(de, 'FAIL');
                rule_result.addElementResult(TEST_RESULT.FAIL, domText, 'ELEMENT_FAIL_1', [ccr]);
              }
            }
          }
        } else {
          checkResult(de, 'HIDDEN');
          rule_result.addElementResult(TEST_RESULT.HIDDEN, domText, 'ELEMENT_HIDDEN_1', []);
        }
      });
    } // end validate function
  },

  /**
   * @object COLOR_2
   *
   * @desc  Use of color
   */

  { rule_id             : 'COLOR_2',
    last_updated        : '2022-04-21',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.COLOR_CONTENT,
    rule_required       : true,
    wcag_primary_id     : '1.4.1',
    wcag_related_ids    : [],
    target_resources    : [],
    validate            : function (dom_cache, rule_result) {

      rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);

    } // end validate function
  },

  /**
   * @object COLOR_3
   *
   * @desc  Color contrast ratio must be >= 7 for normal text, or >= 4.5 for large text
   */

  { rule_id             : 'COLOR_3',
    last_updated        : '2022-07-04',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.COLOR_CONTENT,
    rule_required        : false,
    wcag_primary_id     : '1.4.6',
    wcag_related_ids    : ['1.4.1','1.4.3'],
    target_resources    : ['text content'],
    validate            : function (dom_cache, rule_result) {

      let index = 0;
      function checkResult(domElement, result) {
        const node    = domElement.node;
        const tagName = node.tagName;
        const id      = node.id ? `[id=${node.id}]` : '';
        const cc      = domElement.colorContrast;
        const crr     = cc.colorContrastRatio;
        debug$E.flag && debug$E.log(`[${index += 1}][${result}][${tagName}]${id}: ${crr}`);
      }


      const MIN_CCR_NORMAL_FONT = 7;
      const MIN_CCR_LARGE_FONT  = 4.5;

      debug$E.flag && debug$E.log(`===== COLOR 3 ====`);

      dom_cache.allDomTexts.forEach( domText => {
        const de  = domText.parentDomElement;
        const cc  = de.colorContrast;
        const ccr = cc.colorContrastRatio;

        if (de.visibility.isVisibleOnScreen) {
          if (cc.isLargeFont || cc.isBoldedFont) {
            if (ccr >= MIN_CCR_LARGE_FONT) {
              // Passes color contrast requirements
              if (cc.hasBackgroundImage) {
                checkResult(de, 'MC');
                rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, domText, 'ELEMENT_MC_3', [ccr]);
              }
              else {
                checkResult(de, 'PASS');
                rule_result.addElementResult(TEST_RESULT.PASS, domText, 'ELEMENT_PASS_2', [ccr]);
              }
            }
            else {
              // Fails color contrast requirements
              if (cc.hasBackgroundImage) {
                checkResult(de, 'MC');
                rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, domText, 'ELEMENT_MC_4', [ccr]);
              }
              else {
                checkResult(de, 'FAIL');
                rule_result.addElementResult(TEST_RESULT.FAIL, domText, 'ELEMENT_FAIL_2', [ccr]);
              }
            }
          }
          else {
            if (ccr >= MIN_CCR_NORMAL_FONT) {
              // Passes color contrast requirements
              if (cc.hasBackgroundImage) {
                checkResult(de, 'MC');
                rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, domText, 'ELEMENT_MC_1', [ccr]);
              }
              else {
                checkResult(de, 'PASS');
                rule_result.addElementResult(TEST_RESULT.PASS, domText, 'ELEMENT_PASS_1', [ccr]);
              }
            }
            else {
              // Fails color contrast requirements
              if (cc.hasBackgroundImage) {
                checkResult(de, 'MC');
                rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, domText, 'ELEMENT_MC_2', [ccr]);
              }
              else {
                checkResult(de, 'FAIL');
                rule_result.addElementResult(TEST_RESULT.FAIL, domText, 'ELEMENT_FAIL_1', [ccr]);
              }
            }
          }
        } else {
          checkResult(de, 'HIDDEN');
          rule_result.addElementResult(TEST_RESULT.HIDDEN, domText, 'ELEMENT_HIDDEN_1', []);
        }
      });
    } // end validate function
  },

  /**
   * @object COLOR_4
   *
   * @desc  Non-text Contrast for user interface controls
   */

  { rule_id             : 'COLOR_4',
    last_updated        : '2023-09-19',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.COLOR_CONTENT,
    rule_required       : true,
    wcag_primary_id     : '1.4.11',
    wcag_related_ids    : [],
    target_resources    : [],
    validate            : function (dom_cache, rule_result) {

      dom_cache.controlInfo.allControlElements.forEach( ce => {
        const de = ce.domElement;
        if (!ce.isDisabled && de.ariaInfo.isWidget) {
          if (de.visibility.isVisibleOnScreen) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
          }
        }
      });


    } // end validate function
  },

  /**
   * @object COLOR_5
   *
   * @desc  Non-text Contrast for graphical object
   */

  { rule_id             : 'COLOR_5',
    last_updated        : '2023-09-19',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.COLOR_CONTENT,
    rule_required       : true,
    wcag_primary_id     : '1.4.11',
    wcag_related_ids    : [],
    target_resources    : [],
    validate            : function (dom_cache, rule_result) {

      dom_cache.imageInfo.allImageElements.forEach( ie => {
        const de = ie.domElement;
        // check if image is decorative
        if (de.accName.name) {
          if (de.visibility.isVisibleOnScreen) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
          }
        }
      });

      dom_cache.imageInfo.allSVGDomElements.forEach( de => {
        if (de.visibility.isVisibleOnScreen) {
          rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName]);
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
        }
      });

    } // end validate function
  }
];

/* errorRules.js */

/* Constants */
const debug$D = new DebugLogging('Error Rules', false);
debug$D.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: Error Rules
 */

const errorRules = [

  /**
   * @object ERROR_1
   *
   * @desc Identify form controls with invalid values
   *
   */

  { rule_id             : 'ERROR_1',
    last_updated        : '2023-08-25',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.FORMS,
    rule_required       : true,
    wcag_primary_id     : '3.3.1',
    wcag_related_ids    : [],
    target_resources    : ['input[type="checkbox"]',
                           'input[type="date"]',
                           'input[type="file"]',
                           'input[type="radio"]',
                           'input[type="number"]',
                           'input[type="password"]',
                           'input[type="tel"]' ,
                           'input[type="text"]',
                           'input[type="url"]',
                           'select',
                           'textarea',
                           'meter',
                           'progress',
                           'widgets'],
    validate            : function (dom_cache, rule_result) {

      dom_cache.controlInfo.allControlElements.forEach( ce => {

        if (ce.isInteractive) {
          const de = ce.domElement;

          if (de.visibility.isVisibleToAT) {
            if (ce.hasValidityState) {
              if (!ce.isValid) {
                if (ce.hasAriaInvalid) {
                  if (ce.ariaInvalid) {
                    rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.elemName]);
                  }
                  else {
                    rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.elemName]);
                  }
                }
                else {
                  rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName]);
                }
              }
              else {
                 if (ce.hasAriaInvalid) {
                  if (de.ariaInvalid) {
                    rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', [de.elemName]);
                  }
                  else {
                    rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', [de.elemName]);
                  }
                }
                else {
                  if (ce.hasPattern) {
                    rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', [de.elemName]);
                  }
                  else {
                    rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_3', [de.elemName]);
                  }
                }
              }
            }
            else {
              if (ce.hasAriaInvalid) {
                rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_4', [de.elemName]);
              }
            }
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
          }

        }
      });
    } // end validate function
  },

  /**
   * @object ERROR_2
   *
   * @desc Use required attribute on required standard form controls
   *
   */

  { rule_id             : 'ERROR_2',
    last_updated        : '2023-08-25',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.FORMS,
    rule_required       : true,
    wcag_primary_id     : '3.3.3',
    wcag_related_ids    : [],
    target_resources    : ['input[type="text"]', 'input[type="date"]', 'input[type="file"]', 'input[type="number"]', 'input[type="password"]', 'input[type="tel"]' , 'input[type="text"]', 'input[type="url"]', 'select', 'textarea'],
    validate            : function (dom_cache, rule_result) {

        dom_cache.controlInfo.allControlElements.forEach( ce => {

        if (ce.isInteractive) {
          const de = ce.domElement;
          if (ce.hasRequired || ce.hasAriaRequired) {
            if (de.visibility.isVisibleToAT) {
              if (ce.hasRequired && ce.hasAriaRequired && !ce.ariaRequired) {
                rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.elemName]);
              }
              else {
                if (de.hasRequired) {
                  rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.elemName]);
                }
                else {
                  rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', [de.elemName]);
                }
              }
            }
            else {
              rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
            }
          }
        }
      });
    } // end validate function
  },

  /**
   * @object ERROR_3
   *
   * @desc Provide correction suggestions
   *
   */

  { rule_id             : 'ERROR_3',
    last_updated        : '2023-08-25',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.FORMS,
    rule_required       : true,
    wcag_primary_id     : '3.3.3',
    wcag_related_ids    : [],
    target_resources    : ['input[type="text"]', 'input[type="date"]', 'input[type="file"]', 'input[type="number"]', 'input[type="password"]', 'input[type="tel"]' , 'input[type="text"]', 'input[type="url"]', 'select', 'textarea', '[role="textbox"]', '[role="combobox"]', '[role="gridcell"]'],
    validate            : function (dom_cache, rule_result) {

      const suggestionRoles = ['textbox', 'select', 'slider', 'spinbutton'];

        dom_cache.controlInfo.allControlElements.forEach( ce => {
          const de = ce.domElement;

          if (suggestionRoles.includes(de.role)) {
            if (de.visibility.isVisibleToAT) {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
            }
          }
      });

    } // end validate function
  },

  /**
   * @object ERROR_4
   *
   * @desc Provide error prevention
   *
   */

  { rule_id             : 'ERROR_4',
    last_updated        : '2023-08-25',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.FORMS,
    rule_required       : true,
    wcag_primary_id     : '3.3.4',
    wcag_related_ids    : [],
    target_resources    : ['input[type="text"]', 'input[type="date"]', 'input[type="file"]', 'input[type="number"]', 'input[type="password"]', 'input[type="tel"]' , 'input[type="text"]', 'input[type="url"]', 'select', 'textarea', '[role="textbox"]', '[role="combobox"]', '[role="gridcell"]'],
    validate            : function (dom_cache, rule_result) {

      const excludeRoles = ['group',
                            'listitem',
                            'menuitem',
                            'menuitemradio',
                            'menuitemcheckbox',
                            'option',
                            'scrollbar'];

      let count = 0;

      dom_cache.controlInfo.allControlElements.forEach( ce => {
        const de = ce.domElement;

        if (ce.isInteractive && !excludeRoles.includes(de.role)) {
          if (de.visibility.isVisibleToAT) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName]);
            count += 1;
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
          }
        }
      });

      if (count) {
        rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);
      }
    } // end validate function
  }
];

/* frameRules.js */

/* Constants */
const debug$C = new DebugLogging('Frame Rules', false);
debug$C.flag = false;


/*
 * OpenA11y Rules
 * Rule Category: Frame Rules
 */

const frameRules = [

  /**
   * @object FRAME_1
   *
   * @desc  Evaluate frame elements for a title attribute
   */

  { rule_id             : 'FRAME_1',
    last_updated        : '2023-08-24',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.COLOR_CONTENT,
    rule_required       : true,
    wcag_primary_id     : '2.4.1',
    wcag_related_ids    : [],
    target_resources    : ['frame'],
    validate            : function (dom_cache, rule_result) {
      dom_cache.allDomElements.forEach( de => {
        if (de.tagName === 'frame' && de.node.src && !de.hasRole) {
          if (de.visibility.isVisibleToAT) {
            if (de.accName.name) {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.accName.name]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', []);
            }
          }
          else {
           rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
          }
        }
      });
    } // end validate function
  },

  /**
   * @object FRAME_2
   *
   * @desc  Evaluate iframe elements for an accessible name
   */

  { rule_id             : 'FRAME_2',
    last_updated        : '2023-08-24',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.COLOR_CONTENT,
    rule_required       : true,
    wcag_primary_id     : '2.4.1',
    wcag_related_ids    : [],
    target_resources    : ['iframe'],
    validate            : function (dom_cache, rule_result) {
      dom_cache.iframeInfo.allIFrameElements.forEach( ife => {
        const de = ife.domElement;
        if ((de.tagName === 'iframe') &&
             !de.hasRole &&
            de.node.src) {
          if (de.visibility.isVisibleToAT) {
            if (de.accName.name) {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.accName.name]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', []);
            }
          }
          else {
           rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
          }
        }
      });
    } // end validate function
  }

];

/* controlRules.js */

/* Constants */
const debug$B = new DebugLogging('Control Rules', false);
debug$B.flag = false;

const autoFillValues = [
  'name',
  'honorific-prefix',
  'given-name',
  'additional-name',
  'family-name',
  'honorific-suffix',
  'nickname',
  'organization-title',
  'username',
  'new-password',
  'current-password',
  'organization',
  'street-address',
  'address-line1',
  'address-line2',
  'address-line3',
  'address-level4',
  'address-level3',
  'address-level2',
  'address-level1',
  'country',
  'country-name',
  'postal-code',
  'cc-name',
  'cc-given-name',
  'cc-additional-name',
  'cc-family-name',
  'cc-number',
  'cc-exp',
  'cc-exp-month',
  'cc-exp-year',
  'cc-csc',
  'cc-type',
  'transaction-currency',
  'transaction-amount',
  'language',
  'bday',
  'bday-day',
  'bday-month',
  'bday-year',
  'sex',
  'url',
  'photo',
  'tel',
  'tel-country-code',
  'tel-national',
  'tel-area-code',
  'tel-local',
  'tel-local-prefix',
  'tel-local-suffix',
  'tel-extension',
  'email',
  'impp',
];


/*
 * OpenA11y Alliance Rules
 * Rule Category: Form Control Rules
 */

const controlRules = [

/**
 * @object CONTROL_1
 *
 * @desc textarea, select and input elements of type text,
 *       password, checkbox, radio and file must have an
 *       accessible name using label elements
 *
 */

{ rule_id             : 'CONTROL_1',
  last_updated        : '2022-06-10',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.FORMS,
  rule_required       : true,
  wcag_primary_id     : '3.3.2',
  wcag_related_ids    : ['1.3.1', '2.4.6'],
  target_resources    : ['input[type="checkbox"]', 'input[type="date"]', 'input[type="file"]', 'input[type="radio"]', 'input[type="number"]', 'input[type="password"]', 'input[type="tel"]' , 'input[type="text"]', 'input[type="url"]', 'select', 'textarea', 'meter', 'progress'],
  validate            : function (dom_cache, rule_result) {

    dom_cache.controlInfo.allControlElements.forEach(ce => {
      const de = ce.domElement;
      if (!ce.isInputTypeImage) {
        if (de.isLabelable) {
          if (de.visibility.isVisibleToAT) {
            if (de.accName.name) {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.role, de.accName.name]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.role]);
            }
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.role]);
          }
        }
      }
    });
  } // end validation function
},

/**
 * @object CONTROL_2
 *
 * @desc Every input type image must have an accessible name attribute with content
 */

{ rule_id             : 'CONTROL_2',
  last_updated        : '2022-07-07',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.FORMS,
  rule_required       : true,
  wcag_primary_id     : '3.3.2',
  wcag_related_ids    : ['1.3.1', '2.4.6'],
  target_resources    : ['input[type="image"]'],
  validate            : function (dom_cache, rule_result) {
    dom_cache.controlInfo.allControlElements.forEach(ce => {
      const de = ce.domElement;
      if (ce.isInputTypeImage) {
        if (de.visibility.isVisibleToAT) {
          if (de.accName.source !== 'none') {
            if (de.accName.name.length) {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.accName.name]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', []);
            }
          }
          else {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', []);
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
        }
      }
    });
  } // end validation function
 },

/**
 * @object CONTROL_3
 *
 * @desc Groups of radio buttons should be contained in fieldset/legend or have some other group label
 */
{ rule_id             : 'CONTROL_3',
  last_updated        : '2022-06-10',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.FORMS,
  rule_required       : true,
  wcag_primary_id     : '3.3.2',
  wcag_related_ids    : ['1.3.1', '2.4.6'],
  target_resources    : ['input[type="radio"]'],
  validate            : function (dom_cache, rule_result) {
    dom_cache.controlInfo.allControlElements.forEach(ce => {
      const de = ce.domElement;
      if (ce.isInputTypeRadio) {
        if (de.visibility.isVisibleToAT) {
          const gce = ce.getGroupControlElement(); 
          if (gce) {
            const gde = gce.domElement;
            if (gde.tagName === 'fieldset') {
              if (gde.accName.name) {
                rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [gde.accName.name]);
              }
              else {
                rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', []);              
              }
            }
            else {
              if (gde.accName.name) {
                rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', [gde.tagName, gde.role, gde.accName.name]);
              }
              else {
                rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_3', [gde.tagName, gde.role]);              
              }
            }
          }
          else {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', []);              
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
        }
      }
    });
  } // end validate function
},

/**
 * @object CONTROL_4
 *
 * @desc Button elements must have text content and input type button must have a value attribute with content
 */
{ rule_id             : 'CONTROL_4',
  last_updated        : '2022-07-10',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.FORMS,
  rule_required       : false,
  wcag_primary_id     : '3.3.2',
  wcag_related_ids    : ['1.3.1', '2.4.6'],
  target_resources    : ['button'],
  validate            : function (dom_cache, rule_result) {
    dom_cache.controlInfo.allControlElements.forEach(ce => {
      const de = ce.domElement;
      if (de.role === 'button') {
        if (de.visibility.isVisibleOnScreen) {
          if (ce.isInputTypeImage) {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_4', [ce.typeAttr]);              
          }
            else {
            if (de.tagName === 'input') {
              if (de.accName.source === 'value') {
                rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [ce.typeAttr]);
              }
              else {
                rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [ce.typeAttr]);              
              }            
            }
            else {
              if (de.tagName === 'button') {
                if (ce.hasTextContent) {
                  rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', []);
                }
                else {
                  if (ce.hasSVGContent) {
                    rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', []);
                  }
                  else {
                    rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', []);
                  }
                }            
              }
              else {
                if (ce.hasTextContent) {
                  rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_3', [de.tagName]);
                }
                else {
                  if (ce.hasSVGContent) {
                    rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_3', [de.tagName]);
                  }
                  else {
                    rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_3', [de.tagName]);
                  }
                }                          
              }
            }
          }
        }
        else {
          if (de.tagName === 'input' || ce.isInputTypeImage) {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [ce.typeAttr]);
          }
          else {
            if (de.tagName === 'button') {
              rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_2', []);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_3', [de.tagName]);            
            }
          }
        }
      }
    });
  } // end validate function
},

/**
 * @object CONTROL_5
 *
 * @desc Ids on form controls must be unique
 *
 * @note Do not need to test for invisible elements, since getElementById searches all elements int he DOM
 */
{ rule_id             : 'CONTROL_5',
  last_updated        : '2022-06-10',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.FORMS,
  rule_required       : true,
  wcag_primary_id     : '4.1.1',
  wcag_related_ids    : ['3.3.2', '1.3.1', '2.4.6'],
  target_resources    : ['input[type="checkbox"]', 'input[type="radio"]', 'input[type="text"]', 'input[type="password"]', 'input[type="file"]', 'select', 'textarea'],
  validate            : function (dom_cache, rule_result) {
    dom_cache.controlInfo.allControlElements.forEach(ce => {
      const de = ce.domElement;
      if (de.id) {
        const docIndex = de.parentInfo.documentIndex;
        if (dom_cache.idInfo.idCountsByDoc[docIndex][de.id] > 1) {
          if (de.visibility.isVisibleToAT) {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.tagName, de.id]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', [de.tagName, de.id]);
          }
        } else {
          rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.id]);
        }
      }
    });
  } // end validate function
},

/**
 * @object CONTROL_6
 *
 * @desc Label element with a for attribute reference does not reference a form control
 */
{ rule_id             : 'CONTROL_6',
  last_updated        : '2022-07-11',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.FORMS,
  rule_required       : true,
  wcag_primary_id     : '3.3.2',
  wcag_related_ids    : ['1.3.1', '2.4.6'],
  target_resources    : ['label'],
  validate            : function (dom_cache, rule_result) {
    dom_cache.controlInfo.allControlElements.forEach(ce => {
      const de = ce.domElement;
      if (ce.isLabel && ce.labelForAttr) {
        if (de.visibility.isVisibleToAT) {
          if (ce.isLabelForAttrValid) {
            if (ce.labelforTargetUsesAriaLabeling) {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [ce.labelForAttr]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [ce.labelForAttr]);
            }
          }
          else {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [ce.labelForAttr]);
          }
        } else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
        }
      }
    });
  } // end validate function
},

/**
 * @object CONTROL_7
 *
 * @desc Label or legend element must contain text content
 */

{ rule_id             : 'CONTROL_7',
  last_updated        : '2022-06-10',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.FORMS,
  rule_required       : true,
  wcag_primary_id     : '3.3.2',
  wcag_related_ids    : ['1.3.1', '2.4.6'],
  target_resources    : ['label', 'legend'],
  validate            : function (dom_cache, rule_result) {
    dom_cache.controlInfo.allControlElements.forEach(ce => {
      const de = ce.domElement;
      if (ce.isLabel || ce.isLegend) {
        if (de.visibility.isVisibleOnScreen) {
          if (ce.hasTextContent) {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.tagName]);
          }
          else {
            if (ce.hasSVGContent) {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.tagName]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.tagName]);
            }
          }
        } else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName]);
        }
      }
    });  
  } // end validate function
},

/**
 * @object CONTROL 8
 *
 * @desc Fieldset must contain exactly one legend element
 */

{ rule_id             : 'CONTROL_8',
  last_updated        : '2022-06-10',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.FORMS,
  rule_required       : true,
  wcag_primary_id     : '3.3.2',
  wcag_related_ids    : ['1.3.1', '2.4.6', '4.1.1'],
  target_resources    : ['fieldset'],
  validate            : function (dom_cache, rule_result) {
    dom_cache.controlInfo.allControlElements.forEach(ce => {
      const de = ce.domElement;
      let le;
      if (ce.isFieldset) {
        if (de.visibility.isVisibleToAT) {

          const legendCount = ce.legendElements.length;

          switch (legendCount) {
            case 0:
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', []);
              break;

            case 1:
              le = ce.legendElements[0];
              if (le.domElement.visibility.isVisibleToAT) {
                rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', []);
              }
              else {
                rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', []);
              }
              break;
            
            default:
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_3', [legendCount]);
              break;  
          }

        } else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName]);
        }
      }
    });  
  } // end validate function
},

/**
 * @object CONTROL_9
 *
 * @desc Check form controls labeled using the TITLE attribute for accessible name
 */

{ rule_id             : 'CONTROL_9',
  last_updated        : '2022-06-10',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.FORMS,
  rule_required       : true,
  wcag_primary_id     : '3.3.2',
  wcag_related_ids    : ['4.1.1'],
  target_resources    : ['input', 'select', 'textarea'],
  validate            : function (dom_cache, rule_result) {
    dom_cache.controlInfo.allControlElements.forEach(ce => {
      const de = ce.domElement;
      if (de.accName.source === 'title') {
        if (de.visibility.isVisibleToAT) {
          rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.tagName]);
        }
        else {      
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName]);
        }
      }
    });  
  } // end validate function
},

/**
 * @object CONTROL_10
 *
 * @desc Accessible labels must be unique for every textarea,
 *       select and input element of type text, password, radio,
 *       and checkbox on a page
 */

{ rule_id             : 'CONTROL_10',
  last_updated        : '2022-06-10',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.FORMS,
  rule_required       : true,
  wcag_primary_id     : '2.4.6',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['input[type="checkbox"]', 'input[type="radio"]', 'input[type="text"]', 'input[type="password"]', 'input[type="file"]', 'select', 'textarea'],
  validate            : function (dom_cache, rule_result) {

    dom_cache.controlInfo.allControlElements.forEach(ce1 => {
      const de1 = ce1.domElement;
      if (de1.role === 'option') {
        return;
      }
      let count;
      if (de1.ariaInfo.isNameRequired) {
        if (de1.visibility.isVisibleToAT) {
          count = 0;
          dom_cache.controlInfo.allControlElements.forEach(ce2 => {
            const de2 = ce2.domElement;
            if ((ce1 !== ce2) && 
                ((de1.ariaInfo.requiredParents.length === 0) || 
                 (ce1.parentControlElement === ce2.parentControlElement)) &&
                de2.ariaInfo.isNameRequired && 
                de2.visibility.isVisibleToAT) {
              if ((de1.role === de2.role) && 
                  (ce1.nameForComparision === ce2.nameForComparision)) {
                count += 1;
              }
            }
          });
          if (count === 0){
            rule_result.addElementResult(TEST_RESULT.PASS, de1, 'ELEMENT_PASS_1', []);
          } 
          else {
            // Since their ar often duplicate button on pages, when two or more buttons share the same
            // name it should be a manual check
            if (de1.role === 'button') {
              if (de1.hasRole) {
                rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de1, 'ELEMENT_MC_1', [de1.tagName, de1.role]);
              }
              else {
                rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de1, 'ELEMENT_MC_2', [de1.tagName]);
              }
            }
            else {
              if (de1.hasRole) {
                rule_result.addElementResult(TEST_RESULT.FAIL, de1, 'ELEMENT_FAIL_1', [de1.tagName, de1.role]);
              }
              else {
                rule_result.addElementResult(TEST_RESULT.FAIL, de1, 'ELEMENT_FAIL_2', [de1.tagName]);
              }
            }
          }
        }
        else {
          if (de1.hasRole) {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de1, 'ELEMENT_HIDDEN_1', [de1.tagName, de1.role]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de1, 'ELEMENT_HIDDEN_2', [de1.tagName]);
          }
        }
      }
    });  
  } // end validate function
},

/**
 * @object CONTROL_11
 *
 * @desc If there is more than one form on page, input element of type
 *       submit and reset must have unique labels in each form using the value attribute
 *
 */

{ rule_id             : 'CONTROL_11',
  last_updated        : '2022-08-08',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.FORMS,
  rule_required       : true,
  wcag_primary_id     : '2.4.6',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['input[type="submit"]', 'input[type="reset"]','button[type="submit"]', 'button[type="reset"]'],
  validate            : function (dom_cache, rule_result) {

    let de1, de2, count;

    if (dom_cache.controlInfo.allFormElements.length > 1 ) {
      dom_cache.controlInfo.allFormElements.forEach(fe1 => {
        const sb1 = fe1.getButtonControl('submit');
        if (sb1) {
          de1 = sb1.domElement;
          count = 0;
          if (de1.visibility.isVisibleToAT) {
            dom_cache.controlInfo.allFormElements.forEach(fe2 => {
              if (fe1 !== fe2) {
                const sb2 = fe2.getButtonControl('submit');
                if (sb1 && sb2) {
                  de2 = sb2.domElement;
                  if (de2.visibility.isVisibleToAT && 
                      (sb1.nameForComparision === sb2.nameForComparision)) {
                    count += 1;
                  }
                }
              }
            });
            if (count) {
              rule_result.addElementResult(TEST_RESULT.FAIL, de1, 'ELEMENT_FAIL_1', [de1.tagName, de1.typeAttr, de1.accName.name]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.PASS, de1, 'ELEMENT_PASS_1', [de1.tagName, de1.typeAttr, de1.accName.name]);                
            }          
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de1, 'ELEMENT_HIDDEN_1', [de1.tagName, de1.typeAttr]);
          }
        }

        const rb1 = fe1.getButtonControl('reset');
        if (rb1) {
          de1 = rb1.domElement;
          count = 0;
          if (de1.visibility.isVisibleToAT) {
            dom_cache.controlInfo.allFormElements.forEach(fe2 => {
              if (fe1 !== fe2) {
                const rb2 = fe2.getButtonControl('reset');
                if (rb1 && rb2) {
                  de2 = rb2.domElement;
                  if (de2.visibility.isVisibleToAT && 
                      (rb1.nameForComparision === rb2.nameForComparision)) {
                    count += 1;
                  }
                }
              }
            });
            if (count) {
              rule_result.addElementResult(TEST_RESULT.FAIL, de1, 'ELEMENT_FAIL_1', [de1.tagName, de1.typeAttr, de1.accName.name]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.PASS, de1, 'ELEMENT_PASS_1', [de1.tagName, de1.typeAttr, de1.accName.name]);                
            }          
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de1, 'ELEMENT_HIDDEN_1', [de1.tagName, de1.typeAttr]);
          }
        }
      });
    }
  } // end validate function
},

/**
 * @object CONTROL_12
 *
 * @desc Form include a submit button
 *
 */

{ rule_id             : 'CONTROL_12',
  last_updated        : '2023-08-22',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.FORMS,
  rule_required       : true,
  wcag_primary_id     : '3.2.2',
  wcag_related_ids    : [],
  target_resources    : ['form', 'input[type="submit"]', 'input[type="button"]', 'input[type="image"]', 'button', '[role="button"]'],
  validate            : function (dom_cache, rule_result) {

    function getChildButtonDomElements (ce) {
      let buttonDomElements = [];

      ce.childControlElements.forEach( cce => {
        const de = cce.domElement;
        if (de.role === 'button') {
          buttonDomElements.push(de);
        }
        buttonDomElements = buttonDomElements.concat(getChildButtonDomElements(cce));
      });

      return buttonDomElements;
    }

    dom_cache.controlInfo.allFormElements.forEach( fce => {
      const de = fce.domElement;
      if (de.visibility.isVisibleOnScreen) {
        const buttonDomElements = getChildButtonDomElements(fce);
        let submitButtons = 0;
        let otherButtons  = 0;

        buttonDomElements.forEach( b => {
          if (b.tagName === 'input') {
            const type = b.node.getAttribute('type');
            if (type === 'submit') {
              if (b.visibility.isVisibleOnScreen) {
                submitButtons += 1;
                rule_result.addElementResult(TEST_RESULT.PASS, b, 'ELEMENT_PASS_2', []);
              }
              else {
                rule_result.addElementResult(TEST_RESULT.HIDDEN, b, 'ELEMENT_HIDDEN_2', []);
              }
            }
            else {
              if ((type === 'button') || (type === "image")) {
               if (b.visibility.isVisibleOnScreen) {
                  otherButtons += 1;
                  rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, b, 'ELEMENT_MC_3', [type]);
                }
                else {
                  rule_result.addElementResult(TEST_RESULT.HIDDEN, b, 'ELEMENT_HIDDEN_3', [type]);
                }
              }
            }
          }
          else {
            if (b.tagName === 'button') {
             if (b.visibility.isVisibleOnScreen) {
                otherButtons += 1;
                rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, b, 'ELEMENT_MC_4', []);
              }
              else {
                rule_result.addElementResult(TEST_RESULT.HIDDEN, b, 'ELEMENT_HIDDEN_4', []);
              }
            } else {
              if (b.role === 'button') {
               if (b.visibility.isVisibleOnScreen) {
                  otherButtons += 1;
                  rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, b, 'ELEMENT_MC_5', [b.tagName]);
                }
                else {
                  rule_result.addElementResult(TEST_RESULT.HIDDEN, b, 'ELEMENT_HIDDEN_5', [b.tagName]);
                }
              }
            }
          }
        });

        if (submitButtons > 0) {
          rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', []);
        }
        else {
          if (otherButtons > 0) {
            if (otherButtons === 1) {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', [otherButtons]);
            }
          }
          else {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', []);
          }
        }
      }
      else {
        rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
      }
    });

  } // end validation function
},

/**
 * @object CONTROL_13
 *
 * @desc Use names that support autocomplete
 *
 */

{ rule_id             : 'CONTROL_13',
  last_updated        : '2023-09-18',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.FORMS,
  rule_required       : true,
  wcag_primary_id     : '1.3.5',
  wcag_related_ids    : ['3.3.2', '2.4.6'],
  target_resources    : ['input[type="text"]'],
  validate            : function (dom_cache, rule_result) {
    dom_cache.controlInfo.allControlElements.forEach(ce => {
      const de = ce.domElement;
      if (ce.isInputTypeText) {
        if (de.visibility.isVisibleToAT) {
          if (autoFillValues.includes(ce.nameAttr)) {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.elemName, ce.nameAttr]);
          } else {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName]);
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
        }
      }
    });
  } // end validation function
},

/**
 * @object CONTROL_14
 *
 * @desc   HTML form controls must use native properties and states
 */
{ rule_id             : 'CONTROL_14',
  last_updated        : '2023-09-30',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.FORMS,
  rule_required       : true,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : [],
  target_resources    : ["input", "option", "select", "textarea"],
  validate          : function (dom_cache, rule_result) {

    function checkForNativeStates (domElement, ariaAttr, htmlAttr, result='fail') {

      if (domElement.node.hasAttribute(ariaAttr)) {
        if (domElement.visibility.isVisibleToAT) {
          if (result === 'fail') {
            rule_result.addElementResult(TEST_RESULT.FAIL, domElement, 'ELEMENT_FAIL_1', [htmlAttr, ariaAttr, domElement.elemName]);
          } else {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, domElement, 'ELEMENT_MC_1', [htmlAttr, ariaAttr, domElement.elemName]);
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, domElement, 'ELEMENT_HIDDEN_1', [ariaAttr, domElement.elemName]);
        }
      }
    }

    dom_cache.controlInfo.allControlElements.forEach( ce => {
      const de = ce.domElement;
      switch (de.tagName) {
        case 'button':
          checkForNativeStates(de, 'aria-disabled', 'disabled', 'mc');
          break;

        case 'fieldset':
          checkForNativeStates(de, 'aria-disabled', 'disabled', 'mc');
          break;

        case 'input':
          checkForNativeStates(de, 'aria-disabled', 'disabled', 'mc');
          checkForNativeStates(de, 'aria-invalid',  'invalid');
          checkForNativeStates(de, 'aria-required', 'required');
          if ((de.typeAttr === 'checkbox') || (de.typeAttr === 'radio')) {
            checkForNativeStates(de, 'aria-checked', 'checked');
          }
          break;

        case 'option':
          checkForNativeStates(de, 'aria-disabled', 'disabled');
          checkForNativeStates(de, 'aria-selected', 'selected');
          break;

        case 'select':
          checkForNativeStates(de, 'aria-disabled', 'disabled', 'mc');
          checkForNativeStates(de, 'aria-invalid',  'invalid');
          checkForNativeStates(de, 'aria-required', 'required');
          checkForNativeStates(de, 'aria-multiselectable', 'multiple');
          break;

        case 'textarea':
          checkForNativeStates(de, 'aria-disabled', 'disabled', 'mc');
          checkForNativeStates(de, 'aria-invalid',  'invalid');
          checkForNativeStates(de, 'aria-required', 'required');
          break;
      }
    });

  } // end validation function
},

/**
 * @object CONTROL_15
 *
 * @desc   Label in Name
 */

{ rule_id             : 'CONTROL_15',
  last_updated        : '2023-12-01',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.FORMS,
  rule_required       : true,
  wcag_primary_id     : '2.5.3',
  wcag_related_ids    : [],
  target_resources    : ["input", "output", "select", "textarea", "widgets"],
  validate          : function (dom_cache, rule_result) {

    dom_cache.controlInfo.allControlElements.forEach( ce => {
      const de = ce.domElement;

      if (ce.isInteractive) {
        if (de.accName.includesAlt) {
          if (de.visibility.isVisibleToAT) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
          }
        }
        else {
          if (de.accName.includesAriaLabel) {
            if (de.visibility.isVisibleToAT) {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', [de.elemName]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_2', [de.elemName]);
            }
          }
          else {
            if (de.accName.nameIsNotVisible) {
              if (de.visibility.isVisibleToAT) {
                rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_3', [de.elemName]);
              }
              else {
                rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_3', [de.elemName]);
              }
            }

          }
        }
      }

    });

  } // end validation function
},

/**
 * @object CONTROL_16
 *
 * @desc   Redundant Entry
 */

{ rule_id             : 'CONTROL_16',
  last_updated        : '2023-12-01',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.FORMS,
  rule_required       : true,
  wcag_primary_id     : '3.3.7',
  wcag_related_ids    : [],
  target_resources    : ["input", "select", "textarea"],
  validate          : function (dom_cache, rule_result) {

    const includeTags = ['form', 'input', 'select', 'textarea'];

    dom_cache.controlInfo.allControlElements.forEach( ce => {
      const de = ce.domElement;
      if (includeTags.includes(de.tagName)) {
        if (de.visibility.isVisibleToAT) {
          if (autoFillValues.includes(ce.autocomplete)) {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.elemName, ce.autocomplete]);
          } else {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName]);
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
        }
      }
      else {
        if (de.isInteractive && (de.ariaInfo.equiredParents.length === 0)) {
          if (de.visibility.isVisibleToAT) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', [de.elemName]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
          }
        }
      }
   });

  } // end validation function
},

/**
 * @object CONTROL_17
 *
 * @desc   Avoid label encapsulation
 */

{ rule_id             : 'CONTROL_17',
  last_updated        : '2023-12-16',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.FORMS,
  rule_required       : true,
  wcag_primary_id     : '3.3.2',
  wcag_related_ids    : [],
  target_resources    : ["input", 'output', "select", "textarea"],
  validate          : function (dom_cache, rule_result) {

    dom_cache.controlInfo.allControlElements.forEach(ce => {
      const de = ce.domElement;
      if (!ce.isInputTypeImage) {
        if (de.isLabelable) {
          if (de.visibility.isVisibleToAT) {
            if (de.accName.source.indexOf('encapsulation') < 0) {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.elemName, de.accName.name]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.elemName]);
            }
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
          }
        }
      }
    });
  } // end validation function
}



];

/* headingRules.js */

/* Constants */
const debug$A = new DebugLogging('Heading Rules', false);
debug$A.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: Heading Rules
 */

const headingRules = [

  /**
   * @object HEADING_1
   *
   * @desc Page contains at least one H1 element and each H1 element has content
   */
   { rule_id            : 'HEADING_1',
    last_updated        : '2022-05-19',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.HEADINGS,
    rule_required       : false,
    wcag_primary_id     : '2.4.1',
    wcag_related_ids    : ['1.3.1', '2.4.2', '2.4.6', '2.4.10'],
    target_resources    : ['h1'],
    validate            : function (dom_cache, rule_result) {
      let h1Count = 0;

      dom_cache.structureInfo.allHeadingDomElements.forEach( de => {
        if (de.ariaInfo.ariaLevel === 1) {
          if (de.visibility.isVisibleToAT) {
            if (de.accName && de.accName.name.length) {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', []);
              h1Count++;
            }
            else {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', []);
            }
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
          }
        }
      });

      if (h1Count === 0) {
        rule_result.addPageResult(TEST_RESULT.FAIL, dom_cache, 'PAGE_FAIL_1', []);
      }
      else {
        rule_result.addPageResult(TEST_RESULT.PASS, dom_cache, 'PAGE_PASS_1', []);
      }
    } // end validate function
  },

  /**
   * @object HEADING_2
   *
   * @desc If there are main and/or banner landmarks and H1 elements,
   *       H1 elements should be children of main or banner landmarks
   *
   */
  { rule_id             : 'HEADING_2',
    last_updated        : '2022-05-19',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.HEADINGS,
    rule_required       : false,
    wcag_primary_id     : '2.4.6',
    wcag_related_ids    : ['1.3.1', '2.4.1', '2.4.2', '2.4.10'],
    target_resources    : ['h1'],
    validate            : function (dom_cache, rule_result) {

      function checkForAnscetorLandmarkRole(de, role) {
        let ple = de.parentInfo.landmarkElement;
        while (ple) {
           if (ple.domElement.role === role) return true;
           ple = ple.parentLandmarkElement;
        }
        return false;
      }

      dom_cache.structureInfo.allHeadingDomElements.forEach( de => {
        if (de.ariaInfo.ariaLevel === 1) {
          if (de.visibility.isVisibleToAT) {
            if (checkForAnscetorLandmarkRole(de, 'main')) {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', []);
            }
            else {
              if (checkForAnscetorLandmarkRole(de, 'banner')) {
                rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', []);
              }
              else {
                rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', []);
              }
            }
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
          }
        }
      });
    } // end validate function
  },

/**
 * @object HEADING_3
 *
 * @desc Sibling headings of the same level that share the same parent heading should be unique
 *       This rule applies only when there are no main landmarks on the page and at least one
 *       sibling heading
 *
 */
{ rule_id             : 'HEADING_3',
  last_updated        : '2014-11-25',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.HEADINGS,
  rule_required       : false,
  wcag_primary_id     : '2.4.6',
  wcag_related_ids    : ['1.3.1', '2.4.10'],
  target_resources    : ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
  validate            : function (dom_cache, rule_result) {

    const visibleHeadings = [];
    const lastHeadingNamesAtLevel = ['', '', '', '', '', '', ''];
    const headingNameForComparison = [];

    function updateLastHeadingNamesAtLevel (level, name) {
      if ((level > 0) && (level < 7)) {
        lastHeadingNamesAtLevel[level] = name;
        for (let i = level + 1; i < 7; i += 1) {
          // clear lower level names, since a new heading context
          lastHeadingNamesAtLevel[i] = '';
        }
      }
    }

    function getParentHeadingName (level) {
      let name = '';
      while (level > 0) {
        name = lastHeadingNamesAtLevel[level];
        if (name.length) {
          break;
        }
        level -= 1;
      }
      return name;
    }

    dom_cache.structureInfo.allHeadingDomElements.forEach( de => {
      if (de.visibility.isVisibleToAT) {
        visibleHeadings.push(de);
      } else {
        rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName]);
      }
    });


    visibleHeadings.forEach( (de, index) => {

      const name = de.accName.name.toLowerCase();

      // save the name of the last heading of each level
      switch (de.ariaInfo.ariaLevel) {
        case 1:
          updateLastHeadingNamesAtLevel(1, name);
          headingNameForComparison[index] = name;
          break;

        case 2:
          updateLastHeadingNamesAtLevel(2, name);
          headingNameForComparison[index] = getParentHeadingName(1) + name;
          break;

        case 3:
          updateLastHeadingNamesAtLevel(3, name);
          headingNameForComparison[index] = getParentHeadingName(2) + name;
          break;

        case 4:
          updateLastHeadingNamesAtLevel(4, name);
          headingNameForComparison[index] = getParentHeadingName(3) + name;
          break;

        case 5:
          updateLastHeadingNamesAtLevel(5, name);
          headingNameForComparison[index] = getParentHeadingName(4) + name;
          break;

        case 6:
          updateLastHeadingNamesAtLevel(6, name);
          headingNameForComparison[index] = getParentHeadingName(5) + name;
          break;
      }
    });

    visibleHeadings.forEach( (de1, index1) => {
      let duplicate = false;
      visibleHeadings.forEach( (de2, index2) => {
        if ((index1 !== index2) &&
          (headingNameForComparison[index1] ===  headingNameForComparison[index2])) {
          duplicate = true;
        }
      });
      if (duplicate) {
        rule_result.addElementResult(TEST_RESULT.FAIL, de1, 'ELEMENT_FAIL_1', [de1.tagName]);
      }
      else {
        rule_result.addElementResult(TEST_RESULT.PASS, de1, 'ELEMENT_PASS_1', [de1.tagName]);
      }
    });

  } // end validate function
},

/**
 * @object HEADING_5
 *
 * @desc Headings must be properly nested
 *
 */
{ rule_id             : 'HEADING_5',
  last_updated        : '2022-05-20',
  rule_scope          : RULE_SCOPE.PAGE,
  rule_category       : RULE_CATEGORIES.HEADINGS,
  rule_required       : false,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.6', '2.4.10'],
  target_resources    : ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
  validate            : function (dom_cache, rule_result) {
    let nestingErrors = 0;
    let manualChecks = 0;

    if (dom_cache.structureInfo.hasMainLandmark) {
      dom_cache.structureInfo.allLandmarkElements.forEach ( le => {
        nestingErrors += checkHeadingNesting(dom_cache, rule_result, le.childHeadingDomElements, le.domElement.role);
      });

      dom_cache.structureInfo.allHeadingDomElements.forEach ( de => {
        if (!de.parentInfo.landmarkElement) {
          if (de.visibility.isVisibleToAT) {
            if (de.accName.name.length === 0) {
              rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_2', [de.tagName]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.tagName]);
              manualChecks += 1;
            }
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName]);
          }
        }
      });
    } else {
      nestingErrors = checkHeadingNesting(dom_cache, rule_result, dom_cache.structureInfo.allHeadingDomElements);
    }

    if (nestingErrors > 0) {
      rule_result.addPageResult(TEST_RESULT.FAIL, dom_cache, 'PAGE_FAIL_1', [nestingErrors]);
    }
    else {
      if (dom_cache.structureInfo.allHeadingDomElements.length > 0) {
        if (manualChecks > 0) {
          if (manualChecks === 1) {
            rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);
          }
          else {
            rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_2', [manualChecks]);
          }
        } else {
          rule_result.addPageResult(TEST_RESULT.PASS, dom_cache, 'PAGE_PASS_1', []);
        }
      }
    }


  } // end validate function
},

/**
 * @object HEADING_6
 *
 * @desc Headings should not consist only of image content
 *
 */
{ rule_id             : 'HEADING_6',
  last_updated        : '2022-05-20',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.HEADINGS,
  rule_required       : false,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.6', '2.4.10'],
  target_resources    : ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
  validate            : function (dom_cache, rule_result) {
    dom_cache.structureInfo.allHeadingDomElements.forEach( (de) => {
      if (de.visibility.isVisibleToAT) {
        if (de.accName.name.length) {
          if (de.hasTextContent()) {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.tagName]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.tagName]);
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', [de.tagName]);
        }
      }
      else {
        rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName]);
      }
    });
  } // end validate function
},

/**
 * @object HEADING_7
 *
 * @desc First heading in contentinfo, complementary, form, navigation and search landmark must be an h2, except main landmark h1
 */
{ rule_id             : 'HEADING_7',
  last_updated        : '2022-05-20',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.HEADINGS,
  rule_required        : false,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
  target_resources    : ['h2', '[role="contentinfo"]', '[role="complementary"]', '[role="form"]', '[role="navigation"]', '[role="search"]'],
  validate            : function (dom_cache, rule_result) {

    const testRoles = ['contentinfo', 'complementary', 'form', 'navigation', 'search'];

    dom_cache.structureInfo.allLandmarkElements.forEach( le => {
      const role = le.domElement.role;

      if (testRoles.indexOf(role) >= 0) {

        const de = le.getFirstVisibleHeadingDomElement();
        if (de) {
          const ariaLevel = de.ariaInfo.ariaLevel;
          if (ariaLevel === 2) {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [role]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [role, ariaLevel]);
          }
        }
      }
    });
  } // end validate function
}

];

/*
 * Heading Rule Helper Functions
 */

function checkHeadingNesting(dom_cache, rule_result, headingDomElements) {
  const visibleHeadings = [];

  headingDomElements.forEach( de => {
    if (de.visibility.isVisibleToAT) {
      if (de.accName.name.length) {
        visibleHeadings.push(de);
      }
      else {
        rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_2', [de.tagName]);
      }
    }
    else {
      rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName]);
    }
  });

  let nestingErrors = 0;
  let lastLevel = visibleHeadings.length ? visibleHeadings[0].ariaInfo.ariaLevel : 1;
  visibleHeadings.forEach( de => {
    const level = de.ariaInfo.ariaLevel;
    if ( level <= (lastLevel + 1)) {
      rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.tagName]);
      // Only update lastLevel when you get a pass
      lastLevel = level;
    }
    else {
      nestingErrors += 1;
      rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.tagName]);
    }
  });

  return nestingErrors;
}

/* helpRules.js */

/* Constants */
const debug$z = new DebugLogging('Help Rules', false);
debug$z.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: Help Rules
 */

const helpRules = [

  /**
   * @object HELP_1
   *
   * @desc
  */

  { rule_id             : 'HELP_1',
    last_updated        : '2023-12-03',
    rule_scope          : RULE_SCOPE.WEBSITE,
    rule_category       : RULE_CATEGORIES.COLOR_CONTENT,
    rule_required       : true,
    wcag_primary_id     : '3.2.6',
    wcag_related_ids    : [],
    target_resources    : ['page'],
    validate            : function (dom_cache, rule_result) {

      rule_result.addWebsiteResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);

   } // end validation function  }
  }

];

/* htmlRules.js */

/* Constants */
const debug$y = new DebugLogging('HTML Rules', false);
debug$y.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: HTML Rules
 */

const htmlRules = [

  /**
   * @object HTML_1
   *
   * @desc Change marquee elements to use accessible techniques
   */

  { rule_id             : 'HTML_1',
    last_updated        : '2023-09-01',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.COLOR_CONTENT,
    rule_required       : true,
    wcag_primary_id     : '2.3.1',
    wcag_related_ids    : ['2.2.2', '4.1.1'],
    target_resources    : ['marquee'],
    validate          : function (dom_cache, rule_result) {

      dom_cache.allDomElements.forEach( de => {

        if (de.tagName === 'marquee') {
          if (de.visibility.isVisibleToAT) {
             rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', []);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
          }
        }
      });
    } // end validate function
  }
];

/* imageRules.js */

/* Constants */
const debug$x = new DebugLogging('Image Rules', false);
debug$x.flag = false;

/*
 * OpenA11y Alliance Rules
 * Rule Category: Image Rules
 */

const imageRules = [

/**
 * @object IMAGE_1
 *
 * @desc Images must have a source for an accessible name or be identified as decorative
 */

{ rule_id             : 'IMAGE_1',
  last_updated        : '2014-11-28',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.IMAGES,
  rule_required       : true,
  wcag_primary_id     : '1.1.1',
  wcag_related_ids    : [],
  target_resources    : ['img', 'area', '[role="img"]'],
  validate            : function (dom_cache, rule_result) {
    dom_cache.imageInfo.allImageElements.forEach(ie => {
      const de = ie.domElement;
      if (de.visibility.isVisibleToAT) {
        if (de.accName.name.length) {
          rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.tagName, de.accName.source]);
        }
        else {
          if ((de.role === 'none') ||
              (de.role === 'presentation')) {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.tagName, de.role]);
          }
          else {
            if ((de.tagName === 'img') || (de.tagName === 'area')) {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.tagName]);
            } else {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', [de.tagName]);
            }
          }
        }
      }
      else {
        rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName]);
      }
    });
  } // end validation function
},

/**
 * @object IMAGE_2
 *
 * @desc Text alternatives accurately describe images
 */
{ rule_id             : 'IMAGE_2',
  last_updated        : '2015-09-11',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.IMAGES,
  rule_required       : true,
  wcag_primary_id     : '1.1.1',
  wcag_related_ids    : [],
  target_resources    : ['img', '[role="img"]'],
  validate            : function (dom_cache, rule_result) {
    dom_cache.imageInfo.allImageElements.forEach( ie => {
      const de = ie.domElement;
      if (de.accName.name.length > 0) {
        if (de.visibility.isVisibleToAT) {
          if (de.tagName === 'img') {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', [de.tagName]);
          }
        } else {
          if (de.tagName === 'img') {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_2', [de.tagName]);
          }
        }
      }
    });
  } // end validation function
},

/**
 * @object IMAGE_3
 *
 * @desc The file name of the image should not be part of the accessible name content (it must have an image file extension)
 */
{ rule_id             : 'IMAGE_3',
  last_updated        : '2014-11-28',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.IMAGES,
  rule_required       : true,
  wcag_primary_id     : '1.1.1',
  wcag_related_ids    : [],
  target_resources    : ['img', '[role="img"]'],
  validate            : function (dom_cache, rule_result) {
    dom_cache.imageInfo.allImageElements.forEach( ie => {
      if (ie.fileName) {
        const de = ie.domElement;
        if (de.visibility.isVisibleToAT) {
          const name = de.accName.name.toLowerCase();
          if (name.indexOf(ie.fileName) < 0) {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', []);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', []);
          }
        } else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName]);
        }
      }
    });
  } // end validation function
 },

/**
 * @object IMAGE_4_EN (English)
 *
 * @desc If the accessible name contains content, it should be less than 100 characters long, longer descriptions should use long description techniques (English only)
 */
{ rule_id             : 'IMAGE_4_EN',
  last_updated        : '2014-11-28',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.IMAGES,
  rule_required       : true,
  wcag_primary_id     : '1.1.1',
  wcag_related_ids    : [],
  target_resources    : ['img', 'area'],
  validate            : function (dom_cache, rule_result) {
    dom_cache.imageInfo.allImageElements.forEach( ie => {
      const de = ie.domElement;
      if (de.accName.name.length > 0) {
        if (de.visibility.isVisibleToAT) {
          const length = de.accName.name.length;
          if (length <= 100) {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [length]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [length]);
          }
        } else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName]);
        }
      }
    });
  } // end validation function
},

/**
 * @object IMAGE_5
 *
 * @desc Verify the image is decorative
 */
{ rule_id             : 'IMAGE_5',
  last_updated        : '2015-09-11',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.IMAGES,
  rule_required       : true,
  wcag_primary_id     : '1.1.1',
  wcag_related_ids    : [],
  target_resources    : ['img', '[role="img"]'],
  validate            : function (dom_cache, rule_result) {

    dom_cache.imageInfo.allImageElements.forEach( ie => {
      const de = ie.domElement;
      if (de.visibility.isVisibleToAT) {
        if (de.accName.name.length === 0) {
          if (de.tagName === 'img') {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);          
          }
          else {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', [de.tagName]);          
          }
        }
      } else {
        if (de.tagName === 'img') {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_2', [de.tagName]);
        }
      }
    });
  } // end validation function
},

/**
 * @object IMAGE_6
 *
 * @desc For complex images, charts or graphs provide long description
 */
{ rule_id             : 'IMAGE_6',
  last_updated        : '2014-11-28',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.IMAGES,
  rule_required       : true,
  wcag_primary_id     : '1.1.1',
  wcag_related_ids    : [],
  target_resources    : ['img', '[role="img"]'],
  validate            : function (dom_cache, rule_result) {
    dom_cache.imageInfo.allImageElements.forEach( ie => {
      const de   = ie.domElement;
      const accName = de.accName;
      const accDesc = de.accDescription;
      if (accName.name.length > 0) {
        if (de.visibility.isVisibleToAT) {
          if (accDesc.name.length) {
           rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [accDesc.source]);                    
          }
          else {
            if (de.node.hasAttribute('longdesc')) {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', []);                                
            } else {
             rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', []);                                
            }
          }
        } else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
        }
      }
    });
  } // end validation function
},

/**
 * @object IMAGE_7
 *
 * @desc MathML for mathematical expressions
 */
{ rule_id             : 'IMAGE_7',
  last_updated        : '2015-09-15',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.IMAGES,
  rule_required       : true,
  wcag_primary_id     : '1.1.1',
  wcag_related_ids    : [],
  target_resources    : ['img', '[role="img"]'],
  validate            : function (dom_cache, rule_result) {
    dom_cache.imageInfo.allImageElements.forEach( ie => {
      const de   = ie.domElement;
      const accName = de.accName;
      if (accName.name.length > 0) {
        if (de.visibility.isVisibleToAT) {
          if (de.tagName === 'img') {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);                    
          } else {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', [de.tagName]);                    
          }
        } 
        else {
          if (de.tagName === 'img') {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_2', [de.tagName]);                    
          }
        }
      }
    });
  } // end validation function
},

/**
 * @object IMAGE_8
 *
 * @desc Images of text
 */

{ rule_id             : 'IMAGE_8',
  last_updated        : '2023-10-17',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.IMAGES,
  rule_required       : true,
  wcag_primary_id     : '1.4.5',
  wcag_related_ids    : [],
  target_resources    : ['img', 'area', '[role="img"]'],
  validate            : function (dom_cache, rule_result) {
    dom_cache.imageInfo.allImageElements.forEach(ie => {
      const de = ie.domElement;
      if (de.accName.name.length) {
        if (de.visibility.isVisibleToAT) {
          rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.tagName, de.accName.source]);
          }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName]);
        }
      }
    });
  } // end validation function
},
];

/* keyboardRules.js */

/* Constants */
const debug$w = new DebugLogging('Keyboard Rules', false);
debug$w.flag = true;

/* helper functions */


function isNativeTabStop (domElement) {
  return domElement.isLabelable || ['a', 'area', 'button'].includes(domElement.tagName);
}

function isTabStop (domElement) {
  return isNativeTabStop(domElement) ||
         ((typeof domElement.tabIndex === 'number') && (domElement.tabIndex >= 0));
}

/*
 * OpenA11y Rules
 * Rule Category: Keyboard Rules
 */

const keyboardRules = [

  /**
   * @object KEYBOARD_1
   *
   * @desc Widget elements on non-interactive elements or that override the default role of an interactive element
   *       need keyboard event handlers on the widget element or a parent element of the widget
   */

  { rule_id             : 'KEYBOARD_1',
    last_updated        : '2023-06-10',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.KEYBOARD_SUPPORT,
    rule_required       : true,
    wcag_primary_id     : '2.1.1',
    wcag_related_ids    : ['4.1.2'],
    target_resources    : ['widgets'],
    validate            : function (dom_cache, rule_result) {

      dom_cache.allDomElements.forEach( de => {
        if (de.hasRole && de.ariaInfo.isWidget) {
          if (de.visibility.isVisibleToAT) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.role]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.role]);
          }
        }
      });

    } // end validation function

  },
  /**
   * @object KEYBOARD_2
   *
   * @desc Sequential keyboard navigation
   */

  { rule_id             : 'KEYBOARD_2',
    last_updated        : '2023-10-08',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.KEYBOARD_SUPPORT,
    rule_required       : true,
    wcag_primary_id     : '2.4.3',
    wcag_related_ids    : ['2.1.1', '2.1.2', '2.4.7', '3.2.1'],
    target_resources    : ['links', 'controls', 'widgets'],
    validate            : function (dom_cache, rule_result) {

      let mcCount = 0;
      let passCount = 0;

      dom_cache.allDomElements.forEach( de => {
        if (isTabStop(de)) {
          if (de.visibility.isVisibleToAT) {
            if (de.tabIndex > 0 ) {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName]);
              mcCount += 1;
            }
            else {
              if (de.tabIndex === 0) {
                if (isNativeTabStop(de)) {
                  rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.elemName]);
                  passCount += 1;
                }
                else {
                  if (de.hasRole && de.isWidget) {
                    // widget roles with tabindex=0
                    rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_3', [de.elemName]);
                    mcCount += 1;
                  }
                  else {
                    // non-interactive elements with tabindex=0
                    rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_4', [de.elemName]);
                    mcCount += 1;
                  }
                }
              }
              else {
                if (isNativeTabStop(de) && (de.tabindex === 0)) {
                  rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.elemName]);
                  passCount += 1;
                }
              }
            }
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
          }
        }
      });

      if (mcCount) {
        rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);
      }
      else {
        if (passCount) {
          rule_result.addPageResult(TEST_RESULT.PASS, dom_cache, 'PAGE_PASS_1', []);
        }
      }

    } // end validation function
  },

  /**
   * @object KEYBOARD_3
   *
   * @desc No keyboard trap
   */

  { rule_id             : 'KEYBOARD_3',
    last_updated        : '2023-08-17',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.KEYBOARD_SUPPORT,
    rule_required       : true,
    wcag_primary_id     : '2.1.2',
    wcag_related_ids    : ['2.1.1', '2.4.3',  '2.4.7', '3.2.1'],
    target_resources    : ['object'],
    validate            : function (dom_cache, rule_result) {

      dom_cache.mediaInfo.allMediaElements.forEach( mediaElement => {
        const de = mediaElement.domElement;
        if (de.visibility.isVisibleToAT) {
          rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName]);
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
        }
      });
     } // end validation function
  },

  /**
   * @object KEYBOARD_4
   *
   * @desc Check elements with tabindex > 0
   */

  { rule_id             : 'KEYBOARD_4',
    last_updated        : '2023-08-21',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.KEYBOARD_SUPPORT,
    rule_required       : true,
    wcag_primary_id     : '2.1.2',
    wcag_related_ids    : ['2.1.1', '2.4.3',  '2.4.7', '3.2.1'],
    target_resources    : ['object'],
    validate            : function (dom_cache, rule_result) {

      dom_cache.allDomElements.forEach( de => {
        if (isTabStop(de) && de.tabIndex > 0) {
          if (de.visibility.isVisibleToAT) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName, de.tabIndex]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName, de.tabIndex]);
          }
        }
      });
     } // end validation function
  },

  /**
   * @object KEYBOARD_5
   *
   * @desc Focus style
   */

  { rule_id             : 'KEYBOARD_5',
    last_updated        : '2023-08-22',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.KEYBOARD_SUPPORT,
    rule_required       : true,
    wcag_primary_id     : '2.4.7',
    wcag_related_ids    : ['2.1.1', '2.1.2',  '2.4.3', '3.2.1'],
    target_resources    : ['Page', 'a', 'applet', 'area', 'button', 'input', 'object', 'select', 'area', 'widgets'],
    validate            : function (dom_cache, rule_result) {

      let controlCount = 0;
      let hiddenCount = 0;

      dom_cache.allDomElements.forEach( de => {
        if (de.ariaInfo.isWidget) {
          if (de.visibility.isVisibleToAT) {
            controlCount += 1;
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName]);
          }
          else {
            hiddenCount += 1;
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
          }
        }
      });

      if (controlCount > 1) {
        if (hiddenCount == 0) {
          rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', [controlCount]);
        }
        else {
          rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_2', [controlCount, hiddenCount]);
        }
      }

    } // end validation function
  },

  /**
   * @object KEYBOARD_6
   *
   * @desc Select elements with onchange events
   */

  { rule_id             : 'KEYBOARD_6',
    last_updated        : '2023-08-22',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.KEYBOARD_SUPPORT,
    rule_required       : true,
    wcag_primary_id     : '3.2.2',
    wcag_related_ids    : ['2.1.1', '2.1.2',  '2.4.3', '2.4.7'],
    target_resources    : ['select'],
    validate            : function (dom_cache, rule_result) {

     dom_cache.controlInfo.allControlElements.forEach(ce => {
        const de = ce.domElement;
        if (de.tagName === 'select') {
          if (de.visibility.isVisibleToAT) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
          }
        }
      });

    } // end validation function
  },

  /**
   * @object KEYBOARD_7
   *
   * @desc Content on Hover or Focus
   */

  { rule_id             : 'KEYBOARD_7',
    last_updated        : '2023-12-16',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.KEYBOARD_SUPPORT,
    rule_required       : true,
    wcag_primary_id     : '1.4.13',
    wcag_related_ids    : [],
    target_resources    : ['button', 'input', 'links', 'output', 'textarea', 'widgets'],
    validate            : function (dom_cache, rule_result) {

      if (dom_cache.hasScripting) {
        rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);
      }

    } // end validation function
  },

  /**
   * @object KEYBOARD_8
   *
   * @desc Focus Order
   */

  { rule_id             : 'KEYBOARD_8',
    last_updated        : '2023-12-16',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.KEYBOARD_SUPPORT,
    rule_required       : true,
    wcag_primary_id     : '2.4.3',
    wcag_related_ids    : [],
    target_resources    : ['button', 'input', 'links', 'output', 'textarea', 'widgets'],
    validate            : function (dom_cache, rule_result) {

      rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);

    } // end validation function
  },

  /**
   * @object KEYBOARD_9
   *
   * @desc Focus Not Obscured (Minimum)
   */

  { rule_id             : 'KEYBOARD_9',
    last_updated        : '2023-12-16',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.KEYBOARD_SUPPORT,
    rule_required       : true,
    wcag_primary_id     : '2.4.11',
    wcag_related_ids    : [],
    target_resources    : ['button', 'input', 'links', 'output', 'textarea', 'widgets'],
    validate            : function (dom_cache, rule_result) {

      rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);

    } // end validation function
  }

];

/* landmarkRules.js */

/* Constants */
const debug$v = new DebugLogging('Landmark Rules', false);
debug$v.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: Landmark Rules
 */

const landmarkRules = [

  /**
   * @object LANDMARK_1
   *
   * @desc Each page should have at least one main landmark
   */

  { rule_id             : 'LANDMARK_1',
    last_updated        : '2022-05-03',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.LANDMARKS,
    rule_required       : true,
    wcag_primary_id     : '2.4.1',
    wcag_related_ids    : ['1.3.1', '2.4.6'],
    target_resources    : ['main', '[role="main"]'],
    validate            : function (dom_cache, rule_result) {
      validateAtLeastOne(dom_cache, rule_result, 'main', true);
    } // end validate function
  },

  /**
   * @object LANDMARK_2
   *
   * @desc All rendered content should be contained in a landmark
   */
  { rule_id             : 'LANDMARK_2',
    last_updated        : '2022-05-06',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.LANDMARKS,
    rule_required       : true,
    wcag_primary_id     : '1.3.1',
    wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
    target_resources    : ['Page', 'all'],
    validate            : function (dom_cache, rule_result) {
      dom_cache.allDomElements.forEach ( de => {
        const parentLandmark = de.parentInfo.landmarkElement;
        const isLandmark = de.isLandmark;
        if (!de.isInDialog && (de.hasContent || de.mayHaveContent)) {
          if (de.visibility.isVisibleToAT) {
            if ( isLandmark || parentLandmark ) {
              const role = isLandmark ? de.role : parentLandmark.domElement.role;
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.tagName, role]);
            }
            else {
              if (de.mayHaveContent) {
                rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.tagName]);
              }
              else {
                rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.tagName]);
              }
            }
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName]);
          }
        }
      });
    } // end validate function
  },

  /**
   * @object LANDMARK_3
   *
   * @desc Each page within a website should have at least one navigation landmark
   *
   */
  { rule_id             : 'LANDMARK_3',
    last_updated        : '2022-05-06',
    rule_scope          : RULE_SCOPE.WEBSITE,
    rule_category       : RULE_CATEGORIES.LANDMARKS,
    rule_required       : true,
    wcag_primary_id     : '2.4.1',
    wcag_related_ids    : ['1.3.1', '2.4.6'],
    target_resources    : ['nav', '[role="navigation"]'],
    validate            : function (dom_cache, rule_result) {

      const MINIMUM_LINKS = 4;
      const allLandmarkElements = dom_cache.structureInfo.allLandmarkElements;
      let navigationCount = 0;

      allLandmarkElements.forEach( le => {
        const de = le.domElement;
        if (de.role === 'navigation') {
          if (de.visibility.isVisibleToAT) {
            if (de.hasRole) {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.tagName]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', []);
            }
            navigationCount += 1;
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName]);
          }
        }
      });

      if (navigationCount === 0) {
        // See if there are any lists of links greater than the MINIMUM_LINKS
        const allListElements = dom_cache.listInfo.allListElements;
        let listWithLinksCount = 0;
        allListElements.forEach ( le => {
          const de = le.domElement;
          if (le.linkCount > MINIMUM_LINKS) {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.tag_name, le.linkCount]);
            listWithLinksCount += 1;
          }
        });

        if (listWithLinksCount > 0) {
          rule_result.addWebsiteResult(TEST_RESULT.FAIL, dom_cache, 'WEBSITE_FAIL_1', []);
        }
      } else {
        if (navigationCount === 1) {
          rule_result.addWebsiteResult(TEST_RESULT.PASS, dom_cache, 'WEBSITE_PASS_1', []);
        } else {
          rule_result.addWebsiteResult(TEST_RESULT.PASS, dom_cache, 'WEBSITE_PASS_2', [navigationCount]);
        }
      }
    } // end validate function
  },

  /**
   * @object LANDMARK_4
   *
   * @desc Each page may have at least one banner landmark
   *
   */

  { rule_id             : 'LANDMARK_4',
    last_updated        : '2022-05-06',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.LANDMARKS,
    rule_required       : true,
    wcag_primary_id     : '2.4.1',
    wcag_related_ids    : ['1.3.1', '2.4.6'],
    target_resources    : ['header', '[role="banner"]'],
    validate            : function (dom_cache, rule_result) {
      validateAtLeastOne(dom_cache, rule_result, 'banner', false);
    } // end validate function
  },

  /**
   * @object LANDMARK_5
   *
   * @desc Each page should not have more than one banner landmark
   *
   */

  { rule_id             : 'LANDMARK_5',
    last_updated        : '2022-05-06',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.LANDMARKS,
    rule_required       : true,
    wcag_primary_id     : '2.4.1',
    wcag_related_ids    : ['1.3.1', '2.4.6'],
    target_resources    : ['header', '[role="banner"]'],
    validate            : function (dom_cache, rule_result) {
      validateNoMoreThanOne(dom_cache, rule_result, 'banner');
    } // end validate function
  },

  /**
   * @object LANDMARK_6
   *
   * @desc Each page may have one contentinfo landmark
   *
   */
  { rule_id             : 'LANDMARK_6',
    last_updated        : '2022-05-06',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.LANDMARKS,
    rule_required       : true,
    wcag_primary_id     : '2.4.1',
    wcag_related_ids    : ['1.3.1', '2.4.6'],
    target_resources    : ['footer', '[role="contentinfo"]'],
    validate            : function (dom_cache, rule_result) {
      validateAtLeastOne(dom_cache, rule_result, 'contentinfo', false);
   } // end validate function
  },

  /**
   * @object LANDMARK_7
   *
   * @desc Each page may have only one contentinfo landmark
   *
   */
  { rule_id             : 'LANDMARK_7',
    last_updated        : '2022-05-06',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.LANDMARKS,
    rule_required       : true,
    wcag_primary_id     : '2.4.1',
    wcag_related_ids    : ['1.3.1', '2.4.6'],
    target_resources    : ['footer', '[role="contentinfo"]'],
    validate            : function (dom_cache, rule_result) {
      validateNoMoreThanOne(dom_cache, rule_result, 'contentinfo');
    } // end validate function
  },

  /**
   * @object LANDMARK_8
   *
   * @desc banner landmark must be a top level landmark
   */
  { rule_id             : 'LANDMARK_8',
    last_updated        : '2022-05-06',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.LANDMARKS,
    required            : true,
    wcag_primary_id     : '1.3.1',
    wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
    target_resources    : ['header', '[role="banner"]'],
    validate            : function (dom_cache, rule_result) {
      validateTopLevelLandmark(dom_cache, rule_result, 'banner');
    } // end validate function
  },

  /**
   * @object LANDMARK_9
   *
   * @desc Banner landmark should only contain only region, navigation and search landmarks
   */
  { rule_id             : 'LANDMARK_9',
    last_updated        : '2022-05-06',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.LANDMARKS,
    rule_required       : true,
    wcag_primary_id     : '1.3.1',
    wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
    target_resources    : ['header', '[role="banner"]'],
    validate            : function (dom_cache, rule_result) {
     validateLandmarkDescendants(dom_cache, rule_result, 'banner', ['navigation', 'region', 'search']);
    } // end validate function
  },

  /**
   * @object LANDMARK_10
   *
   * @desc Navigation landmark should only contain only region and search landmarks
   */
  { rule_id             : 'LANDMARK_10',
    last_updated        : '2022-05-06',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.LANDMARKS,
    rule_required       : true,
    wcag_primary_id     : '1.3.1',
    wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
    target_resources    : ['nav', '[role="naviation"]'],
    validate            : function (dom_cache, rule_result) {
      validateLandmarkDescendants(dom_cache, rule_result, 'navigation', ['region', 'search']);
    } // end validate function
  },

  /**
   * @object LANDMARK_11
   *
   * @desc Main landmark must be a top level lanmark
   */
  { rule_id             : 'LANDMARK_11',
    last_updated        : '2022-05-06',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.LANDMARKS,
    rule_required       : true,
    wcag_primary_id     : '1.3.1',
    wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
    target_resources    : ['main', '[role="main"]'],
    validate            : function (dom_cache, rule_result) {
      validateTopLevelLandmark(dom_cache, rule_result, 'main');
    } // end validate function
  },

  /**
   * @object LANDMARK_12
   *
   * @desc Contentinfo landmark must be a top level landmark
   */
  { rule_id             : 'LANDMARK_12',
    last_updated        : '2022-05-06',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.LANDMARKS,
    rule_required       : true,
    wcag_primary_id     : '1.3.1',
    wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
    target_resources    : ['footer', '[role="contentinfo"]'],
    validate            : function (dom_cache, rule_result) {
      validateTopLevelLandmark(dom_cache, rule_result, 'contentinfo');
    } // end validate function
  },

  /**
   * @object LANDMARK_13
   *
   * @desc Contentinfo landmark should only contain only search, region and navigation landmarks
   */
  { rule_id             : 'LANDMARK_13',
    last_updated        : '2022-05-06',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.LANDMARKS,
    rule_required       : true,
    wcag_primary_id     : '1.3.1',
    wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
    target_resources    : ['header', '[role="banner"]'],
    validate            : function (dom_cache, rule_result) {
      validateLandmarkDescendants(dom_cache, rule_result, 'contentinfo', ['navigation', 'region', 'search']);
    } // end validate function
  },

  /**
   * @object LANDMARK_14
   *
   * @desc Search landmark should only contain only region landmarks
   */
  { rule_id             : 'LANDMARK_14',
    last_updated        : '2022-05-06',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.LANDMARKS,
    rule_required       : true,
    wcag_primary_id     : '1.3.1',
    wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
    target_resources    : ['[role="search"]'],
    validate            : function (dom_cache, rule_result) {
      validateLandmarkDescendants(dom_cache, rule_result, 'search', ['region']);
    } // end validate function
  },

  /**
   * @object LANDMARK_15
   *
   * @desc Form landmark should only contain only region landmarks
   */
  { rule_id             : 'LANDMARK_15',
    last_updated        : '2022-05-06',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.LANDMARKS,
    rule_required       : true,
    wcag_primary_id     : '1.3.1',
    wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
    target_resources    : ['[role="form"]'],
    validate            : function (dom_cache, rule_result) {
      validateLandmarkDescendants(dom_cache, rule_result, 'form', ['region']);
    } // end validate function
  },

  /**
   * @object LANDMARK_16
   *
   * @desc Elements with the role=region must have accessible name to be considered a landmark
   */
  { rule_id             : 'LANDMARK_16',
    last_updated        : '2022-05-06',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.LANDMARKS,
    rule_required       : true,
    wcag_primary_id     : '1.3.1',
    wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
    target_resources    : ['[role="region"]'],
    validate            : function (dom_cache, rule_result) {
      dom_cache.allDomElements.forEach( de => {
        if (de.hasRole && de.role === 'region') {
          if (de.visibility.isVisibleToAT) {
            if (de.accName.name.length) {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.tagName]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.tagName]);
            }
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName]);
          }
        }
      });
    } // end validate function
  },

  /**
   * @object LANDMARK_17
   *
   * @desc Landmark must have unique labels
   */

  { rule_id             : 'LANDMARK_17',
    last_updated        : '2022-05-06',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.LANDMARKS,
    rule_required       : true,
    wcag_primary_id     : '1.3.1',
    wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
    target_resources    : ['main', 'nav', 'header', 'footer', 'section', 'aside', '[role="application"]','[role="banner"]', '[role="complementary"]','[role="contentinfo"]','[role="form"]','[role="main"]','[role="navigation"]','[role="region"]','[role="search"]'],
    validate            : function (dom_cache, rule_result) {
      const landmarkRoles = ['banner', 'complementary', 'contentinfo', 'form', 'main', 'navigation', 'region', 'search'];
      landmarkRoles.forEach( role => {
        validateUniqueAccessibleNames(dom_cache, rule_result, role);
      });
    } // end validate function
  },

  /**
   * @object LANDMARK_18
   *
   * @desc Landmark must identify content regions
   */

  { rule_id             : 'LANDMARK_18',
    last_updated        : '2015-08-07',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.LANDMARKS,
    rule_required       : true,
    wcag_primary_id     : '1.3.1',
    wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
    target_resources    : ['main', 'nav', 'header', 'footer', 'section', 'aside', '[role="application"]','[role="banner"]', '[role="complementary"]','[role="contentinfo"]','[role="form"]','[role="main"]','[role="navigation"]','[role="region"]','[role="search"]'],
    validate            : function (dom_cache, rule_result) {
      const allLandmarkElements = dom_cache.structureInfo.allLandmarkElements;
      allLandmarkElements.forEach( le => {
        const de = le.domElement;
        if (de.visibility.isVisibleToAT) {
          rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.role, de.accName.name]);
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.role]);
        }
      });
    } // end validate function
  },

  /**
   * @object LANDMARK_19
   *
   * @desc Complementary landmark must be a top level landmark
   */
  { rule_id             : 'LANDMARK_19',
    last_updated        : '2022-05-06',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.LANDMARKS,
    rule_required       : false,
    wcag_primary_id     : '1.3.1',
    wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
    target_resources    : ['aside', '[role="complementary"]'],
    validate            : function (dom_cache, rule_result) {
      validateTopLevelLandmark(dom_cache, rule_result, 'complementary');
    } // end validate function
  }
];

/* Helper Functions for Landmarks */


/**
 * @function validateTopLevelLandmark
 *
 * @desc Evaluate if a landmark role is top level (e.g. not contained in other landmarks)
 *
 * @param  {DOMCache}    dom_cache   - DOMCache object being used in the evaluation
 * @param  {RuleResult}  rule_result - RuleResult object
 * @param  {String}      role        - Landmark role to check
 */

function validateTopLevelLandmark(dom_cache, rule_result, role) {

  const allLandmarkElements = dom_cache.structureInfo.allLandmarkElements;

  allLandmarkElements.forEach( le => {
    const de = le.domElement;
    if (de.role === role) {
      if (de.visibility.isVisibleToAT) {

        if (de.parentInfo.landmarkElement === null) {
          if (de.hasRole) {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.tagName]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_3', []);
          }
        }
        else {
          // Check to see if the two elements with the role share the same DOM (e.g. iframe check)
          // If in a different DOM, allow it to be the top level in that DOM
          const de1 = de.parentInfo.landmarkElement.domElement;

          if (de1 && (de.parentInfo.document !== de1.parentInfo.document)) {
            if (de.hasRole) {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', [de.tagName]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_4', []);
            }
          }
          else {
            // Fails if they are in the same DOM
            const landmarkRole = de.parentInfo.landmarkElement.domElement.role;
            if (de.hasRole) {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.tagName, landmarkRole]);
            } else  {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', [landmarkRole]);
            }
          }
        }
      }
      else {
        if (de.hasRole) {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName]);
        } else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_2', []);
        }
      }
    }
  });
}

/**
 * @function validateAtLeastOne
 *
 * @desc Evaluate if the the landmark region role exists in the page.
 *       The required parameter determines if the landamrk is missing whether
 *       a failure or manual check is required
 *
 * @param  {DOMCache}    dom_cache    - DOMCache object being used in the evaluation
 * @param  {RuleResult}  rule_result  - RuleResult object
 * @param  {String}      role         - Landmark role
 * @oaram  {Boolean}     roleRequired - Is the landamrk region role required
 */

function validateAtLeastOne(dom_cache, rule_result, role, roleRequired) {
  const allLandmarkElements = dom_cache.structureInfo.allLandmarkElements;
  let roleCount = 0;

  allLandmarkElements.forEach( le => {
    const de = le.domElement;
    if (de.role === role) {
      if (de.visibility.isVisibleToAT) {
        if (de.hasRole) {
          rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.tagName]);
        }
        else {
          rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', []);
        }
        roleCount += 1;
      }
      else {
        if (de.hasRole) {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName]);
        } else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_2', []);
        }
      }
    }
  });

  if (roleCount === 0) {
    if (roleRequired) {
      rule_result.addPageResult(TEST_RESULT.FAIL, dom_cache, 'PAGE_FAIL_1', []);
    }
    else {
      rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);
    }
  } else {
    if (roleCount === 1) {
      rule_result.addPageResult(TEST_RESULT.PASS, dom_cache, 'PAGE_PASS_1', []);
    } else {
      rule_result.addPageResult(TEST_RESULT.PASS, dom_cache, 'PAGE_PASS_2', [roleCount]);
    }
  }
}


/**
 * @function validateNoMoreThanOne
 *
 * @desc Evaluate if the the landmark region role exists more than once on the page.
 *
 * @param  {DOMCache}    dom_cache    - DOMCache object being used in the evaluation
 * @param  {RuleResult}  rule_result  - RuleResult object
 * @param  {String}      role         - Landmark region role
 */

function validateNoMoreThanOne(dom_cache, rule_result, role) {

  const landmarkElementsByDoc = dom_cache.structureInfo.landmarkElementsByDoc;
  let totalRoleCount = 0;
  let anyMoreThanOne = false;

  landmarkElementsByDoc.forEach( les => {
    let visibleDomElements = [];
    if (Array.isArray(les)) {
      les.forEach( le => {
        const de = le.domElement;
        if (de.role === role) {
          if (de.visibility.isVisibleToAT) {
            visibleDomElements.push(de);
            totalRoleCount += 1;
          }
          else {
            if (de.hasRole) {
              rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName]);
            } else {
              rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_2', []);
            }
          }
        }
      });

      visibleDomElements.forEach( de => {
        if (visibleDomElements.length === 1) {
          if (de.hasRole) {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.tagName]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', []);
          }
        } else {
          anyMoreThanOne = true;
          if (de.hasRole) {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.tagName]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', []);
          }
        }
      });
    }
  });

  if (totalRoleCount > 0) {
    if (anyMoreThanOne) {
      rule_result.addPageResult(TEST_RESULT.FAIL, dom_cache, 'PAGE_FAIL_1', [totalRoleCount]);
    }
    else {
      rule_result.addPageResult(TEST_RESULT.PASS, dom_cache, 'PAGE_PASS_1', []);
    }
  }
}

/**
 * @function validateLandmarkDescendants
 *
 * @desc Evaluate if the descendant landmark roles are a certain type
 *
 * @param  {DOMCache}    dom_cache             - DOMCache object being used in the evaluation
 * @param  {RuleResult}  rule_result           - RuleResult object
 * @param  {String}      role                  - Landmark region role
 * @param  {Array}       allowedLandmarkRoles  - An array of allowed descendant roles
 */

function validateLandmarkDescendants(dom_cache, rule_result, role, allowedLandmarkRoles) {

  function checkForDescendantLandmarks(landmarkElement) {
    const result = {
      failedCount: 0,
      failedRoles : [],
      passedCount: 0,
      passedRoles : []
    };

    landmarkElement.descendantLandmarkElements.forEach( le => {
      const de   = le.domElement;
      const role = de.role;

      if (de.visibility.isVisibleToAT) {
        if (allowedLandmarkRoles.includes(role)) {
          rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [role]);
          result.passedCount += 1;
          result.passedRoles.push(role);
        }
        else {
          rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [role]);
          result.failedCount += 1;
          result.failedRoles.push(role);
        }
      }
      else {
        rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_2', [de.tagName, role]);
      }
    });

    return result;
  }

  const allLandmarkElements = dom_cache.structureInfo.allLandmarkElements;
  let visibleLandmarkElements = [];

  allLandmarkElements.forEach( le => {
    const de = le.domElement;
    if (de.role === role) {
      if (de.visibility.isVisibleToAT) {
        visibleLandmarkElements.push(le);
      }
      else {
        rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName]);
      }
    }
  });

  visibleLandmarkElements.forEach( le => {
    const de = le.domElement;
    const result = checkForDescendantLandmarks(le);
    const failedRoles = result.failedRoles.join(', ');
    const passedRoles = result.passedRoles.join(', ');

    if (result.failedCount === 1) {
      rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [failedRoles]);
    } else {
      if (result.failedCount > 1) {
        rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', [result.failedCount, failedRoles]);
      }
      else {
        if (result.passedCount === 0) {
          rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', []);
        }
        else {
          if (result.passedCount === 1) {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_3', [passedRoles]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_4', [result.passedCount, passedRoles]);
          }
        }
      }
    }
  });
}

/**
 * @function validateUniqueAccessibleNames
 *
 * @desc Evaluate if the accessible names for the landmark role are unique.
 *
 * @param  {DOMCache}    dom_cache    - DOMCache object being used in the evaluation
 * @param  {RuleResult}  rule_result  - RuleResult object
 * @param  {String}      role         - Landmark region role
 */

function validateUniqueAccessibleNames(dom_cache, rule_result, role) {

  const allLandmarkElements = dom_cache.structureInfo.allLandmarkElements;
  let visibleDomElements = [];

  allLandmarkElements.forEach( le => {
    const de = le.domElement;
    if (de.role === role) {
      if (de.visibility.isVisibleToAT) {
        visibleDomElements.push(de);
      }
      else {
        rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName, de.role]);
      }
    }
  });

  if (visibleDomElements.length > 1) {
    visibleDomElements.forEach( (de1, index1) => {
      let duplicate = false;
      visibleDomElements.forEach( (de2, index2) => {
        if ((index1 !== index2) &&
            (accNamesTheSame(de1.accName, de2.accName))) {
          duplicate = true;
        }
      });
      if (duplicate) {
        rule_result.addElementResult(TEST_RESULT.FAIL, de1, 'ELEMENT_FAIL_1', [de1.accName.name, role]);
      }
      else {
        rule_result.addElementResult(TEST_RESULT.PASS, de1, 'ELEMENT_PASS_1', [role]);
      }
    });
  }
}

/* languageRules.js */

/* Constants */
const debug$u = new DebugLogging('Language Rules', false);
debug$u.flag = false;

const LANGUAGE_CODES = {
  subtags : "aa ab ae af ak am an ar as av ay az ba be bg bh bi bm bn bo br bs ca ce ch co cr cs cu cv cy da de dv dz ee el en eo es et eu fa ff fi fj fo fr fy ga gd gl gn gu gv ha he hi ho hr ht hu hy hz ia id ie ig ii ik in io is it iu iw ja ji jv jw ka kg ki kj kk kl km kn ko kr ks ku kv kw ky la lb lg li ln lo lt lu lv mg mh mi mk ml mn mo mr ms mt my na nb nd ne ng nl nn no nr nv ny oc oj om or os pa pi pl ps pt qu rm rn ro ru rw sa sc sd se sg sh si sk sl sm sn so sq sr ss st su sv sw ta te tg th ti tk tl tn to tr ts tt tw ty ug uk ur uz ve vi vo wa wo xh yi yo za zh zu aaa aab aac aad aae aaf aag aah aai aak aal aam aan aao aap aaq aas aat aau aav aaw aax aaz aba abb abc abd abe abf abg abh abi abj abl abm abn abo abp abq abr abs abt abu abv abw abx aby abz aca acb acd ace acf ach aci ack acl acm acn acp acq acr acs act acu acv acw acx acy acz ada adb add ade adf adg adh adi adj adl adn ado adp adq adr ads adt adu adw adx ady adz aea aeb aec aed aee aek ael aem aen aeq aer aes aeu aew aey aez afa afb afd afe afg afh afi afk afn afo afp afs aft afu afz aga agb agc agd age agf agg agh agi agj agk agl agm agn ago agp agq agr ags agt agu agv agw agx agy agz aha ahb ahg ahh ahi ahk ahl ahm ahn aho ahp ahr ahs aht aia aib aic aid aie aif aig aih aii aij aik ail aim ain aio aip aiq air ais ait aiw aix aiy aja ajg aji ajn ajp ajt aju ajw ajz akb akc akd ake akf akg akh aki akj akk akl akm ako akp akq akr aks akt aku akv akw akx aky akz ala alc ald ale alf alg alh ali alj alk all alm aln alo alp alq alr als alt alu alv alw alx aly alz ama amb amc ame amf amg ami amj amk aml amm amn amo amp amq amr ams amt amu amv amw amx amy amz ana anb anc and ane anf ang anh ani anj ank anl anm ann ano anp anq anr ans ant anu anv anw anx any anz aoa aob aoc aod aoe aof aog aoh aoi aoj aok aol aom aon aor aos aot aou aox aoz apa apb apc apd ape apf apg aph api apj apk apl apm apn apo app apq apr aps apt apu apv apw apx apy apz aqa aqc aqd aqg aql aqm aqn aqp aqr aqz arb arc ard are arh ari arj ark arl arn aro arp arq arr ars art aru arv arw arx ary arz asa asb asc asd ase asf asg ash asi asj ask asl asn aso asp asq asr ass ast asu asv asw asx asy asz ata atb atc atd ate atg ath ati atj atk atl atm atn ato atp atq atr ats att atu atv atw atx aty atz aua aub auc aud aue auf aug auh aui auj auk aul aum aun auo aup auq aur aus aut auu auw aux auy auz avb avd avi avk avl avm avn avo avs avt avu avv awa awb awc awd awe awg awh awi awk awm awn awo awr aws awt awu awv aww awx awy axb axe axg axk axl axm axx aya ayb ayc ayd aye ayg ayh ayi ayk ayl ayn ayo ayp ayq ayr ays ayt ayu ayx ayy ayz aza azb azc azd azg azj azm azn azo azt azz baa bab bac bad bae baf bag bah bai baj bal ban bao bap bar bas bat bau bav baw bax bay baz bba bbb bbc bbd bbe bbf bbg bbh bbi bbj bbk bbl bbm bbn bbo bbp bbq bbr bbs bbt bbu bbv bbw bbx bby bbz bca bcb bcc bcd bce bcf bcg bch bci bcj bck bcl bcm bcn bco bcp bcq bcr bcs bct bcu bcv bcw bcy bcz bda bdb bdc bdd bde bdf bdg bdh bdi bdj bdk bdl bdm bdn bdo bdp bdq bdr bds bdt bdu bdv bdw bdx bdy bdz bea beb bec bed bee bef beg beh bei bej bek bem beo bep beq ber bes bet beu bev bew bex bey bez bfa bfb bfc bfd bfe bff bfg bfh bfi bfj bfk bfl bfm bfn bfo bfp bfq bfr bfs bft bfu bfw bfx bfy bfz bga bgb bgc bgd bge bgf bgg bgi bgj bgk bgl bgm bgn bgo bgp bgq bgr bgs bgt bgu bgv bgw bgx bgy bgz bha bhb bhc bhd bhe bhf bhg bhh bhi bhj bhk bhl bhm bhn bho bhp bhq bhr bhs bht bhu bhv bhw bhx bhy bhz bia bib bic bid bie bif big bij bik bil bim bin bio bip biq bir bit biu biv biw bix biy biz bja bjb bjc bjd bje bjf bjg bjh bji bjj bjk bjl bjm bjn bjo bjp bjq bjr bjs bjt bju bjv bjw bjx bjy bjz bka bkb bkc bkd bkf bkg bkh bki bkj bkk bkl bkm bkn bko bkp bkq bkr bks bkt bku bkv bkw bkx bky bkz bla blb blc bld ble blf blg blh bli blj blk bll blm bln blo blp blq blr bls blt blv blw blx bly blz bma bmb bmc bmd bme bmf bmg bmh bmi bmj bmk bml bmm bmn bmo bmp bmq bmr bms bmt bmu bmv bmw bmx bmy bmz bna bnb bnc bnd bne bnf bng bni bnj bnk bnl bnm bnn bno bnp bnq bnr bns bnt bnu bnv bnw bnx bny bnz boa bob boe bof bog boh boi boj bok bol bom bon boo bop boq bor bot bou bov bow box boy boz bpa bpb bpd bpg bph bpi bpj bpk bpl bpm bpn bpo bpp bpq bpr bps bpt bpu bpv bpw bpx bpy bpz bqa bqb bqc bqd bqf bqg bqh bqi bqj bqk bql bqm bqn bqo bqp bqq bqr bqs bqt bqu bqv bqw bqx bqy bqz bra brb brc brd brf brg brh bri brj brk brl brm brn bro brp brq brr brs brt bru brv brw brx bry brz bsa bsb bsc bse bsf bsg bsh bsi bsj bsk bsl bsm bsn bso bsp bsq bsr bss bst bsu bsv bsw bsx bsy bta btb btc btd bte btf btg bth bti btj btk btl btm btn bto btp btq btr bts btt btu btv btw btx bty btz bua bub buc bud bue buf bug buh bui buj buk bum bun buo bup buq bus but buu buv buw bux buy buz bva bvb bvc bvd bve bvf bvg bvh bvi bvj bvk bvl bvm bvn bvo bvp bvq bvr bvt bvu bvv bvw bvx bvy bvz bwa bwb bwc bwd bwe bwf bwg bwh bwi bwj bwk bwl bwm bwn bwo bwp bwq bwr bws bwt bwu bww bwx bwy bwz bxa bxb bxc bxd bxe bxf bxg bxh bxi bxj bxk bxl bxm bxn bxo bxp bxq bxr bxs bxu bxv bxw bxx bxz bya byb byc byd bye byf byg byh byi byj byk byl bym byn byo byp byq byr bys byt byv byw byx byy byz bza bzb bzc bzd bze bzf bzg bzh bzi bzj bzk bzl bzm bzn bzo bzp bzq bzr bzs bzt bzu bzv bzw bzx bzy bzz caa cab cac cad cae caf cag cah cai caj cak cal cam can cao cap caq car cas cau cav caw cax cay caz cba cbb cbc cbd cbe cbg cbh cbi cbj cbk cbl cbn cbo cbr cbs cbt cbu cbv cbw cby cca ccc ccd cce ccg cch ccj ccl ccm ccn cco ccp ccq ccr ccs cda cdc cdd cde cdf cdg cdh cdi cdj cdm cdn cdo cdr cds cdy cdz cea ceb ceg cek cel cen cet cfa cfd cfg cfm cga cgc cgg cgk chb chc chd chf chg chh chj chk chl chm chn cho chp chq chr cht chw chx chy chz cia cib cic cid cie cih cik cim cin cip cir ciw ciy cja cje cjh cji cjk cjm cjn cjo cjp cjr cjs cjv cjy cka ckb ckh ckl ckn cko ckq ckr cks ckt cku ckv ckx cky ckz cla clc cld cle clh cli clj clk cll clm clo clt clu clw cly cma cmc cme cmg cmi cmk cml cmm cmn cmo cmr cms cmt cna cnb cnc cng cnh cni cnk cnl cno cns cnt cnu cnw cnx coa cob coc cod coe cof cog coh coj cok col com con coo cop coq cot cou cov cow cox coy coz cpa cpb cpc cpe cpf cpg cpi cpn cpo cpp cps cpu cpx cpy cqd cqu cra crb crc crd crf crg crh cri crj crk crl crm crn cro crp crq crr crs crt crv crw crx cry crz csa csb csc csd cse csf csg csh csi csj csk csl csm csn cso csq csr css cst csu csv csw csy csz cta ctc ctd cte ctg cth ctl ctm ctn cto ctp cts ctt ctu ctz cua cub cuc cug cuh cui cuj cuk cul cum cuo cup cuq cur cus cut cuu cuv cuw cux cvg cvn cwa cwb cwd cwe cwg cwt cya cyb cyo czh czk czn czo czt daa dac dad dae daf dag dah dai daj dak dal dam dao dap daq dar das dau dav daw dax day daz dba dbb dbd dbe dbf dbg dbi dbj dbl dbm dbn dbo dbp dbq dbr dbt dbu dbv dbw dby dcc dcr dda ddd dde ddg ddi ddj ddn ddo ddr dds ddw dec ded dee def deg deh dei dek del dem den dep deq der des dev dez dga dgb dgc dgd dge dgg dgh dgi dgk dgl dgn dgo dgr dgs dgt dgu dgw dgx dgz dha dhd dhg dhi dhl dhm dhn dho dhr dhs dhu dhv dhw dhx dia dib dic did dif dig dih dii dij dik dil dim din dio dip diq dir dis dit diu diw dix diy diz dja djb djc djd dje djf dji djj djk djl djm djn djo djr dju djw dka dkk dkl dkr dks dkx dlg dlk dlm dln dma dmb dmc dmd dme dmg dmk dml dmm dmn dmo dmr dms dmu dmv dmw dmx dmy dna dnd dne dng dni dnj dnk dnn dnr dnt dnu dnv dnw dny doa dob doc doe dof doh doi dok dol don doo dop doq dor dos dot dov dow dox doy doz dpp dra drb drc drd dre drg drh dri drl drn dro drq drr drs drt dru drw dry dsb dse dsh dsi dsl dsn dso dsq dta dtb dtd dth dti dtk dtm dto dtp dtr dts dtt dtu dty dua dub duc dud due duf dug duh dui duj duk dul dum dun duo dup duq dur dus duu duv duw dux duy duz dva dwa dwl dwr dws dww dya dyb dyd dyg dyi dym dyn dyo dyu dyy dza dzd dze dzg dzl dzn eaa ebg ebk ebo ebr ebu ecr ecs ecy eee efa efe efi ega egl ego egx egy ehu eip eit eiv eja eka ekc eke ekg eki ekk ekl ekm eko ekp ekr eky ele elh eli elk elm elo elp elu elx ema emb eme emg emi emk emm emn emo emp ems emu emw emx emy ena enb enc end enf enh enm enn eno enq enr enu env enw eot epi era erg erh eri erk ero err ers ert erw ese esh esi esk esl esm esn eso esq ess esu esx etb etc eth etn eto etr ets ett etu etx etz euq eve evh evn ewo ext eya eyo eza eze faa fab fad faf fag fah fai faj fak fal fam fan fap far fat fau fax fay faz fbl fcs fer ffi ffm fgr fia fie fil fip fir fit fiu fiw fkk fkv fla flh fli fll fln flr fly fmp fmu fng fni fod foi fom fon for fos fox fpe fqs frc frd frk frm fro frp frq frr frs frt fse fsl fss fub fuc fud fue fuf fuh fui fuj fum fun fuq fur fut fuu fuv fuy fvr fwa fwe gaa gab gac gad gae gaf gag gah gai gaj gak gal gam gan gao gap gaq gar gas gat gau gav gaw gax gay gaz gba gbb gbc gbd gbe gbf gbg gbh gbi gbj gbk gbl gbm gbn gbo gbp gbq gbr gbs gbu gbv gbw gbx gby gbz gcc gcd gce gcf gcl gcn gcr gct gda gdb gdc gdd gde gdf gdg gdh gdi gdj gdk gdl gdm gdn gdo gdq gdr gds gdt gdu gdx gea geb gec ged geg geh gei gej gek gel gem geq ges gew gex gey gez gfk gft gfx gga ggb ggd gge ggg ggk ggl ggn ggo ggr ggt ggu ggw gha ghc ghe ghh ghk ghl ghn gho ghr ghs ght gia gib gic gid gig gih gil gim gin gio gip giq gir gis git giu giw gix giy giz gji gjk gjm gjn gju gka gke gkn gko gkp glc gld glh gli glj glk gll glo glr glu glw gly gma gmb gmd gme gmh gml gmm gmn gmq gmu gmv gmw gmx gmy gmz gna gnb gnc gnd gne gng gnh gni gnk gnl gnm gnn gno gnq gnr gnt gnu gnw gnz goa gob goc god goe gof gog goh goi goj gok gol gom gon goo gop goq gor gos got gou gow gox goy goz gpa gpe gpn gqa gqi gqn gqr gqu gra grb grc grd grg grh gri grj grk grm gro grq grr grs grt gru grv grw grx gry grz gse gsg gsl gsm gsn gso gsp gss gsw gta gti gtu gua gub guc gud gue guf gug guh gui guk gul gum gun guo gup guq gur gus gut guu guv guw gux guz gva gvc gve gvf gvj gvl gvm gvn gvo gvp gvr gvs gvy gwa gwb gwc gwd gwe gwf gwg gwi gwj gwm gwn gwr gwt gwu gww gwx gxx gya gyb gyd gye gyf gyg gyi gyl gym gyn gyr gyy gza gzi gzn haa hab hac had hae haf hag hah hai haj hak hal ham han hao hap haq har has hav haw hax hay haz hba hbb hbn hbo hbu hca hch hdn hds hdy hea hed heg heh hei hem hgm hgw hhi hhr hhy hia hib hid hif hig hih hii hij hik hil him hio hir hit hiw hix hji hka hke hkk hks hla hlb hld hle hlt hlu hma hmb hmc hmd hme hmf hmg hmh hmi hmj hmk hml hmm hmn hmp hmq hmr hms hmt hmu hmv hmw hmx hmy hmz hna hnd hne hnh hni hnj hnn hno hns hnu hoa hob hoc hod hoe hoh hoi hoj hok hol hom hoo hop hor hos hot hov how hoy hoz hpo hps hra hrc hre hrk hrm hro hrp hrr hrt hru hrw hrx hrz hsb hsh hsl hsn hss hti hto hts htu htx hub huc hud hue huf hug huh hui huj huk hul hum huo hup huq hur hus hut huu huv huw hux huy huz hvc hve hvk hvn hvv hwa hwc hwo hya hyx iai ian iap iar iba ibb ibd ibe ibg ibi ibl ibm ibn ibr ibu iby ica ich icl icr ida idb idc idd ide idi idr ids idt idu ifa ifb ife iff ifk ifm ifu ify igb ige igg igl igm ign igo igs igw ihb ihi ihp ihw iin iir ijc ije ijj ijn ijo ijs ike iki ikk ikl iko ikp ikr ikt ikv ikw ikx ikz ila ilb ilg ili ilk ill ilo ils ilu ilv ilw ima ime imi iml imn imo imr ims imy inb inc ine ing inh inj inl inm inn ino inp ins int inz ior iou iow ipi ipo iqu iqw ira ire irh iri irk irn iro irr iru irx iry isa isc isd ise isg ish isi isk ism isn iso isr ist isu itb itc ite iti itk itl itm ito itr its itt itv itw itx ity itz ium ivb ivv iwk iwm iwo iws ixc ixl iya iyo iyx izh izi izr izz jaa jab jac jad jae jaf jah jaj jak jal jam jan jao jaq jar jas jat jau jax jay jaz jbe jbi jbj jbk jbn jbo jbr jbt jbu jbw jcs jct jda jdg jdt jeb jee jeg jeh jei jek jel jen jer jet jeu jgb jge jgk jgo jhi jhs jia jib jic jid jie jig jih jii jil jim jio jiq jit jiu jiv jiy jjr jkm jko jkp jkr jku jle jls jma jmb jmc jmd jmi jml jmn jmr jms jmw jmx jna jnd jng jni jnj jnl jns job jod jor jos jow jpa jpr jpx jqr jra jrb jrr jrt jru jsl jua jub juc jud juh jui juk jul jum jun juo jup jur jus jut juu juw juy jvd jvn jwi jya jye jyy kaa kab kac kad kae kaf kag kah kai kaj kak kam kao kap kaq kar kav kaw kax kay kba kbb kbc kbd kbe kbf kbg kbh kbi kbj kbk kbl kbm kbn kbo kbp kbq kbr kbs kbt kbu kbv kbw kbx kby kbz kca kcb kcc kcd kce kcf kcg kch kci kcj kck kcl kcm kcn kco kcp kcq kcr kcs kct kcu kcv kcw kcx kcy kcz kda kdc kdd kde kdf kdg kdh kdi kdj kdk kdl kdm kdn kdo kdp kdq kdr kdt kdu kdv kdw kdx kdy kdz kea keb kec ked kee kef keg keh kei kej kek kel kem ken keo kep keq ker kes ket keu kev kew kex key kez kfa kfb kfc kfd kfe kff kfg kfh kfi kfj kfk kfl kfm kfn kfo kfp kfq kfr kfs kft kfu kfv kfw kfx kfy kfz kga kgb kgc kgd kge kgf kgg kgh kgi kgj kgk kgl kgm kgn kgo kgp kgq kgr kgs kgt kgu kgv kgw kgx kgy kha khb khc khd khe khf khg khh khi khj khk khl khn kho khp khq khr khs kht khu khv khw khx khy khz kia kib kic kid kie kif kig kih kii kij kil kim kio kip kiq kis kit kiu kiv kiw kix kiy kiz kja kjb kjc kjd kje kjf kjg kjh kji kjj kjk kjl kjm kjn kjo kjp kjq kjr kjs kjt kju kjx kjy kjz kka kkb kkc kkd kke kkf kkg kkh kki kkj kkk kkl kkm kkn kko kkp kkq kkr kks kkt kku kkv kkw kkx kky kkz kla klb klc kld kle klf klg klh kli klj klk kll klm kln klo klp klq klr kls klt klu klv klw klx kly klz kma kmb kmc kmd kme kmf kmg kmh kmi kmj kmk kml kmm kmn kmo kmp kmq kmr kms kmt kmu kmv kmw kmx kmy kmz kna knb knc knd kne knf kng kni knj knk knl knm knn kno knp knq knr kns knt knu knv knw knx kny knz koa koc kod koe kof kog koh koi koj kok kol koo kop koq kos kot kou kov kow kox koy koz kpa kpb kpc kpd kpe kpf kpg kph kpi kpj kpk kpl kpm kpn kpo kpp kpq kpr kps kpt kpu kpv kpw kpx kpy kpz kqa kqb kqc kqd kqe kqf kqg kqh kqi kqj kqk kql kqm kqn kqo kqp kqq kqr kqs kqt kqu kqv kqw kqx kqy kqz kra krb krc krd kre krf krh kri krj krk krl krm krn kro krp krr krs krt kru krv krw krx kry krz ksa ksb ksc ksd kse ksf ksg ksh ksi ksj ksk ksl ksm ksn kso ksp ksq ksr kss kst ksu ksv ksw ksx ksy ksz kta ktb ktc ktd kte ktf ktg kth kti ktj ktk ktl ktm ktn kto ktp ktq ktr kts ktt ktu ktv ktw ktx kty ktz kub kuc kud kue kuf kug kuh kui kuj kuk kul kum kun kuo kup kuq kus kut kuu kuv kuw kux kuy kuz kva kvb kvc kvd kve kvf kvg kvh kvi kvj kvk kvl kvm kvn kvo kvp kvq kvr kvs kvt kvu kvv kvw kvx kvy kvz kwa kwb kwc kwd kwe kwf kwg kwh kwi kwj kwk kwl kwm kwn kwo kwp kwq kwr kws kwt kwu kwv kww kwx kwy kwz kxa kxb kxc kxd kxe kxf kxh kxi kxj kxk kxl kxm kxn kxo kxp kxq kxr kxs kxt kxu kxv kxw kxx kxy kxz kya kyb kyc kyd kye kyf kyg kyh kyi kyj kyk kyl kym kyn kyo kyp kyq kyr kys kyt kyu kyv kyw kyx kyy kyz kza kzb kzc kzd kze kzf kzg kzh kzi kzj kzk kzl kzm kzn kzo kzp kzq kzr kzs kzt kzu kzv kzw kzx kzy kzz laa lab lac lad lae laf lag lah lai laj lak lal lam lan lap laq lar las lau law lax lay laz lba lbb lbc lbe lbf lbg lbi lbj lbk lbl lbm lbn lbo lbq lbr lbs lbt lbu lbv lbw lbx lby lbz lcc lcd lce lcf lch lcl lcm lcp lcq lcs lda ldb ldd ldg ldh ldi ldj ldk ldl ldm ldn ldo ldp ldq lea leb lec led lee lef leg leh lei lej lek lel lem len leo lep leq ler les let leu lev lew lex ley lez lfa lfn lga lgb lgg lgh lgi lgk lgl lgm lgn lgq lgr lgt lgu lgz lha lhh lhi lhl lhm lhn lhp lhs lht lhu lia lib lic lid lie lif lig lih lii lij lik lil lio lip liq lir lis liu liv liw lix liy liz lja lje lji ljl ljp ljw ljx lka lkb lkc lkd lke lkh lki lkj lkl lkm lkn lko lkr lks lkt lku lky lla llb llc lld lle llf llg llh lli llj llk lll llm lln llo llp llq lls llu llx lma lmb lmc lmd lme lmf lmg lmh lmi lmj lmk lml lmm lmn lmo lmp lmq lmr lmu lmv lmw lmx lmy lmz lna lnb lnd lng lnh lni lnj lnl lnm lnn lno lns lnu lnw lnz loa lob loc loe lof log loh loi loj lok lol lom lon loo lop loq lor los lot lou lov low lox loy loz lpa lpe lpn lpo lpx lra lrc lre lrg lri lrk lrl lrm lrn lro lrr lrt lrv lrz lsa lsd lse lsg lsh lsi lsl lsm lso lsp lsr lss lst lsy ltc ltg lti ltn lto lts ltu lua luc lud lue luf lui luj luk lul lum lun luo lup luq lur lus lut luu luv luw luy luz lva lvk lvs lvu lwa lwe lwg lwh lwl lwm lwo lwt lwu lww lya lyg lyn lzh lzl lzn lzz maa mab mad mae maf mag mai maj mak mam man map maq mas mat mau mav maw max maz mba mbb mbc mbd mbe mbf mbh mbi mbj mbk mbl mbm mbn mbo mbp mbq mbr mbs mbt mbu mbv mbw mbx mby mbz mca mcb mcc mcd mce mcf mcg mch mci mcj mck mcl mcm mcn mco mcp mcq mcr mcs mct mcu mcv mcw mcx mcy mcz mda mdb mdc mdd mde mdf mdg mdh mdi mdj mdk mdl mdm mdn mdp mdq mdr mds mdt mdu mdv mdw mdx mdy mdz mea meb mec med mee mef meg meh mei mej mek mel mem men meo mep meq mer mes met meu mev mew mey mez mfa mfb mfc mfd mfe mff mfg mfh mfi mfj mfk mfl mfm mfn mfo mfp mfq mfr mfs mft mfu mfv mfw mfx mfy mfz mga mgb mgc mgd mge mgf mgg mgh mgi mgj mgk mgl mgm mgn mgo mgp mgq mgr mgs mgt mgu mgv mgw mgx mgy mgz mha mhb mhc mhd mhe mhf mhg mhh mhi mhj mhk mhl mhm mhn mho mhp mhq mhr mhs mht mhu mhw mhx mhy mhz mia mib mic mid mie mif mig mih mii mij mik mil mim min mio mip miq mir mis mit miu miw mix miy miz mja mjc mjd mje mjg mjh mji mjj mjk mjl mjm mjn mjo mjp mjq mjr mjs mjt mju mjv mjw mjx mjy mjz mka mkb mkc mke mkf mkg mkh mki mkj mkk mkl mkm mkn mko mkp mkq mkr mks mkt mku mkv mkw mkx mky mkz mla mlb mlc mld mle mlf mlh mli mlj mlk mll mlm mln mlo mlp mlq mlr mls mlu mlv mlw mlx mlz mma mmb mmc mmd mme mmf mmg mmh mmi mmj mmk mml mmm mmn mmo mmp mmq mmr mmt mmu mmv mmw mmx mmy mmz mna mnb mnc mnd mne mnf mng mnh mni mnj mnk mnl mnm mnn mno mnp mnq mnr mns mnt mnu mnv mnw mnx mny mnz moa moc mod moe mof mog moh moi moj mok mom moo mop moq mor mos mot mou mov mow mox moy moz mpa mpb mpc mpd mpe mpg mph mpi mpj mpk mpl mpm mpn mpo mpp mpq mpr mps mpt mpu mpv mpw mpx mpy mpz mqa mqb mqc mqe mqf mqg mqh mqi mqj mqk mql mqm mqn mqo mqp mqq mqr mqs mqt mqu mqv mqw mqx mqy mqz mra mrb mrc mrd mre mrf mrg mrh mrj mrk mrl mrm mrn mro mrp mrq mrr mrs mrt mru mrv mrw mrx mry mrz msb msc msd mse msf msg msh msi msj msk msl msm msn mso msp msq msr mss mst msu msv msw msx msy msz mta mtb mtc mtd mte mtf mtg mth mti mtj mtk mtl mtm mtn mto mtp mtq mtr mts mtt mtu mtv mtw mtx mty mua mub muc mud mue mug muh mui muj muk mul mum mun muo mup muq mur mus mut muu muv mux muy muz mva mvb mvd mve mvf mvg mvh mvi mvk mvl mvm mvn mvo mvp mvq mvr mvs mvt mvu mvv mvw mvx mvy mvz mwa mwb mwc mwd mwe mwf mwg mwh mwi mwj mwk mwl mwm mwn mwo mwp mwq mwr mws mwt mwu mwv mww mwx mwy mwz mxa mxb mxc mxd mxe mxf mxg mxh mxi mxj mxk mxl mxm mxn mxo mxp mxq mxr mxs mxt mxu mxv mxw mxx mxy mxz myb myc myd mye myf myg myh myi myj myk myl mym myn myo myp myq myr mys myt myu myv myw myx myy myz mza mzb mzc mzd mze mzg mzh mzi mzj mzk mzl mzm mzn mzo mzp mzq mzr mzs mzt mzu mzv mzw mzx mzy mzz naa nab nac nad nae naf nag nah nai naj nak nal nam nan nao nap naq nar nas nat naw nax nay naz nba nbb nbc nbd nbe nbf nbg nbh nbi nbj nbk nbm nbn nbo nbp nbq nbr nbs nbt nbu nbv nbw nbx nby nca ncb ncc ncd nce ncf ncg nch nci ncj nck ncl ncm ncn nco ncp ncr ncs nct ncu ncx ncz nda ndb ndc ndd ndf ndg ndh ndi ndj ndk ndl ndm ndn ndp ndq ndr nds ndt ndu ndv ndw ndx ndy ndz nea neb nec ned nee nef neg neh nei nej nek nem nen neo neq ner nes net neu nev new nex ney nez nfa nfd nfl nfr nfu nga ngb ngc ngd nge ngf ngg ngh ngi ngj ngk ngl ngm ngn ngo ngp ngq ngr ngs ngt ngu ngv ngw ngx ngy ngz nha nhb nhc nhd nhe nhf nhg nhh nhi nhk nhm nhn nho nhp nhq nhr nht nhu nhv nhw nhx nhy nhz nia nib nic nid nie nif nig nih nii nij nik nil nim nin nio niq nir nis nit niu niv niw nix niy niz nja njb njd njh nji njj njl njm njn njo njr njs njt nju njx njy njz nka nkb nkc nkd nke nkf nkg nkh nki nkj nkk nkm nkn nko nkp nkq nkr nks nkt nku nkv nkw nkx nkz nla nlc nle nlg nli nlj nlk nll nln nlo nlq nlr nlu nlv nlw nlx nly nlz nma nmb nmc nmd nme nmf nmg nmh nmi nmj nmk nml nmm nmn nmo nmp nmq nmr nms nmt nmu nmv nmw nmx nmy nmz nna nnb nnc nnd nne nnf nng nnh nni nnj nnk nnl nnm nnn nnp nnq nnr nns nnt nnu nnv nnw nnx nny nnz noa noc nod noe nof nog noh noi noj nok nol nom non noo nop noq nos not nou nov now noy noz npa npb npg nph npi npl npn npo nps npu npy nqg nqk nqm nqn nqo nqq nqy nra nrb nrc nre nrg nri nrk nrl nrm nrn nrp nrr nrt nru nrx nrz nsa nsc nsd nse nsf nsg nsh nsi nsk nsl nsm nsn nso nsp nsq nsr nss nst nsu nsv nsw nsx nsy nsz nte ntg nti ntj ntk ntm nto ntp ntr nts ntu ntw ntx nty ntz nua nub nuc nud nue nuf nug nuh nui nuj nuk nul num nun nuo nup nuq nur nus nut nuu nuv nuw nux nuy nuz nvh nvm nvo nwa nwb nwc nwe nwg nwi nwm nwo nwr nwx nwy nxa nxd nxe nxg nxi nxk nxl nxm nxn nxq nxr nxu nxx nyb nyc nyd nye nyf nyg nyh nyi nyj nyk nyl nym nyn nyo nyp nyq nyr nys nyt nyu nyv nyw nyx nyy nza nzb nzi nzk nzm nzs nzu nzy nzz oaa oac oar oav obi obk obl obm obo obr obt obu oca och oco ocu oda odk odt odu ofo ofs ofu ogb ogc oge ogg ogo ogu oht ohu oia oin ojb ojc ojg ojp ojs ojv ojw oka okb okd oke okg okh oki okj okk okl okm okn oko okr oks oku okv okx ola old ole olk olm olo olr oma omb omc ome omg omi omk oml omn omo omp omq omr omt omu omv omw omx ona onb one ong oni onj onk onn ono onp onr ons ont onu onw onx ood oog oon oor oos opa opk opm opo opt opy ora orc ore org orh orn oro orr ors ort oru orv orw orx ory orz osa osc osi oso osp ost osu osx ota otb otd ote oti otk otl otm otn oto otq otr ots ott otu otw otx oty otz oua oub oue oui oum oun owi owl oyb oyd oym oyy ozm paa pab pac pad pae paf pag pah pai pak pal pam pao pap paq par pas pat pau pav paw pax pay paz pbb pbc pbe pbf pbg pbh pbi pbl pbn pbo pbp pbr pbs pbt pbu pbv pby pbz pca pcb pcc pcd pce pcf pcg pch pci pcj pck pcl pcm pcn pcp pcr pcw pda pdc pdi pdn pdo pdt pdu pea peb ped pee pef peg peh pei pej pek pel pem peo pep peq pes pev pex pey pez pfa pfe pfl pga pgg pgi pgk pgl pgn pgs pgu pgy pha phd phg phh phi phk phl phm phn pho phq phr pht phu phv phw pia pib pic pid pie pif pig pih pii pij pil pim pin pio pip pir pis pit piu piv piw pix piy piz pjt pka pkb pkc pkg pkh pkn pko pkp pkr pks pkt pku pla plb plc pld ple plf plg plh plj plk pll pln plo plp plq plr pls plt plu plv plw ply plz pma pmb pmc pmd pme pmf pmh pmi pmj pmk pml pmm pmn pmo pmq pmr pms pmt pmu pmw pmx pmy pmz pna pnb pnc pne png pnh pni pnj pnk pnl pnm pnn pno pnp pnq pnr pns pnt pnu pnv pnw pnx pny pnz poc pod poe pof pog poh poi pok pom pon poo pop poq pos pot pov pow pox poy poz ppa ppe ppi ppk ppl ppm ppn ppo ppp ppq ppr pps ppt ppu pqa pqe pqm pqw pra prb prc prd pre prf prg prh pri prk prl prm prn pro prp prq prr prs prt pru prw prx pry prz psa psc psd pse psg psh psi psl psm psn pso psp psq psr pss pst psu psw psy pta pth pti ptn pto ptp ptr ptt ptu ptv ptw pty pua pub puc pud pue puf pug pui puj puk pum puo pup puq pur put puu puw pux puy puz pwa pwb pwg pwi pwm pwn pwo pwr pww pxm pye pym pyn pys pyu pyx pyy pzn qaa..qtz qua qub quc qud quf qug quh qui quk qul qum qun qup quq qur qus quv quw qux quy quz qva qvc qve qvh qvi qvj qvl qvm qvn qvo qvp qvs qvw qvy qvz qwa qwc qwe qwh qwm qws qwt qxa qxc qxh qxl qxn qxo qxp qxq qxr qxs qxt qxu qxw qya qyp raa rab rac rad raf rag rah rai raj rak ral ram ran rao rap raq rar ras rat rau rav raw rax ray raz rbb rbk rbl rbp rcf rdb rea reb ree reg rei rej rel rem ren rer res ret rey rga rge rgk rgn rgr rgs rgu rhg rhp ria rie rif ril rim rin rir rit riu rjg rji rjs rka rkb rkh rki rkm rkt rkw rma rmb rmc rmd rme rmf rmg rmh rmi rmk rml rmm rmn rmo rmp rmq rmr rms rmt rmu rmv rmw rmx rmy rmz rna rnd rng rnl rnn rnp rnr rnw roa rob roc rod roe rof rog rol rom roo rop ror rou row rpn rpt rri rro rrt rsb rsi rsl rtc rth rtm rtw rub ruc rue ruf rug ruh rui ruk ruo rup ruq rut ruu ruy ruz rwa rwk rwm rwo rwr rxd rxw ryn rys ryu saa sab sac sad sae saf sah sai saj sak sal sam sao sap saq sar sas sat sau sav saw sax say saz sba sbb sbc sbd sbe sbf sbg sbh sbi sbj sbk sbl sbm sbn sbo sbp sbq sbr sbs sbt sbu sbv sbw sbx sby sbz sca scb sce scf scg sch sci sck scl scn sco scp scq scs scu scv scw scx sda sdb sdc sde sdf sdg sdh sdj sdk sdl sdm sdn sdo sdp sdr sds sdt sdu sdv sdx sdz sea seb sec sed see sef seg seh sei sej sek sel sem sen seo sep seq ser ses set seu sev sew sey sez sfb sfe sfm sfs sfw sga sgb sgc sgd sge sgg sgh sgi sgj sgk sgl sgm sgn sgo sgp sgr sgs sgt sgu sgw sgx sgy sgz sha shb shc shd she shg shh shi shj shk shl shm shn sho shp shq shr shs sht shu shv shw shx shy shz sia sib sid sie sif sig sih sii sij sik sil sim sio sip siq sir sis sit siu siv siw six siy siz sja sjb sjd sje sjg sjk sjl sjm sjn sjo sjp sjr sjs sjt sju sjw ska skb skc skd ske skf skg skh ski skj skk skm skn sko skp skq skr sks skt sku skv skw skx sky skz sla slc sld sle slf slg slh sli slj sll slm sln slp slq slr sls slt slu slw slx sly slz sma smb smc smd smf smg smh smi smj smk sml smm smn smp smq smr sms smt smu smv smw smx smy smz snb snc sne snf sng snh sni snj snk snl snm snn sno snp snq snr sns snu snv snw snx sny snz soa sob soc sod soe sog soh soi soj sok sol son soo sop soq sor sos sou sov sow sox soy soz spb spc spd spe spg spi spk spl spm spo spp spq spr sps spt spu spv spx spy sqa sqh sqj sqk sqm sqn sqo sqq sqr sqs sqt squ sra srb src sre srf srg srh sri srk srl srm srn sro srq srr srs srt sru srv srw srx sry srz ssa ssb ssc ssd sse ssf ssg ssh ssi ssj ssk ssl ssm ssn sso ssp ssq ssr sss sst ssu ssv ssx ssy ssz sta stb std ste stf stg sth sti stj stk stl stm stn sto stp stq str sts stt stu stv stw sty sua sub suc sue sug sui suj suk sul sum suq sur sus sut suv suw sux suy suz sva svb svc sve svk svm svr svs svx swb swc swf swg swh swi swj swk swl swm swn swo swp swq swr sws swt swu swv sww swx swy sxb sxc sxe sxg sxk sxl sxm sxn sxo sxr sxs sxu sxw sya syb syc syd syi syk syl sym syn syo syr sys syw syy sza szb szc szd sze szg szl szn szp szv szw taa tab tac tad tae taf tag tai taj tak tal tan tao tap taq tar tas tau tav taw tax tay taz tba tbb tbc tbd tbe tbf tbg tbh tbi tbj tbk tbl tbm tbn tbo tbp tbq tbr tbs tbt tbu tbv tbw tbx tby tbz tca tcb tcc tcd tce tcf tcg tch tci tck tcl tcm tcn tco tcp tcq tcs tct tcu tcw tcx tcy tcz tda tdb tdc tdd tde tdf tdg tdh tdi tdj tdk tdl tdn tdo tdq tdr tds tdt tdu tdv tdx tdy tea teb tec ted tee tef teg teh tei tek tem ten teo tep teq ter tes tet teu tev tew tex tey tfi tfn tfo tfr tft tga tgb tgc tgd tge tgf tgg tgh tgi tgj tgn tgo tgp tgq tgr tgs tgt tgu tgv tgw tgx tgy tgz thc thd the thf thh thi thk thl thm thn thp thq thr ths tht thu thv thw thx thy thz tia tic tid tie tif tig tih tii tij tik til tim tin tio tip tiq tis tit tiu tiv tiw tix tiy tiz tja tjg tji tjl tjm tjn tjo tjs tju tjw tka tkb tkd tke tkf tkg tkk tkl tkm tkn tkp tkq tkr tks tkt tku tkw tkx tkz tla tlb tlc tld tlf tlg tlh tli tlj tlk tll tlm tln tlo tlp tlq tlr tls tlt tlu tlv tlw tlx tly tma tmb tmc tmd tme tmf tmg tmh tmi tmj tmk tml tmm tmn tmo tmp tmq tmr tms tmt tmu tmv tmw tmy tmz tna tnb tnc tnd tne tnf tng tnh tni tnk tnl tnm tnn tno tnp tnq tnr tns tnt tnu tnv tnw tnx tny tnz tob toc tod toe tof tog toh toi toj tol tom too top toq tor tos tou tov tow tox toy toz tpa tpc tpe tpf tpg tpi tpj tpk tpl tpm tpn tpo tpp tpq tpr tpt tpu tpv tpw tpx tpy tpz tqb tql tqm tqn tqo tqp tqq tqr tqt tqu tqw tra trb trc trd tre trf trg trh tri trj trk trl trm trn tro trp trq trr trs trt tru trv trw trx try trz tsa tsb tsc tsd tse tsf tsg tsh tsi tsj tsk tsl tsm tsp tsq tsr tss tst tsu tsv tsw tsx tsy tsz tta ttb ttc ttd tte ttf ttg tth tti ttj ttk ttl ttm ttn tto ttp ttq ttr tts ttt ttu ttv ttw tty ttz tua tub tuc tud tue tuf tug tuh tui tuj tul tum tun tuo tup tuq tus tut tuu tuv tuw tux tuy tuz tva tvd tve tvk tvl tvm tvn tvo tvs tvt tvu tvw tvy twa twb twc twd twe twf twg twh twl twm twn two twp twq twr twt twu tww twx twy txa txb txc txe txg txh txi txm txn txo txq txr txs txt txu txx txy tya tye tyh tyi tyj tyl tyn typ tyr tys tyt tyu tyv tyx tyz tza tzh tzj tzl tzm tzn tzo tzx uam uan uar uba ubi ubl ubr ubu uby uda ude udg udi udj udl udm udu ues ufi uga ugb uge ugn ugo ugy uha uhn uis uiv uji uka ukg ukh ukl ukp ukq uks uku ukw uky ula ulb ulc ule ulf uli ulk ull ulm uln ulu ulw uma umb umc umd umg umi umm umn umo ump umr ums umu una und une ung unk unm unn unp unr unu unx unz uok upi upv ura urb urc ure urf urg urh uri urj urk url urm urn uro urp urr urt uru urv urw urx ury urz usa ush usi usk usp usu uta ute utp utr utu uum uun uur uuu uve uvh uvl uwa uya uzn uzs vaa vae vaf vag vah vai vaj val vam van vao vap var vas vau vav vay vbb vbk vec ved vel vem veo vep ver vgr vgt vic vid vif vig vil vin vis vit viv vka vki vkj vkk vkl vkm vko vkp vkt vku vlp vls vma vmb vmc vmd vme vmf vmg vmh vmi vmj vmk vml vmm vmp vmq vmr vms vmu vmv vmw vmx vmy vmz vnk vnm vnp vor vot vra vro vrs vrt vsi vsl vsv vto vum vun vut vwa waa wab wac wad wae waf wag wah wai waj wak wal wam wan wao wap waq war was wat wau wav waw wax way waz wba wbb wbe wbf wbh wbi wbj wbk wbl wbm wbp wbq wbr wbt wbv wbw wca wci wdd wdg wdj wdk wdu wdy wea wec wed weg weh wei wem wen weo wep wer wes wet weu wew wfg wga wgb wgg wgi wgo wgu wgw wgy wha whg whk whu wib wic wie wif wig wih wii wij wik wil wim win wir wit wiu wiv wiw wiy wja wji wka wkb wkd wkl wku wkw wky wla wlc wle wlg wli wlk wll wlm wlo wlr wls wlu wlv wlw wlx wly wma wmb wmc wmd wme wmh wmi wmm wmn wmo wms wmt wmw wmx wnb wnc wnd wne wng wni wnk wnm wnn wno wnp wnu wnw wny woa wob woc wod woe wof wog woi wok wom won woo wor wos wow woy wpc wra wrb wrd wrg wrh wri wrk wrl wrm wrn wro wrp wrr wrs wru wrv wrw wrx wry wrz wsa wsi wsk wsr wss wsu wsv wtf wth wti wtk wtm wtw wua wub wud wuh wul wum wun wur wut wuu wuv wux wuy wwa wwb wwo wwr www wxa wxw wya wyb wyi wym wyr wyy xaa xab xac xad xae xag xai xal xam xan xao xap xaq xar xas xat xau xav xaw xay xba xbb xbc xbd xbe xbg xbi xbj xbm xbn xbo xbp xbr xbw xbx xby xcb xcc xce xcg xch xcl xcm xcn xco xcr xct xcu xcv xcw xcy xda xdc xdk xdm xdy xeb xed xeg xel xem xep xer xes xet xeu xfa xga xgb xgd xgf xgg xgi xgl xgm xgn xgr xgu xgw xha xhc xhd xhe xhr xht xhu xhv xia xib xii xil xin xip xir xiv xiy xjb xjt xka xkb xkc xkd xke xkf xkg xkh xki xkj xkk xkl xkn xko xkp xkq xkr xks xkt xku xkv xkw xkx xky xkz xla xlb xlc xld xle xlg xli xln xlo xlp xls xlu xly xma xmb xmc xmd xme xmf xmg xmh xmj xmk xml xmm xmn xmo xmp xmq xmr xms xmt xmu xmv xmw xmx xmy xmz xna xnb xnd xng xnh xni xnk xnn xno xnr xns xnt xnu xny xnz xoc xod xog xoi xok xom xon xoo xop xor xow xpa xpc xpe xpg xpi xpj xpk xpm xpn xpo xpp xpq xpr xps xpt xpu xpy xqa xqt xra xrb xrd xre xrg xri xrm xrn xrq xrr xrt xru xrw xsa xsb xsc xsd xse xsh xsi xsj xsl xsm xsn xso xsp xsq xsr xss xsu xsv xsy xta xtb xtc xtd xte xtg xth xti xtj xtl xtm xtn xto xtp xtq xtr xts xtt xtu xtv xtw xty xtz xua xub xud xug xuj xul xum xun xuo xup xur xut xuu xve xvi xvn xvo xvs xwa xwc xwd xwe xwg xwj xwk xwl xwo xwr xwt xww xxb xxk xxm xxr xxt xya xyb xyj xyk xyl xyt xyy xzh xzm xzp yaa yab yac yad yae yaf yag yah yai yaj yak yal yam yan yao yap yaq yar yas yat yau yav yaw yax yay yaz yba ybb ybd ybe ybh ybi ybj ybk ybl ybm ybn ybo ybx yby ych ycl ycn ycp yda ydd yde ydg ydk yds yea yec yee yei yej yel yen yer yes yet yeu yev yey yga ygi ygl ygm ygp ygr ygu ygw yha yhd yhl yia yif yig yih yii yij yik yil yim yin yip yiq yir yis yit yiu yiv yix yiy yiz yka ykg yki ykk ykl ykm ykn yko ykr ykt yku yky yla ylb yle ylg yli yll ylm yln ylo ylr ylu yly yma ymb ymc ymd yme ymg ymh ymi ymk yml ymm ymn ymo ymp ymq ymr yms ymt ymx ymz yna ynd yne yng ynh ynk ynl ynn yno ynq yns ynu yob yog yoi yok yol yom yon yos yot yox yoy ypa ypb ypg yph ypk ypm ypn ypo ypp ypz yra yrb yre yri yrk yrl yrm yrn yrs yrw yry ysc ysd ysg ysl ysn yso ysp ysr yss ysy yta ytl ytp ytw yty yua yub yuc yud yue yuf yug yui yuj yuk yul yum yun yup yuq yur yut yuu yuw yux yuy yuz yva yvt ywa ywg ywl ywn ywq ywr ywt ywu yww yxa yxg yxl yxm yxu yxy yyr yyu yyz yzg yzk zaa zab zac zad zae zaf zag zah zai zaj zak zal zam zao zap zaq zar zas zat zau zav zaw zax zay zaz zbc zbe zbl zbt zbw zca zch zdj zea zeg zeh zen zga zgb zgh zgm zgn zgr zhb zhd zhi zhn zhw zhx zia zib zik zil zim zin zir ziw ziz zka zkb zkd zkg zkh zkk zkn zko zkp zkr zkt zku zkv zkz zle zlj zlm zln zlq zls zlw zma zmb zmc zmd zme zmf zmg zmh zmi zmj zmk zml zmm zmn zmo zmp zmq zmr zms zmt zmu zmv zmw zmx zmy zmz zna znd zne zng znk zns zoc zoh zom zoo zoq zor zos zpa zpb zpc zpd zpe zpf zpg zph zpi zpj zpk zpl zpm zpn zpo zpp zpq zpr zps zpt zpu zpv zpw zpx zpy zpz zqe zra zrg zrn zro zrp zrs zsa zsk zsl zsm zsr zsu zte ztg ztl ztm ztn ztp ztq zts ztt ztu ztx zty zua zuh zum zun zuy zwa zxx zyb zyg zyj zyn zyp zza zzj aao abh abv acm acq acw acx acy adf ads aeb aec aed aen afb afg ajp apc apd arb arq ars ary arz ase asf asp asq asw auz avl ayh ayl ayn ayp bbz bfi bfk bjn bog bqn bqy btj bve bvl bvu bzs cdo cds cjy cmn coa cpx csc csd cse csf csg csl csn csq csr czh czo doq dse dsl dup ecs esl esn eso eth fcs fse fsl fss gan gds gom gse gsg gsm gss gus hab haf hak hds hji hks hos hps hsh hsl hsn icl ils inl ins ise isg isr jak jax jcs jhs jls jos jsl jus kgi knn kvb kvk kvr kxd lbs lce lcf liw lls lsg lsl lso lsp lst lsy ltg lvs lzh max mdl meo mfa mfb mfs min mnp mqg mre msd msi msr mui mzc mzg mzy nan nbs ncs nsi nsl nsp nsr nzs okl orn ors pel pga pks prl prz psc psd pse psg psl pso psp psr pys rms rsi rsl sdl sfb sfs sgg sgx shu slf sls sqk sqs ssh ssp ssr svk swc swh swl syy tmw tse tsm tsq tss tsy tza ugn ugy ukl uks urk uzn uzs vgt vkk vkt vsi vsl vsv wuu xki xml xmm xms yds ysl yue zib zlm zmi zsl zsm afak aghb arab armi armn avst bali bamu bass batk beng blis bopo brah brai bugi buhd cakm cans cari cham cher cirt copt cprt cyrl cyrs deva dsrt dupl egyd egyh egyp elba ethi geok geor glag goth gran grek gujr guru hang hani hano hans hant hebr hira hluw hmng hrkt hung inds ital java jpan jurc kali kana khar khmr khoj knda kore kpel kthi lana laoo latf latg latn lepc limb lina linb lisu loma lyci lydi mahj mand mani maya mend merc mero mlym mong moon mroo mtei mymr narb nbat nkgb nkoo nshu ogam olck orkh orya osma palm perm phag phli phlp phlv phnx plrd prti qaaa..qabx rjng roro runr samr sara sarb saur sgnw shaw shrd sind sinh sora sund sylo syrc syre syrj syrn tagb takr tale talu taml tang tavt telu teng tfng tglg thaa thai tibt tirh ugar vaii visp wara wole xpeo xsux yiii zinh zmth zsym zxxx zyyy zzzz aa ac ad ae af ag ai al am an ao aq ar as at au aw ax az ba bb bd be bf bg bh bi bj bl bm bn bo bq br bs bt bu bv bw by bz ca cc cd cf cg ch ci ck cl cm cn co cp cr cs cu cv cw cx cy cz dd de dg dj dk dm do dz ea ec ee eg eh er es et eu fi fj fk fm fo fr fx ga gb gd ge gf gg gh gi gl gm gn gp gq gr gs gt gu gw gy hk hm hn hr ht hu ic id ie il im in io iq ir is it je jm jo jp ke kg kh ki km kn kp kr kw ky kz la lb lc li lk lr ls lt lu lv ly ma mc md me mf mg mh mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nc ne nf ng ni nl no np nr nt nu nz om pa pe pf pg ph pk pl pm pn pr ps pt pw py qa qm..qz re ro rs ru rw sa sb sc sd se sg sh si sj sk sl sm sn so sr ss st su sv sx sy sz ta tc td tf tg th tj tk tl tm tn to tp tr tt tv tw tz ua ug um us uy uz va vc ve vg vi vn vu wf ws xa..xz yd ye yt yu za zm zr zw zz 001 002 003 005 009 011 013 014 015 017 018 019 021 029 030 034 035 039 053 054 057 061 142 143 145 150 151 154 155 419 1606nict 1694acad 1901 1959acad 1994 1996 alalc97 aluku arevela arevmda baku1926 bauddha biscayan biske bohoric boont dajnko emodeng fonipa fonupa fonxsamp hepburn heploc hognorsk itihasa jauer jyutping kkcor kscor laukika lipaw luna1918 metelko monoton ndyuka nedis njiva nulik osojs pamaka petr1708 pinyin polyton puter rigik rozaj rumgr scotland scouse solba surmiran sursilv sutsilv tarask uccor ucrcor ulster unifon vaidika valencia vallader wadegile ",
  tags : "art-lojban cel-gaulish en-gb-oed i-ami i-bnn i-default i-enochian i-hak i-klingon i-lux i-mingo i-navajo i-pwn i-tao i-tay i-tsu no-bok no-nyn sgn-be-fr sgn-be-nl sgn-ch-de zh-guoyu zh-hakka zh-min zh-min-nan zh-xiang az-arab az-cyrl az-latn be-latn bs-cyrl bs-latn de-1901 de-1996 de-at-1901 de-at-1996 de-ch-1901 de-ch-1996 de-de-1901 de-de-1996 en-boont en-scouse es-419 iu-cans iu-latn mn-cyrl mn-mong sgn-br sgn-co sgn-de sgn-dk sgn-es sgn-fr sgn-gb sgn-gr sgn-ie sgn-it sgn-jp sgn-mx sgn-ni sgn-nl sgn-no sgn-pt sgn-se sgn-us sgn-za sl-nedis sl-rozaj sr-cyrl sr-latn tg-arab tg-cyrl uz-cyrl uz-latn yi-latn zh-cmn zh-cmn-hans zh-cmn-hant zh-gan zh-hans zh-hans-cn zh-hans-hk zh-hans-mo zh-hans-sg zh-hans-tw zh-hant zh-hant-cn zh-hant-hk zh-hant-mo zh-hant-sg zh-hant-tw zh-wuu zh-yue "
};

/* shared functions */

/**
 * @function validLanguageCode
 *
 * @memberOf OpenAjax.a11y.util
 *
 * @desc Identifies if a language code is valid
 *
 * @param  {String}  language code -  INAN language code
 *
 * @return {Boolean}  If a valid language code return true, otherwsie false
 */

 function validLanguageCode(code) {

  code = code.toLowerCase();

  if ((typeof code === 'string') || code.length) {

    const parts = code.split("-");

    if (parts.length > 1) {
      for (let i = 0; i < parts.length; i += 1) {
        if (LANGUAGE_CODES.subtags.indexOf(parts[i]) < 0) return false;
      }
      return true;
    }
    else {
      if (LANGUAGE_CODES.subtags.indexOf(code) >= 0) return true;
      if (LANGUAGE_CODES.tags.indexOf(code) >= 0) return true;
    }
  }
  return false;
}

/*
 * OpenA11y Rules
 * Rule Category: Language Rules
 */

const languageRules = [

  /**
   * @object LANGUAGE_1
   *
   * @desc HTML element must have a lang attribute
   */

  { rule_id             : 'LANGUAGE_1',
    last_updated        : '2023-09-06',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.COLOR_CONTENT,
    rule_required       : true,
    wcag_primary_id     : '3.1.1',
    wcag_related_ids    : [],
    target_resources    : ['html'],
    validate            : function (dom_cache, rule_result) {
      if (dom_cache.lang) {
        if (validLanguageCode(dom_cache.lang)) {
          rule_result.addPageResult(TEST_RESULT.PASS, dom_cache, 'PAGE_PASS_1', [dom_cache.lang]);
        }
        else {
          rule_result.addPageResult(TEST_RESULT.FAIL, dom_cache, 'PAGE_FAIL_2', [dom_cache.lang]);
        }
      }
      else {
        rule_result.addPageResult(TEST_RESULT.FAIL, dom_cache, 'PAGE_FAIL_1', []);
      }
    } // end validation function
  },

  /**
   * @object LANGUAGE_2
   *
   * @desc Identify the elements on the page where the text content is different language from the primary content
   */

  { rule_id             : 'LANGUAGE_2',
    last_updated        : '2023-09-06',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.COLOR_CONTENT,
    rule_required       : true,
    wcag_primary_id     : '3.1.2',
    wcag_related_ids    : ['3.1.1'],
    target_resources    : ['[lang]'],
    validate            : function (dom_cache, rule_result) {

      let passCount = 0;
      let failCount = 0;

      dom_cache.allDomElements.forEach( de => {
        if (de.lang) {
          if (de.visibility.isVisibleToAT) {
            if (validLanguageCode(de.lang)) {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.elemName, de.lang]);
              passCount += 1;
            }
            else {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.elemName, de.lang]);
              failCount += 1;
            }
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
          }
        }
      });

      if (failCount === 1) rule_result.addPageResult(TEST_RESULT.FAIL, dom_cache, 'PAGE_FAIL_1', []);
      else if (failCount > 1) rule_result.addPageResult(TEST_RESULT.FAIL, dom_cache, 'PAGE_FAIL_2', [failCount]);
      else if (passCount === 1) rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);
      else if (passCount > 1) rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_2', [passCount]);
      else rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_3', []);

    } // end validation function
  }

];

/* layoutRules.js */

/* Constants */


const debug$t = new DebugLogging('Layout Rules', false);
debug$t.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: Layout Rules
 */

const layoutRules = [

  /**
   * @object LAYOUT_1
   *
   * @desc     Make sure content is in a meaningful sequence
   *           tables used for layout must be checked for
   *           maintaining meaningful sequence
   */
  { rule_id             : 'LAYOUT_1',
    last_updated        : '2023-09-06',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.TABLES_LAYOUT,
    rule_required       : true,
    wcag_primary_id     : '1.3.2',
    wcag_related_ids    : ['1.3.1'],
    target_resources    : ['Page', 'table'],
    validate            : function (dom_cache, rule_result) {

      let layoutPass = 0;
      let layoutManualCheck = 0;

      dom_cache.tableInfo.allTableElements.forEach( te => {
        const de = te.domElement;

        if (te.tableType === TABLE_TYPE.LAYOUT) {
          if (de.visibility.isVisibleToAT) {
            if (te.colCount === 1)  {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', []);
              layoutPass += 1;
            }
            else {
              if (te.nestinglevel === 0) {
                rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', [te.rowCount, te.colCount]);
                layoutManualCheck += 1;
              }
              else {
                 rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_3', [te.nestingLevel]);
                 layoutManualCheck += 1;
              }
            }
          }
          else {
           rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
          }
        }
      });

      if (layoutManualCheck) {
        rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', [layoutManualCheck]);
      }
      else {
        if (layoutPass) {
          rule_result.addPageResult(TEST_RESULT.PASS, dom_cache, 'PAGE_PASS_1', []);
        }
      }
    }  // end validation function
  },

  /**
   * @object LAYOUT_2
   *
   * @desc     Do not use nested tables more than 1 column wide for positioning content
   *           Fails with one or more one levels of nesting.
   */
  { rule_id             : 'LAYOUT_2',
    last_updated        : '2023-09-06',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.TABLES_LAYOUT,
    rule_required       : true,
    wcag_primary_id     : '1.3.2',
    wcag_related_ids    : [],
    target_resources    : ['table'],
    validate          : function (dom_cache, rule_result) {

      dom_cache.tableInfo.allTableElements.forEach( te => {
        const de = te.domElement;

        if (te.tableType === TABLE_TYPE.LAYOUT) {
          if (de.visibility.isVisibleToAT) {

            if (te.colCount > 1) {
              if (te.nestingLevel > 0) {
                rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [te.rowCount, te.colCount, te.nestingLevel]);
              }
              else {
                rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', []);
              }
            }
            else {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', []);
            }
          }
          else {
           rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
          }
        }
      });

    } // end validation function
  },

  /**
   * @object LAYOUT_3
   *
   * @desc    Verify if the aria-flow to property ordering makes sense to AT users.
   */
  { rule_id             : 'LAYOUT_3',
    last_updated        : '2023-09-06',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.TABLES_LAYOUT,
    rule_required       : true,
    wcag_primary_id     : '1.3.2',
    wcag_related_ids    : [],
    target_resources    : ['[aria_flowto]'],
    validate          : function (dom_cache, rule_result) {

      dom_cache.allDomElements.forEach( de => {

        if (de.ariaInfo.flowTo) {
          if (de.visibility.isVisibleToAT) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName, de.flowTo]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName, de.flowTo]);
          }
        }

      });
    } // end validation function
  },

  /**
   * @object LAYOUT_4
   *
   * @desc    Verify if the page support both port
   */
  { rule_id             : 'LAYOUT_4',
    last_updated        : '2023-09-14',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.TABLES_LAYOUT,
    rule_required       : true,
    wcag_primary_id     : '1.3.4',
    wcag_related_ids    : [],
    target_resources    : ['page'],
    validate          : function (dom_cache, rule_result) {

      rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);

    } // end validate function
  }
];

/* linkRules.js */

/* Constants */
const debug$s = new DebugLogging('Link Rules', false);
debug$s.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: Link Rules
 */

const linkRules = [

  /**
   * @object LINK_1
   *
   * @desc Link should describe the target of a link
   */

  { rule_id             : 'LINK_1',
    last_updated        : '2022-05-23',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.LINKS,
    rule_required       : true,
    wcag_primary_id     : '2.4.4',
    wcag_related_ids    : ['2.4.9'],
    target_resources    : ['a', 'area', '[role=link]'],
    validate            : function (dom_cache, rule_result) {
      dom_cache.linkInfo.allLinkDomElements.forEach (de => {
        if (de.visibility.isVisibleToAT) {
          const name = de.accName.name;
          const desc = de.accDescription.name;
          if (name.length) {
            if (desc.length) {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', [de.tagName, name, desc]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.tagName, name]);
            }
          }
          else {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.tagName]);
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName]);
        }
      });
    } // end valifdation function
  },

  /**
   * @object LINK_2
   *
   * @desc Links with the different HREFs should have the unique accessible names
   */

  { rule_id             : 'LINK_2',
    last_updated        : '2022-05-23',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.LINKS,
    rule_required       : false,
    wcag_primary_id     : '2.4.4',
    wcag_related_ids    : ['2.4.9'],
    target_resources    : ['a', 'area', '[role=link]'],
    validate            : function (dom_cache, rule_result) {

      // array of visible DOM elements identified as links
      const visibleLinks = [];

      dom_cache.linkInfo.allLinkDomElements.forEach ( de => {
        if (de.visibility.isVisibleToAT) {
          visibleLinks.push(de);
        }
      });

      visibleLinks.forEach( (de1, index1) => {
        let differentHrefSameDescription      = 0;
        let differentHrefDifferentDescription = 0;
        let sameHref = 0;
        visibleLinks.forEach( (de2, index2) => {
          if (index1 !== index2) {
            if (accNamesTheSame(de1.accName, de2.accName)) {
              if (de1.node.href === de2.node.href) {
                sameHref += 1;
              }
              else {
                if (accNamesTheSame(de1.accDescription, de2.accDescription)) {
                  differentHrefSameDescription += 1;
                }
                else {
                  differentHrefDifferentDescription += 1;
                }
              }
            }
          }
        });

        if (differentHrefSameDescription) {
          rule_result.addElementResult(TEST_RESULT.FAIL, de1,  'ELEMENT_FAIL_1', [(differentHrefSameDescription + 1)]);
        } else {
          if (differentHrefDifferentDescription) {
            if (differentHrefDifferentDescription === 1) {
              rule_result.addElementResult(TEST_RESULT.PASS, de1,  'ELEMENT_PASS_3', []);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.PASS, de1,  'ELEMENT_PASS_4', [differentHrefDifferentDescription]);
            }
          } else {
            if (sameHref) {
              if (sameHref === 1) {
                rule_result.addElementResult(TEST_RESULT.PASS, de1,  'ELEMENT_PASS_1', []);
              }
              else {
                rule_result.addElementResult(TEST_RESULT.PASS, de1,  'ELEMENT_PASS_2', [sameHref]);
              }
            }
          }
        }
      });

    } // end validate function
  },

  /**
   * @object LINK_3
   *
   * @desc Target of a link does not go to a page with popup windows
   */

  { rule_id             : 'LINK_3',
    last_updated        : '2023-08-22',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.LINKS,
    rule_required       : true,
    wcag_primary_id     : '3.2.1',
    wcag_related_ids    : ['2.1.1', '2.1.2',  '2.4.3', '2.4.7'],
    target_resources    : ['a', 'area', 'select'],
    validate            : function (dom_cache, rule_result) {

      dom_cache.linkInfo.allLinkDomElements.forEach (de => {
        if (de.visibility.isVisibleToAT) {
          rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName]);
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
        }
      });
    } // end validation function
  },
];

/* listRules.js */

/* Constants */
const debug$r = new DebugLogging('List Rules', false);
debug$r.flag = false;


/*
 * OpenA11y Rules
 * Rule Category: List Rules
 */

const listRules = [

  /**
   * @object LIST_1
   *
   * @desc Verify list elements are used semantically
  */

  { rule_id             : 'LIST_1',
    last_updated        : '2023-08-24',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.COLOR_CONTENT,
    rule_required       : true,
    wcag_primary_id     : '1.3.1',
    wcag_related_ids    : [],
    target_resources    : ['ul', 'ol', 'li', '[role="list"]', '[role="listitem"]'],
    validate            : function (dom_cache, rule_result) {

      let listCount = 0;

      dom_cache.listInfo.allListElements.forEach ( le => {
        const de = le.domElement;

        if (de.role === 'list') {
          if (de.visibility.isVisibleToAT) {
            listCount += 1;
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
          }
        }

       if (de.role === 'listitem') {
          if (de.visibility.isVisibleToAT) {
            listCount += 1;
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', [de.elemName]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
          }
        }

      });

      if (listCount) {
        rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', [listCount]);
      }

    } // end validate function
  },
  /**
   * @object LIST_2
   *
   * @desc Verify list benefits from an accessible name
  */

  { rule_id             : 'LIST_2',
    last_updated        : '2023-08-24',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.COLOR_CONTENT,
    rule_required       : true,
    wcag_primary_id     : '2.4.6',
    wcag_related_ids    : ['1.3.1'],
    target_resources    : ['ul', 'ol', '[role="list"]'],
    validate            : function (dom_cache, rule_result) {

      dom_cache.listInfo.allListElements.forEach ( le => {
        const de = le.domElement;

        if (de.role === 'list') {
          if (de.visibility.isVisibleToAT) {
            if (de.accName.name) {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName, de.accName.name]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', [de.elemName]);
            }
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
          }
        }

      });
    } // end validate function
  }
];

/* liveRules.js */

/* Constants */
const debug$q = new DebugLogging('Live Region Rules', false);
debug$q.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: Sensory Rules
 */

const liveRules = [

/**
 * @object LIVE_1
 *
 * @desc  Verify live regions are being used properly
 */
{ rule_id             : 'LIVE_1',
  last_updated        : '2023-04-21',
  rule_scope          : RULE_SCOPE.PAGE,
  rule_category       : RULE_CATEGORIES.TIMING_LIVE,
  rule_required       : true,
  wcag_primary_id     : '4.1.3',
  wcag_related_ids    : [],
  target_resources    : ['[role="alert"]','[role="log"]','[role="status"]','[aria-live]'],
  validate          : function (dom_cache, rule_result) {

    let liveCount = 0;

    dom_cache.allDomElements.forEach( de => {
      if (de.ariaInfo.isLive) {
        if (de.visibility.isVisibleToAT) {
          if (de.ariaInfo.ariaLive) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.ariaInfo.ariaLive]);
          }
          else {
            if (de.role === 'alert') {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', []);
            }
            else {
              if (de.role === 'log') {
                rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_3', []);
              }
              else {
                // Status role
                rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_4', []);
              }
            }
          }
        }
        else {
          if (de.ariaInfo.ariaLive) {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName, de.ariaInfo.ariaLive]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_2', [de.tagName, de.role]);
          }
        }
      }
    });

    if (dom_cache.hasScripting || liveCount) {
      {
        rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_2', []);
      }
    }
  } // end validation function
}

];

/* motionRules.js */

/* Constants */
const debug$p = new DebugLogging('Motion Rules', false);
debug$p.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: Motion Rules
 */

const motionRules = [

  /**
   * @object MOTION_1
   *
   * @desc
  */

  { rule_id             : 'MOTION_1',
    last_updated        : '2023-12-03',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.WIDGETS_SCRIPTS,
    rule_required       : true,
    wcag_primary_id     : '2.5.4',
    wcag_related_ids    : [],
    target_resources    : ['page'],
    validate            : function (dom_cache, rule_result) {

      if (dom_cache.hasScripting) {
        rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);
      }

   } // end validation function  }
  }

];

/* navigationRules.js */

/* Constants */
const debug$o = new DebugLogging('Navigation Rules', false);
debug$o.flag = false;


/* Helper Functions */

function isHeadingLevelOne (domElement) {
  return ((domElement.tagName == 'h1')  ||
          ((domElement.role='heading') &&
          (domElement.ariaInfo.ariaLevel === 1)));
}

function isHeadingLevelTwo (domElement) {
  return ((domElement.tagName == 'h2')  ||
          ((domElement.role='heading') &&
          (domElement.ariaInfo.ariaLevel === 2)));
}

/*
 * OpenA11y Rules
 * Rule Category: List Rules
 */

const navigationRules = [

  /**
   * @object NAVIGATION_1
   *
   * @desc Page has at least two of the following resources: table of contents, site map,
   *       search, navigation links, sand trail
   */

  { rule_id             : 'NAVIGATION_1',
    last_updated        : '2023-08-24',
    rule_scope          : RULE_SCOPE.WEBSITE,
    rule_category       : RULE_CATEGORIES.SITE_NAVIGATION,
    rule_required       : true,
    wcag_primary_id     : '2.4.5',
    wcag_related_ids    : [],
    target_resources    : ['Website', 'role=\'search\'', 'role=\'navigation\''],
    validate            : function (dom_cache, rule_result) {

      let navigationCount = 0;
      let searchCount = 0;

      dom_cache.structureInfo.allLandmarkElements.forEach( le => {
        const de = le.domElement;
        if (de.role === 'navigation') {
          if (de.visibility.isVisibleToAT) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
            navigationCount += 1;
          }
        }

        if (de.role === 'search') {
          if (de.visibility.isVisibleToAT) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', []);
            searchCount += 1;
          }
        }
      });

      if ((navigationCount > 0) && (searchCount > 0)) {
        rule_result.addWebsiteResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'WEBSITE_MC_1', []);
      }
      else {
        rule_result.addWebsiteResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'WEBSITE_MC_2', []);
      }

    } // end validation function
  },

  /**
   * @object NAVIGATION_2
   *
   * @desc  Landmarks are in the same relative order when used to identify sections of web pages within the same website
   *
   */

  { rule_id             : 'NAVIGATION_2',
    last_updated        : '2023-08-24',
    rule_scope          : RULE_SCOPE.WEBSITE,
    rule_category       : RULE_CATEGORIES.SITE_NAVIGATION,
    rule_required       : true,
    wcag_primary_id     : '3.2.3',
    wcag_related_ids    : ['3.2.4'],
    target_resources    : ['Website', 'role=\'main\'', 'role=\'navigation\'', 'role=\'banner\'', 'role=\'contentinfo\'','role=\'search\''],
    validate            : function (dom_cache, rule_result) {

      const landmarkRoles = [
        'banner',
        'complementary',
        'contentinfo',
        'main',
        'navigation',
        'search'];

      let landmarks = [];

      dom_cache.structureInfo.allLandmarkElements.forEach( le => {
        const de = le.domElement;
        if (landmarkRoles.includes(de.role)) {
          if (de.visibility.isVisibleToAT) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.role]);
            landmarks.push(de.role);
          }
        }
      });

      if ((landmarks.length > 0)) {
        rule_result.addWebsiteResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'WEBSITE_MC_1', [landmarks.join(', ')]);
      }
    } // end validation function
  },

  /**
   * @object NAVIGATION_3
   *
   * @desc  h2 elements are in the same relative order when used to identify sections of web pages within the same website
   *
   */

  { rule_id             : 'NAVIGATION_3',
    last_updated        : '2023-08-24',
    rule_scope          : RULE_SCOPE.WEBSITE,
    rule_category       : RULE_CATEGORIES.SITE_NAVIGATION,
    rule_required       : true,
    wcag_primary_id     : '3.2.3',
    wcag_related_ids    : ['3.2.4'],
    target_resources    : ['Website', 'h2'],
    validate            : function (dom_cache, rule_result) {

      let headingCount = 0;

      dom_cache.structureInfo.allHeadingDomElements.forEach( de => {
        if (de.visibility.isVisibleToAT) {
          if (isHeadingLevelOne(de)) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
            headingCount += 1;
          }

          if (isHeadingLevelTwo(de)) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', []);
            headingCount += 1;
          }
        }
      });

      if ((headingCount > 0)) {
        rule_result.addWebsiteResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'WEBSITE_MC_1', []);
      }
      else {
        rule_result.addWebsiteResult(TEST_RESULT.FAIL, dom_cache, 'WEBSITE_FAIL_1', []);
      }

    } // end validation function
  },

  /**
   * @object NAVIGATION_4
   *
   * @desc  landmarks identifying the same sections in a website have the same accessible name
   *
   */

  { rule_id             : 'NAVIGATION_4',
    last_updated        : '2023-08-24',
    rule_scope          : RULE_SCOPE.WEBSITE,
    rule_category       : RULE_CATEGORIES.SITE_NAVIGATION,
    rule_required       : true,
    wcag_primary_id     : '3.2.4',
    wcag_related_ids    : ['3.2.3'],
    target_resources    : ['Website', 'role=\'search\'', 'role=\'navigation\'', 'role=\'main\'', 'role=\'banner\'', 'role=\'contentinfo\'', 'h2'],
    validate            : function (dom_cache, rule_result) {

      const landmarkRoles = [
        'banner',
        'complementary',
        'contentinfo',
        'main',
        'navigation',
        'search'];

      let landmarks = [];

      dom_cache.structureInfo.allLandmarkElements.forEach( le => {
        const de = le.domElement;
        if (landmarkRoles.includes(de.role)) {
          if (de.visibility.isVisibleToAT) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.role]);
            landmarks.push(de.role);
          }
        }
      });

      if ((landmarks.length > 0)) {
        rule_result.addWebsiteResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'WEBSITE_MC_1', [landmarks.join(', ')]);
      }

    } // end validation function
  },

  /**
   * @object NAVIGATION_5
   *
   * @desc  h2 elements used to identify sections of web pages within the same accessible name
   *
   */

  { rule_id             : 'NAVIGATION_5',
    last_updated        : '2023-08-24',
    rule_scope          : RULE_SCOPE.WEBSITE,
    rule_category       : RULE_CATEGORIES.SITE_NAVIGATION,
    rule_required       : true,
    wcag_primary_id     : '3.2.4',
    wcag_related_ids    : ['3.2.3'],
    target_resources    : ['Website', 'h2'],
    validate            : function (dom_cache, rule_result) {

      let headingCount = 0;

      dom_cache.structureInfo.allHeadingDomElements.forEach( de => {
        if (de.visibility.isVisibleToAT) {
          if (isHeadingLevelOne(de)) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
            headingCount += 1;
          }

          if (isHeadingLevelTwo(de)) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', []);
            headingCount += 1;
          }
        }
      });

      if ((headingCount > 0)) {
        rule_result.addWebsiteResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'WEBSITE_MC_1', []);
      }
      else {
        rule_result.addWebsiteResult(TEST_RESULT.FAIL, dom_cache, 'WEBSITE_FAIL_1', []);
      }

    } // end validation function
  }
];

/* pointerRules.js */

/* Constants */
const debug$n = new DebugLogging('Pointer Rules', false);
debug$n.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: Pointer Rules
 */

const pointerRules = [

  /**
   * @object POINTER_1
   *
   * @desc
  */

  { rule_id             : 'POINTER_1',
    last_updated        : '2023-12-03',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.WIDGETS_SCRIPTS,
    rule_required       : true,
    wcag_primary_id     : '2.5.1',
    wcag_related_ids    : [],
    target_resources    : ['widgets'],
    validate            : function (dom_cache, rule_result) {

      if (dom_cache.hasScripting) {
        rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);
      }

   } // end validation function  }
  },

  /**
   * @object POINTER_2
   *
   * @desc Pointer Cancellation
  */

  { rule_id             : 'POINTER_2',
    last_updated        : '2023-12-03',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.WIDGETS_SCRIPTS,
    rule_required       : true,
    wcag_primary_id     : '2.5.2',
    wcag_related_ids    : [],
    target_resources    : ['widgets'],
    validate            : function (dom_cache, rule_result) {

      if (dom_cache.hasScripting) {
        rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);
      }

   } // end validation function  }
  },

  /**
   * @object POINTER_3
   *
   * @desc Dragging Movements
  */

  { rule_id             : 'POINTER_3',
    last_updated        : '2023-12-16',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.WIDGETS_SCRIPTS,
    rule_required       : true,
    wcag_primary_id     : '2.5.7',
    wcag_related_ids    : [],
    target_resources    : ['widgets'],
    validate            : function (dom_cache, rule_result) {

      if (dom_cache.hasScripting) {
        rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);
      }

   } // end validation function  }
  }

];

/* readingOrderRules.js */

/* Constants */
const debug$m = new DebugLogging('Reading Order Rules', false);
debug$m.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: Reading Order Rules
 */

const readingOrderRules = [

    /**
     * @object ORDER_1
     *
     * @desc Reading order is meaningful when content is positioned using CSS
     */

  { rule_id             : 'ORDER_1',
    last_updated        : '2023-08-25',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.COLOR_CONTENT,
    rule_required       : true,
    wcag_primary_id     : '1.3.2',
    wcag_related_ids    : [],
    target_resources    : [],
    validate          : function (dom_cache, rule_result) {

      const positionValues = [
        'absolute',
        'relative',
        'fixed'];

      dom_cache.allDomElements.forEach( de => {
        if (positionValues.includes(de.cssPosition)) {
          if (de.visibility.isVisibleToAT) {
             rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName, de.cssPosition]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName, de.cssPosition]);
          }
        }
      });
    } // end validate function
  }
];

/* resizeRules.js */

/* Constants */
const debug$l = new DebugLogging('Resize Rules', false);
debug$l.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: Resize Rules
 */

const resizeRules = [

  /**
   * @object RESIZE_1
   *
   * @desc Resize content
   */

  { rule_id             : 'RESIZE_1',
    last_updated        : '2023-08-25',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.TABLES_LAYOUT,
    rule_required       : true,
    wcag_primary_id     : '1.4.4',
    wcag_related_ids    : [],
    target_resources    : ['content'],
    validate          : function (dom_cache, rule_result) {
      rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);
    } // end validate function
  },

 /**
   * @object RESIZE_1
   *
   * @desc Resize content
   */

  { rule_id             : 'RESIZE_2',
    last_updated        : '2023-09-19',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.TABLES_LAYOUT,
    rule_required       : true,
    wcag_primary_id     : '1.4.10',
    wcag_related_ids    : [],
    target_resources    : ['content'],
    validate          : function (dom_cache, rule_result) {
      rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);
    } // end validate function
  }

];

/* sensoryRules.js */

/* Constants */
const debug$k = new DebugLogging('Sensory Rules', false);
debug$k.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: Sensory Rules
 */

const sensoryRules = [

    /**
     * @object SENSORY_1
     *
     * @desc Content does not rely solely on sensory characteristics
     */

  { rule_id             : 'SENSORY_1',
    last_updated        : '2023-08-25',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.COLOR_CONTENT,
    rule_required       : true,
    wcag_primary_id     : '1.3.3',
    wcag_related_ids    : [],
    target_resources    : ['button', 'link'],
    validate          : function (dom_cache, rule_result) {
      rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);
    } // end validate function
  }

];

/* shortcutRules.js */

/* Constants */
const debug$j = new DebugLogging('Shortcut Rules', false);
debug$j.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: Shortcut Rules
 */

const shortcutRules = [

  /**
   * @object SHORTCUT_1
   *
   * @desc Ability to adjust author defined keyboard shortcuts if they exist
  */

  { rule_id             : 'SHORTCUT_1',
    last_updated        : '2023-12-03',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.KEYBOARD_SUPPORT,
    rule_required       : true,
    wcag_primary_id     : '2.1.4',
    wcag_related_ids    : [],
    target_resources    : ['page'],
    validate            : function (dom_cache, rule_result) {

      if (dom_cache.hasScripting) {
        rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);
      }

   } // end validation function  }
  },

  /**
   * @object SHORTCUT_2
   *
   * @desc Avoid using accesskey attribute
  */

  { rule_id             : 'SHORTCUT_2',
    last_updated        : '2023-12-04',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.KEYBOARD_SUPPORT,
    rule_required       : true,
    wcag_primary_id     : '2.1.4',
    wcag_related_ids    : [],
    target_resources    : ['a', 'input', 'output', 'select', 'textarea'],
    validate            : function (dom_cache, rule_result) {

      dom_cache.allDomElements.forEach( de => {
        if (de.accesskey) {
          if (de.visibility.isVisibleToAT) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.accesskey]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.accesskey]);
          }
        }
      });

   } // end validation function  }
  }

];

/* spacingRules.js */

/* Constants */
const debug$i = new DebugLogging('Spacing Rules', false);
debug$i.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: Spacing Rules
 */

const spacingRules = [

  /**
   * @object SPACING_1
   *
   * @desc Text Spacing
   */

  { rule_id             : 'SPACING_1',
    last_updated        : '2023-12-16',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.COLOR_CONTENT,
    rule_required       : true,
    wcag_primary_id     : '1.4.12',
    wcag_related_ids    : [],
    target_resources    : ['text'],
    validate          : function (dom_cache, rule_result) {

      rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);

    } // end validate function
  }
];

/* tableRules.js */

/* Constants */
const debug$h = new DebugLogging('Table Rules', false);
debug$h.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: Table Rules
 */

const tableRules = [

/**
 * @object TABLE_1
 *
 * @desc If a table is a data table, if each data cell has headers
 */
{ rule_id             : 'TABLE_1',
  last_updated        : '2023-04-21',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.TABLES_LAYOUT,
  rule_required       : true,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.6'],
  target_resources    : ['td'],
  validate          : function (dom_cache, rule_result) {

    dom_cache.tableInfo.allTableElements.forEach(te => {
      te.cells.forEach( cell => {
        const de = cell.domElement;
        if (de.visibility.isVisibleToAT) {
          if (cell.isHeader) {
            if (!de.accName.name) {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', [de.elemName]);
            }
          }
          else {
            if (de.accName.name) {
              const headerCount = cell.headers.length;
              const headerStr = cell.headers.join (' | ');
              if (headerCount) {
                if (cell.headerSource === HEADER_SOURCE.ROW_COLUMN) {
                  if (headerCount === 1) {
                    rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.elemName, headerStr]);
                  }
                  else {
                    rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', [de.elemName, headerCount, headerStr]);
                  }
                }
                else {
                  if (headerCount === 1) {
                    rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_3', [de.elemName, headerStr]);
                  }
                  else {
                    rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_4', [de.elemName, headerCount, headerStr]);
                  }
                }
              }
              else {
                rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.elemName]);
              }
            }
            else {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName]);
            }
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
        }
      });
    });
  } // end validation function
 },

/**
 * @object TABLE_2
 *
 * @desc Data table have an accessible name
 */
{ rule_id             : 'TABLE_2',
  last_updated        : '2023-05-03',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.TABLES_LAYOUT,
  rule_required       : true,
  wcag_primary_id     : '2.4.6',
  wcag_related_ids    : ['1.3.1'],
  target_resources    : ['table', 'caption'],
  validate            : function (dom_cache, rule_result) {
    dom_cache.tableInfo.allTableElements.forEach(te => {
      const de = te.domElement;
      if (de.visibility.isVisibleToAT) {
        if ((te.tableType === TABLE_TYPE.DATA) ||
            (te.tableType === TABLE_TYPE.COMPLEX)) {
          if (de.accName.name) {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.elemName, de.accName.source]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.elemName]);
          }
        }
      }
      else {
        rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
      }
    });
  } // end validation function
 },

/**
 * @object TABLE_3
 *
 * @desc  Complex data tables should have a text description or summary of data in the table
 */

{ rule_id             : 'TABLE_3',
  last_updated        : '2023-05-03',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.TABLES_LAYOUT,
  rule_required       : true,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.6'],
  target_resources    : ['table'],
  validate          : function (dom_cache, rule_result) {

    dom_cache.tableInfo.allTableElements.forEach(te => {
      const de = te.domElement;
      if (de.visibility.isVisibleToAT) {
        if ((te.tableType === TABLE_TYPE.DATA) || (te.tableType === TABLE_TYPE.COMPLEX)) {
          if (de.accDescription.name) {
            if (de.accDescription.source === 'aria-describedby') {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.elemName]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', [de.elemName]);
            }
          }
          else {
            if (te.tableType === TABLE_TYPE.DATA){
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', [de.elemName]);
            }
          }
        }
      }
      else {
        rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
      }
    });
  } // end validation function
 },

/**
 * @object TABLE_4
 *
 * @desc   Data tables with accessible names must be unique
 */

{ rule_id             : 'TABLE_4',
  last_updated        : '2023-04-21',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.TABLES_LAYOUT,
  rule_required       : true,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.6'],
  target_resources    : ['table'],
  validate          : function (dom_cache, rule_result) {

    const visibleDataTables = [];

    dom_cache.tableInfo.allTableElements.forEach(te => {
      const de = te.domElement;
      if (de.visibility.isVisibleToAT) {
        if (te.tableType > TABLE_TYPE.LAYOUT) {
          visibleDataTables.push(te);
        }
      }
      else {
        rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
      }
    });

    visibleDataTables.forEach(te1 => {
      let count = 0;
      const de = te1.domElement;
      const accName1 = te1.domElement.accName.name;
      if (accName1) {
        visibleDataTables.forEach(te2 => {
          if (te1 !== te2) {
            const accName2 = te2.domElement.accName.name;
            if (accName2) {
              if (accName1.toLowerCase() === accName2.toLowerCase()) {
                count += 1;
              }
            }
          }
        });
        if (count) {
          rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [accName1, de.elemName]);
        }
        else {
          rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [accName1, de.elemName]);
        }
      }
    });
  } // end validation function
},

/**
 * @object TABLE_5
 *
 * @desc  Identifies a table is being used for layout or tabular data, or cannot be determined form markup
 */

 { rule_id             : 'TABLE_5',
  last_updated        : '2023-04-21',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.TABLES_LAYOUT,
  rule_required       : true,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.6'],
  target_resources    : ['table'],
  validate          : function (dom_cache, rule_result) {

    dom_cache.tableInfo.allTableElements.forEach(te => {
      const de = te.domElement;
      if (de.visibility.isVisibleToAT) {
        switch (te.tableType) {
          case TABLE_TYPE.LAYOUT:
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.elemName, de.role]);
            break;

          case TABLE_TYPE.DATA:
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', [de.elemName]);
            break;

          case TABLE_TYPE.COMPLEX:
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_3', [de.elemName]);
            break;

          case TABLE_TYPE.ARIA_TABLE:
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_4', [de.elemName]);
            break;

          case TABLE_TYPE.ARIA_GRID:
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_5', [de.elemName]);
            break;

          case TABLE_TYPE.ARIA_TREEGRID:
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_6', [de.elemName]);
            break;

          default:

            if (te.rowCount === 1) {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName]);
            }
            else {
              if (te.colCount === 1) {
                rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', [de.elemName]);
              }
              else {
                rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.elemName]);
              }
            }
            break;
        }
      }
      else {
        rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
      }
    });
  } // end validation function
 },

/**
 * @object TABLE_6
 *
 * @desc    Tests if table headers use TH elements instead of TD with SCOPE
 */

{ rule_id             : 'TABLE_6',
  last_updated        : '2023-04-21',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.TABLES_LAYOUT,
  rule_required       : false,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.6'],
  target_resources    : ['td[scope]'],
  validate          : function (dom_cache, rule_result) {

    dom_cache.tableInfo.allTableElements.forEach(te => {
      const de = te.domElement;
      if (de.visibility.isVisibleToAT) {
        te.cells.forEach( cell => {
          const cde = cell.domElement;
          if (cde.visibility.isVisibleToAT) {
            if (cell.isHeader) {
              if (cde.tagName === 'td') {
                rule_result.addElementResult(TEST_RESULT.FAIL, cde, 'ELEMENT_FAIL_1', [cde.elemName]);
              }
              else {
                rule_result.addElementResult(TEST_RESULT.PASS, cde, 'ELEMENT_PASS_1', [cde.elemName]);
              }
            }
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, cde, 'ELEMENT_HIDDEN_2', [cde.elemName]);
          }
        });
      }
      else {
        rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
      }
    });
  } // end validation function
},

/**
 * @object TABLE_7
 *
 * @desc  Spanned data cells in complex table must use headers attributes
 */

{ rule_id             : 'TABLE_7',
  last_updated        : '2023-05-08',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.TABLES_LAYOUT,
  rule_required       : true,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.6'],
  target_resources    : ['td'],
  validate          : function (dom_cache, rule_result) {
    dom_cache.tableInfo.allTableElements.forEach(te => {
      const de = te.domElement;
      if (te.tableType > TABLE_TYPE.DATA) {
        if (de.visibility.isVisibleToAT) {
          te.cells.forEach( cell => {
            const cde = cell.domElement;
            if (cde.visibility.isVisibleToAT) {
              if (!cell.isHeader &&
                 ((cell.rowSpan > 1) || (cell.columnSpan > 1))) {
                if (cell.headerSource === HEADER_SOURCE.HEADERS_ATTR) {
                  if (cell.headers.length == 1) {
                    rule_result.addElementResult(TEST_RESULT.PASS, cde, 'ELEMENT_PASS_1', [cell.headers[0]]);
                  }
                  else {
                    rule_result.addElementResult(TEST_RESULT.PASS, cde, 'ELEMENT_PASS_2', [cell.headers.length, cell.headers.join(' | ')]);
                  }
                }
                else {
                  if (cell.hasContent) {
                    rule_result.addElementResult(TEST_RESULT.FAIL, cde, 'ELEMENT_FAIL_1', [cde.elemName]);
                  }
                }
              }
            }
            else {
              rule_result.addElementResult(TEST_RESULT.HIDDEN, cde, 'ELEMENT_HIDDEN_2', [cde.elemName]);
            }
          });
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
        }
      }
    });
  }
},

/**
 * @object TABLE_8
 *
 * @desc  Accessible name and description must be different, description longer than name
 */

{ rule_id             : 'TABLE_8',
  last_updated        : '2023-04-21',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.TABLES_LAYOUT,
  rule_required       : true,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.6'],
  target_resources    : ['caption', 'table[aria-label]', 'table[aria-labelledby]', 'table[aria-describedby]', 'table[title]'],
  validate          : function (dom_cache, rule_result) {

   dom_cache.tableInfo.allTableElements.forEach(te => {
      const de = te.domElement;
      if (te.tableType >= TABLE_TYPE.DATA) {
        if (de.visibility.isVisibleToAT) {
          const de = te.domElement;
          if (de.accName.name && de.accDescription.name) {
            if (de.accName.name.toLowerCase() ===  de.accDescription.name.toLowerCase()) {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', []);
            }
            else {
              if (de.accName.name.length < de.accDescription.name.length) {
                rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', []);
              }
              else {
                rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
              }
            }
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
        }
      }
    });
  } // end validation function
}
];

/* targetSizeRules.js */

/* Constants */
const debug$g = new DebugLogging('Size', false);
debug$g.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: Target Size Rules
 */

const targetSizeRules = [

  /**
   * @object TARGET_SIZE_1
   *
   * @desc Link target size minimum
   */

  { rule_id             : 'TARGET_SIZE_1',
    last_updated        : '2023-10-26',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.LINKS,
    rule_required       : true,
    wcag_primary_id     : '2.5.8',
    wcag_related_ids    : [],
    target_resources    : ['links'],
    validate          : function (dom_cache, rule_result) {

      dom_cache.linkInfo.allLinkDomElements.forEach( de => {
        const h = de.height;
        const w = de.width;

        if (!de.parentInfo.inParagraph && de.authorSizing) {
          if ((w < 24) || (h < 24)) {
            if (de.visibility.isVisibleOnScreen) {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [h, w]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
            }
          }
          else {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [h, w]);
          }
        }
      });

    } // end validate function
  },

  /**
   * @object TARGET_SIZE_2
   *
   * @desc Link target size enhanced
   */

  { rule_id             : 'TARGET_SIZE_2',
    last_updated        : '2023-10-26',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.LINKS,
    rule_required       : false,
    wcag_primary_id     : '2.5.5',
    wcag_related_ids    : [],
    target_resources    : ['links'],
    validate          : function (dom_cache, rule_result) {

      dom_cache.linkInfo.allLinkDomElements.forEach( de => {
        const h = de.height;
        const w = de.width;
        if (!de.parentInfo.inParagraph && de.authorSizing) {
          if ((w < 44) || (h < 44)) {
            if (de.visibility.isVisibleOnScreen) {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [h, w]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
            }
          }
          else {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [h, w]);
          }
        }
      });

    } // end validate function
  },

  /**
   * @object TARGET_SIZE_3
   *
   * @desc button target size minimum
   */

  { rule_id             : 'TARGET_SIZE_3',
    last_updated        : '2023-10-29',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.FORMS,
    rule_required       : true,
    wcag_primary_id     : '2.5.8',
    wcag_related_ids    : [],
    target_resources    : ['button', 'input[type=button]', 'input[type=image]', 'input[type=reset]', 'input[type=submit]', '[role=button]'],
    validate          : function (dom_cache, rule_result) {

      dom_cache.controlInfo.allButtonElements.forEach( be => {
        const de = be.domElement;
        const h = de.height;
        const w = de.width;
        if ((w < 24) || (h < 24)) {
          if (de.visibility.isVisibleOnScreen) {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.elemName, h, w]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.elemName, h, w]);
        }
      });

    } // end validate function
  },

  /**
   * @object TARGET_SIZE_4
   *
   * @desc Button target size enhanced
   */

  { rule_id             : 'TARGET_SIZE_4',
    last_updated        : '2023-10-29',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.FORMS,
    rule_required       : false,
    wcag_primary_id     : '2.5.5',
    wcag_related_ids    : [],
    target_resources    : ['button', 'input[type=button]', 'input[type=image]', 'input[type=reset]', 'input[type=submit]', '[role=button]'],
    validate          : function (dom_cache, rule_result) {

      dom_cache.controlInfo.allButtonElements.forEach( be => {
        const de = be.domElement;
        const h = de.height;
        const w = de.width;

        if (debug$g.flag) {
          debug$g.log(`[${de.accName.name}] h: ${h}  w: ${w}`);
          debug$g.log(`[       width]: ${de.authorWidth}`);
          debug$g.log(`[      height]: ${de.authorHeight}`);
          debug$g.log(`[      inLink]: ${de.parentInfo.inLink}`);
          debug$g.log(`[      inPara]: ${de.parentInfo.inParagraph}`);
          debug$g.log(`[authorSizing]: ${de.authorSizing}`);
          debug$g.log(`[     top]: ${de.authorTop}`);
          debug$g.log(`[  bottom]: ${de.authorBottom}`);
          debug$g.log(`[    left]: ${de.authorLeft}`);
          debug$g.log(`[   right]: ${de.authorRight}`);
          debug$g.log(`[ display]: ${de.authorDisplay}`);
          debug$g.log(`[position]: ${de.authorPosition}`);
        }

        if ((w < 44) || (h < 44)) {
          if (de.visibility.isVisibleOnScreen) {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.eleName, h, w]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.elemName, h, w]);
        }
      });

    } // end validate function
  },

 /**
   * @object TARGET_SIZE_5
   *
   * @desc Checkbox and radio button target size minimum
   */

  { rule_id             : 'TARGET_SIZE_5',
    last_updated        : '2023-11-17',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.FORMS,
    rule_required       : true,
    wcag_primary_id     : '2.5.8',
    wcag_related_ids    : [],
    target_resources    : ['input[type=checkbox]', 'input[type=radio]', '[role=radio]', '[role=checkbox]]'],
    validate          : function (dom_cache, rule_result) {

      dom_cache.controlInfo.allControlElements.forEach( ce => {
        const de = ce.domElement;

        if (de.role === 'radio' || de.role === 'checkbox') {
          if (de.visibility.isVisibleOnScreen) {
            let h = de.height;
            let w = de.width;
            if (( h < 24) || ( w < 24)) {
              if (ce.hasLabel) {
                h = ce.labelHeight;
                w = ce.labelWidth;
                if (( h < 24) || (w < 24)) {
                  rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', [h, w]);
                }
                else {
                  rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', [h, w]);
                }
              }
              else {
                rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.elemName, h, w]);
              }
            }
            else {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.elemName, h, w]);
            }
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
          }
        }


      });

    } // end validate function
  },

 /**
   * @object TARGET_SIZE_6
   *
   * @desc Checkbox and radio button target size enhanced
   */

  { rule_id             : 'TARGET_SIZE_6',
    last_updated        : '2023-11-17',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.FORMS,
    rule_required       : false,
    wcag_primary_id     : '2.5.5',
    wcag_related_ids    : [],
    target_resources    : ['input[type=checkbox]', 'input[type=radio]', '[role=radio]', '[role=checkbox]]'],
    validate          : function (dom_cache, rule_result) {

      dom_cache.controlInfo.allControlElements.forEach( ce => {
        const de = ce.domElement;

        if (de.role === 'radio' || de.role === 'checkbox') {
          if (de.visibility.isVisibleOnScreen) {
            let h = de.height;
            let w = de.width;
            if (( h < 44) || ( w < 44)) {
              if (ce.hasLabel) {
                h = ce.labelHeight;
                w = ce.labelWidth;
                if (( h < 44) || (w < 44)) {
                  rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', [h, w]);
                }
                else {
                  rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', [h, w]);
                }
              }
              else {
                rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.elemName, h, w]);
              }
            }
            else {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.elemName, h, w]);
            }
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
          }
        }


      });

    } // end validate function
  }



];

/* timingRules.js */

/* Constants */
const debug$f = new DebugLogging('Timing Rules', false);
debug$f.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: Timing Rules
 */

const timingRules = [

  /**
   * @object TIMING_1
   *
   * @desc Timing adjustable for pages with interactive elements
   */

  { rule_id             : 'TIMING_1',
    last_updated        : '2023-08-24',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.TIMING_LIVE,
    rule_required       : true,
    wcag_primary_id     : '2.2.1',
    wcag_related_ids    : [],
    target_resources    : ['a', 'input', 'button', 'wdiget'],
    validate          : function (dom_cache, rule_result) {

    if (dom_cache.controlInfo.allControlElements.length) {
      rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);
    }

    } // end validate function
  },

  /**
   * @object TIMING_2
   *
   * @desc Stop, pause or hide content that is moving, scrolling, flashing or auto updating
   */

  { rule_id             : 'TIMING_2',
    last_updated        : '2023-08-24',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.TIMING_LIVE,
    rule_required       : true,
    wcag_primary_id     : '2.2.2',
    wcag_related_ids    : [],
    target_resources    : ['canvas', 'embed', 'img', 'object', 'svg'],
    validate          : function (dom_cache, rule_result) {

      dom_cache.timingInfo.allTimingDomElements.forEach( de => {
        if (de.visibility.isVisibleToAT) {
          rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName]);
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
        }
      });

      if (dom_cache.timingInfo.allTimingDomElements.length > 0) {
        rule_result.addWebsiteResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);
      }
    } // end validate function
  },

  /**
   * @object TIMING_3
   *
   * @desc Web pages do not contain anything that flashes more than three times in any one second period
   */

  { rule_id             : 'TIMING_3',
    last_updated        : '2023-08-24',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.TIMING_LIVE,
    rule_required       : true,
    wcag_primary_id     : '2.3.1',
    wcag_related_ids    : [],
    target_resources    : ['canvas', 'embed', 'img', 'object', 'svg'],
    validate          : function (dom_cache, rule_result) {

      dom_cache.timingInfo.allTimingDomElements.forEach( de => {
        if (de.visibility.isVisibleToAT) {
          rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.elemName]);
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
        }
      });

      if (dom_cache.timingInfo.allTimingDomElements.length > 0) {
        rule_result.addWebsiteResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);
      }

    } // end validate function
  }
];

/* titleRules.js */

/* Constants */
const debug$e = new DebugLogging('Title Rules', false);
debug$e.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: Title Rules
 */

const titleRules = [

  /**
   * @object TITLE_1
   *
   * @desc the title element text content must describe the purpose or content of the page
   */

  { rule_id             : 'TITLE_1',
    last_updated        : '2023-09-04',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.SITE_NAVIGATION,
    rule_required       : true,
    wcag_primary_id     : '2.4.2',
    wcag_related_ids    : ['1.3.1', '2.4.6'],
    target_resources    : ['Page', 'title'],
    validate            : function (dom_cache, rule_result) {
      if (dom_cache.hasTitle) {
        rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', [dom_cache.title]);
      }
      else {
        rule_result.addPageResult(TEST_RESULT.FAIL, dom_cache, 'PAGE_FAIL_1', []);
      }
    } // end validate function
  },

  /**
   * @object TITLE_2
   *
   * @desc The words in the @h1@ content must be part of the title element text content.
   *
   */

  { rule_id             : 'TITLE_2',
    last_updated        : '2023-09-04',
    rule_scope          : RULE_SCOPE.PAGE,
    rule_category       : RULE_CATEGORIES.SITE_NAVIGATION,
    rule_required       : true,
    wcag_primary_id     : '2.4.2',
    wcag_related_ids    : ['1.3.1', '2.4.6'],
    target_resources    : ['Page', 'title', 'h1'],
    validate            : function (dom_cache, rule_result) {

      function similiarContent (title, h1) {
        if (typeof title !== 'string') {
          title = '';
        }
        if (typeof h1 !== 'string') {
          h1 = '';
        }
        // Replace special characters and '_' with spaces
        title = title.toLowerCase().replace(/\W+/g, ' ').replace('_', ' ');
        h1 = h1.toLowerCase().replace(/\W+/g, ' ').replace('_', ' ');

        const wordsTitle = title.split(' ');
        const wordsH1 = h1.split(' ');

        let count = 0;
        wordsH1.forEach( word => {
          if (wordsTitle.includes(word)) {
            count += 1;
          }
        });

        return count > ((wordsH1.length * 8) / 10);
      }

      const visibleH1Elements = [];
      let passedH1Count = 0;

      if (dom_cache.hasTitle) {

        // Get h1s visible to AT
        dom_cache.structureInfo.allH1DomElements.forEach( de => {
          if (de.visibility.isVisibleToAT) {
            visibleH1Elements.push(de);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
          }
        });

        const visibleH1Count = visibleH1Elements.length;

        visibleH1Elements.forEach( de => {
          if (de.accName.name) {
            if (similiarContent(dom_cache.title, de.accName.name)) {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', []);
              passedH1Count += 1;
            }
            else {
              if (visibleH1Count > 2) {
                rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
              }
              else {
                rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', []);
              }
            }
          }
          else {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', []);
          }
        });

        if (visibleH1Count === 0) {
          rule_result.addPageResult(TEST_RESULT.FAIL, dom_cache, 'PAGE_FAIL_2', []);
        }
        else {
          if (visibleH1Count > 2) {
            rule_result.addPageResult(TEST_RESULT.MANUAL_CHECK, dom_cache, 'PAGE_MC_1', []);
          }
          else {
            if (visibleH1Count !== passedH1Count) {
              rule_result.addPageResult(TEST_RESULT.FAIL, dom_cache, 'PAGE_FAIL_4', []);
            }
            else {
              if (visibleH1Count === 1) {
                rule_result.addPageResult(TEST_RESULT.PASS, dom_cache, 'PAGE_PASS_1', []);
              }
              else {
                rule_result.addPageResult(TEST_RESULT.PASS, dom_cache, 'PAGE_PASS_2', []);
              }
            }
          }
        }
      }
      else {
        rule_result.addPageResult(TEST_RESULT.FAIL, dom_cache, 'PAGE_FAIL_1', []);
      }

    } // end validate function
  }
];

/* videoRules.js */

/* Constants */
const debug$d = new DebugLogging('Audio Rules', false);
debug$d.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: Video Rules
 */

const videoRules = [

  /**
   * @object VIDEO_1
   *
   * @desc Video elements used for prerecorded video only content using the video element must have text or audio description
   */

  { rule_id             : 'VIDEO_1',
    last_updated        : '2023-08-11',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.AUDIO_VIDEO,
    rule_required       : true,
    wcag_primary_id     : '1.2.1',
    wcag_related_ids    : ['1.2.2', '1.2.4'],
    target_resources    : ['video', 'track'],
    validate          : function (dom_cache, rule_result) {

      dom_cache.mediaInfo.videoElements.forEach( ve => {
        const de = ve.domElement;
        if (de.visibility.isVisibleToAT || ve.hasAutoPlay) {
          if (ve.tracks.length) {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', []);
          }
          else {
            if (de.accDescription.name) {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', []);
            }
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
        }
      });

    } // end validate function
  },

  /**
   * @object VIDEO_2
   *
   * @desc Video elements used for prerecorded video only content using the object element must have text or audio description
   */

  { rule_id             : 'VIDEO_2',
    last_updated        : '2023-08-11',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.AUDIO_VIDEO,
    rule_required       : true,
    wcag_primary_id     : '1.2.1',
    wcag_related_ids    : ['1.2.2', '1.2.4'],
    target_resources    : ['object', 'param'],
    validate          : function (dom_cache, rule_result) {

      dom_cache.mediaInfo.objectElements.forEach( oe => {
        const de = oe.domElement;
        if (de.visibility.isVisibleToAT) {
          if (oe.isVideo) {
            if (de.accDescription.name) {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', []);
            }
          }
          else {
            if (de.accDescription.name) {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_3', []);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_4', []);
            }
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
        }
      });

    } // end validate function
  },

  /**
   * @object VIDEO_3
   *
   * @desc Video elements used for prerecorded video only content using the embed element must have text or audio description
   */

  { rule_id             : 'VIDEO_3',
    last_updated        : '2023-08-11',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.AUDIO_VIDEO,
    rule_required       : true,
    wcag_primary_id     : '1.2.1',
    wcag_related_ids    : ['1.2.2', '1.2.4'],
    target_resources    : ['embed'],
    validate          : function (dom_cache, rule_result) {

      dom_cache.mediaInfo.embedElements.forEach( ee => {
        const de = ee.domElement;
        if (de.visibility.isVisibleToAT) {
          if (ee.isVideo) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', []);
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
        }
      });

    } // end validate function
  },

  /**
   * @object VIDEO_4
   *
   * @desc Live and prerecorded video with synchronized audio (i.e. movie, lecture) using the video element must have captions
   */

  { rule_id             : 'VIDEO_4',
    last_updated        : '2023-08-11',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.AUDIO_VIDEO,
    rule_required       : true,
    wcag_primary_id     : '1.2.2',
    wcag_related_ids    : ['1.2.4'],
    target_resources    : ['video', 'track'],
    validate          : function (dom_cache, rule_result) {

      dom_cache.mediaInfo.videoElements.forEach( ve => {
        const de = ve.domElement;
        if (de.visibility.isVisibleToAT) {
          if (ve.hasCaptionTrack || ve.hasSubtitleTrack) {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', []);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
        }
      });

    } // end validate function
  },

  /**
   * @object VIDEO_5
   *
   * @desc Live and prerecorded video with synchronized audio (i.e. movie, lecture) using the object element must have captions
   */

  { rule_id             : 'VIDEO_5',
    last_updated        : '2023-08-11',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.AUDIO_VIDEO,
    rule_required       : true,
    wcag_primary_id     : '1.2.2',
    wcag_related_ids    : ['1.2.4'],
    target_resources    : ['object', 'param'],
    validate          : function (dom_cache, rule_result) {

      dom_cache.mediaInfo.objectElements.forEach( oe => {
        const de = oe.domElement;
        if (de.visibility.isVisibleToAT) {
          if (oe.isVideo) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', []);
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
        }
      });

    } // end validate function
  },

  /**
   * @object VIDEO_6
   *
   * @desc Live and prerecorded video with synchronized audio (i.e. movie, lecture) using the embed element must have captions
   */

  { rule_id             : 'VIDEO_6',
    last_updated        : '2023-08-11',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.AUDIO_VIDEO,
    rule_required       : true,
    wcag_primary_id     : '1.2.2',
    wcag_related_ids    : ['1.2.1', '1.2.4'],
    target_resources    : ['embed'],
    validate          : function (dom_cache, rule_result) {

      dom_cache.mediaInfo.embedElements.forEach( ee => {
        const de = ee.domElement;
        if (de.visibility.isVisibleToAT) {
          if (ee.isVideo) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', []);
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
        }
      });

    } // end validate function
  },

  /**
   * @object VIDEO_7
   *
   * @desc Prerecorded video with synchronized audio (i.e. movie) using the video element must have audio description
   */

  { rule_id             : 'VIDEO_7',
    last_updated        : '2023-08-11',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.AUDIO_VIDEO,
    rule_required       : true,
    wcag_primary_id     : '1.2.3',
    wcag_related_ids    : ['1.2.5'],
    target_resources    : ['video', 'track'],
    validate          : function (dom_cache, rule_result) {

      dom_cache.mediaInfo.videoElements.forEach( ve => {
        const de = ve.domElement;
        if (de.visibility.isVisibleToAT) {
          if (ve.hasDescriptionTrack) {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', []);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
        }
      });

    } // end validate function
  },

  /**
   * @object VIDEO_8
   *
   * @desc Prerecorded video with synchronized audio (i.e. movie) using the object element must have audio description
   */

  { rule_id             : 'VIDEO_8',
    last_updated        : '2023-08-11',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.AUDIO_VIDEO,
    rule_required       : true,
    wcag_primary_id     : '1.2.3',
    wcag_related_ids    : ['1.2.1', '1.2.5'],
    target_resources    : ['object', 'param'],
    validate          : function (dom_cache, rule_result) {


      dom_cache.mediaInfo.objectElements.forEach( oe => {
        const de = oe.domElement;
        if (de.visibility.isVisibleToAT) {
          if (oe.isVideo) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', []);
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
        }
      });

    } // end validate function
  },

  /**
   * @object VIDEO_9
   *
   * @desc Prerecorded video with synchronized audio (i.e. movie) using the embed element must have audio description
   */

  { rule_id             : 'VIDEO_9',
    last_updated        : '2023-08-11',
    rule_scope          : RULE_SCOPE.ELEMENT,
    rule_category       : RULE_CATEGORIES.AUDIO_VIDEO,
    rule_required       : true,
    wcag_primary_id     : '1.2.3',
    wcag_related_ids    : ['1.2.1', '1.2.5'],
    target_resources    : ['embed'],
    validate          : function (dom_cache, rule_result) {

      dom_cache.mediaInfo.embedElements.forEach( ee => {
        const de = ee.domElement;
        if (de.visibility.isVisibleToAT) {
          if (ee.isVideo) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', []);
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
        }
      });

    } // end validate function
  }
];

/* widgetRules.js */

/* Constants */
const debug$c = new DebugLogging('Widget Rules', false);
debug$c.flag = false;

/*
 * OpenA11y Rules
 * Rule Category: Widget Rules
 */

const widgetRules = [
/**
 * @object WIDGET_1
 *
 * @desc ARIA Widgets must have accessible names
 */

{ rule_id             : 'WIDGET_1',
  last_updated        : '2021-07-07',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_required       : true,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['ARIA Widget roles'],
  validate            : function (dom_cache, rule_result) {

    dom_cache.allDomElements.forEach(de => {
      const ai = de.ariaInfo;
      // There are other rules that check for accessible name for labelable controls, landmarks, headings and links
      // Ignore option role, since web developers are very sloppy about giving them content before they are made visible
      if (ai.isWidget && !de.isLabelable && !de.isLink && (de.role !== 'option')) {
        if (de.visibility.isVisibleToAT) {
          if (de.accName.name) {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.tagName, de.role, de.accName.name]);
          }
          else {
            if (ai.isNameRequired) {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.tagName, de.role]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.tagName, de.role]);              
            }
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName, de.role]);
        }
      }
    });

   } // end validation function
},

/**
 * @object WIDGET_2
 *
 * @desc Elements with onClick event handlers event handlers need role
 */

{ rule_id             : 'WIDGET_2',
  last_updated        : '2022-08-15',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_required       : true,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['Elements with onclick events'],
  validate            : function (dom_cache, rule_result) {

    function hasDecendantWidgetRole (domElement) {
      for (let i = 0; i < domElement.children.length; i += 1) {
        const cde = domElement.children[i];
        if (cde.isDomElement) {
          if (cde.ariaInfo.isWidget) {
            return true;
          }
          if (hasDecendantWidgetRole(cde)) {
            return true;
          }
        }
      }
      return false;
    }

    dom_cache.allDomElements.forEach(de => {
      if (de.eventInfo.hasClick) {
        if (de.visibility.isVisibleToAT) {
          if (de.ariaInfo.isWidget) {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.tagName, de.role]);
          }
          else {
            if (hasDecendantWidgetRole(de)) {
              rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.tagName, de.role]);
            }
            else {
              if (de.hasRole) {
                rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.tagName, de.role]);
              }
              else {
                rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', [de.tagName]);
              }
            }
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName, de.role]);
        }
      }
    });
  } // end validation function
},

/**
 * @object WIDGET_3
 *
 * @desc Elements with role values must have valid widget or landmark roles
 */

{ rule_id             : 'WIDGET_3',
  last_updated        : '2021-07-07',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_required       : true,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['[role]'],
  validate            : function (dom_cache, rule_result) {

    dom_cache.allDomElements.forEach(de => {
      if (de.hasRole) {
        if (de.visibility.isVisibleToAT) {
          if (!de.ariaInfo.isValidRole) {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.role]);
          }
          else {
            if (de.ariaInfo.isAbstractRole) {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', [de.role]);
            } else {
              if (de.ariaInfo.isWidget) {
                rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.role]);
              }
              else {
                if (de.ariaInfo.isLandmark) {
                  rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', [de.role]);
                }
                else {
                  if (de.ariaInfo.isLive) {
                    rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_3', [de.role]);
                  }
                  else {
                    if (de.ariaInfo.isSection) {
                      rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_4', [de.role]);
                    }
                    else {
                      rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_5', [de.role]);
                    }
                  }
                }
              }            
            }
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName, de.role]);
        }        
      }
    });
  } // end validation function
},

/**
 * @object WIDGET_4
 *
 * @desc Elements with ARIA attributes have valid values
 */

{ rule_id             : 'WIDGET_4',
  last_updated        : '2021-07-07',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_required       : true,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['[aria-atomic]',
                         '[aria-autocomplete]',
                         '[aria-busy]',
                         '[aria-checked]',
                         '[aria-colcount]',
                         '[aria-colindex]',
                         '[aria-colspan]',
                         '[aria-current]',
                         '[aria-disabled]',
                         '[aria-dropeffect]',
                         '[aria-expanded]',
                         '[aria-grabbed]',
                         '[aria-haspopup]',
                         '[aria-hidden]',
                         '[aria-invalid]',
                         '[aria-label]',
                         '[aria-labelledby]',
                         '[aria-live]',
                         '[aria-modal]',
                         '[aria-multiline]',
                         '[aria-multiselectable]',
                         '[aria-orientation]',
                         '[aria-pressed]',
                         '[aria-readonly]',
                         '[aria-relevant]',
                         '[aria-required]',
                         '[aria-rowcount]',
                         '[aria-rowindex]',
                         '[aria-rowspan]',
                         '[aria-selected]',
                         '[aria-sort]'],
  validate            : function (dom_cache, rule_result) {

    dom_cache.allDomElements.forEach(de => {
      de.ariaInfo.validAttrs.forEach( attr => {
        if (de.visibility.isVisibleToAT) {
          const allowedValues = attr.values ? attr.values.join(' | ') : '';
          if (de.ariaInfo.invalidAttrValues.includes(attr)) {
            if (attr.type === 'nmtoken' || attr.type === 'boolean' || attr.type === 'tristate') {
              if (attr.value === '') {
                rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [attr.name, allowedValues]);
              }
              else {
                rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', [attr.name, attr.value, allowedValues]);
              }
            }
            else {
              if (attr.type === 'nmtokens') {
                if (attr.value === '') {
                  rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_3', [attr.name, allowedValues]);
                }
                else {
                  rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_4', [attr.name, attr.value, allowedValues]);
                }
              }
              else {
                if (attr.type === 'integer') {
                  if (attr.value === '') {
                    rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_5', [attr.name]);
                  }
                  else {
                    if (attr.allowUndeterminedValue) {
                      rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_6', [attr.name, attr.value]);
                    }
                    else {
                      rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_7', [attr.name, attr.value]);
                    }
                  }
                }
                else {
                  rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_8', [attr.name, attr.value, attr.type]);
                }  
              }
            }
          }
          else {
            if (attr.type === 'boolean' || 
                attr.type === 'nmtoken' || 
                attr.type === 'nmtokens' || 
                attr.type === 'tristate') {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [attr.name, attr.value]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', [attr.name, attr.value, attr.type]);
            }
          }
        }
        else {
          if (attr.value === '') {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [attr.name]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_2', [attr.name, attr.value]);
          }
        }
      });
    });
   } // end validation function
},

/**
 * @object WIDGET_5
 *
 * @desc ARIA attributes must be defined
 */

{ rule_id             : 'WIDGET_5',
  last_updated        : '2022-08-15',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_required       : true,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['[aria-atomic]',
                         '[aria-autocomplete]',
                         '[aria-busy]',
                         '[aria-checked]',
                         '[aria-controls]',
                         '[aria-describedby]',
                         '[aria-disabled]',
                         '[aria-dropeffect]',
                         '[aria-expanded]',
                         '[aria-flowto]',
                         '[aria-grabbed]',
                         '[aria-haspopup]',
                         '[aria-hidden]',
                         '[aria-invalid]',
                         '[aria-label]',
                         '[aria-labelledby]',
                         '[aria-level]',
                         '[aria-live]',
                         '[aria-multiline]',
                         '[aria-multiselectable]',
                         '[aria-orientation]',
                         '[aria-owns]',
                         '[aria-pressed]',
                         '[aria-readonly]',
                         '[aria-relevant]',
                         '[aria-required]',
                         '[aria-selected]',
                         '[aria-sort]',
                         '[aria-valuemax]',
                         '[aria-valuemin]',
                         '[aria-valuenow]',
                         '[aria-valuetext]'],
  validate            : function (dom_cache, rule_result) {

    dom_cache.allDomElements.forEach(de => {
      de.ariaInfo.invalidAttrs.forEach( attr => {
        if (de.visibility.isVisibleToAT) {
          rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [attr.name]);
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [attr.name]);
        }
      });
      de.ariaInfo.validAttrs.forEach( attr => {
        if (de.visibility.isVisibleToAT) {
          rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [attr.name]);
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [attr.name]);
        }
      });
    });
  } // end validation function
},

/**
 * @object WIDGET_6
 *
 * @desc Widgets must have required properties
 */

{ rule_id             : 'WIDGET_6',
  last_updated        : '2021-07-07',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_required       : true,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['[checkbox]',
                         '[combobox]',
                         '[menuitemcheckbox]',
                         '[menuitemradio]',
                         '[meter]',
                         '[option]',
                         '[separator]',
                         '[scrollbar]',
                         '[slider]',
                         '[switch]'],
  validate            : function (dom_cache, rule_result) {

    dom_cache.controlInfo.allControlElements.forEach( ce => {
      const de = ce.domElement;
      de.ariaInfo.requiredAttrs.forEach( reqAttrInfo => {
        if (de.visibility.isVisibleToAT) {
          if (reqAttrInfo.isDefined) {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.role, reqAttrInfo.name, reqAttrInfo.value]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.role, reqAttrInfo.name]);
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.role, reqAttrInfo.name]);
        }
      });
    });
   } // end validation function
},

/**
 * @object WIDGET_7
 *
 * @desc Widgets must have required owned elements
 */

{ rule_id             : 'WIDGET_7',
  last_updated        : '2023-03-20',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_required       : true,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['[feed]',
                         '[grid]',
                         '[list]',
                         '[listbox]',
                         '[menu]',
                         '[menubar]',
                         '[radiogroup]',
                         '[row]',
                         '[rowgroup]',
                         '[table]',
                         '[tablist]',
                         '[tree]',
                         '[treegrid]'],
  validate            : function (dom_cache, rule_result) {

    function getRequiredChildrenCount(domElement, requiredChildren) {
      let count = 0;
      let i;
      const ai = domElement.ariaInfo;
      const cdes = domElement.children;
      const odes = ai.ownedDomElements;
      for(i = 0; i < cdes.length; i += 1) {
        const cde = cdes[i];
        if (cde.isDomElement) {
          if (requiredChildren.includes(cde.role)) {
            return 1;
          }
          count += getRequiredChildrenCount(cde, requiredChildren);
        }
      }

      for(i = 0; i < odes.length; i += 1) {
        const ode = odes[i];
        if (requiredChildren.includes(ode.role)) {
          return 1;
        }
        count += getRequiredChildrenCount(ode, requiredChildren);
      }
      return count;
    }

    dom_cache.allDomElements.forEach( de => {
      if (de.ariaInfo.hasRequiredChildren) {
        const rc = de.ariaInfo.requiredChildren;
        if (de.visibility.isVisibleToAT) {
          if (de.ariaInfo.isBusy) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.role]);
          }
          else {
            const count = getRequiredChildrenCount(de, rc);
            if (count > 0) {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.role, rc.join(', ')]);
            }
            else {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.role, rc.join(', ')]);
            }
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.role, rc.join(', ')]);
        }
      }
    });
   } // end validation function
},

/**
 * @object WIDGET_8
 *
 * @desc Widgets must have required parent roles
 */

{ rule_id             : 'WIDGET_8',
  last_updated        : '2023-03-20',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_required       : true,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : [ "caption",
                          "cell",
                          "columnheader",
                          "gridcell",
                          "listitem",
                          "menuitem",
                          "menuitemcheckbox",
                          "menuitemradio",
                          "option",
                          "row",
                          "rowgroup",
                          "rowheader",
                          "tab",
                          "treeitem"
                      ],
  validate            : function (dom_cache, rule_result) {


    function checkForRequiredParent(domElement, requiredParents) {
      if (!domElement || !domElement.ariaInfo) {
        return '';
      }
      const ai = domElement.ariaInfo;
      const obdes = ai.ownedByDomElements;
      const pde = domElement.parentInfo.domElement;

      // Check first for aria-owns relationships
      for (let i = 0; i < obdes.length; i += 1) {
        const obde = obdes[i];
        if (requiredParents.includes(obde.role)) {
          return obde.role;
        }
        else {
          return checkForRequiredParent(obde.parentInfo.domElement, requiredParents);
        }
      }

      // Check parent domElement
      if (pde) {
        if (requiredParents.includes(pde.role)) {
          return pde.role;
        }
        else {
          return checkForRequiredParent(pde, requiredParents);
        }
      }
      return '';
    }

    dom_cache.allDomElements.forEach( de => {
      if (de.ariaInfo.hasRequiredParents) {
        const rp = [...(de.ariaInfo.requiredParents)];
        if (de.tagName === 'option') {
          rp.push('combobox');
        }
        if (de.visibility.isVisibleToAT) {
          const result = checkForRequiredParent(de, rp);
          if (result) {
            rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.role, result]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.role, rp.join(', ')]);
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.role, rp.join(', ')]);
        }
      }
    });
   } // end validation function
},

/**
 * @object WIDGET_9
 *
 * @desc Widgets cannot be owned by more than one widget
 */

{ rule_id             : 'WIDGET_9',
  last_updated        : '2023-04-05',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_required       : true,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['[aria-owns]'],
  validate            : function (dom_cache, rule_result) {

    dom_cache.allDomElements.forEach( de => {
      const ownedByCount = de.ariaInfo.ownedByDomElements.length;
      if (ownedByCount > 0) {
        if (ownedByCount === 1) {
          rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.elemName]);
        }
        else {
          rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.elemName, ownedByCount]);
        }
      }
    });
   } // end validation function
},

/**
 * @object WIDGET_10
 *
 * @desc Range widgets with aria-valuenow must be in range of aria-valuemin and aria-valuemax
 */

{ rule_id             : 'WIDGET_10',
  last_updated        : '2023-04-20',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_required       : true,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['[role="meter"]',
                         '[role="progress"]',
                         '[role="scrollbar"]',
                         '[role="separator"][tabindex=0]',
                         '[role="slider"]',
                         '[role="spinbutton"]'],
  validate            : function (dom_cache, rule_result) {
    dom_cache.allDomElements.forEach( de => {
      if (de.ariaInfo.isRange) {
        const ai = de.ariaInfo;
        if (de.visibility.isVisibleToAT) {
          const now  = ai.valueNow;
          const min  = ai.valueMin;
          const max  = ai.valueMax;
          const text = ai.valueText;
          if (ai.hasValueNow) {
            if (ai.validValueNow) {
              if (ai.validValueMin && ai.validValueMax) {
                if ((now >= min) && (now <= max)) {
                  if (text) {
                    rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.elemName, text, now]);
                  }
                  else {
                    rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', [de.elemName, now, min, max]);
                  }
                }
                else {
                  rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [now, min, max]);
                }
              }
              else {
                rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', [min, max]);
              }
            }
            else {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_3', [now]);
            }
          }
          else {
            if (ai.isValueNowRequired) {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_4', [de.elemName]);
            } else {
              rule_result.addElementResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_3', [de.elemName]);
            }
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
        }


      }
    });
 } // end validation function
},

/**
 * @object WIDGET_11
 *
 * @desc Verify range elements with aria-valuetext attribute
 */

{ rule_id             : 'WIDGET_11',
  last_updated        : '2023-04-20',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_required       : true,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['[role="meter"]',
                         '[role="progress"]',
                         '[role="scrollbar"]',
                         '[role="separator"][tabindex=0]',
                         '[role="slider"]',
                         '[role="spinbutton"]'],
  validate            : function (dom_cache, rule_result) {
    dom_cache.allDomElements.forEach( de => {
      if (de.ariaInfo.isRange && de.ariaInfo.valueText) {
        const ai = de.ariaInfo;
        if (de.visibility.isVisibleToAT) {
          const now  = ai.valueNow;
          const text = ai.valueText;
          if (ai.hasValueNow) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [text, now]);
          }
          else {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', []);
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
        }
      }
    });
  }
},
/**
 * @object WIDGET_12
 *
 * @desc Element with widget role label should describe the purpose of the widget
 *
 */

{ rule_id             : 'WIDGET_12',
  last_updated        : '2023-04-21',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_required       : true,
  wcag_primary_id     : '2.4.6',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['[ARIA widget roles'],
  validate            : function (dom_cache, rule_result) {
    dom_cache.allDomElements.forEach( de => {
      if (de.ariaInfo.isWidget) {
        if (de.visibility.isVisibleToAT) {
          if (de.accName.name) {
            rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.accName.name, de.elemName]);
          }
          else {
            if (de.ariaInfo.isNameRequired) {
              rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.elemName, de.role]);
            }
            else {
             rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', [de.elemName, de.role]);

            }
          }
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
        }
      }
    });
  } // end validation function
},

/**
 * @object WIDGET_13
 *
 * @desc Roles that prohibit accessible names
 */

{ rule_id             : 'WIDGET_13',
  last_updated        : '2023-04-21',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_required       : true,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['2.4.6'],
  target_resources    : [ "caption",
                          "code",
                          "deletion",
                          "emphasis",
                          "generic",
                          "insertion",
                          "none",
                          "paragraph",
                          "presentation",
                          "strong",
                          "subscript",
                          "superscript"],
  validate            : function (dom_cache, rule_result) {
    dom_cache.allDomElements.forEach( de => {
      if (de.ariaInfo.isNameProhibited &&
          de.accName.name &&
          de.accName.source.includes('aria-label')) {
        if (de.visibility.isVisibleToAT) {
          rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.elemName]);
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.elemName]);
        }
      }
    });
   } // end validation function
},

/**
 * @object WIDGET_14
 *
 * @desc     Roles with deprecated ARIA attributes
 */
{ rule_id             : 'WIDGET_14',
  last_updated        : '2023-04-21',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_required       : true,
  wcag_primary_id     : '4.1.1',
  wcag_related_ids    : ['4.1.2'],
  target_resources    : [
        "alert",
        "alertdialog",
        "article",
        "banner",
        "blockquote",
        "button",
        "caption",
        "cell",
        "checkbox",
        "code",
        "command",
        "complementary",
        "composite",
        "contentinfo",
        "definition",
        "deletion",
        "dialog",
        "directory",
        "document",
        "emphasis",
        "feed",
        "figure",
        "form",
        "generic",
        "grid",
        "group",
        "heading",
        "img",
        "input",
        "insertion",
        "landmark",
        "link",
        "list",
        "listbox",
        "listitem",
        "log",
        "main",
        "marquee",
        "math",
        "meter",
        "menu",
        "menubar",
        "menuitem",
        "menuitemcheckbox",
        "menuitemradio",
        "navigation",
        "note",
        "option",
        "paragraph",
        "presentation",
        "progressbar",
        "radio",
        "radiogroup",
        "range",
        "region",
        "row",
        "rowgroup",
        "scrollbar",
        "search",
        "section",
        "sectionhead",
        "select",
        "separator",
        "spinbutton",
        "status",
        "strong",
        "structure",
        "subscript",
        "superscript",
        "switch",
        "tab",
        "table",
        "tablist",
        "tabpanel",
        "term",
        "time",
        "timer",
        "toolbar",
        "tooltip",
        "tree",
        "treegrid",
        "treeitem",
        "widget",
        "window"
    ],
  validate : function (dom_cache, rule_result) {
    dom_cache.allDomElements.forEach( de => {
      if (de.ariaInfo.deprecatedAttrs) {
        if (de.visibility.isVisibleToAT) {
          de.ariaInfo.deprecatedAttrs.forEach( attr => {
            rule_result.addElementResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [attr.name, de.elemName]);
          });
        }
        else {
          de.ariaInfo.deprecatedAttrs.forEach( attr => {
            rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [attr.name, de.elemName]);
          });
        }
      }
    });
  } // end validation function
},

/**
 * @object WIDGET_15
 *
 * @desc     Web components require manual check
 */
{ rule_id             : 'WIDGET_15',
  last_updated        : '2023-04-21',
  rule_scope          : RULE_SCOPE.ELEMENT,
  rule_category       : RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_required       : true,
  wcag_primary_id     : '2.1.1',
  wcag_related_ids    : ['1.1.1','1.4.1','1.4.3','1.4.4','2.1.2','2.2.1','2.2.2', '2.4.7','2.4.3','2.4.7','3.3.2'],
  target_resources    : ["Custom elements using web component APIs"],
  validate          : function (dom_cache, rule_result) {
    dom_cache.allDomElements.forEach( de => {
      if (de.tagName.includes('-') && de.isShadowClosed) {
        if (de.visibility.isVisibleToAT) {
          rule_result.addElementResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.tagName]);
        }
        else {
          rule_result.addElementResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tagName]);
        }
      }
    });
  } // end validation function
}
];

/* rule.js */

/* Constants */
const debug$b = new DebugLogging('Rule', false);
debug$b.flag = false;

/* ----------------------------------------------------------------   */
/*                             Rule                                   */
/* ----------------------------------------------------------------   */

/**
 * @constructor Rule
 *
 * @desc Creates and validates a rule used to evaluate an accessibility feature
 *       of a document
 *
 * @param {Object}    rule_item          - Object containing rule information
 */

class Rule {
  constructor (rule_item) {

    // Rule information that is NOT dependent on locale
    this.rule_id             = rule_item.rule_id; // String
    this.rule_required       = rule_item.rule_required; // Boolean
    this.rule_scope_id       = rule_item.rule_scope; // Integer
    this.rule_category_id    = rule_item.rule_category; // Integer
    this.last_updated        = rule_item.last_updated; // String
    this.target_resources    = rule_item.target_resources; // array of strings
    this.wcag_primary_id     = rule_item.wcag_primary_id;  // String (P.G.SC)
    this.wcag_related_ids    = rule_item.wcag_related_ids; // Array of Strings (P.G.SC)
    this.wcag_guideline_id   = getGuidelineId(rule_item.wcag_primary_id); // Integer
    this.validate            = rule_item.validate;  // function

    // Rule information that is locale dependent
    this.rule_category_info  = getRuleCategoryInfo(this.rule_category_id); // Object with keys to strings
    this.guideline_info      = getGuidelineInfo(this.wcag_guideline_id); // Object with keys to strings
    this.rule_scope          = getScope(this.rule_scope_id); // String
    this.wcag_primary        = getSuccessCriterionInfo(this.wcag_primary_id);
    this.wcag_related        = getSuccessCriteriaInfo(this.wcag_related_ids);
    this.wcag_level          = getCommonMessage('level', this.wcag_primary.level);
    this.wcag_version        = getWCAGVersion(this.wcag_primary_id);

    this.rule_nls_id           = getRuleId(this.rule_id); // String
    this.summary               = getRuleSummary(this.rule_id); // String
    this.definition            = getRuleDefinition(this.rule_id); // String
    this.target_resources_desc = getTargetResourcesDesc(this.rule_id); // String
    this.purposes              = getPurposes(this.rule_id);  // Array of strings
    this.techniques            = getTechniques(this.rule_id);  // Array of strings
    this.manual_checks         = getManualChecks(this.rule_id);  // Array of strings
    this.informational_links   = getInformationLinks(this.rule_id);  // Array of objects with keys to strings

    // Localized messsages for evaluation results
    this.rule_result_msgs = getRuleResultMessages(this.rule_id); // Object with keys to strings
    this.base_result_msgs = getBaseResultMessages(this.rule_id); // Object with keys to strings

    debug$b.flag && this.toJSON();
  }

  get isWCAG20 () {
    return this.wcag_version === 'WCAG20';
  }

  get isWCAG21 () {
    return this.isWCAG20 || this.wcag_version === 'WCAG21';
  }

  get isWCAG22 () {
    return this.isWCAG20 || this.isWCAG21 || this.wcag_version === 'WCAG22';
  }

  get isLevelA () {
    return this.wcag_level === 'A';
  }

  get isLevelAA () {
    return this.wcag_level === 'AA';
  }

  get isLevelAAA () {
    return this.wcag_level === 'AAA';
  }

  get isScopeElement () {
    return this.rule_scope_id === RULE_SCOPE.ELEMENT;
  }

  get isScopePage () {
    return this.rule_scope_id === RULE_SCOPE.PAGE;
  }

  get isScopeWebsite () {
    return this.rule_scope_id === RULE_SCOPE.WEBSITE;
  }

  /**
   * @method getId
   *
   * @desc Get the programmatic id that uniquely identifies the rule
   *
   * @return {String} The rule id
   */

  getId () {
    return this.rule_id;
  }

  /**
   * @method getIdNLS
   *
   * @desc Get a localized human readable id for uniquely identifying the rule
   *
   * @return {String} Localized string of the rule id
   */

  getIdNLS () {
    return this.rule_nls_id;
  }

  /**
   * @method getGuideline
   *
   * @desc Get number of the associated guideline
   *
   * @return  {Integer} see description
   */

  getGuideline () {
   return this.wcag_guideline_id;
  }

  /**
   * @method getGuidelineInfo
   *
   * @desc Get information about the WCAG Guideline associated with the rule
   *
   * @return  {GuidelineInfo}  see description
   */

  getGuidelineInfo () {
   return this.guideline_info;
  }

  /**
   * @method getCategoryInfo
   *
   * @desc Get a numerical constant representing the rule category
   *
   * @return {Integer}  see @desc
   */

  getCategory () {
    return this.rule_category_id;
  }

  /**
   * @method getCategoryInfo
   *
   * @desc Get a localized title, url and description of the rule category
   *
   * @return {RuleCategoryInfoItem}  see @desc
   */

  getCategoryInfo () {
    return this.rule_category_info;
  }

  /**
   * @method getScope
   *
   * @desc Get the rule scope constant of the rule
   *
   * @return {Integer} rule scope constant
   */

  getScope () {
    return this.rule_scope_id;
  }


  /**
   * @method getScopeNLS
   *
   * @desc Get a localized string of the rule scope (i.e. 'element' or 'page')
   *
   * @return {String} Localized string of the rule scope
   */

  getScopeNLS () {
    return this.rule_scope;
  }


  /**
   * @method getDefinition
   *
   * @desc Gets the definition of the rule
   *
   * @return {String} Localized string of the rule definition
   */
  getDefinition () {
    return this.definition;
  }

  /**
   * @method getSummary
   *
   * @desc Gets the summary of the rule
   *
   * @return {String} Localized string of the rule summary
   */
  getSummary () {
    return this.summary;
  }

  /**
   * @method getPurposes
   *
   * @desc Gets an array strings representing the purpose, basically
   *       how does the rule help people with disabilities
   *
   * @return  {Array}  Returns an array of localized string describing the purpose
   */

  getPurposes () {
    return this.purposes;
  }

  /**
   * @method getTargetResourcesDescription
   *
   * @desc Get a description of the markup or page feature the rule is evaluates
   *
   * @return  {String}  Localized string representing the markup or page feature
   *                    tested by the rule
   */

  getTargetResourcesDescription () {
    return this.target_resources_desc;
  }

  /**
   * @method getTargetResources
   *
   * @desc Returns an localized array strings representing target resources of
   *       the rule
   *
   * @return  {Array}  Returns an array of strings identifying the elements and/or
   *                    attributes that the rule evaluates
   */

  getTargetResources () {
    return this.target_resources;
  }

  /**
   * @method getTechniques
   *
   * @desc Get the techniques to implement the requirements of the rule
   *
   * @return  {Array}  Array of InformationalLinkInfo objects
   */
  getTechniques () {
    return this.techniques;
  }

  /**
   * @method getManualCheckProcedures
   *
   * @desc Gets manual checking proceedures for evaluating the rule
   *       requirements
   *
   * @return  {Array}  Array of InformationalLinkInfo objects
   */

  getManualCheckProcedures () {
    return this.manual_checks;
  }

  /**
   * @method getInformationalLinks
   *
   * @desc Get information links related to understanding or implementation of the rule
   *
   * @return  {Array}  Returns an array of InformationalLinkInfo objects
   *
   * @example
   *
   * var node_list = [];
   * var info_links = rule.getInformationalLinks();
   *
   * for(var i = 0; i < info_links.length; i++) {
   *   var info_link = info_links[i];
   *
   *   // Using object properties to create a link element
   *   var node = document.createElement('a');
   *   node.appendChild(document.createTextNode(info_link.title));
   *   node.setAttribute('href',  info_link.url);
   *   node.setAttribute('class', info_link.type_const.toString());
   *
   *   node_list.push(node);
   * }
   */

  getInformationalLinks () {
    return this.informational_links;
  }

  /**
   * @method getPrimarySuccessCriterionId
   *
   * @desc Get id of the primary WCAG Success Criteria for the rule
   *
   * @return  {Integer}  see description
   */

  getPrimarySuccessCriterionId () {
    return this.wcag_primary_id;
  }

  /**
   * @method getPrimarySuccessCriterionInfo
   *
   * @desc Get information about primary WCAG Success Criteria for the rule
   *
   * @return  {SuccessCriterionInfo}  Object representing information about the SC
   */

  getPrimarySuccessCriterionInfo () {
    return this.wcag_primary;
  }

  /**
   * @method getRelatedSuccessCriteriaInfo
   *
   * @desc Get information about the related WCAG Success Criteria for the rule
   *
   * @return  {Array}  Array of SuccessCriterionInfo objects
   */

  getRelatedSuccessCriteriaInfo () {
    return this.wcag_related;
  }

  /**
   * @method getWCAGLevel
   *
   * @desc Get the string representation of the the WCAG Success Criterion Level
   *       based on the primary id of the rule
   *
   * @return  {String}  String representing the WCAG success criterion level
   *                    (i.e. A, AA or AAA)
   */

  getWCAGLevel () {
    return this.wcag_level;
  }

  /**
   * @method toJSON
   *
   * @desc Returns a JSON representation of the rule
   *
   * @return  {String}  Returns a JSON representation of the rule
   */

  toJSON () {

    const ruleInfo = {
      last_updated: this.last_updated,

      rule_id:      this.rule_id,
      rule_nls_id:  this.rule_nls_id,
      summary:      this.summary,
      definition:   this.definition,

      rule_required:  this.rule_required,

      target_resources_desc:  this.target_resources_desc,

      rule_scope_id:  this.rule_scope_id,
      rule_scope:     this.rule_scope,

      rule_category_id:   this.rule_category_id,
      rule_category_info: this.rule_category_info,
      
      wcag_guideline_id:  this.wcag_guideline_id,
      guideline_info:     this.guideline_info,

      target_resources:  this.target_resources,

      wcag_primary_id:  this.wcag_primary_id,
      wcag_primary:     this.wcag_primary,
      wcag_level:       this.wcag_level,

      wcag_related_ids: this.wcag_related_ids,
      wcag_related:     this.wcag_related,

      purposes:       this.purposes,
      techniques:     this.techniques,
      manual_checks:  this.manual_checks,

      informational_links:    this.informational_links
    };

    const json = JSON.stringify(ruleInfo, null, '  ');
    debug$b.flag && debug$b.log(`[JSON]: ${json}`);
    return json;

  }
}

/* allRules.js */

/* Constants */
const debug$a = new DebugLogging('All Rules', false);

const allRules = [];

function addToArray (ruleArray) {
  ruleArray.forEach( r => {
    allRules.push(new Rule(r));
  });
}

addToArray(audioRules);
addToArray(authorizationRules);
addToArray(bypassRules);
addToArray(colorRules);
addToArray(errorRules);
addToArray(frameRules);
addToArray(controlRules);
addToArray(headingRules);
addToArray(helpRules);
addToArray(htmlRules);
addToArray(imageRules);
addToArray(keyboardRules);
addToArray(landmarkRules);
addToArray(languageRules);
addToArray(layoutRules);
addToArray(linkRules);
addToArray(listRules);
addToArray(liveRules);
addToArray(motionRules);
addToArray(navigationRules);
addToArray(pointerRules);
addToArray(readingOrderRules);
addToArray(resizeRules);
addToArray(sensoryRules);
addToArray(shortcutRules);
addToArray(spacingRules);
addToArray(tableRules);
addToArray(targetSizeRules);
addToArray(titleRules);
addToArray(timingRules);
addToArray(videoRules);
addToArray(widgetRules);


if (debug$a.flag) {
  console.log('All rules loaded');
}

/* resultSummary.js */

const debug$9 = new DebugLogging('ruleResultSummary', false);

/* ---------------------------------------------------------------- */
/*                             RuleResultsSummary                        */
/* ---------------------------------------------------------------- */

 /**
 * @constructor RuleResultsSummary
 *
 * @desc Constructor for an object that contains summary of rule results for a
 *       set of rule result objects or a cache item result
 *
 * @property  {Number}  violations      - Number of rule results with at
 *                                        least one violation
 * @property  {Number}  warnings        - Number of rule results with at
 *                                        least one warning
 * @property  {Number}  failures        - Number of rule results with at
 *                                        least one violation or warning
 * @property  {Number}  manual_checks   - Number of rule results with at
 *                                        least one manual check
 * @property  {Number}  passed          - Number of rule results that all
 *                                        element results pass
 * @property  {Number}  not_applicable  - Number of rule results with no
 *                                        element results
 */

class RuleResultsSummary  {

  constructor () {
    this.v   = 0;  // Number of rule results with are violations
    this.w   = 0;  // Number of rule results with are warnings
    this.mc  = 0;  // Number of rule results with are manual checks
    this.p   = 0;  // Number of rule results with are passed
    this.na  = 0;  // Number of rule results with are not applicable
    this.hmc = 0;  // True if any of the rule results includes at least one element
                  // result that is a manual check

    this.t   =  0;  // total number of rule results with results
    this.sum =  0;  // summ of the implementation scores for all rule results
    this.is  = -1;  // implementation score for group
    this.iv  = IMPLEMENTATION_VALUE.UNDEFINED; // implementation value for the group

    debug$9.flag && debug$9.log(`[RuleResultsSummary]: ${this.toString()}`);
  }

   get violations()     { return this.v;  }
   get warnings()       { return this.w;  }
   get manual_checks()  { return this.mc; }
   get passed()         { return this.p;  }
   get not_applicable() { return this.na;  }

   get implementation_score() { return this.is;  }
   get implementation_value() { return this.iv;  }

  /**
   * @method updateSummary
   *
   * @desc Updates rule result summary calculation
   *
   * @param  {RuleResult}  rule_result  - Rule result object to add to summary
   */

  updateSummary ( rule_result ) {

    const rrv = rule_result.getResultValue();

    if (rrv === RULE_RESULT_VALUE.VIOLATION        ) this.v  += 1;
    else if (rrv === RULE_RESULT_VALUE.WARNING     ) this.w  += 1;
    else if (rrv === RULE_RESULT_VALUE.MANUAL_CHECK) this.mc += 1;
    else if (rrv === RULE_RESULT_VALUE.PASS        ) this.p  += 1;
    else  this.na += 1;

    this.hmc = this.hmc || (rule_result.getResultsSummary().manual_checks > 0);

    const rris = rule_result.getImplementationScore();

    if (rris >= 0) {
      this.t += 1;
      this.sum = this.sum + rris;
      this.is = Math.round(this.sum/this.t);
      if ((this.is === 100) && ((this.v + this.w) > 0)) {
        this.is = 99;
      }
    }

    if (this.hmc) {
      this.iv = IMPLEMENTATION_VALUE.MANUAL_CHECKS_ONLY;
    }
    else {
      this.iv = IMPLEMENTATION_VALUE.NOT_APPLICABLE;
    }

    if (this.is === 100) {
      if (this.hmc) {
        this.iv = IMPLEMENTATION_VALUE.COMPLETE_WITH_MANUAL_CHECKS;
      }
      else {
        this.iv = IMPLEMENTATION_VALUE.COMPLETE;
      }
    } else {
      if (this.is > 95) this.iv = IMPLEMENTATION_VALUE.ALMOST_COMPLETE;
      else if (this.is > 50) this.iv = IMPLEMENTATION_VALUE.PARTIAL_IMPLEMENTATION;
      else if (this.is >= 0) this.iv = IMPLEMENTATION_VALUE.NOT_IMPLEMENTED;
    }

  }

  /**
   * @method hasResults
   *
   * @desc True if at least one element results is a violation, warning, manual check
   *       or passed, otherwise false (e.g no element results or all hidden)
   *
   * @return {Boolean} see description
   */

  hasResults () {
    return this.v || this.w || this.mc || this.p || this.na;
  }

  /**
   * @method toString
   *
   * @desc output information about the summary
   *
   * @return  {String}  Information about rule summary
   */

  toString () {
    return "V: " + this.v + " W: " + this.w + " MC: " + this.mc + " P: " + this.p + " NA: " + this.na;
  }
}

/* ruleGroupResult.js */

/* Constants */
const debug$8 = new DebugLogging('ruleGroupResult', false);

/**
 * @class RuleGroupResult
 *
 * @desc Constructs a data structure of cache items associated with a rule category
 *       Node results can be filtered when a rule result is added to the group
 *
 * @param  {Object}  evaluation_result  - ruleset and evaluation results used to generate
 *                              the filtered results
 * @param  {String}  group_id  - id used to identify this grouping of rules and filtering rules
 *
 * @param  {String}  title     - Title for the group
 * @param  {String}  url       - URL to more information on the group
 * @param  {String}  desc      - Description of the group
 *
 * @property  {Object}  rule_group_information - Information on rules in the group
 * @property  {Array}   rule_results           - List of rule result objects in the group
 *
 * @property  {EvaluationResult} evaluation_result - ruleset and evaluation results
 *                                                   used to generate the filtered
 *                                                   results
 *
 * @property  {RuleResultsSummary}  rule_results_summary  - Summary of the rule results for
 *                                                           the group
 */


class RuleGroupResult {
  constructor (evaluationResult, title, url, desc) {
    this.evaluation_result = evaluationResult;

    this.rule_group_information = {};

    this.rule_group_information.title       = title;
    this.rule_group_information.url         = url;
    this.rule_group_information.description = desc;

    this.rule_group_information.rules_required    = 0;
    this.rule_group_information.rules_recommended = 0;

    this.rule_results = [];
    this.rule_results_summary = new RuleResultsSummary();

    debug$8.flag && debug$8.log(`[title]: ${this.title} (${ruleset})`);
  }

  /**
   * @method getRuleGroupInfo
   *
   * @desc Return information on the group of rules
   *
   * @return {RuleGroupInfo}  RuleGroupInfo object
   */

  getRuleGroupInfo () {
    return this.rule_group_information;
  }

  /**
   * @method getEvaluationResult
   *
   * @memberOf RuleGroupResult
   *
   * @desc Returns the evaluation result the rule group result is a part of
   *
   * @return {EvaluationResult}  see description
   */

  getEvaluationResult () {
    return this.evaluation_result;
  }

  /**
   * @method getImplementationScore
   *
   * @memberOf RuleGroupResult
   *
   * @desc Return a numerical value between (0-100) indicated
   *
   * @return {Number}  see description
   */

  getImplementationScore () {
    return this.rule_results_summary.implementation_score;
  }


  /**
   * @method getImplementationValue
   *
   * @desc Return a numerical constant indicating the level of implementation
   *
   * @return {Number}  see description
   */

  getImplementationValue () {
    return this.rule_results_summary.implementation_value;
  }

   /**
   * @method getImplementationValueNLS
   *
   * @desc Returns a string indicating the level of implementation:
   *
   * @return {String} see description
   */

  getImplementationValueNLS () {
    return getImplementationValue(this.getImplementationValue());
  }

  /**
   * @method getRuleResultsArray
   *
   * @desc Return a list of rule results associated with the group
   *
   * @return {Array}  see description
   */

  getRuleResultsArray () {
    return this.rule_results;
  }

  /**
   * @method getRuleResultsSummary
   *
   * @desc Gets numerical summary information about the rule results
   *
   * @return {RuleResultsSummary} Returns the rule result summary object
   */

  getRuleResultsSummary () {
    return this.rule_results_summary;
  }

  /**
   * @method hasRuleResults
   *
   * @desc Tests if any of the rules in this group applied to the content in the page
   *       Basically is there at least one rule result that was a violation, warning,
   *       manual check or pass
   *
   * @return {Boolean} True if any of the rule have results, otherwise false
   */

  hasRuleResults () {
    return this.rule_results_summary.hasResults();
  }

  /**
   * @method hasRules
   *
   * @desc Tests if their are any rule results in this group
   *
   * @return {Boolean} True if the group contains at least one rule, otherwise false
   */

  hasRules  () {
    return this.rule_results.length > 0;
  }


  /**
   * @method addRuleResult
   *
   * @desc Adds a rule result to the grouping aggregation of results if the group id has a match in the group
   *
   * @param  {RuleResult}  rule_result   - Filtered rule result object to aggregate
   */

  addRuleResult (rule_result) {
    this.rule_results.push(rule_result);
    this.rule_results_summary.updateSummary(rule_result);

    if (rule_result.isRuleRequired()) {
      this.rule_group_information.rules_required += 1;
    }
    else {
      this.rule_group_information.rules_recommended += 1;
    }
  }

  /**
   * @method toJSON
   *
   * @desc Returns an JSON representation of the rule group results
   *
   * @param {Boolean} flag (optional)  -  True (default) to include filtered element results, false to not include
   *
   * @return  {String}  JSON string representing the report data
   */

  toJSON (flag=false) {

    const date = this.evaluation_result.date.split(':');
    const rule_results = [];
    this.rule_results.forEach( rr => {
      rule_results.push(rr.getDataForJSON(flag));
    });

    const ruleGroupResultInfo = {
      version: VERSION,
      eval_title: this.evaluation_result.title,
      eval_url: cleanForUTF8(this.evaluation_result.eval_url),
      eval_url_encoded: encodeURI(this.evaluation_result.eval_url),
          eval_date: date[0],
      eval_time: date[1] + ":" + date[2],
      rule_results: rule_results
    };

    const json = JSON.stringify(ruleGroupResultInfo);
    debug$8.flag && debug$8.log(`[JSON]: ${json}`);
    return json;
  }
}

/* baseResult.js */

/* constants */
const debug$7 = new DebugLogging('baseResult', false);

/**
 * @class baseResult
 *
 * @desc Constructor for an object that contains a the results of
 *          the evaluation of a rule on a element or page
 *
 * @param  {ResultRule}   ruleResult   - reference to the rule result object
 * @param  {Number}       resultValue  - Constant representing result value of the evaluation result
 * @param  {String}       msgId        - String reference to the message string in the NLS file
 * @param  {Array}        msgArgs      - Array  array of values used in the message string
 */

/**
 * @private
 * @constructor Internal Properties
 *
 * @property  {RuleResult} rule_result    - reference to the rule result object
 * @property  {Number}     result_value   - Constant representing result value of the evaluation result
 * @property  {String}     result_message - String reference to the message string in the NLS file
 */

class BaseResult {
  constructor (ruleResult, resultValue, msgId, msgArgs, result_identifier) {

    const msg = ruleResult.rule.base_result_msgs[msgId];

    this.result_type       = RESULT_TYPE.BASE;
    this.rule_result       = ruleResult;
    this.result_value      = resultValue;
    debug$7.flag && debug$7.log(`[  msgId]: ${msgId}`);
    debug$7.flag && debug$7.log(`[    msg]: ${msg}`);
    debug$7.flag && debug$7.log(`[msgArgs]: ${msgArgs}`);
    this.result_message    = getBaseResultMessage(msg, msgArgs);
    this.result_identifier = result_identifier;

  }

  /**
   * @getter isActionMessage
   *
   * @desc Returns true if the result is a violation, warning or manual check
   *    
   * @return {Boolean} see @desc
   */

  get isActionMessage () {
    return (this.result_value === RESULT_VALUE.VIOLATION) ||
           (this.result_value === RESULT_VALUE.WARNING) ||
           (this.result_value === RESULT_VALUE.MANUAL_CHECK);
  }

  /**
   * @getter isElementResult
   *
   * @desc Returns true if the result type is element,
   *       otherwise false
   *    
   * @return {Boolean} see @desc
   */

  get isElementResult () {
    return this.result_type === RESULT_TYPE.ELEMENT;
  }

  /**
   * @getter isPageResult
   *
   * @desc Returns true if the result type is page,
   *       otherwise false
   *
   * @return {Boolean} see @desc
   */

  get isPageResult () {
    return this.result_type === RESULT_TYPE.PAGE;
  }

  /**
   * @getter isWebsiteResult
   *
   * @desc Returns true if the result type is website,
   *       otherwise false
   *
   * @return {Boolean} see @desc
   */

  get isWebsiteResult () {
    return this.result_type === RESULT_TYPE.WEBSITE;
  }

  /**
   * @method getResultType
   *
   * @desc Returns the result type: element, page or website
   *
   * @return {String} see @desc
   */
  getResultType () {
    return getCommonMessage('resultType', this.result_type);
  }

  /**
   * @method getRuleResult
   *
   * @desc Gets the rule result that this element result is associated with.
   *       Provides access to rule and ruleset information if needed
   *
   * @return {Object} see @desc
   */
  getRuleResult () {
     return this.rule_result;
  }

  /**
   * @method getElementIdentifier
   *
   * @desc Gets a string identifying the result,
   *       is overrided by ElementResult and PageResult
   *
   * @return {String} see @desc
   */

  getResultIdentifier () {
    return this.result_identifier;
  }

  /**
   * @method getResultValue
   *
   * @desc Returns an numerical constant representing the element result
   *
   * @return {Number} see @desc
   */
   getResultValue () {
     return this.result_value;
   }

  /**
   * @method getResultValueNLS
   *
   * @desc Gets a abbreviated string representing of the rule result value
   *
   * @return {String} see @desc
   */

  getResultValueNLS () {
    return getCommonMessage('baseResult', this.result_value);
  }

  /**
   * @method getResultValueLongNLS
   *
   * @desc Gets a verbose string representing of the rule result value
   *
   * @return {String} see @desc
   */

  getResultValueLongNLS () {
    return getCommonMessage('baseResultLong', this.result_value);
  }

  /**
   * @method getResultMessage
   *
   * @desc Gets a string representation of the result message
   *
   * @return {String} see @desc
   */

  getResultMessage () {
    return this.result_message;
  }
  
 /**
   * @method getDataForJSON
   *
   * @desc Object containing the data for exporting result to JSON
   *
   * @return {Object} see @desc
   */

  getDataForJSON () {
    return {
      result_type:        this.result_type,
      result_value:       this.result_value,
      result_value_nls:   this.result_value_nls,
      result_identifier:  this.result_identifier,
      message:            this.result_message
    }
  }

  /**
   * @method toJSON
   *
   * @desc Creates JSON object descibing the properties of the result
   *
   * @return {String} see @desc
   */

  toJSON () {
    return JSON.stringify(this.getDataForJSON(), null, '  ');
  }
}

/* elementResult.js */

/* Constants */

const debug$6 = new DebugLogging('ElementResult', false);
debug$6.flag = false;

/**
 * @class ElementResult
 *
 * @desc Constructor for an object that contains a the results of
 *          the evaluation of a rule on a element
 *
 * @param  {ResultRule}   rule_result         - reference to the rule result object
 * @param  {Number}       result_value        - Constant representing result value of the evaluation result
 * @param  {Object}       domElement          - DOmElement reference to element information used by this rule result
 * @param  {String}       message_id          - String reference to the message string in the NLS file
 * @param  {Array}        message_arguments   - Array  array of values used in the message string
 * @param  {Array}        props               - Array of properties that are defined in the validation function (NOTE: typically undefined)
 * @param  {String}       elem_identifier     - String identifying the element (Optional)
 */

/**
 * @private
 * @constructor Internal Properties
 *
 * @property  {RuleResult} rule_result         - reference to the rule result object
 * @property  {Number}     result_value        - Constant representing result value of the evaluation result
 * @property  {DOMElement} cache_item          - Object reference to cache item associated with the test
 * @property  {String}     message_id          - String reference to the message string in the NLS file
 * @property  {Array}      message_arguments   - Array  array of values used in the message string
 */

class ElementResult extends BaseResult {
  constructor (rule_result, result_value, domElement, message_id, message_arguments) {
    super(rule_result,
          result_value,
          message_id,
          message_arguments,
          domElement.getIdentifier());

    this.domElement = domElement;
    this.result_type    = RESULT_TYPE.ELEMENT;

    if (debug$6.flag) {
      debug$6.log(`${this.result_value}: ${this.result_message}`);
    }
  }
  /**
   * @method getResultIdentifier
   *
   * @desc Gets a string identifying the element, typically element and//or a key attribute
   *       or property value
   *
   * @return {String} see description
   */

  getResultIdentifier () {
    const de = this.domElement;
    const typeAttr = de.node.getAttribute('type');
    const identifier =  typeAttr ?
                        `${de.tagName}[type=${typeAttr}]` :
                        de.tagName;
    return identifier;
  }

  /**
   * @method getNode
   *
   * @desc Gets the dom node
   *
   * @return {Object} see description
   */

  getNode () {
    return this.domElement.node;
  }


  /**
   * @method getTagName
   *
   * @desc Gets a string identifying the elements tag
   *
   * @return {String} see description
   */

  getTagName () {
    return this.getResultIdentifier();
  }

  /**
   * @method getId
   *
   * @desc Gets a string identifying the elements id 
   *
   * @return {String} see description
   */

  getId () {
    let id = this.domElement.node.id;
    id = id ? '#' + id : '';
    return id;
  }

  /**
   * @method getClassName
   *
   * @desc Gets a string identifying the elements class names
   *
   * @return {String} see description
   */

  getClassName () {
    let names = this.domElement.node.classList.value;
    if (names) {
      names = '.' + names.replaceAll(' ', '.');
    }
    return names;
  }

  /**
   * @method getHasRole
   *
   * @desc True if the element has a role attribute, otherwise false
   *
   * @return {Boolean} see description
   */

  getHasRole () {
    return this.domElement.hasRole;
  }

  /**
   * @method getRole
   *
   * @desc Gets a string identifying the elements role
   *
   * @return {String} see description
   */

  getRole () {
    return this.domElement.role;
  }

  /**
   * @method getOrdinalPosition
   *
   * @desc Gets a string identifying the ordinal position,
   *       is overrided by ElementResult and PageResult
   *
   * @return {String} see description
   */

  getOrdinalPosition () {
    return this.domElement.ordinalPosition;
  }

  /**
   * @method getHTMLAttributes
   *
   * @desc Gets common HTML attributes related to elements
   *       some elements have special props like alt
   *
   * @return {Object} with attribute name as key to attribute value
   */
   
  getHTMLAttributes () {
    return this.domElement.htmlAttrs;
  }

  /**
   * @method getAriaAttributes
   *
   * @desc Gets ARIA attributes
   *
   * @return {Object} with attribute name as key to attribute value
   */
  getAriaAttributes () {
    return this.domElement.ariaAttrs;
  }

 /**
 * @method getAccessibleNameInfo
 *
 * @desc Gets accessible name and description information
 *
 * @return {Object}
 */
  getAccessibleNameInfo () {
    const info = {
      name:            this.domElement.accName.name,
      name_source:     this.domElement.accName.source,
      name_required:   this.domElement.ariaInfo.isNameRequired,
      name_prohibited: this.domElement.ariaInfo.isNameProhibited,

      desc: this.domElement.accDescription.name,
      desc_source: this.domElement.accDescription.source,

      error: this.domElement.errMessage.name,
      error_source: this.domElement.errMessage.source

    };
    return info;
  }

 /**
 * @method getAccessibleDescriptionInfo
 *
 * @desc Gets accessible description information
 *
 * @return {Object}
 */
  getAccessibleDescriptionInfo () {
    const info = {
      name:            this.domElement.accDescription.name,
      name_source:     this.domElement.accDescription.source,
    };
    return info;
  }

 /**
 * @method getAccessibleErrorMessageInfo
 *
 * @desc Gets accessible error information
 *
 * @return {Object}
 */
  getAccessibleErrorMessageInfo () {
    const info = {
      name:            this.domElement.errMessage.name,
      name_source:     this.domElement.errMessage.source,
    };
    return info;
  }

  /**
  * @method getColorContrastInfo
  *
  * @desc Gets color contrast information for an element result
  *
  * @return {Object} Object with color contrast keys and values
  */
  getColorContrastInfo () {
    const info = {};
    const rule = this.rule_result.getRule();

    if (rule && (rule.getId() === 'COLOR_1')) {
      const cc = this.domElement.colorContrast;
      if (cc) {
        info.color_contrast_ratio  = cc.colorContrastRatio;
        info.color                 = cc.color;
        info.color_hex             = '#' + cc.colorHex;
        info.background_color      = cc.backgroundColor;
        info.background_color_hex  = '#' + cc.backgroundColorHex;
        info.font_family           = cc.fontFamily;
        info.font_size             = cc.fontSize;
        info.font_weight           = cc.fontWeight;
        info.large_font            = cc.isLargeFont ? 'Yes' : 'no';
        info.background_image      = cc.backgroundImage;
        info.background_repeat     = cc.backgroundRepeat;
        info.background_position   = cc.backgroundPosition;
      }
    }
    return info;
  }

  /**
  * @method getTableInfo
  *
  * @desc Gets table information
  *
  * @return {Object} Object with keys and values
  */
  getTableInfo () {
    const info = {};
    const te = this.domElement.tableElement;
    if (te) {
      info.type     = getCommonMessage('tableType', te.tableType);
      info.rows     = te.rowCount;
      info.columns  = te.colCount;
      info.header_cells     = te.headerCellCount;
      info.data_cells       = te.cellCount - te.headerCellCount;
      info.spanned_data_cells = te.spannedDataCells;
    }
    return info;
  }

  /**
  * @method getTableCellInfo
  *
  * @desc Gets table header information for data cells
  *
  * @return {Object} Object with header keys and values
  */
  getTableCellInfo () {
    const info = {};
    const tableCell = this.domElement.tableCell;
    if (tableCell) {
      info.headers = tableCell.headers.join(' | ');
      info.headers_source  = getCommonMessage('headerSource', tableCell.headerSource);
      info.rowspan = tableCell.rowSpan;
      info.colspan = tableCell.columnSpan;
    }
    return info;
  }

  /**
  * @method getVisibilityInfo
  *
  * @desc Gets visibility information for an element result
  *
  * @return {Object} Object with vibility keys and values
  */
  getVisibilityInfo () {
    var info = {};
    var cs;
    if (this.dom_element) {
      cs = this.dom_element.computed_style;
      if (cs) {
        info.graphical_rendering  = this.visibility[cs.is_visible_onscreen];
        info.assistive_technology = this.visibility[cs.is_visible_to_at];
      }
    }
    return info;
  }


}

/* elementResultSummary.js */

const debug$5 = new DebugLogging('ElementResultSummary', false);

/* ---------------------------------------------------------------- */
/*                             ResultSummary                        */
/* ---------------------------------------------------------------- */

 /**
 * @class ResultsSummary
 *
 * @desc Constructor for an object that contains summary of element, page, website
 *       results for rule result
 *
 * @property  {Integer}  p  - Number of element, page or website results that passed
 * @property  {Integer}  v  - Number of required element, page or website results that
 *                            failed
 * @property  {Integer}  w  - Number of recommended element, page or website results
 *                            that failed
 * @property  {Integer}  mc - Number of element, page or website results that require
 *                            a mannual check
 * @property  {Integer}  h  - Number of element, page or website results that are hidden
 */

class ResultsSummary {
  constructor () {
    // Element result counts
    this.p   = 0;
    this.v   = 0;
    this.w   = 0;
    this.mc  = 0;
    this.h   = 0;

    debug$5.flag && debug$5.log(`[ElementResultsSummary]: ${this.toString()}`);
  }

  get violations()     { return this.v;   }
  get warnings()       { return this.w;   }
  get manual_checks()  { return this.mc;  }
  get passed()         { return this.p;   }
  get hidden()         { return this.h;   }

  /**
   * @method hasResults
   *
   * @desc True if at least one element results is a violation, warning, manual check
   *       or passed, otherwise false (e.g no element results or all hidden)
   *
   * @return {Boolean} see description
   */

  hasResults () {
    return (this.v || this.w || this.mc || this.p);
  }

  /**
   * @method addViolations
   * @private
   *
   * @desc Adds violation element results to the summary calculation
   *
   * @param  {Integer}  n  - Number of element results that passed
   */

  addViolations ( n ) {
    if (n > 0) {
      this.v += n;
    }
  }

  /**
   * @method addWarnings
   *
   * @desc Adds warning element results to the summary calculation
   *
   * @param  {Integer}  n  - Number of element results that passed
   */

  addWarnings ( n ) {
    if (n > 0) {
      this.w += n;
    }
  }

  /**
   * @method addManualChecks
   *
   * @desc Adds manual check element results to the summary calculation
   *
   * @param  {Integer}  n  - Number of element results that passed
   */

  addManualChecks ( n ) {
    if ( n > 0) {
      this.mc += n;
    }
  }

  /**
   * @method addPassed
   *
   * @desc Adds passed element results to the summary calculation
   *
   * @param  {Integer}  n  - Number of element results that passed
   */

   addPassed ( n ) {
     if (n > 0) {
       this.p += n;
     }
   }

  /**
   * @method addHidden
   * @private
   *
   * @desc Adds hidden element results to the summary calculation
   *
   * @param  {Integer}  n  -  Number of element results that are hidden
   */

  addHidden ( n ) {
    if (n > 0) {
      this.h += n;
    }
  }

  /*
   * @method toString
   *
   * @desc output information about the summary
   *
   * @return  {String}  Information about element summary
   */

  toString () {
    return "V: " + this.v + " W: " + this.w + " MC: " + this.mc + " P: " + this.p + " H: " + this.h;
  }
}

/* pageResult.js */

/* Constants */

const debug$4 = new DebugLogging('PageResult', false);

/**
 * @class PageResult
 *
 * @desc Constructor for an object that contains a the results of
 *          the evaluation of a rule on a element
 *
 * @param  {ResultRule}   rule_result         - reference to the rule result object
 * @param  {Number}       result_value        - Constant representing result value of the evaluation result
 * @param  {Object}       domCache            - DomCache reference to element information used by this rule result
 * @param  {String}       message_id          - String reference to the message string in the NLS file
 * @param  {Array}        message_arguments   - Array  array of values used in the message string
 * @param  {Array}        props               - Array of properties that are defined in the validation function (NOTE: typically undefined)
 * @param  {String}       elem_identifier     - String identifying the element (Optional)
 */

/**
 * @private
 * @constructor Internal Properties
 *
 * @property  {RuleResult} rule_result         - reference to the rule result object
 * @property  {Number}     result_value        - Constant representing result value of the evaluation result
 * @property  {DOMElement} cache_item          - Object reference to cache item associated with the test
 * @property  {String}     message_id          - String reference to the message string in the NLS file
 * @property  {Array}      message_arguments   - Array  array of values used in the message string
 */

class PageResult extends BaseResult {
  constructor (rule_result, result_value, domCache, message_id, message_arguments) {
    super(rule_result, result_value, message_id, message_arguments, 'page');

    this.domCache     = domCache;
    this.result_type  = RESULT_TYPE.PAGE;

    if (debug$4.flag) {
      debug$4.log(`${this.result_value}: ${this.result_message}`);
    }
  }

}

/* websiteResult.js */

/* Constants */

const debug$3 = new DebugLogging('PageResult', false);

/**
 * @class WebsiteResult
 *
 * @desc Constructor for an object that contains a the results of
 *          the evaluation of a rule on a element
 *
 * @param  {ResultRule}   rule_result         - reference to the rule result object
 * @param  {Number}       result_value        - Constant representing result value of the evaluation result
 * @param  {Object}       domCache            - DomCache reference to element information used by this rule result
 * @param  {String}       message_id          - String reference to the message string in the NLS file
 * @param  {Array}        message_arguments   - Array  array of values used in the message string
 * @param  {Array}        props               - Array of properties that are defined in the validation function (NOTE: typically undefined)
 * @param  {String}       elem_identifier     - String identifying the element (Optional)
 */

/**
 * @private
 * @constructor Internal Properties
 *
 * @property  {RuleResult} rule_result         - reference to the rule result object
 * @property  {Number}     result_value        - Constant representing result value of the evaluation result
 * @property  {DOMElement} cache_item          - Object reference to cache item associated with the test
 * @property  {String}     message_id          - String reference to the message string in the NLS file
 * @property  {Array}      message_arguments   - Array  array of values used in the message string
 */

class WebsiteResult extends BaseResult {
  constructor (rule_result, result_value, domCache, message_id, message_arguments) {
    super(rule_result, result_value, message_id, message_arguments, 'website');

    this.domCache     = domCache;
    this.result_type  = RESULT_TYPE.WEBSITE;

    if (debug$3.flag) {
      debug$3.log(`${this.result_value}: ${this.result_message}`);
    }
  }

}

/* ruleResult.js */


/* constants */
const debug$2 = new DebugLogging('ruleResult', false);
debug$2.flag = false;

 /**
 * @class RuleResult
 *
 * @desc Constructor for an object that contains a the results of
 *          the evaluation of a ruleset rule
 *
 * @param  {Rule}  Rule  - Rule associated with the result
 */

/**
 * @private
 * @constructor Internal Properties
 *
 * @property  {Object} rule                   - Rule associated with the result
 *
 * @property  {Array}  results_passed         - Array of all the results
 *                                              that passed
 * @property  {Array}  results_violations     - Array of all the results
 *                                              that resulted in violations
 * @property  {Array}  results_warnings       - Array of all the results
 *                                              that resulted in warnings
 * @property  {Array}  results_manual_checks  - Array of all the results
 *                                              that require manual evaluations
 * @property  {Array}  results_hidden         - Array of all the results
 *                                              that are hidden
 *
 * @property  {ElementResultsSummary} results_summary  - Summary of the node results for
 *                                               the rule result
 */

class RuleResult {

  constructor (rule) {
    this.rule = rule;

    this.results_passed         = [];
    this.results_violations     = [];
    this.results_warnings       = [];
    this.results_manual_checks  = [];
    this.results_hidden         = [];

    this.results_summary = new ResultsSummary();
  }

  /**
   * @method validate
   *
   * @desc Executes the validate function of the rule and stores the
   *       results in this rule result
   */

  validate (domCache) {
    this.rule.validate(domCache, this);
  }

  /**
   * @method hasHiddenElementResults
   *
   * @desc True if at least one element result is a hidden,
   *       otherwise false if no element results or all element results are hidden
   *
   * @return {Boolean} see description
   */

  hasHiddenElementResults () {
    return this.results_summary.hidden > 0;
  }

  /**
   * @method getImplementationScore
   *
   * @desc Returns a number between 0 - 100 indicating the level of
   *       implementation the violations, warnings and passed element results
   *       A score value of -1 means the rule only had manual checks or was not
   *       applicable
   *
   * @return {Integer} see description
   */

  getImplementationScore () {
    let score = -1;
    const ers = this.getResultsSummary();
    const failures = ers.violations + ers.warnings;
    const passed = ers.passed;
    const total = failures + passed;

    if (total > 0) {
      score = Math.round((100 * passed) / total);
      if ((score === 100) && (failures > 0)) score = 99;
    }
    return score;
  }

  /**
   * @method getImplementationValue
   *
   * @desc Return a numerical constant indicating the level of implementation:
   *
   * @return {Integer} see description
   */

  getImplementationValue () {

    let value     = IMPLEMENTATION_VALUE.NOT_APPLICABLE;
    const summary = this.getResultsSummary();
    const score   = this.getImplementationScore();

    if (summary.manual_checks > 0) {
      value = IMPLEMENTATION_VALUE.MANUAL_CHECKS_ONLY;
    }

    if (score === 100) {
      if (summary.manual_checks > 0) {
        value = IMPLEMENTATION_VALUE.COMPLETE_WITH_MANUAL_CHECKS;
      }
      else {
        value = IMPLEMENTATION_VALUE.COMPLETE;
      }
    } else {
      if (score > 95) {
        value = IMPLEMENTATION_VALUE.ALMOST_COMPLETE;
      } else {
        if (score > 50) {
          value = IMPLEMENTATION_VALUE.PARTIAL_IMPLEMENTATION;
        } else {
          if (score >= 0) {
            value = IMPLEMENTATION_VALUE.NOT_IMPLEMENTED;
          }
        }
      }
    }
    return value;
  }

  /**
   * @method getImplementationValueNLS
   *
   * @desc Returns a string indicating the level of implementation:
   *
   * @return {String} see description
   */

  getImplementationValueNLS () {
    return getCommonMessage('implementationValue', this.getImplementationValue());
  }

  /**
   * @method getResultsSummary
   *
   * @desc Gets numerical summary information about the results
   *
   * @return {ElementResultSummary} see @desc
   */

  getResultsSummary () {
    return this.results_summary;
  }

  /**
   * @method getResultValue
   *
   * @desc Gets the rule result value based on element results
   *
   * @return {RULE_RESULT_VALUE} Returns a rule result value constant
   */

  getResultValue () {
    let resultValue = RULE_RESULT_VALUE.NOT_APPLICABLE;
    const summary = this.getResultsSummary();

    if (summary.violations > 0) resultValue = RULE_RESULT_VALUE.VIOLATION;
    else if (summary.warnings > 0) resultValue = RULE_RESULT_VALUE.WARNING;
    else if (summary.manual_checks > 0) resultValue = RULE_RESULT_VALUE.MANUAL_CHECK;
    else if (summary.passed > 0) resultValue = RULE_RESULT_VALUE.PASS;

    return resultValue;
  }

  /**
   * @method getResultValueNLS
   *
   * @desc Gets a short string representation of the rule result value:
   *
   * @return {String} Returns a string representing the rule result value
   */

  getResultValueNLS () {
    return getCommonMessage('ruleResult', this.getResultValue());
  }

  /**
   * @method getMessage
   *
   * @desc Generates a localized rule result message
   *
   * @param {String}  id      -  Id of the rule result message string
   *
   * @return {String} Strings with rule result message
   */

  getMessage (id) {
    let message;
    if ((id === 'ACTION_NONE') ||
        (id === 'NOT_APPLICABLE')) {
      message = getCommonMessage('ruleResultMessages', id);
    }

    if (!message) {
      message = this.rule.rule_result_msgs[id];
      if (typeof message !== 'string' || (message.length === 0)) {
        message = "Message is missing for rule id: " + this.rule.rule_id + " and mesage id: " + id;
      }

      const summary = this.results_summary;
      const failures = summary.violations + summary.warnings;
      const total    = summary.violations + summary.warnings + summary.passed;

      // Replace tokens with rule values
      message = replaceAll(message, "%N_F",  failures.toString());
      message = replaceAll(message, "%N_P",  summary.passed.toString());
      message = replaceAll(message, "%N_T",  (total + summary.manual_checks).toString());
      message = replaceAll(message, "%N_MC", summary.manual_checks.toString());
      message = replaceAll(message, "%N_H",  summary.hidden.toString());
      message = transformElementMarkup(message);
    }
    return message;
  }

  /**
   * @method getResultMessagesArray
   *
   * @desc Generates a localized rule result messages
   *
   * @return {Array} An array of strings with rule result messages
   *                 (typically only one string in the array)
   */

  getResultMessagesArray () {

    const summary = this.results_summary;

    let messages = [];
    let message = "";
    let prefix;

    const failures = summary.violations + summary.warnings;

    if (!failures && !summary.manual_checks) {
      if (summary.passed === 0) {
        messages.push(this.getMessage('NOT_APPLICABLE'));
      }
      else {
        messages.push(this.getMessage('ACTION_NONE'));
      }
    }
    else {
      if (failures > 0) {
        prefix =  this.isRuleRequired() ?
                  getCommonMessage('baseResult', RESULT_VALUE.VIOLATION) :
                  getCommonMessage('baseResult', RESULT_VALUE.WARNING);

        message = (failures === 1) ?
                  this.getMessage('FAIL_S') :
                  this.getMessage('FAIL_P');
        messages.push(prefix + ': ' + message);
      }

      if (summary.manual_checks > 0) {
        prefix = getCommonMessage('baseResult', RESULT_VALUE.MANUAL_CHECK);
        message = (summary.manual_checks === 1) ?
                  this.getMessage('MANUAL_CHECK_S') :
                  this.getMessage('MANUAL_CHECK_P');
        messages.push(prefix + ': ' + message);
      }
    }

    if (summary.hidden > 0) {
        prefix = getCommonMessage('baseResult', RESULT_VALUE.HIDDEN);
      message = (summary.hidden === 1) ?
                this.getMessage('HIDDEN_S') :
                this.getMessage('HIDDEN_P');
      messages.push(prefix + ': ' + message);
    }
    return messages;
  }

  /**
   * @method getResultMessage
   *
   * @desc Generates a localized rule result messages
   *
   * @return {String} Returns a single string with all result messages
   */

  getResultMessage   () {
    const messages = this.getResultMessagesArray();
    return messages.join('; ');
  }

  /**
   * @method getAllResultsArray
   *
   * @desc Returns an array of all results in severity order
   *
   * @return {Array} see @desc
   */

  getAllResultsArray   () {
    return [].concat(
      this.results_violations,
      this.results_warnings,
      this.results_manual_checks,
      this.results_passed,
      this.results_hidden);
  }

  /**
   * @method updateResults
   *
   * @desc Updates rule result information for a element or page result
   *
   * @param  {Integer}  test_result   - Number representing a result value
   * @param  {Object}   result_item   - Reference to ElementResult or PageResult object
   * @param  {Object}   dom_item      - Reference to DOMcache or domElement objects
   */

  updateResults (result_value, result_item, dom_item) {
    switch (result_value) {
      case RESULT_VALUE.HIDDEN:
        this.results_summary.addHidden(1);
        this.results_hidden.push(result_item);
        dom_item.resultsHidden.push(result_item);
        break;

      case RESULT_VALUE.PASS:
        this.results_summary.addPassed(1);
        this.results_passed.push(result_item);
        dom_item.resultsPassed.push(result_item);
        break;

      case RESULT_VALUE.VIOLATION:
        this.results_summary.addViolations(1);
        this.results_violations.push(result_item);
        dom_item.resultsViolations.push(result_item);
        break;

      case RESULT_VALUE.WARNING:
        this.results_summary.addWarnings(1);
        this.results_warnings.push(result_item);
        dom_item.resultsWarnings.push(result_item);
        break;

      case RESULT_VALUE.MANUAL_CHECK:
        this.results_summary.addManualChecks(1);
        this.results_manual_checks.push(result_item);
        dom_item.resultsManualChecks.push(result_item);
        break;
    } // end switch
  }

  /**
   * @method addElementResult
   *
   * @desc Adds a element result from an evaluation of rule on the dom
   *
   * @param  {Integer}  test_result         - Number representing if a node passed, failed, manual check or other test result
   * @param  {Object}  dom_item            - Reference to DOMcache item (e.g. domElement, domText objects)
   * @param  {String}  message_id          - Reference to the message string in the NLS file
   * @param  {Array}   message_arguements  - Array of values used in the message string
   */

  addElementResult (test_result, dom_item, message_id, message_arguments) {
    const dom_element = dom_item.isDomText ? dom_item.parentDomElement : dom_item;
    const result_value = getResultValue(test_result, this.isRuleRequired());
    const element_result = new ElementResult(this, result_value, dom_element, message_id, message_arguments);

    this.updateResults(result_value, element_result, dom_element);
  }

  /**
   * @method addPageResult
   *
   * @desc Adds a page result from an evaluation of rule on the dom
   *
   * @param  {Integer}  test_result         - Number representing if a node passed, failed, manual check or other test result
   * @param  {Object}   dom_cache           - Reference to DOMcache for saving page results
   * @param  {String}   message_id          - Reference to the message string in the NLS file
   * @param  {Array}    message_arguements  - Array of values used in the message string
   */

  addPageResult (test_result, dom_cache, message_id, message_arguments) {
    const result_value = getResultValue(test_result, this.isRuleRequired());
    const page_result = new PageResult(this, result_value, dom_cache, message_id, message_arguments);

    this.updateResults(result_value, page_result, dom_cache);
  }

  /**
   * @method addWebsiteResult
   *
   * @desc Adds a website result from an evaluation of rule on the dom
   *
   * @param  {Integer}  test_result         - Number representing if a node passed, failed, manual check or other test result
   * @param  {Object}   dom_cache           - Reference to DOMcache for saving page results
   * @param  {String}   message_id          - Reference to the message string in the NLS file
   * @param  {Array}    message_arguements  - Array of values used in the message string
   */

  addWebsiteResult (test_result, dom_cache, message_id, message_arguments) {
    const result_value = getResultValue(test_result, this.isRuleRequired());
    const website_result = new WebsiteResult(this, result_value, dom_cache, message_id, message_arguments);

    this.updateResults(result_value, website_result, dom_cache);
  }

  /**
   * @method isRuleRequired
   *
   * @desc Tests whether the rule is a required or recommended rule in this ruleset
   *
   * @return {Boolean}  True if rule is a required rule, false if a recommended rule
   */

  isRuleRequired () {
    return this.rule.rule_required;
  }

  /**
   * @method getRule
   *
   * @desc Gets the associated rule
   *
   * @return {Object} Rule object
   */
  getRule () {
    return this.rule;
  }

  /**
   * @method getRuleDefinition
   *
   * @desc Gets the definition of the rule
   *
   * @return {String} Localized string of the rule definition based on being
   *                  required or recommended
   */
  getRuleDefinition () {
    return this.rule.getDefinition(this.isRuleRequired());
  }

  /**
   * @method getRuleSummary
   *
   * @desc Gets the summary of the rule
   *
   * @return {String} Localized string of the rule summary based on being
   *                  required or recommended
   */

  getRuleSummary   () {
    return this.rule.getSummary(this.isRuleRequired());
  }

  /**
   * @method getWCAGLevel
   *
   * @desc Get the string representation of the the WCAG 2.0 Success Criterion Level
   *       based on the primary id of the rule
   *
   * @return  {String}  String representing the WCAG 2.0 success criterion level
   *                    (i.e. A, AA or AAA)
   */

  getWCAGLevel   () {
    return this.rule.getWCAGLevel();
  }

  /**
   * @method getRuleScope
   *
   * @desc Get the rule scope constant of the rule
   *
   * @return {Integer} rule scope constant
   */

  getRuleScope   () {
    return this.rule.getScope();
  }

  /**
   * @method getRuleScopeNLS
   *
   * @desc Get a localized string of the rule scope (i.e. 'element' or 'page')
   *
   * @return {String} Localized string of the rule scope
   */

  getRuleScopeNLS   () {
    return this.rule.getScopeNLS();
  }

  /**
   * @method getDataForJSON
   *
   * @desc Object containing the data for exporting a rule result to JSON
   *
   * @param {Boolean} flag    -  if true include element result details
   *
   * @return {Object} see @desc
   */

  getDataForJSON (flag=false) {

    const summary = this.results_summary;

    const data = {
      rule_id: this.rule.getId(),
      rule_summary: this.getRuleSummary(),

      success_criteria_nls:  this.rule.getPrimarySuccessCriterionInfo().title,
      success_criteria_code: this.rule.getPrimarySuccessCriterionInfo().id,

      guideline_nls:  this.rule.getGuidelineInfo().title,
      guideline_code: this.rule.getGuidelineInfo().id,

      rule_category_nls:  this.rule.getCategoryInfo().title,
      rule_category_code: this.rule.getCategoryInfo().id,

      rule_scope_code_nls: this.rule.getScopeNLS(),
      rule_scope_code:     this.rule.getScope(),

      result_value_nls: this.getResultValueNLS(),
      result_value:     this.getResultValue(),
      result_message:   this.getResultMessage(),

      rule_required: this.isRuleRequired(),
      has_hidden:    this.hasHiddenElementResults(),

      implementation_score: this.getImplementationScore(),
      implementation_value: this.getImplementationValue(),
      implementation_nls:   this.getImplementationValueNLS(),

      results_passed:       summary.passed,
      results_violation:    summary.violations,
      results_warning:      summary.warnings,
      results_failure:     (summary.violations + summary.warnings),
      results_manual_check: summary.manual_checks,
      results_hidden:       summary.hidden,

      results: []
    };

    if (flag) {
      const results = this.getAllResultsArray();
      results.forEach ( result => {
        data.results.push(result.getDataForJSON());
      });
    }
    return data;
  }

  /**
   * @method toJSON
   *
   * @desc Returns a JSON representation of the rule result
   *
   * @param {Boolean} flag    -  if true include element result details
   *
   * @return  {String}  see @desc
   */

  toJSON (flag=false) {
    return JSON.stringify(this.getDataForJSON(flag), null, '  ');
  }

  /**
   * @method toString
   *
   * @desc Creates a text string representation of the rule result object
   *
   * @return {String} Returns a text string representation of the rule result object
   */

  toString () {
    return this.getRuleDefinition() + " (" + this.results_summary + ")";
  }

}

/* evaluationResult.js */

/* Constants */
const debug$1 = new DebugLogging('EvaluationResult', false);
debug$1.flag = false;

/* helper functions */

function isWCAG(ruleset, level, rule) {

  switch (ruleset.toUpperCase()) {
    case 'WCAG20':
      if (!rule.isWCAG20) {
        return false;
      }
      break;

    case 'WCAG21':
      if (!rule.isWCAG21) {
        return false;
      }
      break;

    case 'WCAG22':
      if (!rule.isWCAG22) {
        return false;
      }
      break;

    default:
      return false;


  }

  switch (level.toUpperCase()) {
    case 'A':
      if (!rule.isLevelA) {
        return false;
      }
      break;

    case 'AA':
      if (!rule.isLevelA && !rule.isLevelAA) {
        return false;
      }
      break;

    case 'AAA':
      return true;

    default:
      return false;
  }

  return true;

}

function isFilter(ruleset, ruleFilter, ruleId) {
  return (ruleset.toUpperCase() === 'FILTER') && ruleFilter.includes(ruleId);
}

class EvaluationResult {
  constructor (allRules, domCache, title, url, ruleset='WCAG21', level='AA', scopeFilter='ALL', ruleFilter=[]) {

    this.title = title;
    this.url = url;
    this.ruleset = ruleset;
    this.level = level;
    this.scopeFilter = scopeFilter;

    this.date = getFormattedDate();
    this.version = VERSION;
    this.allDomElements = domCache.allDomElements;
    this.allRuleResults = [];

    const startTime = new Date();
    debug$1.flag && debug$1.log(`[    ruleset]: ${ruleset}`);
    debug$1.flag && debug$1.log(`[      level]: ${level}`);
    debug$1.flag && debug$1.log(`[scopeFilter]: ${scopeFilter}`);

    allRules.forEach (rule => {
      debug$1.flag && debug$1.log(`[version]: ${rule.wcag_primary_id} ${rule.wcag_version} ${rule.isWCAG20} ${rule.isWCAG21} ${rule.isWCAG22}`);

      if (isFilter(ruleset, ruleFilter, rule.getId()) ||
          isWCAG(ruleset, level, rule)) {
        if ((scopeFilter === 'ALL') ||
            ((scopeFilter === 'PAGE')    && rule.isScopePage) ||
            ((scopeFilter === 'WEBSITE') && rule.isScopeWebsite)) {
          const ruleResult = new RuleResult(rule);
          debug$1.flag && debug$1.log(`[validate]: ${ruleResult.rule.getId()}`);

          ruleResult.validate(domCache);
          this.allRuleResults.push(ruleResult);
        }
      }
    });

    const json = this.toJSON(true);
    debug$1.flag && debug$1.log(`[JSON]: ${json}`);

    const endTime = new Date();
    debug$1.flag && debug$1.log(`[Run Time]: ${endTime.getTime() - startTime.getTime()} msecs`);


  }

  /**
   * @method getTitle
   *
   * @desc Get the title of the evaluated document
   *
   * @return {String}  String representing the title
   */

  getTitle () {
    return this.title;
  }

  /**
   * @method getURL
   *
   * @desc Get the url of the evaluated document
   *
   * @return {String}  String representing the title
   */

  getURL () {
    return this.url;
  }

  /**
   * @method getDate
   *
   * @desc Get the date the document
   *
   * @return {String}  String representing the title
   */

  getDate () {
    return this.date;
  }

  /**
   * @method getRuleResult
   *
   * @desc Gets rule result object with the associated id
   *
   * @param {String}  rule_id  - id of the rule associated with the rule result
   *
   * @return {RuleResult} Returns the ResultResult object
   */
  getRuleResult (rule_id) {
    return this.allRuleResults.find( rr => rr.rule.rule_id === rule_id);
  }


  /**
   * @method getDomElementById
   *
   * @desc Returns an DomElement object with the associated id, otherwise
   *       null if the DomElement does not exist
   *
   * @param  {Stirng}  id  -  ID of the element in the DOM
   *
   * @return {DomElement}  see @desc
   */

  getDomElementById (id) {
    for (let i = 0; i < this.allDomElements.length; i += 1) {
      if (this.allDomElements[i].id === id) {
        return this.allDomElements[i];
      }
    }
    return null;
  }

  /**
   * @method getRuleResultsAll
   *
   * @desc Returns an object containing a set of all rule results
   *
   * @param  {Integer}  ruleset - Numerical constant that specifies the ruleset
   *                             By default all rules are included
   * 
   * @return {RuleGroupResult}  see description
   */

  getRuleResultsAll (ruleset=RULESET.ALL) {
    const rgr = new RuleGroupResult(this, getCommonMessage('allRuleResults'), "", "", ruleset);
    this.allRuleResults.forEach( rr => {
      rgr.addRuleResult(rr);
    });
    return rgr;
  }

  /**
   * @method getRuleResultsByGuideline
   *
   * @desc Returns an object containing the rule results associated with a WCAG 2.0 Guideline
   *
   * @param {Integer}  guidelineId  - Number representing the guideline id
   * @param {Integer}  ruleset      - Numerical constant that specifies the ruleset
   *                                  By default all rules are included
   * 
   * @return {RuleGroupResult}  see description
   */

  getRuleResultsByGuideline (guidelineId, ruleset=RULESET.ALL) {
    const glInfo = getGuidelineInfo(guidelineId);
    const rgr = new RuleGroupResult(this, glInfo.title, glInfo.url, glInfo.description, ruleset);

    this.allRuleResults.forEach( rr => {
      if (rr.getRule().getGuideline() & guidelineId) {
        rgr.addRuleResult(rr);
      }
    });
    return rgr;
  }

  /**
   * @method getRuleResultsByCategory
   *
   * @desc Returns an object containing the rule results for the rules in a rule category
   *
   * @param {Integer}  categoryId  -  Number of the rule category
   * @param {Integer}  ruleset      - Numerical constant that specifies the ruleset
   *                                  By default all rules are included
   *
   * @return {RuleGroupResult}  see description
   */

  getRuleResultsByCategory (categoryId, ruleset=RULESET.ALL) {
    const rcInfo = getRuleCategoryInfo(categoryId);
    const rgr = new RuleGroupResult(this, rcInfo.title, rcInfo.url, rcInfo.description, ruleset);

    this.allRuleResults.forEach( rr => {
      if (rr.getRule().getCategory() & categoryId) {
        rgr.addRuleResult(rr);
      }
    });
    return rgr;
  }

  /**
   * @method getRuleResultsByScope
   *
   * @desc Returns an object containing the rule results based on rule scope
   *
   * @param {Integer}  scope Id  -  Number of the scope
   * @param {Integer}  ruleset   - Numerical constant that specifies the ruleset
   *                               By default all rules are included
   *
   * @return {RuleGroupResult}  see description
   */

  getRuleResultsByScope (scopeId, ruleset=RULESET.ALL) {
    const scopeInfo = getRuleScopeInfo(scopeId);
    const rgr = new RuleGroupResult(this, scopeInfo.title, scopeInfo.url, scopeInfo.description, ruleset);

    this.allRuleResults.forEach( rr => {
      if (rr.getRule().getScope() & scopeId) {
        rgr.addRuleResult(rr);
      }
    });
    return rgr;
  }


  /**
   * @method getDataForJSON
   *
   * @desc Creates a data object with rule, element and page results
   *
   * @param  {Boolean}  flag  -  Optional param, if true then element
   *                             results are included in the JSON file
   *
   * @return {String} Returns a string in JSON format
   */

  getDataForJSON (flag=false) {

    const data = {
      eval_url: cleanForUTF8(this.url),
      eval_url_encoded: encodeURI(this.url),
      eval_title: cleanForUTF8(this.title),

      // For compatibility with previous versions of the library
      ruleset_id:     'ARIA_STRICT',
      ruleset_title:  'HTML and ARIA Techniques',
      ruleset_abbrev: 'HTML5+ARIA',
      ruleset_version: VERSION,

      rule_results: []
    };

//    json += this.dom_cache.element_information.toJSON(true, "  ");

    this.allRuleResults.forEach( rr => {
      data.rule_results.push(rr.getDataForJSON(flag));
    });
    return data;
  }

  /**
   * @method toJSON
   *
   * @desc Creates a string representing the evaluation results in a JSON format
   *
   * @param  {Boolean}  flag  -  Optional param, if true then element
   *                             results are included in the JSON file
   *
   * @return {String} Returns a string in JSON format
   */

  toJSON (flag=false) {
    return JSON.stringify(this.getDataForJSON(flag), null, '  ');
  }
}

/* evaluatationLibrary.js */

/* Constants */
const debug   = new DebugLogging('EvaluationLibrary', false);
debug.flag = false;
debug.json = false;

/**
 * @class EvaluateLibrary
 *
 * @desc Base class for APIs for using the evaluation library to evaluate a DOM 
 *       for WCAG requirements and provides access to descriptive rule information
 */

class EvaluationLibrary {
  constructor (codeTags = false) {
    this.constants = new Constants();
    // setUseCodeTags sets if localized strings using the @ character to identify 
    // code items in the string return <code> tags or capitalization  
    setUseCodeTags(codeTags);
  }

  /**
   * @method evaluate
   *
   * @desc Evaluate a document using the OpenA11y ruleset and return an evaluation object
   *
   * @param  {Object}  startingDoc - Browser document object model (DOM) to be evaluated
   * @param  {String}  title       - Title of document being analyzed
   * @param  {String}  url         - url of document being analyzed
   * @param  {String}  ruleset     - Set of rules to evaluate (values: "FIRST-STEP" | "A" | "AA" | "AAA")
   * @param  {String}  scopeFilter - Filter rules by scope (values: "ALL" | "PAGE" | "WEBSITE")
   */

  evaluate (startingDoc, title='', url='', ruleset='WCAG22', level='AAA', scopeFilter='ALL', ruleFilter = []) {

    let domCache = new DOMCache(startingDoc);
    let evaluationResult = new EvaluationResult(allRules, domCache, title, url, ruleset, level, scopeFilter, ruleFilter);

    // Debug features
    if (debug.flag) {
      domCache.showDomElementTree();
      domCache.controlInfo.showControlInfo();
      domCache.iframeInfo.showIFrameInfo();
      domCache.idInfo.showIdInfo();
      domCache.imageInfo.showImageInfo();
      domCache.linkInfo.showLinkInfo();
      domCache.listInfo.showListInfo();
      domCache.tableInfo.showTableInfo();
      domCache.structureInfo.showStructureInfo();

      debug.json && debug.log(`[evaluationResult][JSON]: ${evaluationResult.toJSON(true)}`);
    }
    return evaluationResult;
  }

  /**
   * @method CONSTANTS
   * 
   * @desc Provides access to the Constants used in the evaluation library
   */

  get CONSTANTS () {
    return this.constants;
  }

  /**
   * @method getRuleCategories
   *
   * @desc Provides access to the localized Rule Categories object from evaluation library
   */

  get getRuleCategories () {
    return getRuleCategories();
  }

  /**
   * @method getWCAG
   *
   * @desc Provides access to the localized WCAG object from evaluation library
   */

  get getWCAG () {
    return getWCAG();
  }

  /**
   * @method getRuleScopes
   *
   * @desc Provides access to the localized Rule Scopes object from evaluation library
   */

  get getRuleScopes () {
    return getRuleScopes();
  }


  /**
   * @method getAllRules
   *
   * @desc Provides access to the rules in evaluation library
   */

  get getAllRules () {
    return allRules;
  }

  /**
   * @method getWCAGVersion
   *
   * @desc Get version of WCAG a success criteria first appeared
   *
   * @param {String}  csID  - Id of the success criteria (e.g. 1.4.5)
   *
   * @returns {String}  WCAG20 | WCAG21 | WCAG22
   */

  getWCAGVersion (scID) {
    return getWCAGVersion(scID);
  }

  /**
   * @method getRuleInfo
   *
   * @desc Provides access to localized rule information
   */

  getRuleInfo(rule) {
    const ruleInfo = {};
    const id = rule.rule_id;

    ruleInfo.id            = getRuleId(id);
    ruleInfo.htmlId        = rule.rule_id.toLowerCase().replace('_', '-');
    ruleInfo.filename      = 'rule-' + rule.rule_id.toLowerCase().replace('_', '-') + '.html';
    ruleInfo.last_updated  = rule.last_updated;

    ruleInfo.rule_required    = rule.rule_required;

    ruleInfo.rule_scope       = rule.rule_scope;
    ruleInfo.rule_category    = getRuleCategoryInfo(rule.rule_category_id);
    ruleInfo.rule_category_id = rule.rule_category_id;
    ruleInfo.conformance      = rule.rule_required ? getCommonMessage('required') : getCommonMessage('recommended');

    ruleInfo.wcag_primary_id  = rule.wcag_primary_id;
    ruleInfo.wcag_level       = getWCAGLevel(rule.wcag_primary_id);
    ruleInfo.wcag_primary     = getSuccessCriterionInfo(rule.wcag_primary_id);
    ruleInfo.wcag_related     = getSuccessCriteriaInfo(rule.wcag_related_ids);
    ruleInfo.wcag_version     = getWCAGVersion(ruleInfo.wcag_primary_id);
    ruleInfo.has_failures       = getHasFailures(id);
    ruleInfo.has_hidden         = getHasHidden(id);
    ruleInfo.has_manual_checks  = getHasManualChecks(id);
    ruleInfo.has_pass           = getHasPass(id);
    ruleInfo.mc_message         = getManualCheckMessage(id);

    ruleInfo.target_resources = rule.target_resources;

    ruleInfo.definition = getRuleDefinition(id);
    ruleInfo.summary    = getRuleSummary(id);
    ruleInfo.purposes   = getPurposes(id);

    ruleInfo.techniques = getTechniques(id);
    ruleInfo.information_links = getInformationLinks(id);

    return ruleInfo;
  }


}

export { EvaluationLibrary as default };
