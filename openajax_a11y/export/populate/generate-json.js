/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Support IE and Node constant
 */


try {
    if (Node.ELEMENT_NODE != 1) {
        throw true;
    }
}
catch(e) {
    var Node = {
        ELEMENT_NODE:                1,
        ATTRIBUTE_NODE:              2,
        TEXT_NODE:                   3,
        CDATA_SECTION_NODE:          4,
        ENTITY_REFERENCE_NODE:       5,
        ENTITY_NODE:                 6,
        PROCESSING_INSTRUCTION_NODE: 7,
        COMMENT_NODE:                8,
        DOCUMENT_NODE:               9,
        DOCUMENT_TYPE_NODE:         10,
        DOCUMENT_FRAGMENT_NODE:     11,
        NOTATION_NODE:              12
    };
}

/* ---------------------------------------------------------------- */
/*                       OpenAjax Constants                         */
/* ---------------------------------------------------------------- */


/**
 * @namespace OpenAjax
 */

var OpenAjax = OpenAjax || {};

// export { OpenAjax };

/**
 * @namespace OpenAjax.a11y
 */

OpenAjax.a11y = OpenAjax.a11y || {};
OpenAjax.a11y.VERSION = "1.3.0";

/**
 * @method getVersion
 *
 * @memberOf OpenAjax.a11y
 *
 * @desc Get the current version of the evaluation library, rules and rulesets
 *
 * @return  {String}  Returns the version number of the evaluation library
 */

OpenAjax.a11y.getVersion = function () {
  return this.VERSION;
};

/**
 * @namespace OpenAjax.a11y.cache
 */

OpenAjax.a11y.cache = OpenAjax.a11y.cache || {};

/**
 * @namespace OpenAjax.a11y.nls
 */

OpenAjax.a11y.nls = OpenAjax.a11y.nls || {};

/**
 * @constant EVENT_HANDLER_PROCESSOR
 * @memberOf OpenAjax.a11y
 * @type String
 * @default 'none'
 * @desc Defines an event handler enumeration method
 *       Since there is no standard way to enumerate event handlers
 *       need to use proprietary methods to get event information.
 *
 *       Current support:
 *       'firefox'  : uses Firefox (Mozilla) component technology to get
 *                    event information
 *       'fae-util' : uses HTMLUnit features of fae-util to find event
 *                    information
 *       'none'     : disables gathering of event information and
 *                    therefore event related rules are not analyzed
 */
OpenAjax.a11y.EVENT_HANDLER_PROCESSOR = "none";

/**
 * @constant URL_TESTING_ENABLED
 *
 * @memberOf OpenAjax.a11y
 *
 * @type Boolean
 * @default false
 * @desc Enable or disable testing of broken links
 *       the default should be false, due to performance issues
 *       of testing links
 */
OpenAjax.a11y.URL_TESTING_ENABLED  = false;

/**
 * @constant SUPPORTS_URL_TESTING
 *
 * @memberOf OpenAjax.a11y
 *
 * @type Boolean
 * @default false
 * @desc If true the analysis engine supports URL testing
 */
OpenAjax.a11y.SUPPORTS_URL_TESTING = true;

/**
 * @constant DATA_TABLE_ASSUMPTION
 *
 * @memberOf OpenAjax.a11y
 *
 * @type Boolean
 * @default true
 * @desc If true assume table markup is for a data table
 *       If false assume table markup is for layout, unless header cells or other
 *       information indciates its a data table
 */
OpenAjax.a11y.DATA_TABLE_ASSUMPTION  = true;


/**
 * @constant ELEMENT_FORMATING
 * @memberOf OpenAjax.a11y
 * @type String
 * @default 'CAPS'
 * @desc Defines the formating of element names in NLS message strings
 */
OpenAjax.a11y.ELEMENT_FORMATING = 'CAPS';


/**
 * @constant RESULT_FILTER
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Constants related to filtering both node results and rule results
 * @example
 * OpenAjax.a11y.RESULT_FILTER.ALL
 * OpenAjax.a11y.RESULT_FILTER.PASS
 * OpenAjax.a11y.RESULT_FILTER.VIOLATION
 * OpenAjax.a11y.RESULT_FILTER.WARNING
 * OpenAjax.a11y.RESULT_FILTER.WEBSITE_MANUAL_CHECK
 * OpenAjax.a11y.RESULT_FILTER.ELEMENT_MANUAL_CHECK
 * OpenAjax.a11y.RESULT_FILTER.HIDDEN
 * OpenAjax.a11y.RESULT_FILTER.NA
 */
OpenAjax.a11y.RESULT_FILTER = OpenAjax.a11y.RESULT_FILTER || {
  PASS                 : 0x0001,
  VIOLATION            : 0x0002,
  WARNING              : 0x0004,
  WEBSITE_MANUAL_CHECK : 0x0008,
  PAGE_MANUAL_CHECK    : 0x0010,
  ELEMENT_MANUAL_CHECK : 0x0020,
  MANUAL_CHECK         : 0x0038,
  HIDDEN               : 0x0040, // hidden only applies to node results
  NOT_APPLICABLE       : 0x0080,  // not applicable only applies to rule results
  PAGE                 : 0x0100,
  ALL                  : 0x01FF
};

/**
 * @constant DEFAULT_PREFS
 * @memberOf OpenAjax.a11y
 * @type Object
 * @desc Default setting for consumers of the OpenAjax cache
 */

OpenAjax.a11y.DEFAULT_PREFS = OpenAjax.a11y.DEFAULT_PREFS || {
  RULESET_ID     : "WCAG20_ARIA_TRANS",
  WCAG20_LEVEL   : 3,
  BROKEN_LINKS   : false
};


/**
 * @constant WCAG20_PRINCIPLE
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Numercial constant representing a WCAG 2.0 Principles
 *
 * @example
 * OpenAjax.a11y.WCAG20_PRINCIPLE.P_1
 * OpenAjax.a11y.WCAG20_PRINCIPLE.P_2
 * OpenAjax.a11y.WCAG20_PRINCIPLE.P_3
 * OpenAjax.a11y.WCAG20_PRINCIPLE.P_4
 */
OpenAjax.a11y.WCAG20_PRINCIPLE = OpenAjax.a11y.WCAG20_PRINCIPLE || {
  P_1          : 0x000001,
  P_2          : 0x000002,
  P_3          : 0x000004,
  P_4          : 0x000008,
  ALL          : 0x00000F
};

/**
 * @constant WCAG20_GUIDELINE
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Numercial constant representing a WCAG 2.0 Guidelines
 *
 * @example
 * OpenAjax.a11y.WCAG20_GUIDELINE.G_1_1
 * OpenAjax.a11y.WCAG20_GUIDELINE.G_1_2
 * OpenAjax.a11y.WCAG20_GUIDELINE.G_1_3
 * OpenAjax.a11y.WCAG20_GUIDELINE.G_1_4
 * OpenAjax.a11y.WCAG20_GUIDELINE.G_2_1
 * OpenAjax.a11y.WCAG20_GUIDELINE.G_2_2
 * OpenAjax.a11y.WCAG20_GUIDELINE.G_2_3
 * OpenAjax.a11y.WCAG20_GUIDELINE.G_2_4
 * OpenAjax.a11y.WCAG20_GUIDELINE.G_3_1
 * OpenAjax.a11y.WCAG20_GUIDELINE.G_3_2
 * OpenAjax.a11y.WCAG20_GUIDELINE.G_3_3
 * OpenAjax.a11y.WCAG20_GUIDELINE.G_4_1
 */
OpenAjax.a11y.WCAG20_GUIDELINE = OpenAjax.a11y.WCAG20_GUIDELINE || {
  G_1_1          : 0x000010,
  G_1_2          : 0x000020,
  G_1_3          : 0x000040,
  G_1_4          : 0x000080,
  G_2_1          : 0x000100,
  G_2_2          : 0x000200,
  G_2_3          : 0x000400,
  G_2_4          : 0x000800,
  G_2_5          : 0x001000,
  G_3_1          : 0x002000,
  G_3_2          : 0x004000,
  G_3_3          : 0x008000,
  G_4_1          : 0x010000,
  ALL            : 0x01FFF0
};

/**
 * @constant WCAG20_SUCCESS_CRITERION
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Numercial constant representing a WCAG 2.0 Success Criteria
 *
 * @example
 * OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_1_1
 * ....
 * OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_4_1_2
 */
OpenAjax.a11y.WCAG20_SUCCESS_CRITERION = OpenAjax.a11y.WCAG20_SUCCESS_CRITERION || {
  SC_1_1_1          : 1101,
  SC_1_2_1          : 1201,
  SC_1_2_2          : 1202,
  SC_1_2_3          : 1203,
  SC_1_2_4          : 1204,
  SC_1_2_5          : 1205,
  SC_1_2_6          : 1206,
  SC_1_2_7          : 1207,
  SC_1_2_8          : 1208,
  SC_1_2_9          : 1209,
  SC_1_3_1          : 1301,
  SC_1_3_2          : 1302,
  SC_1_3_3          : 1303,
  SC_1_3_4          : 1304,
  SC_1_3_5          : 1305,
  SC_1_3_6          : 1306,
  SC_1_4_1          : 1401,
  SC_1_4_2          : 1402,
  SC_1_4_3          : 1403,
  SC_1_4_4          : 1404,
  SC_1_4_5          : 1405,
  SC_1_4_6          : 1406,
  SC_1_4_7          : 1407,
  SC_1_4_8          : 1408,
  SC_1_4_9          : 1409,
  SC_1_4_10         : 1410,
  SC_1_4_11         : 1411,
  SC_1_4_12         : 1412,
  SC_1_4_13         : 1413,
  SC_2_1_1          : 2101,
  SC_2_1_2          : 2102,
  SC_2_1_3          : 2103,
  SC_2_1_4          : 2104,
  SC_2_2_1          : 2201,
  SC_2_2_2          : 2202,
  SC_2_2_3          : 2203,
  SC_2_2_4          : 2204,
  SC_2_2_5          : 2205,
  SC_2_2_6          : 2206,
  SC_2_3_1          : 2301,
  SC_2_3_2          : 2302,
  SC_2_3_3          : 2303,
  SC_2_4_1          : 2401,
  SC_2_4_2          : 2402,
  SC_2_4_3          : 2403,
  SC_2_4_4          : 2404,
  SC_2_4_5          : 2405,
  SC_2_4_6          : 2406,
  SC_2_4_7          : 2407,
  SC_2_4_8          : 2408,
  SC_2_4_9          : 2409,
  SC_2_4_10         : 2410,
  SC_2_5_1          : 2501,
  SC_2_5_2          : 2502,
  SC_2_5_3          : 2503,
  SC_2_5_4          : 2504,
  SC_2_5_5          : 2505,
  SC_2_5_6          : 2506,
  SC_3_1_1          : 3101,
  SC_3_1_2          : 3102,
  SC_3_1_3          : 3103,
  SC_3_1_4          : 3104,
  SC_3_1_5          : 3105,
  SC_3_1_6          : 3106,
  SC_3_2_1          : 3201,
  SC_3_2_2          : 3202,
  SC_3_2_3          : 3203,
  SC_3_2_4          : 3204,
  SC_3_2_5          : 3205,
  SC_3_3_1          : 3301,
  SC_3_3_2          : 3302,
  SC_3_3_3          : 3303,
  SC_3_3_4          : 3304,
  SC_3_3_5          : 3305,
  SC_3_3_6          : 3306,
  SC_4_1_1          : 4101,
  SC_4_1_2          : 4102,
  SC_4_1_3          : 4103
};

/**
 * @constant RULE_CATEGORIES
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Numercial constant representing a rule category and is bit maskable
 *
 * @example
 * OpenAjax.a11y.RULE_CATEGORIES.UNDEFINED
 * OpenAjax.a11y.RULE_CATEGORIES.AUDIO_VIDEO
 * OpenAjax.a11y.RULE_CATEGORIES.FORMS
 * OpenAjax.a11y.RULE_CATEGORIES.HEADINGS
 * OpenAjax.a11y.RULE_CATEGORIES.IMAGES
 * OpenAjax.a11y.RULE_CATEGORIES.KEYBOARD_SUPPORT
 * OpenAjax.a11y.RULE_CATEGORIES.LINKS
 * OpenAjax.a11y.RULE_CATEGORIES.LANDMARKS
 * OpenAjax.a11y.RULE_CATEGORIES.SITE_NAVIGATION
 * OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY
 * OpenAjax.a11y.RULE_CATEGORIES.TABLES
 * OpenAjax.a11y.RULE_CATEGORIES.TIMING
 * OpenAjax.a11y.RULE_CATEGORIES.WIDGETS_SCRIPTS
 */

OpenAjax.a11y.RULE_CATEGORIES = OpenAjax.a11y.RULE_CATEGORIES || {
  UNDEFINED              : 0x0000,
  LANDMARKS              : 0x0001,
  HEADINGS               : 0x0002,
  STYLES_READABILITY     : 0x0004,
  IMAGES                 : 0x0008,
  LINKS                  : 0x0010,
  TABLES                 : 0x0020,
  FORMS                  : 0x0040,
  WIDGETS_SCRIPTS        : 0x0080,
  AUDIO_VIDEO            : 0x0100,
  KEYBOARD_SUPPORT       : 0x0200,
  TIMING                 : 0x0400,
  SITE_NAVIGATION        : 0x0800,
  // Composite categories
  ALL                    : 0x0FFF
};

/**
 * @constant RULE_SUMMARY
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Numercial constant representing a rule summary option
 *
 * @example
 * OpenAjax.a11y.RULE_SUMMARY.UNDEFINED
 * OpenAjax.a11y.RULE_SUMMARY.CATEGORIES
 * OpenAjax.a11y.RULE_SUMMARY.WCAG20
 * OpenAjax.a11y.RULE_SUMMARY.GUIDELINE
 * OpenAjax.a11y.RULE_SUMMARY.RULESET_TYPE
 */
OpenAjax.a11y.RULE_SUMMARY = OpenAjax.a11y.RULE_SUMMARY || {
  UNDEFINED        : 0,
  CATEGORIES       : 1,
  WCAG20           : 10,
  PRINCIPLES       : 11,
  GUIDELINES       : 12,
  SUCCESS_CRITERIA : 13,
  RULESET_TYPE     : 20
};

/**
 * @constant ELEMENT_TYPE
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Numercial constant representing a element type option
 *
 * @example
 * OpenAjax.a11y.ELEMENT_TYPE.UNKNOWN
 * OpenAjax.a11y.ELEMENT_TYPE.ALL
 * OpenAjax.a11y.ELEMENT_TYPE.AUDIO
 * OpenAjax.a11y.ELEMENT_TYPE.AUDIO_VIDEO
 * OpenAjax.a11y.ELEMENT_TYPE.SITE_NAVIGATION
 * OpenAjax.a11y.ELEMENT_TYPE.HEADINGS
 * OpenAjax.a11y.ELEMENT_TYPE.HEADINGS_LANDMARKS
 * OpenAjax.a11y.ELEMENT_TYPE.IMAGES
 * OpenAjax.a11y.ELEMENT_TYPE.LANDMARKS
 * OpenAjax.a11y.ELEMENT_TYPE.LANGUAGE
 * OpenAjax.a11y.ELEMENT_TYPE.LINKS
 * OpenAjax.a11y.ELEMENT_TYPE.LISTS
 * OpenAjax.a11y.ELEMENT_TYPE.TABLES
 * OpenAjax.a11y.ELEMENT_TYPE.TEXT
 * OpenAjax.a11y.ELEMENT_TYPE.TIMING
 * OpenAjax.a11y.ELEMENT_TYPE.VIDEO
 * OpenAjax.a11y.ELEMENT_TYPE.WIDGETS
 */
OpenAjax.a11y.ELEMENT_TYPE = OpenAjax.a11y.ELEMENT_TYPE || {
  UNDEFINED          : 0,
  ALL                : 1,
  ABBREVIATIONS      : 2,
  AUDIO              : 3,
  AUDIO_VIDEO        : 4,
  SITE_NAVIGATION      : 5,
  HEADINGS           : 6,
  IMAGES             : 7,
  LANGUAGE           : 8,
  LANDMARKS          : 9,
  LAYOUT             : 10,
  LINKS              : 11,
  LISTS              : 12,
  TABLES             : 13,
  TEXT               : 14,
  TIMING             : 15,
  VIDEO              : 16,
  WIDGETS            : 17,
  HEADINGS_LANDMARKS : 100,
  LAYOUT_TABLES      : 101
};


/**
 * @constant CACHE_NAMES
 * @memberOf OpenAjax.a11y
 * @type Array
 * @desc Property names of specialized caches
 */

OpenAjax.a11y.CACHE_NAMES = ['abbreviations_cache',
                             'color_contrast_cache',
                             'controls_cache',
                             'dom_cache',
                             'headings_landmarks_cache',
                             'images_cache',
                             'keyboard_focus_cache',
                             'languages_cache',
                             'links_cache',
                             'lists_cache',
                             'media_cache',
                             'tables_cache',
                             'text_cache',
                             'timing_cache'];


/**
 * @constant WCAG20_LEVEL
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Constants related to the level of importance of a success criteria
 * @example
 * OpenAjax.a11y.WCAG20_LEVEL.A
 * OpenAjax.a11y.WCAG20_LEVEL.AA
 * OpenAjax.a11y.WCAG20_LEVEL.AAA
 */
OpenAjax.a11y.WCAG20_LEVEL = OpenAjax.a11y.WCAG20_LEVEL || {
  A       : 4,
  AA      : 2,
  AAA     : 1,
  UNKNOWN : 0
};

/**
 * @constant EVALUATION_LEVELS
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Constants related to the level of rules that wil be evaluated
 *       These are a bit mask for WCAG20_LEVEL constants
 * @example
 * OpenAjax.a11y.EVALUATION_LEVELS.A
 * OpenAjax.a11y.EVALUATION_LEVELS.A_AA
 * OpenAjax.a11y.EVALUATION_LEVELS.A_AA_AAA
 */

OpenAjax.a11y.EVALUATION_LEVELS = OpenAjax.a11y.EVALUATION_LEVELS || {
  A        : 4,
  A_AA     : 6,
  A_AA_AAA : 7
};


/**
 * @constant RULE_GROUP
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Defines a grouping of rules
 *
 * @example
 * OpenAjax.a11y.RULE_GROUP.GROUP1
 * OpenAjax.a11y.RULE_GROUP.GROUP2
 * OpenAjax.a11y.RULE_GROUP.GROUP3
 * OpenAjax.a11y.RULE_GROUP.GROUP12
 * OpenAjax.a11y.RULE_GROUP.GROUP123
 */
OpenAjax.a11y.RULE_GROUP = OpenAjax.a11y.RULE_GROUP || {
  GROUP1   : 0x0001,
  GROUP2   : 0x0002,
  GROUP3   : 0x0004,
  GROUP12  : 0x0003,
  GROUP123 : 0x0007
};



/**
 * @constant RULE_SCOPE
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Defines scope of a rule
 *
 * @example
 * OpenAjax.a11y.RULE_SCOPE.UNKNOWN
 * OpenAjax.a11y.RULE_SCOPE.ELEMENT
 * OpenAjax.a11y.RULE_SCOPE.PAGE
 * OpenAjax.a11y.RULE_SCOPE.WEBSITE
 */
OpenAjax.a11y.RULE_SCOPE = OpenAjax.a11y.RULE_SCOPE || {
  UNKNOWN : 0,
  ELEMENT : 1,
  PAGE    : 2,
  WEBSITE : 3
};


/**
 * @constant TEST_RESULT
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Types of rule results, used in validation functions
 *
 * @example
 * OpenAjax.a11y.TEST_RESULT.FAIL
 * OpenAjax.a11y.TEST_RESULT.HIDDEN
 * OpenAjax.a11y.TEST_RESULT.MANUAL_CHECK
 * OpenAjax.a11y.TEST_RESULT.NONE
 * OpenAjax.a11y.TEST_RESULT.PASS
 */
OpenAjax.a11y.TEST_RESULT = OpenAjax.a11y.TEST_RESULT || {
  PASS         : 1,
  FAIL         : 2,
  MANUAL_CHECK : 3,
  HIDDEN       : 4,
  NONE         : 5
};

/**
 * @constant ELEMENT_RESULT_VALUE
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Constants used to represent evaluation results at the element level
 *
 * @example
 * OpenAjax.a11y.ELEMENT_RESULT_VALUE.UNDEFINED
 * OpenAjax.a11y.ELEMENT_RESULT_VALUE.PASS
 * OpenAjax.a11y.ELEMENT_RESULT_VALUE.HIDDEN
 * OpenAjax.a11y.ELEMENT_RESULT_VALUE.MANUAL_CHECK
 * OpenAjax.a11y.ELEMENT_RESULT_VALUE.VIOLATION
 * OpenAjax.a11y.ELEMENT_RESULT_VALUE.WARNING
 */
OpenAjax.a11y.ELEMENT_RESULT_VALUE = OpenAjax.a11y.ELEMENT_RESULT_VALUE || {
  UNDEFINED      : 0,
  PASS           : 1,
  HIDDEN         : 2,  // Content is hidden and not tested for accessibility
  MANUAL_CHECK   : 3,
  WARNING        : 4,
  VIOLATION      : 5
};

/**
 * @constant RULE_RESULT_VALUE
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Constants used to represent evaluation results at the rule level
 *
 * @example
 * OpenAjax.a11y.RULE_RESULT_VALUE.UNDEFINED
 * OpenAjax.a11y.RULE_RESULT_VALUE.NOT_APPLICABLE
 * OpenAjax.a11y.RULE_RESULT_VALUE.PASS
 * OpenAjax.a11y.RULE_RESULT_VALUE.MANUAL_CHECK
 * OpenAjax.a11y.RULE_RESULT_VALUE.WARNING
 * OpenAjax.a11y.RULE_RESULT_VALUE.VIOLATION
 */
OpenAjax.a11y.RULE_RESULT_VALUE = OpenAjax.a11y.RULE_RESULT_VALUE || {
  UNDEFINED      : 0,
  NOT_APPLICABLE : 1,
  PASS           : 2,
  MANUAL_CHECK   : 3,
  WARNING        : 4,
  VIOLATION      : 5
};

/**
 * @constant IMPLEMENTATION_VALUE
* @memberOf OpenAjax.a11y
 * @type Number
 * @desc Constants used to represent the level of implementation
 *
 * @example
 * OpenAjax.a11y.IMPLEMENTATION_VALUE.UNDEFINED
 * OpenAjax.a11y.IMPLEMENTATION_VALUE.NOT_APPLICABLE
 * OpenAjax.a11y.IMPLEMENTATION_VALUE.NOT_IMPLEMENTED
 * OpenAjax.a11y.IMPLEMENTATION_VALUE.PARTIAL_IMPLEMENTATION
 * OpenAjax.a11y.IMPLEMENTATION_VALUE.ALMOST_COMPLETE
 * OpenAjax.a11y.IMPLEMENTATION_VALUE.COMPLETE
 * OpenAjax.a11y.IMPLEMENTATION_VALUE.COMPLETE_WITH_MANUAL_CHECKS
 * OpenAjax.a11y.IMPLEMENTATION_VALUE.MANUAL_CHECKS_ONLY
 */
OpenAjax.a11y.IMPLEMENTATION_VALUE = OpenAjax.a11y.IMPLEMENTATION_VALUE || {
  UNDEFINED                   : 0,
  NOT_APPLICABLE              : 1,
  NOT_IMPLEMENTED             : 2,
  PARTIAL_IMPLEMENTATION      : 3,
  ALMOST_COMPLETE             : 4,
  COMPLETE                    : 5,
  COMPLETE_WITH_MANUAL_CHECKS : 6,
  MANUAL_CHECKS_ONLY          : 7
};


/**
 * @constant STATUS
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Status of rule acceptance for inclusion in a ruleset
 *
 * @example
 * OpenAjax.a11y.STATUS.UNDEFINED
 * OpenAjax.a11y.STATUS.PROPOSED
 * OpenAjax.a11y.STATUS.ACCEPTED
 * OpenAjax.a11y.STATUS.DEPRICATED
 */
OpenAjax.a11y.STATUS = OpenAjax.a11y.STATUS || {
  UNDEFINED  : 0,
  PROPOSED   : 1,
  ACCEPTED   : 2,
  DEPRICATED : 3
};

/**
 * @constant REFERENCES
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Types of reference for supplemential materials to help people understand an accessibility requirement and
 *       how to improve the accessibility
 *
 * @example
 * OpenAjax.a11y.REFERENCES.UNKNOWN
 * OpenAjax.a11y.REFERENCES.SPECIFICATION
 * OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE
 * OpenAjax.a11y.REFERENCES.TECHNIQUE
 * OpenAjax.a11y.REFERENCES.EXAMPLE
 * OpenAjax.a11y.REFERENCES.MANUAL_CHECK
 * OpenAjax.a11y.REFERENCES.AUTHORING_TOOL
 * OpenAjax.a11y.REFERENCES.OTHER
 */

OpenAjax.a11y.REFERENCES = OpenAjax.a11y.REFERENCES || {
  UNKNOWN         : 0,
  AUTHORING_TOOL  : 1,
  EXAMPLE         : 2,
  LIBRARY_PRODUCT : 3,
  MANUAL_CHECK    : 4,
  OTHER           : 5,
  PURPOSE         : 6,
  RULE_CATEGORY   : 7,
  REFERENCE       : 8,
  SPECIFICATION   : 9,
  TECHNIQUE       : 10,
  WCAG_TECHNIQUE  : 11
};

/**
 * @constant VISIBILITY
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Visbility of an item in graphical renderings and to asssitive technologies
 *
 * @example
 * OpenAjax.a11y.VISIBILITY.UNKNOWN
 * OpenAjax.a11y.VISIBILITY.HIDDEN
 * OpenAjax.a11y.VISIBILITY.VISIBLE
 */
OpenAjax.a11y.VISIBILITY = OpenAjax.a11y.VISIBILITY || {
  UNKNOWN : 1,
  HIDDEN  : 2,
  VISIBLE : 3
};

/**
 * @constant ID
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc ID of an item
 * @example
 * OpenAjax.a11y.ID.NOT_DEFINED
 * OpenAjax.a11y.ID.UNIQUE
 * OpenAjax.a11y.ID.NOT_UNIQUE
 */
OpenAjax.a11y.ID = OpenAjax.a11y.ID || {
  NOT_DEFINED  : 1,
  UNIQUE       : 2,
  NOT_UNIQUE   : 3
};


/**
 * @constant LIST
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Constants related to the lists cache
 * @example
 * OpenAjax.a11y.LIST.CONTAINER
 * OpenAjax.a11y.LIST.ITEM
 * OpenAjax.a11y.LIST.LANDMARK
 */
OpenAjax.a11y.LIST = OpenAjax.a11y.LIST || {
  UNDEFINED : 0,
  CONTAINER : 1,
  ITEM      : 2,
  LANDMARK  : 3
};

/**
 * @constant MEDIA
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Constants related to the probability of being media object with audio and video
 * @example
 * OpenAjax.a11y.MEDIA.UNDEFINED
 * OpenAjax.a11y.MEDIA.NO
 * OpenAjax.a11y.MEDIA.MAYBE
 * OpenAjax.a11y.MEDIA.YES
 */
OpenAjax.a11y.MEDIA = OpenAjax.a11y.MEDIA || {
  UNDEFINED : 0,
  NO        : 1,
  MAYBE     : 2,
  YES       : 3
};

/**
 * @constant URL_RESULT
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Staus of rule acceptance for inclusion in the public ruleset
 * @example
 * OpenAjax.a11y.URL_RESULT.INVALID
 * OpenAjax.a11y.URL_RESULT.VALID
 * OpenAjax.a11y.URL_RESULT.NOT_TESTED
 * OpenAjax.a11y.URL_RESULT.ERROR
 */
OpenAjax.a11y.URL_RESULT = OpenAjax.a11y.URL_RESULT || {
  INVALID    :  1,
  VALID      :  2,
  NOT_TESTED :  3,
  ERROR      :  4
};

/**
 * @constant SOURCE
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc What markup was used as the source for calculating the accessible name
 * @example
 * OpenAjax.a11y.SOURCE.NONE
 * OpenAjax.a11y.SOURCE.LABEL_REFERENCE
 * OpenAjax.a11y.SOURCE.LABEL_ENCAPSULATION
 * OpenAjax.a11y.SOURCE.TITLE_ATTRIBUTE
 * OpenAjax.a11y.SOURCE.VALUE_ATTRIBUTE
 * OpenAjax.a11y.SOURCE.ALT_ATTRIBUTE
 * OpenAjax.a11y.SOURCE.BUTTON_TYPE
 * OpenAjax.a11y.SOURCE.TEXT_CONTENT
 * OpenAjax.a11y.SOURCE.ARIA_LABELLEDBY
 * OpenAjax.a11y.SOURCE.ARIA_LABEL
 * OpenAjax.a11y.SOURCE.TABLE_CAPTION
 * OpenAjax.a11y.SOURCE.TABLE_SUMMARY
*/
OpenAjax.a11y.SOURCE = OpenAjax.a11y.SOURCE || {
  NONE                 : 1,
  LABEL_REFERENCE      : 2,
  LABEL_ENCAPSULATION  : 3,
  TITLE_ATTRIBUTE      : 4,
  VALUE_ATTRIBUTE      : 5,
  ALT_ATTRIBUTE        : 6,
  BUTTON_TYPE          : 7,
  TEXT_CONTENT         : 8,
  ARIA_LABELLEDBY      : 9,
  ARIA_LABEL           : 10,
  TABLE_CAPTION        : 11,
  TABLE_SUMMARY        : 12
};

/**
 * @constant SOURCE
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc What markup was used as the source for calculating the accessible name
 * @example
 * OpenAjax.a11y.DESCRIPTION_SOURCE.NONE
 * OpenAjax.a11y.SOURCE.TITLE_ATTRIBUTE
 * OpenAjax.a11y.SOURCE.ARIA_DESCRIBEDBY
 * OpenAjax.a11y.SOURCE.TABLE_SUMMARY
*/
OpenAjax.a11y.DESCRIPTION_SOURCE = OpenAjax.a11y.DESCRIPTION_SOURCE || {
  NONE                 : 1,
  TITLE_ATTRIBUTE      : 2,
  ARIA_DESCRIBEDBY     : 3,
  TABLE_SUMMARY        : 4
};


/**
 * @constant HEADER_SOURCE
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc What markup was used as the source for table cell headers
 * @example
 * OpenAjax.a11y.HEADER_SOURCE.NONE
 * OpenAjax.a11y.HEADER_SOURCE.HEADERS_ATTRIBUTE
 * OpenAjax.a11y.HEADER_SOURCE.ROW_OR_COLUMN_HEADERS
 */
OpenAjax.a11y.HEADER_SOURCE = OpenAjax.a11y.HEADER_SOURCE || {
  NONE                  : 1,
  HEADERS_ATTRIBUTE     : 2,
  ROW_OR_COLUMN_HEADERS : 3
};


/**
 * @constant CONTROL_TYPE
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Indentify the cache control element type
 *
 * @example
 * OpenAjax.a11y.CONTROL_TYPE.UNKNOWN
 * OpenAjax.a11y.CONTROL_TYPE.BUTTON_ELEMENT
 * OpenAjax.a11y.CONTROL_TYPE.BUTTON_INPUT
 * OpenAjax.a11y.CONTROL_TYPE.CHECKBOX
 * OpenAjax.a11y.CONTROL_TYPE.COLOR
 * OpenAjax.a11y.CONTROL_TYPE.DATE
 * OpenAjax.a11y.CONTROL_TYPE.DATETIME
 * OpenAjax.a11y.CONTROL_TYPE.DATETIME_LOCAL
 * OpenAjax.a11y.CONTROL_TYPE.EMAIL
 * OpenAjax.a11y.CONTROL_TYPE.FIELDSET
 * OpenAjax.a11y.CONTROL_TYPE.FILE
 * OpenAjax.a11y.CONTROL_TYPE.FORM
 * OpenAjax.a11y.CONTROL_TYPE.HIDDEN
 * OpenAjax.a11y.CONTROL_TYPE.IMAGE
 * OpenAjax.a11y.CONTROL_TYPE.LABEL
 * OpenAjax.a11y.CONTROL_TYPE.METER
 * OpenAjax.a11y.CONTROL_TYPE.MONTH
 * OpenAjax.a11y.CONTROL_TYPE.NUMBER
 * OpenAjax.a11y.CONTROL_TYPE.OPTION
 * OpenAjax.a11y.CONTROL_TYPE.OPTGROUP
 * OpenAjax.a11y.CONTROL_TYPE.PASSWORD
 * OpenAjax.a11y.CONTROL_TYPE.PROGRESS
 * OpenAjax.a11y.CONTROL_TYPE.RADIO
 * OpenAjax.a11y.CONTROL_TYPE.RANGE
 * OpenAjax.a11y.CONTROL_TYPE.RESET
 * OpenAjax.a11y.CONTROL_TYPE.SEARCH
 * OpenAjax.a11y.CONTROL_TYPE.SELECT
 * OpenAjax.a11y.CONTROL_TYPE.SUBMIT
 * OpenAjax.a11y.CONTROL_TYPE.TEL
 * OpenAjax.a11y.CONTROL_TYPE.TEXT
 * OpenAjax.a11y.CONTROL_TYPE.TEXTAREA
 * OpenAjax.a11y.CONTROL_TYPE.TIME
 * OpenAjax.a11y.CONTROL_TYPE.URL
 * OpenAjax.a11y.CONTROL_TYPE.WEEK
 * OpenAjax.a11y.CONTROL_TYPE.WIDGET
 */
OpenAjax.a11y.CONTROL_TYPE = OpenAjax.a11y.CONTROL_TYPE || {
  UNKNOWN        : 1,
  BUTTON_ELEMENT : 2,
  BUTTON_INPUT   : 3,
  CHECKBOX       : 4,
  COLOR          : 5,
  DATE           : 6,
  DATETIME       : 7,
  DATETIME_LOCAL : 8,
  EMAIL          : 9,
  FIELDSET       : 10,
  FILE           : 11,
  FORM           : 12,
  GROUP          : 13,
  HIDDEN         : 14,
  IMAGE          : 15,
  LABEL          : 16,
  METER          : 17,
  MONTH          : 18,
  NUMBER         : 19,
  OPTION         : 20,
  OPTGROUP       : 22,
  PASSWORD       : 23,
  PROGRESS       : 24,
  RADIO          : 25,
  RANGE          : 26,
  RESET          : 27,
  SEARCH         : 28,
  SELECT         : 29,
  SUBMIT         : 30,
  TEL            : 31,
  TEXT           : 32,
  TEXTAREA       : 33,
  TIME           : 34,
  URL            : 35,
  WEEK           : 36,
  WIDGET         : 37
};

/**
 * @constant MAIN
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Constants for MAIN cache elements
 * @example
 * OpenAjax.a11y.MAIN.ROLE_MAIN
 * OpenAjax.a11y.MAIN.H1_ELEMENT
 * OpenAjax.a11y.MAIN.TITLE_ELEMENT
 */
OpenAjax.a11y.MAIN = OpenAjax.a11y.MAIN || {
  ROLE_MAIN      :  1,
  H1_ELEMENT     :  2,
  TITLE_ELEMENT  :  3
};

/**
 * @constant TABLE_ROLE
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Constants for TABLE_ROLE table cache elements
 * @example
 * OpenAjax.a11y.TABLE_ROLE.UNKNOWN
 * OpenAjax.a11y.TABLE_ROLE.LAYOUT
 * OpenAjax.a11y.TABLE_ROLE.DATA
 */

OpenAjax.a11y.TABLE_ROLE = OpenAjax.a11y.TABLE_ROLE || {
  UNKNOWN : 1,
  LAYOUT  : 2,
  DATA    : 3,
  COMPLEX : 4
};

/**
 * @constant TABLE
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Constants for TABLE cache elements
 * @example
 * OpenAjax.a11y.TABLE.TABLE_ELEMENT
 * OpenAjax.a11y.TABLE.CAPTION_ELEMENT
 * OpenAjax.a11y.TABLE.THEAD_ELEMENT
 * OpenAjax.a11y.TABLE.TBODY_ELEMENT
 * OpenAjax.a11y.TABLE.TR_ELEMENT
 * OpenAjax.a11y.TABLE.TH_ELEMENT
 * OpenAjax.a11y.TABLE.TD_ELEMENT
 */
OpenAjax.a11y.TABLE = OpenAjax.a11y.TABLE || {
  TABLE_ELEMENT   :  1,
  CAPTION_ELEMENT :  2,
  THEAD_ELEMENT   :  3,
  TBODY_ELEMENT   :  4,
  TR_ELEMENT      :  5,
  TH_ELEMENT      :  6,
  TD_ELEMENT      :  7
};

/**
 * @constant LINK_TYPE
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Constants for LINK cache elements
 * @example
 * OpenAjax.a11y.LINK_TYPE.EMPTY
 * OpenAjax.a11y.LINK_TYPE.OTHER
 * OpenAjax.a11y.LINK_TYPE.INTERNAL
 * OpenAjax.a11y.LINK_TYPE.HTTP
 * OpenAjax.a11y.LINK_TYPE.HTTPS
 * OpenAjax.a11y.LINK_TYPE.FTP
 * OpenAjax.a11y.LINK_TYPE.FTS
 * OpenAjax.a11y.LINK_TYPE.FILE
 * OpenAjax.a11y.LINK_TYPE.JAVASCRIPT
 * OpenAjax.a11y.LINK_TYPE.MAILTO
 * OpenAjax.a11y.LINK_TYPE.TARGET
 */
OpenAjax.a11y.LINK_TYPE = OpenAjax.a11y.LINK_TYPE || {
  EMPTY      : 0,
  OTHER      : 1,
  INTERNAL   : 2,
  HTTP       : 3,
  HTTPS      : 4,
  FTP        : 5,
  FTPS       : 6,
  FILE       : 7,
  JAVASCRIPT : 8,
  MAILTO     : 9,
  TARGET     : 10
};

/**
 * @constant FILTERED_RULE_RESULT_RETURN_VALUE
 * @memberOf OpenAjax.a11y
 * @type Number
 * @desc Used for rule aggregation
 * @example
 * OpenAjax.a11y.FILTERED_RULE_RESULT_RETURN_VALUE.NO_MATCH
 * OpenAjax.a11y.FILTERED_RULE_RESULT_RETURN_VALUE.ADDED
 * OpenAjax.a11y.FILTERED_RULE_RESULT_RETURN_VALUE.NOT_ADDED
 */
OpenAjax.a11y.FILTERED_RULE_RESULT_RETURN_VALUE = OpenAjax.a11y.FILTERED_RULE_RESULT_RETURN_VALUE || {
  NO_MATCH  : 0,
  ADDED     : 1,
  NOT_ADDED : 2
};
OpenAjax.a11y.LANGUAGE_CODES = OpenAjax.a11y.LANGUAGE_CODES || {
      subtags : "aa ab ae af ak am an ar as av ay az ba be bg bh bi bm bn bo br bs ca ce ch co cr cs cu cv cy da de dv dz ee el en eo es et eu fa ff fi fj fo fr fy ga gd gl gn gu gv ha he hi ho hr ht hu hy hz ia id ie ig ii ik in io is it iu iw ja ji jv jw ka kg ki kj kk kl km kn ko kr ks ku kv kw ky la lb lg li ln lo lt lu lv mg mh mi mk ml mn mo mr ms mt my na nb nd ne ng nl nn no nr nv ny oc oj om or os pa pi pl ps pt qu rm rn ro ru rw sa sc sd se sg sh si sk sl sm sn so sq sr ss st su sv sw ta te tg th ti tk tl tn to tr ts tt tw ty ug uk ur uz ve vi vo wa wo xh yi yo za zh zu aaa aab aac aad aae aaf aag aah aai aak aal aam aan aao aap aaq aas aat aau aav aaw aax aaz aba abb abc abd abe abf abg abh abi abj abl abm abn abo abp abq abr abs abt abu abv abw abx aby abz aca acb acd ace acf ach aci ack acl acm acn acp acq acr acs act acu acv acw acx acy acz ada adb add ade adf adg adh adi adj adl adn ado adp adq adr ads adt adu adw adx ady adz aea aeb aec aed aee aek ael aem aen aeq aer aes aeu aew aey aez afa afb afd afe afg afh afi afk afn afo afp afs aft afu afz aga agb agc agd age agf agg agh agi agj agk agl agm agn ago agp agq agr ags agt agu agv agw agx agy agz aha ahb ahg ahh ahi ahk ahl ahm ahn aho ahp ahr ahs aht aia aib aic aid aie aif aig aih aii aij aik ail aim ain aio aip aiq air ais ait aiw aix aiy aja ajg aji ajn ajp ajt aju ajw ajz akb akc akd ake akf akg akh aki akj akk akl akm ako akp akq akr aks akt aku akv akw akx aky akz ala alc ald ale alf alg alh ali alj alk all alm aln alo alp alq alr als alt alu alv alw alx aly alz ama amb amc ame amf amg ami amj amk aml amm amn amo amp amq amr ams amt amu amv amw amx amy amz ana anb anc and ane anf ang anh ani anj ank anl anm ann ano anp anq anr ans ant anu anv anw anx any anz aoa aob aoc aod aoe aof aog aoh aoi aoj aok aol aom aon aor aos aot aou aox aoz apa apb apc apd ape apf apg aph api apj apk apl apm apn apo app apq apr aps apt apu apv apw apx apy apz aqa aqc aqd aqg aql aqm aqn aqp aqr aqz arb arc ard are arh ari arj ark arl arn aro arp arq arr ars art aru arv arw arx ary arz asa asb asc asd ase asf asg ash asi asj ask asl asn aso asp asq asr ass ast asu asv asw asx asy asz ata atb atc atd ate atg ath ati atj atk atl atm atn ato atp atq atr ats att atu atv atw atx aty atz aua aub auc aud aue auf aug auh aui auj auk aul aum aun auo aup auq aur aus aut auu auw aux auy auz avb avd avi avk avl avm avn avo avs avt avu avv awa awb awc awd awe awg awh awi awk awm awn awo awr aws awt awu awv aww awx awy axb axe axg axk axl axm axx aya ayb ayc ayd aye ayg ayh ayi ayk ayl ayn ayo ayp ayq ayr ays ayt ayu ayx ayy ayz aza azb azc azd azg azj azm azn azo azt azz baa bab bac bad bae baf bag bah bai baj bal ban bao bap bar bas bat bau bav baw bax bay baz bba bbb bbc bbd bbe bbf bbg bbh bbi bbj bbk bbl bbm bbn bbo bbp bbq bbr bbs bbt bbu bbv bbw bbx bby bbz bca bcb bcc bcd bce bcf bcg bch bci bcj bck bcl bcm bcn bco bcp bcq bcr bcs bct bcu bcv bcw bcy bcz bda bdb bdc bdd bde bdf bdg bdh bdi bdj bdk bdl bdm bdn bdo bdp bdq bdr bds bdt bdu bdv bdw bdx bdy bdz bea beb bec bed bee bef beg beh bei bej bek bem beo bep beq ber bes bet beu bev bew bex bey bez bfa bfb bfc bfd bfe bff bfg bfh bfi bfj bfk bfl bfm bfn bfo bfp bfq bfr bfs bft bfu bfw bfx bfy bfz bga bgb bgc bgd bge bgf bgg bgi bgj bgk bgl bgm bgn bgo bgp bgq bgr bgs bgt bgu bgv bgw bgx bgy bgz bha bhb bhc bhd bhe bhf bhg bhh bhi bhj bhk bhl bhm bhn bho bhp bhq bhr bhs bht bhu bhv bhw bhx bhy bhz bia bib bic bid bie bif big bij bik bil bim bin bio bip biq bir bit biu biv biw bix biy biz bja bjb bjc bjd bje bjf bjg bjh bji bjj bjk bjl bjm bjn bjo bjp bjq bjr bjs bjt bju bjv bjw bjx bjy bjz bka bkb bkc bkd bkf bkg bkh bki bkj bkk bkl bkm bkn bko bkp bkq bkr bks bkt bku bkv bkw bkx bky bkz bla blb blc bld ble blf blg blh bli blj blk bll blm bln blo blp blq blr bls blt blv blw blx bly blz bma bmb bmc bmd bme bmf bmg bmh bmi bmj bmk bml bmm bmn bmo bmp bmq bmr bms bmt bmu bmv bmw bmx bmy bmz bna bnb bnc bnd bne bnf bng bni bnj bnk bnl bnm bnn bno bnp bnq bnr bns bnt bnu bnv bnw bnx bny bnz boa bob boe bof bog boh boi boj bok bol bom bon boo bop boq bor bot bou bov bow box boy boz bpa bpb bpd bpg bph bpi bpj bpk bpl bpm bpn bpo bpp bpq bpr bps bpt bpu bpv bpw bpx bpy bpz bqa bqb bqc bqd bqf bqg bqh bqi bqj bqk bql bqm bqn bqo bqp bqq bqr bqs bqt bqu bqv bqw bqx bqy bqz bra brb brc brd brf brg brh bri brj brk brl brm brn bro brp brq brr brs brt bru brv brw brx bry brz bsa bsb bsc bse bsf bsg bsh bsi bsj bsk bsl bsm bsn bso bsp bsq bsr bss bst bsu bsv bsw bsx bsy bta btb btc btd bte btf btg bth bti btj btk btl btm btn bto btp btq btr bts btt btu btv btw btx bty btz bua bub buc bud bue buf bug buh bui buj buk bum bun buo bup buq bus but buu buv buw bux buy buz bva bvb bvc bvd bve bvf bvg bvh bvi bvj bvk bvl bvm bvn bvo bvp bvq bvr bvt bvu bvv bvw bvx bvy bvz bwa bwb bwc bwd bwe bwf bwg bwh bwi bwj bwk bwl bwm bwn bwo bwp bwq bwr bws bwt bwu bww bwx bwy bwz bxa bxb bxc bxd bxe bxf bxg bxh bxi bxj bxk bxl bxm bxn bxo bxp bxq bxr bxs bxu bxv bxw bxx bxz bya byb byc byd bye byf byg byh byi byj byk byl bym byn byo byp byq byr bys byt byv byw byx byy byz bza bzb bzc bzd bze bzf bzg bzh bzi bzj bzk bzl bzm bzn bzo bzp bzq bzr bzs bzt bzu bzv bzw bzx bzy bzz caa cab cac cad cae caf cag cah cai caj cak cal cam can cao cap caq car cas cau cav caw cax cay caz cba cbb cbc cbd cbe cbg cbh cbi cbj cbk cbl cbn cbo cbr cbs cbt cbu cbv cbw cby cca ccc ccd cce ccg cch ccj ccl ccm ccn cco ccp ccq ccr ccs cda cdc cdd cde cdf cdg cdh cdi cdj cdm cdn cdo cdr cds cdy cdz cea ceb ceg cek cel cen cet cfa cfd cfg cfm cga cgc cgg cgk chb chc chd chf chg chh chj chk chl chm chn cho chp chq chr cht chw chx chy chz cia cib cic cid cie cih cik cim cin cip cir ciw ciy cja cje cjh cji cjk cjm cjn cjo cjp cjr cjs cjv cjy cka ckb ckh ckl ckn cko ckq ckr cks ckt cku ckv ckx cky ckz cla clc cld cle clh cli clj clk cll clm clo clt clu clw cly cma cmc cme cmg cmi cmk cml cmm cmn cmo cmr cms cmt cna cnb cnc cng cnh cni cnk cnl cno cns cnt cnu cnw cnx coa cob coc cod coe cof cog coh coj cok col com con coo cop coq cot cou cov cow cox coy coz cpa cpb cpc cpe cpf cpg cpi cpn cpo cpp cps cpu cpx cpy cqd cqu cra crb crc crd crf crg crh cri crj crk crl crm crn cro crp crq crr crs crt crv crw crx cry crz csa csb csc csd cse csf csg csh csi csj csk csl csm csn cso csq csr css cst csu csv csw csy csz cta ctc ctd cte ctg cth ctl ctm ctn cto ctp cts ctt ctu ctz cua cub cuc cug cuh cui cuj cuk cul cum cuo cup cuq cur cus cut cuu cuv cuw cux cvg cvn cwa cwb cwd cwe cwg cwt cya cyb cyo czh czk czn czo czt daa dac dad dae daf dag dah dai daj dak dal dam dao dap daq dar das dau dav daw dax day daz dba dbb dbd dbe dbf dbg dbi dbj dbl dbm dbn dbo dbp dbq dbr dbt dbu dbv dbw dby dcc dcr dda ddd dde ddg ddi ddj ddn ddo ddr dds ddw dec ded dee def deg deh dei dek del dem den dep deq der des dev dez dga dgb dgc dgd dge dgg dgh dgi dgk dgl dgn dgo dgr dgs dgt dgu dgw dgx dgz dha dhd dhg dhi dhl dhm dhn dho dhr dhs dhu dhv dhw dhx dia dib dic did dif dig dih dii dij dik dil dim din dio dip diq dir dis dit diu diw dix diy diz dja djb djc djd dje djf dji djj djk djl djm djn djo djr dju djw dka dkk dkl dkr dks dkx dlg dlk dlm dln dma dmb dmc dmd dme dmg dmk dml dmm dmn dmo dmr dms dmu dmv dmw dmx dmy dna dnd dne dng dni dnj dnk dnn dnr dnt dnu dnv dnw dny doa dob doc doe dof doh doi dok dol don doo dop doq dor dos dot dov dow dox doy doz dpp dra drb drc drd dre drg drh dri drl drn dro drq drr drs drt dru drw dry dsb dse dsh dsi dsl dsn dso dsq dta dtb dtd dth dti dtk dtm dto dtp dtr dts dtt dtu dty dua dub duc dud due duf dug duh dui duj duk dul dum dun duo dup duq dur dus duu duv duw dux duy duz dva dwa dwl dwr dws dww dya dyb dyd dyg dyi dym dyn dyo dyu dyy dza dzd dze dzg dzl dzn eaa ebg ebk ebo ebr ebu ecr ecs ecy eee efa efe efi ega egl ego egx egy ehu eip eit eiv eja eka ekc eke ekg eki ekk ekl ekm eko ekp ekr eky ele elh eli elk elm elo elp elu elx ema emb eme emg emi emk emm emn emo emp ems emu emw emx emy ena enb enc end enf enh enm enn eno enq enr enu env enw eot epi era erg erh eri erk ero err ers ert erw ese esh esi esk esl esm esn eso esq ess esu esx etb etc eth etn eto etr ets ett etu etx etz euq eve evh evn ewo ext eya eyo eza eze faa fab fad faf fag fah fai faj fak fal fam fan fap far fat fau fax fay faz fbl fcs fer ffi ffm fgr fia fie fil fip fir fit fiu fiw fkk fkv fla flh fli fll fln flr fly fmp fmu fng fni fod foi fom fon for fos fox fpe fqs frc frd frk frm fro frp frq frr frs frt fse fsl fss fub fuc fud fue fuf fuh fui fuj fum fun fuq fur fut fuu fuv fuy fvr fwa fwe gaa gab gac gad gae gaf gag gah gai gaj gak gal gam gan gao gap gaq gar gas gat gau gav gaw gax gay gaz gba gbb gbc gbd gbe gbf gbg gbh gbi gbj gbk gbl gbm gbn gbo gbp gbq gbr gbs gbu gbv gbw gbx gby gbz gcc gcd gce gcf gcl gcn gcr gct gda gdb gdc gdd gde gdf gdg gdh gdi gdj gdk gdl gdm gdn gdo gdq gdr gds gdt gdu gdx gea geb gec ged geg geh gei gej gek gel gem geq ges gew gex gey gez gfk gft gfx gga ggb ggd gge ggg ggk ggl ggn ggo ggr ggt ggu ggw gha ghc ghe ghh ghk ghl ghn gho ghr ghs ght gia gib gic gid gig gih gil gim gin gio gip giq gir gis git giu giw gix giy giz gji gjk gjm gjn gju gka gke gkn gko gkp glc gld glh gli glj glk gll glo glr glu glw gly gma gmb gmd gme gmh gml gmm gmn gmq gmu gmv gmw gmx gmy gmz gna gnb gnc gnd gne gng gnh gni gnk gnl gnm gnn gno gnq gnr gnt gnu gnw gnz goa gob goc god goe gof gog goh goi goj gok gol gom gon goo gop goq gor gos got gou gow gox goy goz gpa gpe gpn gqa gqi gqn gqr gqu gra grb grc grd grg grh gri grj grk grm gro grq grr grs grt gru grv grw grx gry grz gse gsg gsl gsm gsn gso gsp gss gsw gta gti gtu gua gub guc gud gue guf gug guh gui guk gul gum gun guo gup guq gur gus gut guu guv guw gux guz gva gvc gve gvf gvj gvl gvm gvn gvo gvp gvr gvs gvy gwa gwb gwc gwd gwe gwf gwg gwi gwj gwm gwn gwr gwt gwu gww gwx gxx gya gyb gyd gye gyf gyg gyi gyl gym gyn gyr gyy gza gzi gzn haa hab hac had hae haf hag hah hai haj hak hal ham han hao hap haq har has hav haw hax hay haz hba hbb hbn hbo hbu hca hch hdn hds hdy hea hed heg heh hei hem hgm hgw hhi hhr hhy hia hib hid hif hig hih hii hij hik hil him hio hir hit hiw hix hji hka hke hkk hks hla hlb hld hle hlt hlu hma hmb hmc hmd hme hmf hmg hmh hmi hmj hmk hml hmm hmn hmp hmq hmr hms hmt hmu hmv hmw hmx hmy hmz hna hnd hne hnh hni hnj hnn hno hns hnu hoa hob hoc hod hoe hoh hoi hoj hok hol hom hoo hop hor hos hot hov how hoy hoz hpo hps hra hrc hre hrk hrm hro hrp hrr hrt hru hrw hrx hrz hsb hsh hsl hsn hss hti hto hts htu htx hub huc hud hue huf hug huh hui huj huk hul hum huo hup huq hur hus hut huu huv huw hux huy huz hvc hve hvk hvn hvv hwa hwc hwo hya hyx iai ian iap iar iba ibb ibd ibe ibg ibi ibl ibm ibn ibr ibu iby ica ich icl icr ida idb idc idd ide idi idr ids idt idu ifa ifb ife iff ifk ifm ifu ify igb ige igg igl igm ign igo igs igw ihb ihi ihp ihw iin iir ijc ije ijj ijn ijo ijs ike iki ikk ikl iko ikp ikr ikt ikv ikw ikx ikz ila ilb ilg ili ilk ill ilo ils ilu ilv ilw ima ime imi iml imn imo imr ims imy inb inc ine ing inh inj inl inm inn ino inp ins int inz ior iou iow ipi ipo iqu iqw ira ire irh iri irk irn iro irr iru irx iry isa isc isd ise isg ish isi isk ism isn iso isr ist isu itb itc ite iti itk itl itm ito itr its itt itv itw itx ity itz ium ivb ivv iwk iwm iwo iws ixc ixl iya iyo iyx izh izi izr izz jaa jab jac jad jae jaf jah jaj jak jal jam jan jao jaq jar jas jat jau jax jay jaz jbe jbi jbj jbk jbn jbo jbr jbt jbu jbw jcs jct jda jdg jdt jeb jee jeg jeh jei jek jel jen jer jet jeu jgb jge jgk jgo jhi jhs jia jib jic jid jie jig jih jii jil jim jio jiq jit jiu jiv jiy jjr jkm jko jkp jkr jku jle jls jma jmb jmc jmd jmi jml jmn jmr jms jmw jmx jna jnd jng jni jnj jnl jns job jod jor jos jow jpa jpr jpx jqr jra jrb jrr jrt jru jsl jua jub juc jud juh jui juk jul jum jun juo jup jur jus jut juu juw juy jvd jvn jwi jya jye jyy kaa kab kac kad kae kaf kag kah kai kaj kak kam kao kap kaq kar kav kaw kax kay kba kbb kbc kbd kbe kbf kbg kbh kbi kbj kbk kbl kbm kbn kbo kbp kbq kbr kbs kbt kbu kbv kbw kbx kby kbz kca kcb kcc kcd kce kcf kcg kch kci kcj kck kcl kcm kcn kco kcp kcq kcr kcs kct kcu kcv kcw kcx kcy kcz kda kdc kdd kde kdf kdg kdh kdi kdj kdk kdl kdm kdn kdo kdp kdq kdr kdt kdu kdv kdw kdx kdy kdz kea keb kec ked kee kef keg keh kei kej kek kel kem ken keo kep keq ker kes ket keu kev kew kex key kez kfa kfb kfc kfd kfe kff kfg kfh kfi kfj kfk kfl kfm kfn kfo kfp kfq kfr kfs kft kfu kfv kfw kfx kfy kfz kga kgb kgc kgd kge kgf kgg kgh kgi kgj kgk kgl kgm kgn kgo kgp kgq kgr kgs kgt kgu kgv kgw kgx kgy kha khb khc khd khe khf khg khh khi khj khk khl khn kho khp khq khr khs kht khu khv khw khx khy khz kia kib kic kid kie kif kig kih kii kij kil kim kio kip kiq kis kit kiu kiv kiw kix kiy kiz kja kjb kjc kjd kje kjf kjg kjh kji kjj kjk kjl kjm kjn kjo kjp kjq kjr kjs kjt kju kjx kjy kjz kka kkb kkc kkd kke kkf kkg kkh kki kkj kkk kkl kkm kkn kko kkp kkq kkr kks kkt kku kkv kkw kkx kky kkz kla klb klc kld kle klf klg klh kli klj klk kll klm kln klo klp klq klr kls klt klu klv klw klx kly klz kma kmb kmc kmd kme kmf kmg kmh kmi kmj kmk kml kmm kmn kmo kmp kmq kmr kms kmt kmu kmv kmw kmx kmy kmz kna knb knc knd kne knf kng kni knj knk knl knm knn kno knp knq knr kns knt knu knv knw knx kny knz koa koc kod koe kof kog koh koi koj kok kol koo kop koq kos kot kou kov kow kox koy koz kpa kpb kpc kpd kpe kpf kpg kph kpi kpj kpk kpl kpm kpn kpo kpp kpq kpr kps kpt kpu kpv kpw kpx kpy kpz kqa kqb kqc kqd kqe kqf kqg kqh kqi kqj kqk kql kqm kqn kqo kqp kqq kqr kqs kqt kqu kqv kqw kqx kqy kqz kra krb krc krd kre krf krh kri krj krk krl krm krn kro krp krr krs krt kru krv krw krx kry krz ksa ksb ksc ksd kse ksf ksg ksh ksi ksj ksk ksl ksm ksn kso ksp ksq ksr kss kst ksu ksv ksw ksx ksy ksz kta ktb ktc ktd kte ktf ktg kth kti ktj ktk ktl ktm ktn kto ktp ktq ktr kts ktt ktu ktv ktw ktx kty ktz kub kuc kud kue kuf kug kuh kui kuj kuk kul kum kun kuo kup kuq kus kut kuu kuv kuw kux kuy kuz kva kvb kvc kvd kve kvf kvg kvh kvi kvj kvk kvl kvm kvn kvo kvp kvq kvr kvs kvt kvu kvv kvw kvx kvy kvz kwa kwb kwc kwd kwe kwf kwg kwh kwi kwj kwk kwl kwm kwn kwo kwp kwq kwr kws kwt kwu kwv kww kwx kwy kwz kxa kxb kxc kxd kxe kxf kxh kxi kxj kxk kxl kxm kxn kxo kxp kxq kxr kxs kxt kxu kxv kxw kxx kxy kxz kya kyb kyc kyd kye kyf kyg kyh kyi kyj kyk kyl kym kyn kyo kyp kyq kyr kys kyt kyu kyv kyw kyx kyy kyz kza kzb kzc kzd kze kzf kzg kzh kzi kzj kzk kzl kzm kzn kzo kzp kzq kzr kzs kzt kzu kzv kzw kzx kzy kzz laa lab lac lad lae laf lag lah lai laj lak lal lam lan lap laq lar las lau law lax lay laz lba lbb lbc lbe lbf lbg lbi lbj lbk lbl lbm lbn lbo lbq lbr lbs lbt lbu lbv lbw lbx lby lbz lcc lcd lce lcf lch lcl lcm lcp lcq lcs lda ldb ldd ldg ldh ldi ldj ldk ldl ldm ldn ldo ldp ldq lea leb lec led lee lef leg leh lei lej lek lel lem len leo lep leq ler les let leu lev lew lex ley lez lfa lfn lga lgb lgg lgh lgi lgk lgl lgm lgn lgq lgr lgt lgu lgz lha lhh lhi lhl lhm lhn lhp lhs lht lhu lia lib lic lid lie lif lig lih lii lij lik lil lio lip liq lir lis liu liv liw lix liy liz lja lje lji ljl ljp ljw ljx lka lkb lkc lkd lke lkh lki lkj lkl lkm lkn lko lkr lks lkt lku lky lla llb llc lld lle llf llg llh lli llj llk lll llm lln llo llp llq lls llu llx lma lmb lmc lmd lme lmf lmg lmh lmi lmj lmk lml lmm lmn lmo lmp lmq lmr lmu lmv lmw lmx lmy lmz lna lnb lnd lng lnh lni lnj lnl lnm lnn lno lns lnu lnw lnz loa lob loc loe lof log loh loi loj lok lol lom lon loo lop loq lor los lot lou lov low lox loy loz lpa lpe lpn lpo lpx lra lrc lre lrg lri lrk lrl lrm lrn lro lrr lrt lrv lrz lsa lsd lse lsg lsh lsi lsl lsm lso lsp lsr lss lst lsy ltc ltg lti ltn lto lts ltu lua luc lud lue luf lui luj luk lul lum lun luo lup luq lur lus lut luu luv luw luy luz lva lvk lvs lvu lwa lwe lwg lwh lwl lwm lwo lwt lwu lww lya lyg lyn lzh lzl lzn lzz maa mab mad mae maf mag mai maj mak mam man map maq mas mat mau mav maw max maz mba mbb mbc mbd mbe mbf mbh mbi mbj mbk mbl mbm mbn mbo mbp mbq mbr mbs mbt mbu mbv mbw mbx mby mbz mca mcb mcc mcd mce mcf mcg mch mci mcj mck mcl mcm mcn mco mcp mcq mcr mcs mct mcu mcv mcw mcx mcy mcz mda mdb mdc mdd mde mdf mdg mdh mdi mdj mdk mdl mdm mdn mdp mdq mdr mds mdt mdu mdv mdw mdx mdy mdz mea meb mec med mee mef meg meh mei mej mek mel mem men meo mep meq mer mes met meu mev mew mey mez mfa mfb mfc mfd mfe mff mfg mfh mfi mfj mfk mfl mfm mfn mfo mfp mfq mfr mfs mft mfu mfv mfw mfx mfy mfz mga mgb mgc mgd mge mgf mgg mgh mgi mgj mgk mgl mgm mgn mgo mgp mgq mgr mgs mgt mgu mgv mgw mgx mgy mgz mha mhb mhc mhd mhe mhf mhg mhh mhi mhj mhk mhl mhm mhn mho mhp mhq mhr mhs mht mhu mhw mhx mhy mhz mia mib mic mid mie mif mig mih mii mij mik mil mim min mio mip miq mir mis mit miu miw mix miy miz mja mjc mjd mje mjg mjh mji mjj mjk mjl mjm mjn mjo mjp mjq mjr mjs mjt mju mjv mjw mjx mjy mjz mka mkb mkc mke mkf mkg mkh mki mkj mkk mkl mkm mkn mko mkp mkq mkr mks mkt mku mkv mkw mkx mky mkz mla mlb mlc mld mle mlf mlh mli mlj mlk mll mlm mln mlo mlp mlq mlr mls mlu mlv mlw mlx mlz mma mmb mmc mmd mme mmf mmg mmh mmi mmj mmk mml mmm mmn mmo mmp mmq mmr mmt mmu mmv mmw mmx mmy mmz mna mnb mnc mnd mne mnf mng mnh mni mnj mnk mnl mnm mnn mno mnp mnq mnr mns mnt mnu mnv mnw mnx mny mnz moa moc mod moe mof mog moh moi moj mok mom moo mop moq mor mos mot mou mov mow mox moy moz mpa mpb mpc mpd mpe mpg mph mpi mpj mpk mpl mpm mpn mpo mpp mpq mpr mps mpt mpu mpv mpw mpx mpy mpz mqa mqb mqc mqe mqf mqg mqh mqi mqj mqk mql mqm mqn mqo mqp mqq mqr mqs mqt mqu mqv mqw mqx mqy mqz mra mrb mrc mrd mre mrf mrg mrh mrj mrk mrl mrm mrn mro mrp mrq mrr mrs mrt mru mrv mrw mrx mry mrz msb msc msd mse msf msg msh msi msj msk msl msm msn mso msp msq msr mss mst msu msv msw msx msy msz mta mtb mtc mtd mte mtf mtg mth mti mtj mtk mtl mtm mtn mto mtp mtq mtr mts mtt mtu mtv mtw mtx mty mua mub muc mud mue mug muh mui muj muk mul mum mun muo mup muq mur mus mut muu muv mux muy muz mva mvb mvd mve mvf mvg mvh mvi mvk mvl mvm mvn mvo mvp mvq mvr mvs mvt mvu mvv mvw mvx mvy mvz mwa mwb mwc mwd mwe mwf mwg mwh mwi mwj mwk mwl mwm mwn mwo mwp mwq mwr mws mwt mwu mwv mww mwx mwy mwz mxa mxb mxc mxd mxe mxf mxg mxh mxi mxj mxk mxl mxm mxn mxo mxp mxq mxr mxs mxt mxu mxv mxw mxx mxy mxz myb myc myd mye myf myg myh myi myj myk myl mym myn myo myp myq myr mys myt myu myv myw myx myy myz mza mzb mzc mzd mze mzg mzh mzi mzj mzk mzl mzm mzn mzo mzp mzq mzr mzs mzt mzu mzv mzw mzx mzy mzz naa nab nac nad nae naf nag nah nai naj nak nal nam nan nao nap naq nar nas nat naw nax nay naz nba nbb nbc nbd nbe nbf nbg nbh nbi nbj nbk nbm nbn nbo nbp nbq nbr nbs nbt nbu nbv nbw nbx nby nca ncb ncc ncd nce ncf ncg nch nci ncj nck ncl ncm ncn nco ncp ncr ncs nct ncu ncx ncz nda ndb ndc ndd ndf ndg ndh ndi ndj ndk ndl ndm ndn ndp ndq ndr nds ndt ndu ndv ndw ndx ndy ndz nea neb nec ned nee nef neg neh nei nej nek nem nen neo neq ner nes net neu nev new nex ney nez nfa nfd nfl nfr nfu nga ngb ngc ngd nge ngf ngg ngh ngi ngj ngk ngl ngm ngn ngo ngp ngq ngr ngs ngt ngu ngv ngw ngx ngy ngz nha nhb nhc nhd nhe nhf nhg nhh nhi nhk nhm nhn nho nhp nhq nhr nht nhu nhv nhw nhx nhy nhz nia nib nic nid nie nif nig nih nii nij nik nil nim nin nio niq nir nis nit niu niv niw nix niy niz nja njb njd njh nji njj njl njm njn njo njr njs njt nju njx njy njz nka nkb nkc nkd nke nkf nkg nkh nki nkj nkk nkm nkn nko nkp nkq nkr nks nkt nku nkv nkw nkx nkz nla nlc nle nlg nli nlj nlk nll nln nlo nlq nlr nlu nlv nlw nlx nly nlz nma nmb nmc nmd nme nmf nmg nmh nmi nmj nmk nml nmm nmn nmo nmp nmq nmr nms nmt nmu nmv nmw nmx nmy nmz nna nnb nnc nnd nne nnf nng nnh nni nnj nnk nnl nnm nnn nnp nnq nnr nns nnt nnu nnv nnw nnx nny nnz noa noc nod noe nof nog noh noi noj nok nol nom non noo nop noq nos not nou nov now noy noz npa npb npg nph npi npl npn npo nps npu npy nqg nqk nqm nqn nqo nqq nqy nra nrb nrc nre nrg nri nrk nrl nrm nrn nrp nrr nrt nru nrx nrz nsa nsc nsd nse nsf nsg nsh nsi nsk nsl nsm nsn nso nsp nsq nsr nss nst nsu nsv nsw nsx nsy nsz nte ntg nti ntj ntk ntm nto ntp ntr nts ntu ntw ntx nty ntz nua nub nuc nud nue nuf nug nuh nui nuj nuk nul num nun nuo nup nuq nur nus nut nuu nuv nuw nux nuy nuz nvh nvm nvo nwa nwb nwc nwe nwg nwi nwm nwo nwr nwx nwy nxa nxd nxe nxg nxi nxk nxl nxm nxn nxq nxr nxu nxx nyb nyc nyd nye nyf nyg nyh nyi nyj nyk nyl nym nyn nyo nyp nyq nyr nys nyt nyu nyv nyw nyx nyy nza nzb nzi nzk nzm nzs nzu nzy nzz oaa oac oar oav obi obk obl obm obo obr obt obu oca och oco ocu oda odk odt odu ofo ofs ofu ogb ogc oge ogg ogo ogu oht ohu oia oin ojb ojc ojg ojp ojs ojv ojw oka okb okd oke okg okh oki okj okk okl okm okn oko okr oks oku okv okx ola old ole olk olm olo olr oma omb omc ome omg omi omk oml omn omo omp omq omr omt omu omv omw omx ona onb one ong oni onj onk onn ono onp onr ons ont onu onw onx ood oog oon oor oos opa opk opm opo opt opy ora orc ore org orh orn oro orr ors ort oru orv orw orx ory orz osa osc osi oso osp ost osu osx ota otb otd ote oti otk otl otm otn oto otq otr ots ott otu otw otx oty otz oua oub oue oui oum oun owi owl oyb oyd oym oyy ozm paa pab pac pad pae paf pag pah pai pak pal pam pao pap paq par pas pat pau pav paw pax pay paz pbb pbc pbe pbf pbg pbh pbi pbl pbn pbo pbp pbr pbs pbt pbu pbv pby pbz pca pcb pcc pcd pce pcf pcg pch pci pcj pck pcl pcm pcn pcp pcr pcw pda pdc pdi pdn pdo pdt pdu pea peb ped pee pef peg peh pei pej pek pel pem peo pep peq pes pev pex pey pez pfa pfe pfl pga pgg pgi pgk pgl pgn pgs pgu pgy pha phd phg phh phi phk phl phm phn pho phq phr pht phu phv phw pia pib pic pid pie pif pig pih pii pij pil pim pin pio pip pir pis pit piu piv piw pix piy piz pjt pka pkb pkc pkg pkh pkn pko pkp pkr pks pkt pku pla plb plc pld ple plf plg plh plj plk pll pln plo plp plq plr pls plt plu plv plw ply plz pma pmb pmc pmd pme pmf pmh pmi pmj pmk pml pmm pmn pmo pmq pmr pms pmt pmu pmw pmx pmy pmz pna pnb pnc pne png pnh pni pnj pnk pnl pnm pnn pno pnp pnq pnr pns pnt pnu pnv pnw pnx pny pnz poc pod poe pof pog poh poi pok pom pon poo pop poq pos pot pov pow pox poy poz ppa ppe ppi ppk ppl ppm ppn ppo ppp ppq ppr pps ppt ppu pqa pqe pqm pqw pra prb prc prd pre prf prg prh pri prk prl prm prn pro prp prq prr prs prt pru prw prx pry prz psa psc psd pse psg psh psi psl psm psn pso psp psq psr pss pst psu psw psy pta pth pti ptn pto ptp ptr ptt ptu ptv ptw pty pua pub puc pud pue puf pug pui puj puk pum puo pup puq pur put puu puw pux puy puz pwa pwb pwg pwi pwm pwn pwo pwr pww pxm pye pym pyn pys pyu pyx pyy pzn qaa..qtz qua qub quc qud quf qug quh qui quk qul qum qun qup quq qur qus quv quw qux quy quz qva qvc qve qvh qvi qvj qvl qvm qvn qvo qvp qvs qvw qvy qvz qwa qwc qwe qwh qwm qws qwt qxa qxc qxh qxl qxn qxo qxp qxq qxr qxs qxt qxu qxw qya qyp raa rab rac rad raf rag rah rai raj rak ral ram ran rao rap raq rar ras rat rau rav raw rax ray raz rbb rbk rbl rbp rcf rdb rea reb ree reg rei rej rel rem ren rer res ret rey rga rge rgk rgn rgr rgs rgu rhg rhp ria rie rif ril rim rin rir rit riu rjg rji rjs rka rkb rkh rki rkm rkt rkw rma rmb rmc rmd rme rmf rmg rmh rmi rmk rml rmm rmn rmo rmp rmq rmr rms rmt rmu rmv rmw rmx rmy rmz rna rnd rng rnl rnn rnp rnr rnw roa rob roc rod roe rof rog rol rom roo rop ror rou row rpn rpt rri rro rrt rsb rsi rsl rtc rth rtm rtw rub ruc rue ruf rug ruh rui ruk ruo rup ruq rut ruu ruy ruz rwa rwk rwm rwo rwr rxd rxw ryn rys ryu saa sab sac sad sae saf sah sai saj sak sal sam sao sap saq sar sas sat sau sav saw sax say saz sba sbb sbc sbd sbe sbf sbg sbh sbi sbj sbk sbl sbm sbn sbo sbp sbq sbr sbs sbt sbu sbv sbw sbx sby sbz sca scb sce scf scg sch sci sck scl scn sco scp scq scs scu scv scw scx sda sdb sdc sde sdf sdg sdh sdj sdk sdl sdm sdn sdo sdp sdr sds sdt sdu sdv sdx sdz sea seb sec sed see sef seg seh sei sej sek sel sem sen seo sep seq ser ses set seu sev sew sey sez sfb sfe sfm sfs sfw sga sgb sgc sgd sge sgg sgh sgi sgj sgk sgl sgm sgn sgo sgp sgr sgs sgt sgu sgw sgx sgy sgz sha shb shc shd she shg shh shi shj shk shl shm shn sho shp shq shr shs sht shu shv shw shx shy shz sia sib sid sie sif sig sih sii sij sik sil sim sio sip siq sir sis sit siu siv siw six siy siz sja sjb sjd sje sjg sjk sjl sjm sjn sjo sjp sjr sjs sjt sju sjw ska skb skc skd ske skf skg skh ski skj skk skm skn sko skp skq skr sks skt sku skv skw skx sky skz sla slc sld sle slf slg slh sli slj sll slm sln slp slq slr sls slt slu slw slx sly slz sma smb smc smd smf smg smh smi smj smk sml smm smn smp smq smr sms smt smu smv smw smx smy smz snb snc sne snf sng snh sni snj snk snl snm snn sno snp snq snr sns snu snv snw snx sny snz soa sob soc sod soe sog soh soi soj sok sol son soo sop soq sor sos sou sov sow sox soy soz spb spc spd spe spg spi spk spl spm spo spp spq spr sps spt spu spv spx spy sqa sqh sqj sqk sqm sqn sqo sqq sqr sqs sqt squ sra srb src sre srf srg srh sri srk srl srm srn sro srq srr srs srt sru srv srw srx sry srz ssa ssb ssc ssd sse ssf ssg ssh ssi ssj ssk ssl ssm ssn sso ssp ssq ssr sss sst ssu ssv ssx ssy ssz sta stb std ste stf stg sth sti stj stk stl stm stn sto stp stq str sts stt stu stv stw sty sua sub suc sue sug sui suj suk sul sum suq sur sus sut suv suw sux suy suz sva svb svc sve svk svm svr svs svx swb swc swf swg swh swi swj swk swl swm swn swo swp swq swr sws swt swu swv sww swx swy sxb sxc sxe sxg sxk sxl sxm sxn sxo sxr sxs sxu sxw sya syb syc syd syi syk syl sym syn syo syr sys syw syy sza szb szc szd sze szg szl szn szp szv szw taa tab tac tad tae taf tag tai taj tak tal tan tao tap taq tar tas tau tav taw tax tay taz tba tbb tbc tbd tbe tbf tbg tbh tbi tbj tbk tbl tbm tbn tbo tbp tbq tbr tbs tbt tbu tbv tbw tbx tby tbz tca tcb tcc tcd tce tcf tcg tch tci tck tcl tcm tcn tco tcp tcq tcs tct tcu tcw tcx tcy tcz tda tdb tdc tdd tde tdf tdg tdh tdi tdj tdk tdl tdn tdo tdq tdr tds tdt tdu tdv tdx tdy tea teb tec ted tee tef teg teh tei tek tem ten teo tep teq ter tes tet teu tev tew tex tey tfi tfn tfo tfr tft tga tgb tgc tgd tge tgf tgg tgh tgi tgj tgn tgo tgp tgq tgr tgs tgt tgu tgv tgw tgx tgy tgz thc thd the thf thh thi thk thl thm thn thp thq thr ths tht thu thv thw thx thy thz tia tic tid tie tif tig tih tii tij tik til tim tin tio tip tiq tis tit tiu tiv tiw tix tiy tiz tja tjg tji tjl tjm tjn tjo tjs tju tjw tka tkb tkd tke tkf tkg tkk tkl tkm tkn tkp tkq tkr tks tkt tku tkw tkx tkz tla tlb tlc tld tlf tlg tlh tli tlj tlk tll tlm tln tlo tlp tlq tlr tls tlt tlu tlv tlw tlx tly tma tmb tmc tmd tme tmf tmg tmh tmi tmj tmk tml tmm tmn tmo tmp tmq tmr tms tmt tmu tmv tmw tmy tmz tna tnb tnc tnd tne tnf tng tnh tni tnk tnl tnm tnn tno tnp tnq tnr tns tnt tnu tnv tnw tnx tny tnz tob toc tod toe tof tog toh toi toj tol tom too top toq tor tos tou tov tow tox toy toz tpa tpc tpe tpf tpg tpi tpj tpk tpl tpm tpn tpo tpp tpq tpr tpt tpu tpv tpw tpx tpy tpz tqb tql tqm tqn tqo tqp tqq tqr tqt tqu tqw tra trb trc trd tre trf trg trh tri trj trk trl trm trn tro trp trq trr trs trt tru trv trw trx try trz tsa tsb tsc tsd tse tsf tsg tsh tsi tsj tsk tsl tsm tsp tsq tsr tss tst tsu tsv tsw tsx tsy tsz tta ttb ttc ttd tte ttf ttg tth tti ttj ttk ttl ttm ttn tto ttp ttq ttr tts ttt ttu ttv ttw tty ttz tua tub tuc tud tue tuf tug tuh tui tuj tul tum tun tuo tup tuq tus tut tuu tuv tuw tux tuy tuz tva tvd tve tvk tvl tvm tvn tvo tvs tvt tvu tvw tvy twa twb twc twd twe twf twg twh twl twm twn two twp twq twr twt twu tww twx twy txa txb txc txe txg txh txi txm txn txo txq txr txs txt txu txx txy tya tye tyh tyi tyj tyl tyn typ tyr tys tyt tyu tyv tyx tyz tza tzh tzj tzl tzm tzn tzo tzx uam uan uar uba ubi ubl ubr ubu uby uda ude udg udi udj udl udm udu ues ufi uga ugb uge ugn ugo ugy uha uhn uis uiv uji uka ukg ukh ukl ukp ukq uks uku ukw uky ula ulb ulc ule ulf uli ulk ull ulm uln ulu ulw uma umb umc umd umg umi umm umn umo ump umr ums umu una und une ung unk unm unn unp unr unu unx unz uok upi upv ura urb urc ure urf urg urh uri urj urk url urm urn uro urp urr urt uru urv urw urx ury urz usa ush usi usk usp usu uta ute utp utr utu uum uun uur uuu uve uvh uvl uwa uya uzn uzs vaa vae vaf vag vah vai vaj val vam van vao vap var vas vau vav vay vbb vbk vec ved vel vem veo vep ver vgr vgt vic vid vif vig vil vin vis vit viv vka vki vkj vkk vkl vkm vko vkp vkt vku vlp vls vma vmb vmc vmd vme vmf vmg vmh vmi vmj vmk vml vmm vmp vmq vmr vms vmu vmv vmw vmx vmy vmz vnk vnm vnp vor vot vra vro vrs vrt vsi vsl vsv vto vum vun vut vwa waa wab wac wad wae waf wag wah wai waj wak wal wam wan wao wap waq war was wat wau wav waw wax way waz wba wbb wbe wbf wbh wbi wbj wbk wbl wbm wbp wbq wbr wbt wbv wbw wca wci wdd wdg wdj wdk wdu wdy wea wec wed weg weh wei wem wen weo wep wer wes wet weu wew wfg wga wgb wgg wgi wgo wgu wgw wgy wha whg whk whu wib wic wie wif wig wih wii wij wik wil wim win wir wit wiu wiv wiw wiy wja wji wka wkb wkd wkl wku wkw wky wla wlc wle wlg wli wlk wll wlm wlo wlr wls wlu wlv wlw wlx wly wma wmb wmc wmd wme wmh wmi wmm wmn wmo wms wmt wmw wmx wnb wnc wnd wne wng wni wnk wnm wnn wno wnp wnu wnw wny woa wob woc wod woe wof wog woi wok wom won woo wor wos wow woy wpc wra wrb wrd wrg wrh wri wrk wrl wrm wrn wro wrp wrr wrs wru wrv wrw wrx wry wrz wsa wsi wsk wsr wss wsu wsv wtf wth wti wtk wtm wtw wua wub wud wuh wul wum wun wur wut wuu wuv wux wuy wwa wwb wwo wwr www wxa wxw wya wyb wyi wym wyr wyy xaa xab xac xad xae xag xai xal xam xan xao xap xaq xar xas xat xau xav xaw xay xba xbb xbc xbd xbe xbg xbi xbj xbm xbn xbo xbp xbr xbw xbx xby xcb xcc xce xcg xch xcl xcm xcn xco xcr xct xcu xcv xcw xcy xda xdc xdk xdm xdy xeb xed xeg xel xem xep xer xes xet xeu xfa xga xgb xgd xgf xgg xgi xgl xgm xgn xgr xgu xgw xha xhc xhd xhe xhr xht xhu xhv xia xib xii xil xin xip xir xiv xiy xjb xjt xka xkb xkc xkd xke xkf xkg xkh xki xkj xkk xkl xkn xko xkp xkq xkr xks xkt xku xkv xkw xkx xky xkz xla xlb xlc xld xle xlg xli xln xlo xlp xls xlu xly xma xmb xmc xmd xme xmf xmg xmh xmj xmk xml xmm xmn xmo xmp xmq xmr xms xmt xmu xmv xmw xmx xmy xmz xna xnb xnd xng xnh xni xnk xnn xno xnr xns xnt xnu xny xnz xoc xod xog xoi xok xom xon xoo xop xor xow xpa xpc xpe xpg xpi xpj xpk xpm xpn xpo xpp xpq xpr xps xpt xpu xpy xqa xqt xra xrb xrd xre xrg xri xrm xrn xrq xrr xrt xru xrw xsa xsb xsc xsd xse xsh xsi xsj xsl xsm xsn xso xsp xsq xsr xss xsu xsv xsy xta xtb xtc xtd xte xtg xth xti xtj xtl xtm xtn xto xtp xtq xtr xts xtt xtu xtv xtw xty xtz xua xub xud xug xuj xul xum xun xuo xup xur xut xuu xve xvi xvn xvo xvs xwa xwc xwd xwe xwg xwj xwk xwl xwo xwr xwt xww xxb xxk xxm xxr xxt xya xyb xyj xyk xyl xyt xyy xzh xzm xzp yaa yab yac yad yae yaf yag yah yai yaj yak yal yam yan yao yap yaq yar yas yat yau yav yaw yax yay yaz yba ybb ybd ybe ybh ybi ybj ybk ybl ybm ybn ybo ybx yby ych ycl ycn ycp yda ydd yde ydg ydk yds yea yec yee yei yej yel yen yer yes yet yeu yev yey yga ygi ygl ygm ygp ygr ygu ygw yha yhd yhl yia yif yig yih yii yij yik yil yim yin yip yiq yir yis yit yiu yiv yix yiy yiz yka ykg yki ykk ykl ykm ykn yko ykr ykt yku yky yla ylb yle ylg yli yll ylm yln ylo ylr ylu yly yma ymb ymc ymd yme ymg ymh ymi ymk yml ymm ymn ymo ymp ymq ymr yms ymt ymx ymz yna ynd yne yng ynh ynk ynl ynn yno ynq yns ynu yob yog yoi yok yol yom yon yos yot yox yoy ypa ypb ypg yph ypk ypm ypn ypo ypp ypz yra yrb yre yri yrk yrl yrm yrn yrs yrw yry ysc ysd ysg ysl ysn yso ysp ysr yss ysy yta ytl ytp ytw yty yua yub yuc yud yue yuf yug yui yuj yuk yul yum yun yup yuq yur yut yuu yuw yux yuy yuz yva yvt ywa ywg ywl ywn ywq ywr ywt ywu yww yxa yxg yxl yxm yxu yxy yyr yyu yyz yzg yzk zaa zab zac zad zae zaf zag zah zai zaj zak zal zam zao zap zaq zar zas zat zau zav zaw zax zay zaz zbc zbe zbl zbt zbw zca zch zdj zea zeg zeh zen zga zgb zgh zgm zgn zgr zhb zhd zhi zhn zhw zhx zia zib zik zil zim zin zir ziw ziz zka zkb zkd zkg zkh zkk zkn zko zkp zkr zkt zku zkv zkz zle zlj zlm zln zlq zls zlw zma zmb zmc zmd zme zmf zmg zmh zmi zmj zmk zml zmm zmn zmo zmp zmq zmr zms zmt zmu zmv zmw zmx zmy zmz zna znd zne zng znk zns zoc zoh zom zoo zoq zor zos zpa zpb zpc zpd zpe zpf zpg zph zpi zpj zpk zpl zpm zpn zpo zpp zpq zpr zps zpt zpu zpv zpw zpx zpy zpz zqe zra zrg zrn zro zrp zrs zsa zsk zsl zsm zsr zsu zte ztg ztl ztm ztn ztp ztq zts ztt ztu ztx zty zua zuh zum zun zuy zwa zxx zyb zyg zyj zyn zyp zza zzj aao abh abv acm acq acw acx acy adf ads aeb aec aed aen afb afg ajp apc apd arb arq ars ary arz ase asf asp asq asw auz avl ayh ayl ayn ayp bbz bfi bfk bjn bog bqn bqy btj bve bvl bvu bzs cdo cds cjy cmn coa cpx csc csd cse csf csg csl csn csq csr czh czo doq dse dsl dup ecs esl esn eso eth fcs fse fsl fss gan gds gom gse gsg gsm gss gus hab haf hak hds hji hks hos hps hsh hsl hsn icl ils inl ins ise isg isr jak jax jcs jhs jls jos jsl jus kgi knn kvb kvk kvr kxd lbs lce lcf liw lls lsg lsl lso lsp lst lsy ltg lvs lzh max mdl meo mfa mfb mfs min mnp mqg mre msd msi msr mui mzc mzg mzy nan nbs ncs nsi nsl nsp nsr nzs okl orn ors pel pga pks prl prz psc psd pse psg psl pso psp psr pys rms rsi rsl sdl sfb sfs sgg sgx shu slf sls sqk sqs ssh ssp ssr svk swc swh swl syy tmw tse tsm tsq tss tsy tza ugn ugy ukl uks urk uzn uzs vgt vkk vkt vsi vsl vsv wuu xki xml xmm xms yds ysl yue zib zlm zmi zsl zsm afak aghb arab armi armn avst bali bamu bass batk beng blis bopo brah brai bugi buhd cakm cans cari cham cher cirt copt cprt cyrl cyrs deva dsrt dupl egyd egyh egyp elba ethi geok geor glag goth gran grek gujr guru hang hani hano hans hant hebr hira hluw hmng hrkt hung inds ital java jpan jurc kali kana khar khmr khoj knda kore kpel kthi lana laoo latf latg latn lepc limb lina linb lisu loma lyci lydi mahj mand mani maya mend merc mero mlym mong moon mroo mtei mymr narb nbat nkgb nkoo nshu ogam olck orkh orya osma palm perm phag phli phlp phlv phnx plrd prti qaaa..qabx rjng roro runr samr sara sarb saur sgnw shaw shrd sind sinh sora sund sylo syrc syre syrj syrn tagb takr tale talu taml tang tavt telu teng tfng tglg thaa thai tibt tirh ugar vaii visp wara wole xpeo xsux yiii zinh zmth zsym zxxx zyyy zzzz aa ac ad ae af ag ai al am an ao aq ar as at au aw ax az ba bb bd be bf bg bh bi bj bl bm bn bo bq br bs bt bu bv bw by bz ca cc cd cf cg ch ci ck cl cm cn co cp cr cs cu cv cw cx cy cz dd de dg dj dk dm do dz ea ec ee eg eh er es et eu fi fj fk fm fo fr fx ga gb gd ge gf gg gh gi gl gm gn gp gq gr gs gt gu gw gy hk hm hn hr ht hu ic id ie il im in io iq ir is it je jm jo jp ke kg kh ki km kn kp kr kw ky kz la lb lc li lk lr ls lt lu lv ly ma mc md me mf mg mh mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nc ne nf ng ni nl no np nr nt nu nz om pa pe pf pg ph pk pl pm pn pr ps pt pw py qa qm..qz re ro rs ru rw sa sb sc sd se sg sh si sj sk sl sm sn so sr ss st su sv sx sy sz ta tc td tf tg th tj tk tl tm tn to tp tr tt tv tw tz ua ug um us uy uz va vc ve vg vi vn vu wf ws xa..xz yd ye yt yu za zm zr zw zz 001 002 003 005 009 011 013 014 015 017 018 019 021 029 030 034 035 039 053 054 057 061 142 143 145 150 151 154 155 419 1606nict 1694acad 1901 1959acad 1994 1996 alalc97 aluku arevela arevmda baku1926 bauddha biscayan biske bohoric boont dajnko emodeng fonipa fonupa fonxsamp hepburn heploc hognorsk itihasa jauer jyutping kkcor kscor laukika lipaw luna1918 metelko monoton ndyuka nedis njiva nulik osojs pamaka petr1708 pinyin polyton puter rigik rozaj rumgr scotland scouse solba surmiran sursilv sutsilv tarask uccor ucrcor ulster unifon vaidika valencia vallader wadegile ",


         tags : "art-lojban cel-gaulish en-gb-oed i-ami i-bnn i-default i-enochian i-hak i-klingon i-lux i-mingo i-navajo i-pwn i-tao i-tay i-tsu no-bok no-nyn sgn-be-fr sgn-be-nl sgn-ch-de zh-guoyu zh-hakka zh-min zh-min-nan zh-xiang az-arab az-cyrl az-latn be-latn bs-cyrl bs-latn de-1901 de-1996 de-at-1901 de-at-1996 de-ch-1901 de-ch-1996 de-de-1901 de-de-1996 en-boont en-scouse es-419 iu-cans iu-latn mn-cyrl mn-mong sgn-br sgn-co sgn-de sgn-dk sgn-es sgn-fr sgn-gb sgn-gr sgn-ie sgn-it sgn-jp sgn-mx sgn-ni sgn-nl sgn-no sgn-pt sgn-se sgn-us sgn-za sl-nedis sl-rozaj sr-cyrl sr-latn tg-arab tg-cyrl uz-cyrl uz-latn yi-latn zh-cmn zh-cmn-hans zh-cmn-hant zh-gan zh-hans zh-hans-cn zh-hans-hk zh-hans-mo zh-hans-sg zh-hans-tw zh-hant zh-hant-cn zh-hant-hk zh-hant-mo zh-hant-sg zh-hant-tw zh-wuu zh-yue "


};
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*              ARIA Defintions and Validation Methods              */
/* ---------------------------------------------------------------- */


if (typeof OpenAjax.a11y.aria == "undefined") {
  OpenAjax.a11y.aria = {

        /*
         * XSD data types for all WAI-ARIA properties
         * along with valid values when the data type is NMTOKEN
         */
    "propertyDataTypes": {
        "aria-activedescendant": {
            "propType": "property",
            "type": "idref",
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": ""
        },
        "aria-atomic": {
            "propType": "property",
            "type": "boolean",
            "values": [
                "false",
                "true"
            ],
            "defaultValue": "false",
            "deprecated": false,
            "idlAttribute": "ariaAtomic"
        },
        "aria-autocomplete": {
            "propType": "property",
            "type": "nmtoken",
            "values": [
                "inline",
                "list",
                "both",
                "none"
            ],
            "defaultValue": "none",
            "deprecated": false,
            "idlAttribute": "ariaAutoComplete"
        },
        "aria-busy": {
            "propType": "state",
            "type": "boolean",
            "values": [
                "false",
                "true"
            ],
            "defaultValue": "false",
            "deprecated": false,
            "idlAttribute": "ariaBusy"
        },
        "aria-checked": {
            "propType": "state",
            "type": "tristate",
            "values": [
                "false",
                "mixed",
                "true",
                "undefined"
            ],
            "defaultValue": "undefined",
            "deprecated": false,
            "idlAttribute": "ariaChecked"
        },
        "aria-colcount": {
            "propType": "property",
            "type": "integer",
            "allowUndeterminedValue": true,
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": "ariaColCount"
        },
        "aria-colindex": {
            "propType": "property",
            "type": "integer",
            "allowUndeterminedValue": false,
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": "ariaColIndex"
        },
        "aria-colspan": {
            "propType": "property",
            "type": "integer",
            "allowUndeterminedValue": false,
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": "ariaColSpan"
        },
        "aria-controls": {
            "propType": "property",
            "type": "idrefs",
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": ""
        },
        "aria-current": {
            "propType": "state",
            "type": "nmtoken",
            "values": [
                "page",
                "step",
                "location",
                "date",
                "time",
                "true",
                "false"
            ],
            "defaultValue": "false",
            "deprecated": false,
            "idlAttribute": "ariaCurrent"
        },
        "aria-describedby": {
            "propType": "property",
            "type": "idrefs",
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": ""
        },
        "aria-details": {
            "propType": "property",
            "type": "idref",
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": ""
        },
        "aria-disabled": {
            "propType": "state",
            "type": "boolean",
            "values": [
                "false",
                "true"
            ],
            "defaultValue": "false",
            "deprecated": false,
            "idlAttribute": "ariaDisabled"
        },
        "aria-dropeffect": {
            "propType": "property",
            "type": "nmtokens",
            "values": [
                "copy",
                "execute",
                "link",
                "move",
                "none",
                "popup"
            ],
            "defaultValue": "none",
            "deprecated": true,
            "idlAttribute": ""
        },
        "aria-errormessage": {
            "propType": "property",
            "type": "idref",
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": ""
        },
        "aria-expanded": {
            "propType": "state",
            "type": "nmtoken",
            "values": [
                "false",
                "true",
                "undefined"
            ],
            "defaultValue": "undefined",
            "deprecated": false,
            "idlAttribute": "ariaExpanded"
        },
        "aria-flowto": {
            "propType": "property",
            "type": "idrefs",
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": ""
        },
        "aria-grabbed": {
            "propType": "state",
            "type": "nmtoken",
            "values": [
                "false",
                "true",
                "undefined"
            ],
            "defaultValue": "undefined",
            "deprecated": true,
            "idlAttribute": ""
        },
        "aria-haspopup": {
            "propType": "property",
            "type": "nmtoken",
            "values": [
                "false",
                "true",
                "menu",
                "listbox",
                "tree",
                "grid",
                "dialog"
            ],
            "defaultValue": "false",
            "deprecated": false,
            "idlAttribute": "ariaHasPopup"
        },
        "aria-hidden": {
            "propType": "state",
            "type": "nmtoken",
            "values": [
                "false",
                "true",
                "undefined"
            ],
            "defaultValue": "undefined",
            "deprecated": false,
            "idlAttribute": "ariaHidden"
        },
        "aria-invalid": {
            "propType": "state",
            "type": "nmtoken",
            "values": [
                "grammar",
                "false",
                "spelling",
                "true"
            ],
            "defaultValue": "false",
            "deprecated": false,
            "idlAttribute": "ariaInvalid"
        },
        "aria-keyshortcuts": {
            "propType": "property",
            "type": "string",
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": "ariaKeyShortcuts"
        },
        "aria-label": {
            "propType": "property",
            "type": "string",
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": "ariaLabel"
        },
        "aria-labelledby": {
            "propType": "property",
            "type": "idrefs",
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": ""
        },
        "aria-level": {
            "propType": "property",
            "type": "integer",
            "allowUndeterminedValue": false,
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": "ariaLevel"
        },
        "aria-live": {
            "propType": "property",
            "type": "nmtoken",
            "values": [
                "assertive",
                "off",
                "polite"
            ],
            "defaultValue": "off",
            "deprecated": false,
            "idlAttribute": "ariaLive"
        },
        "aria-modal": {
            "propType": "property",
            "type": "boolean",
            "values": [
                "false",
                "true"
            ],
            "defaultValue": "false",
            "deprecated": false,
            "idlAttribute": "ariaModal"
        },
        "aria-multiline": {
            "propType": "property",
            "type": "boolean",
            "values": [
                "false",
                "true"
            ],
            "defaultValue": "false",
            "deprecated": false,
            "idlAttribute": "ariaMultiLine"
        },
        "aria-multiselectable": {
            "propType": "property",
            "type": "boolean",
            "values": [
                "false",
                "true"
            ],
            "defaultValue": "false",
            "deprecated": false,
            "idlAttribute": "ariaMultiSelectable"
        },
        "aria-orientation": {
            "propType": "property",
            "type": "nmtoken",
            "values": [
                "horizontal",
                "undefined",
                "vertical"
            ],
            "defaultValue": "undefined",
            "deprecated": false,
            "idlAttribute": "ariaOrientation"
        },
        "aria-owns": {
            "propType": "property",
            "type": "idrefs",
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": ""
        },
        "aria-placeholder": {
            "propType": "property",
            "type": "string",
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": "ariaPlaceholder"
        },
        "aria-posinset": {
            "propType": "property",
            "type": "integer",
            "allowUndeterminedValue": false,
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": "ariaPosInSet"
        },
        "aria-pressed": {
            "propType": "state",
            "type": "tristate",
            "values": [
                "false",
                "mixed",
                "true",
                "undefined"
            ],
            "defaultValue": "undefined",
            "deprecated": false,
            "idlAttribute": "ariaPressed"
        },
        "aria-readonly": {
            "propType": "property",
            "type": "boolean",
            "values": [
                "false",
                "true"
            ],
            "defaultValue": "false",
            "deprecated": false,
            "idlAttribute": "ariaReadOnly"
        },
        "aria-relevant": {
            "propType": "property",
            "type": "nmtokens",
            "values": [
                "additions",
                "additions",
                "all",
                "removals",
                "text"
            ],
            "defaultValue": "additions",
            "deprecated": false,
            "idlAttribute": ""
        },
        "aria-required": {
            "propType": "property",
            "type": "boolean",
            "values": [
                "false",
                "true"
            ],
            "defaultValue": "false",
            "deprecated": false,
            "idlAttribute": "ariaRequired"
        },
        "aria-roledescription": {
            "propType": "property",
            "type": "string",
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": "ariaRoleDescription"
        },
        "aria-rowcount": {
            "propType": "property",
            "type": "integer",
            "allowUndeterminedValue": true,
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": "ariaRowCount"
        },
        "aria-rowindex": {
            "propType": "property",
            "type": "integer",
            "allowUndeterminedValue": false,
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": "ariaRowIndex"
        },
        "aria-rowspan": {
            "propType": "property",
            "type": "integer",
            "allowUndeterminedValue": false,
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": "ariaRowSpan"
        },
        "aria-selected": {
            "propType": "state",
            "type": "nmtoken",
            "values": [
                "false",
                "true",
                "undefined"
            ],
            "defaultValue": "undefined",
            "deprecated": false,
            "idlAttribute": "ariaSelected"
        },
        "aria-setsize": {
            "propType": "property",
            "type": "integer",
            "allowUndeterminedValue": true,
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": "ariaSetSize"
        },
        "aria-sort": {
            "propType": "property",
            "type": "nmtoken",
            "values": [
                "ascending",
                "descending",
                "none",
                "other"
            ],
            "defaultValue": "none",
            "deprecated": false,
            "idlAttribute": "ariaSort"
        },
        "aria-valuemax": {
            "propType": "property",
            "type": "number",
            "values": [],
            "defaultValue": "100",
            "deprecated": false,
            "idlAttribute": "ariaValueMax"
        },
        "aria-valuemin": {
            "propType": "property",
            "type": "number",
            "values": [],
            "defaultValue": "0",
            "deprecated": false,
            "idlAttribute": "ariaValueMin"
        },
        "aria-valuenow": {
            "propType": "property",
            "type": "number",
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": "ariaValueNow"
        },
        "aria-valuetext": {
            "propType": "property",
            "type": "string",
            "values": [],
            "defaultValue": "",
            "deprecated": false,
            "idlAttribute": "ariaValueText"
        }
    },
        /*
         * list of abstract roles - used to support the WAI-ARIA role taxonomy and
         * not to be used by content authors
         * @see https://www.w3.org/TR/wai-aria/roles#isAbstract
         */
        abstractRoles : [
            "command",
            "composite",
            "input",
            "landmark",
            "range",
            "roletype",
            "section",
            "sectionhead",
            "select",
            "structure",
            "widget",
            "window"
        ],

          /*
           * design patterns for concrete WAI-ARIA roles
           * legitimate keys for each role include:
           *
           * - container: appropriate container(s) for that role
           * - props: states and properties that may be associated with this role (in addition to the global states and properties listed above)
           * - reqProps: required states or properties for this role
           * - requiredChildren: required children for this role
           * - htmlEquiv: HTML equivalent for this role
           * - roleType: one of widget, landmark, or null
           */
    "designPatterns": {
        "alert": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure live",
            "isAbstract": false
        },
        "alertdialog": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-modal",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure window",
            "isAbstract": false
        },
        "application": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-dropeffect",
                "aria-flowto",
                "aria-grabbed",
                "aria-hidden",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-activedescendant",
                "aria-disabled",
                "aria-errormessage",
                "aria-expanded",
                "aria-haspopup",
                "aria-invalid"
            ],
            "deprecatedProps": [],
            "props": [
                "aria-activedescendant",
                "aria-disabled",
                "aria-errormessage",
                "aria-expanded",
                "aria-haspopup",
                "aria-invalid"
            ],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure widget",
            "isAbstract": false
        },
        "article": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-posinset",
                "aria-setsize"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [
                "aria-posinset",
                "aria-setsize"
            ],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure section",
            "isAbstract": false
        },
        "banner": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "landmark",
            "isAbstract": false
        },
        "blockquote": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "button": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-disabled",
                "aria-haspopup",
                "aria-expanded",
                "aria-pressed"
            ],
            "deprecatedProps": [
                "aria-errormessage",
                "aria-invalid"
            ],
            "props": [
                "aria-disabled",
                "aria-haspopup",
                "aria-expanded",
                "aria-pressed"
            ],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": true,
            "nameProhibited": false,
            "childrenPresentational": true,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "widget",
            "isAbstract": false
        },
        "caption": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": true,
            "childrenPresentational": false,
            "requiredParents": [
                "figure",
                "grid",
                "table",
                "treegrid"
            ],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "cell": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-colindex",
                "aria-colspan",
                "aria-rowindex",
                "aria-rowspan"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [
                "aria-colindex",
                "aria-colspan",
                "aria-rowindex",
                "aria-rowspan"
            ],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": true,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [
                "row"
            ],
            "requiredChildren": [],
            "roleType": "structure section",
            "isAbstract": false
        },
        "checkbox": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-checked",
                "aria-errormessage",
                "aria-expanded",
                "aria-invalid",
                "aria-readonly",
                "aria-required"
            ],
            "deprecatedProps": [
                "aria-haspopup"
            ],
            "props": [
                "aria-errormessage",
                "aria-expanded",
                "aria-invalid",
                "aria-readonly",
                "aria-required"
            ],
            "hasRange": false,
            "requiredProps": [
                "aria-checked"
            ],
            "nameRequired": true,
            "nameFromContent": true,
            "nameProhibited": false,
            "childrenPresentational": true,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "widget",
            "isAbstract": false
        },
        "code": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": true,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "columnheader": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-colindex",
                "aria-colspan",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-expanded",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-readonly",
                "aria-relevant",
                "aria-required",
                "aria-roledescription",
                "aria-rowindex",
                "aria-rowspan",
                "aria-selected"
            ],
            "deprecatedProps": [],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": true,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [
                "row"
            ],
            "requiredChildren": [],
            "roleType": "structure widget",
            "isAbstract": false
        },
        "combobox": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-flowto",
                "aria-grabbed",
                "aria-hidden",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-controls",
                "aria-expanded",
                "aria-activedescendant",
                "aria-autocomplete",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid",
                "aria-readonly",
                "aria-required"
            ],
            "deprecatedProps": [],
            "props": [
                "aria-activedescendant",
                "aria-autocomplete",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid",
                "aria-readonly",
                "aria-required"
            ],
            "hasRange": false,
            "requiredProps": [
                "aria-controls",
                "aria-expanded"
            ],
            "nameRequired": true,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "widget",
            "isAbstract": false
        },
        "command": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "abstract",
            "isAbstract": true
        },
        "complementary": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "landmark",
            "isAbstract": false
        },
        "composite": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-activedescendant",
                "aria-disabled"
            ],
            "deprecatedProps": [
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [
                "aria-activedescendant",
                "aria-disabled"
            ],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "abstract",
            "isAbstract": true
        },
        "contentinfo": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "landmark",
            "isAbstract": false
        },
        "definition": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "deletion": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": true,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "dialog": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-modal",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "window",
            "isAbstract": false
        },
        "directory": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "document": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "emphasis": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": true,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "feed": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [
                "article"
            ],
            "roleType": "structure",
            "isAbstract": false
        },
        "figure": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "form": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "landmark",
            "isAbstract": false
        },
        "generic": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-live",
                "aria-owns",
                "aria-relevant"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": true,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "grid": {
            "allowedProps": [
                "aria-activedescendant",
                "aria-atomic",
                "aria-busy",
                "aria-colcount",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-rowcount",
                "aria-multiselectable",
                "aria-readonly"
            ],
            "deprecatedProps": [
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [
                "aria-multiselectable",
                "aria-readonly"
            ],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [
                "row",
                "rowgroup"
            ],
            "roleType": "widget structure",
            "isAbstract": false
        },
        "gridcell": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-colindex",
                "aria-colspan",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-dropeffect",
                "aria-flowto",
                "aria-grabbed",
                "aria-hidden",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-rowindex",
                "aria-rowspan",
                "aria-disabled",
                "aria-errormessage",
                "aria-expanded",
                "aria-haspopup",
                "aria-invalid",
                "aria-readonly",
                "aria-required",
                "aria-selected"
            ],
            "deprecatedProps": [],
            "props": [
                "aria-disabled",
                "aria-errormessage",
                "aria-expanded",
                "aria-haspopup",
                "aria-invalid",
                "aria-readonly",
                "aria-required",
                "aria-selected"
            ],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": true,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [
                "row"
            ],
            "requiredChildren": [],
            "roleType": "structure widget",
            "isAbstract": false
        },
        "group": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-activedescendant",
                "aria-disabled"
            ],
            "deprecatedProps": [
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [
                "aria-activedescendant",
                "aria-disabled"
            ],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "heading": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": true,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "img": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": true,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "input": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "abstract",
            "isAbstract": true
        },
        "insertion": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": true,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "landmark": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "abstract",
            "isAbstract": true
        },
        "link": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-disabled",
                "aria-expanded",
                "aria-haspopup"
            ],
            "deprecatedProps": [
                "aria-errormessage",
                "aria-invalid"
            ],
            "props": [
                "aria-disabled",
                "aria-expanded",
                "aria-haspopup"
            ],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": true,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "widget",
            "isAbstract": false
        },
        "list": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [
                "listitem"
            ],
            "roleType": "structure",
            "isAbstract": false
        },
        "listbox": {
            "allowedProps": [
                "aria-activedescendant",
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-orientation",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-errormessage",
                "aria-expanded",
                "aria-invalid",
                "aria-multiselectable",
                "aria-readonly",
                "aria-required"
            ],
            "deprecatedProps": [
                "aria-haspopup"
            ],
            "props": [
                "aria-errormessage",
                "aria-expanded",
                "aria-invalid",
                "aria-multiselectable",
                "aria-readonly",
                "aria-required"
            ],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [
                "group",
                "option"
            ],
            "roleType": "widget structure",
            "isAbstract": false
        },
        "listitem": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-level",
                "aria-posinset",
                "aria-setsize"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [
                "aria-level",
                "aria-posinset",
                "aria-setsize"
            ],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [
                "directory",
                "list"
            ],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "log": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure widget live",
            "isAbstract": false
        },
        "main": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "landmark",
            "isAbstract": false
        },
        "marquee": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure widget live",
            "isAbstract": false
        },
        "math": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "meter": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-valuemax",
                "aria-valuemin",
                "aria-valuetext"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": true,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": true,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "range",
            "isAbstract": false
        },
        "menu": {
            "allowedProps": [
                "aria-activedescendant",
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-orientation",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [
                "group",
                "menuitem",
                "menuitemcheckbox",
                "menuitemradio"
            ],
            "roleType": "widget structure",
            "isAbstract": false
        },
        "menubar": {
            "allowedProps": [
                "aria-activedescendant",
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-orientation",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [
                "group",
                "menuitem",
                "menuitemcheckbox",
                "menuitemradio"
            ],
            "roleType": "widget structure",
            "isAbstract": false
        },
        "menuitem": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-disabled",
                "aria-expanded",
                "aria-haspopup",
                "aria-posinset",
                "aria-setsize"
            ],
            "deprecatedProps": [
                "aria-errormessage",
                "aria-invalid"
            ],
            "props": [
                "aria-disabled",
                "aria-expanded",
                "aria-haspopup",
                "aria-posinset",
                "aria-setsize"
            ],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": true,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [
                "group",
                "menu",
                "menubar"
            ],
            "requiredChildren": [],
            "roleType": "widget",
            "isAbstract": false
        },
        "menuitemcheckbox": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-expanded",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-posinset",
                "aria-relevant",
                "aria-roledescription",
                "aria-setsize",
                "aria-checked"
            ],
            "deprecatedProps": [
                "aria-errormessage",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [
                "aria-checked"
            ],
            "nameRequired": true,
            "nameFromContent": true,
            "nameProhibited": false,
            "childrenPresentational": true,
            "requiredParents": [
                "group",
                "menu",
                "menubar"
            ],
            "requiredChildren": [],
            "roleType": "widget",
            "isAbstract": false
        },
        "menuitemradio": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-checked",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-expanded",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-posinset",
                "aria-relevant",
                "aria-roledescription",
                "aria-setsize"
            ],
            "deprecatedProps": [
                "aria-checked",
                "aria-errormessage",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": true,
            "nameProhibited": false,
            "childrenPresentational": true,
            "requiredParents": [
                "group",
                "menu",
                "menubar"
            ],
            "requiredChildren": [],
            "roleType": "widget",
            "isAbstract": false
        },
        "navigation": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "landmark",
            "isAbstract": false
        },
        "note": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "option": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-selected",
                "aria-checked",
                "aria-posinset",
                "aria-setsize"
            ],
            "deprecatedProps": [
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [
                "aria-checked",
                "aria-posinset",
                "aria-setsize"
            ],
            "hasRange": false,
            "requiredProps": [
                "aria-selected"
            ],
            "nameRequired": true,
            "nameFromContent": true,
            "nameProhibited": false,
            "childrenPresentational": true,
            "requiredParents": [
                "group",
                "listbox"
            ],
            "requiredChildren": [],
            "roleType": "widget",
            "isAbstract": false
        },
        "paragraph": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": true,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "presentation": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": true,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "progressbar": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-valuemax",
                "aria-valuemin",
                "aria-valuenow",
                "aria-valuetext"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": true,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": true,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "range widget",
            "isAbstract": false
        },
        "radio": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-checked",
                "aria-posinset",
                "aria-setsize"
            ],
            "deprecatedProps": [
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [
                "aria-posinset",
                "aria-setsize"
            ],
            "hasRange": false,
            "requiredProps": [
                "aria-checked"
            ],
            "nameRequired": true,
            "nameFromContent": true,
            "nameProhibited": false,
            "childrenPresentational": true,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "widget",
            "isAbstract": false
        },
        "radiogroup": {
            "allowedProps": [
                "aria-activedescendant",
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-orientation",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-errormessage",
                "aria-invalid",
                "aria-readonly",
                "aria-required"
            ],
            "deprecatedProps": [
                "aria-haspopup"
            ],
            "props": [
                "aria-errormessage",
                "aria-invalid",
                "aria-readonly",
                "aria-required"
            ],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [
                "radio"
            ],
            "roleType": "widget structure",
            "isAbstract": false
        },
        "range": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-valuemax",
                "aria-valuemin",
                "aria-valuenow",
                "aria-valuetext"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [
                "aria-valuemax",
                "aria-valuemin",
                "aria-valuenow",
                "aria-valuetext"
            ],
            "hasRange": true,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "abstract",
            "isAbstract": true
        },
        "region": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "landmark",
            "isAbstract": false
        },
        "row": {
            "allowedProps": [
                "aria-activedescendant",
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-colindex",
                "aria-expanded",
                "aria-level",
                "aria-posinset",
                "aria-rowindex",
                "aria-setsize",
                "aria-selected"
            ],
            "deprecatedProps": [
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [
                "aria-colindex",
                "aria-expanded",
                "aria-level",
                "aria-posinset",
                "aria-rowindex",
                "aria-setsize",
                "aria-selected"
            ],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": true,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [
                "grid",
                "rowgroup",
                "table",
                "treegrid"
            ],
            "requiredChildren": [
                "cell",
                "columnheader",
                "gridcell",
                "rowheader"
            ],
            "roleType": "structure widget",
            "isAbstract": false
        },
        "rowgroup": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [
                "grid",
                "table",
                "treegrid"
            ],
            "requiredChildren": [
                "row"
            ],
            "roleType": "structure",
            "isAbstract": false
        },
        "rowheader": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-colindex",
                "aria-colspan",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-readonly",
                "aria-relevant",
                "aria-required",
                "aria-roledescription",
                "aria-rowindex",
                "aria-rowspan",
                "aria-selected",
                "aria-expanded",
                "aria-sort"
            ],
            "deprecatedProps": [],
            "props": [
                "aria-expanded",
                "aria-sort"
            ],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": true,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [
                "row"
            ],
            "requiredChildren": [],
            "roleType": "structure widget",
            "isAbstract": false
        },
        "scrollbar": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-valuetext",
                "aria-controls",
                "aria-valuenow",
                "aria-disabled",
                "aria-orientation",
                "aria-valuemax",
                "aria-valuemin"
            ],
            "deprecatedProps": [
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [
                "aria-disabled",
                "aria-orientation",
                "aria-valuemax",
                "aria-valuemin"
            ],
            "hasRange": true,
            "requiredProps": [
                "aria-controls",
                "aria-valuenow"
            ],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": true,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "range widget",
            "isAbstract": false
        },
        "search": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "landmark",
            "isAbstract": false
        },
        "searchbox": {
            "allowedProps": [
                "aria-activedescendant",
                "aria-atomic",
                "aria-autocomplete",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-multiline",
                "aria-owns",
                "aria-placeholder",
                "aria-readonly",
                "aria-relevant",
                "aria-required",
                "aria-roledescription"
            ],
            "deprecatedProps": [],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "widget",
            "isAbstract": false
        },
        "section": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "abstract",
            "isAbstract": true
        },
        "sectionhead": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": true,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "abstract",
            "isAbstract": true
        },
        "select": {
            "allowedProps": [
                "aria-activedescendant",
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "abstract",
            "isAbstract": true
        },
        "separator": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-disabled",
                "aria-orientation",
                "aria-valuemax",
                "aria-valuemin",
                "aria-valuetext"
            ],
            "deprecatedProps": [
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [
                "aria-disabled",
                "aria-orientation",
                "aria-valuemax",
                "aria-valuemin",
                "aria-valuetext"
            ],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": true,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure widget",
            "isAbstract": false
        },
        "slider": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-flowto",
                "aria-grabbed",
                "aria-hidden",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-valuetext",
                "aria-valuenow",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid",
                "aria-orientation",
                "aria-readonly",
                "aria-valuemax",
                "aria-valuemin"
            ],
            "deprecatedProps": [],
            "props": [
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid",
                "aria-orientation",
                "aria-readonly",
                "aria-valuemax",
                "aria-valuemin"
            ],
            "hasRange": true,
            "requiredProps": [
                "aria-valuenow"
            ],
            "nameRequired": true,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": true,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "widget range",
            "isAbstract": false
        },
        "spinbutton": {
            "allowedProps": [
                "aria-activedescendant",
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-errormessage",
                "aria-invalid",
                "aria-readonly",
                "aria-required",
                "aria-valuemax",
                "aria-valuemin",
                "aria-valuenow",
                "aria-valuetext"
            ],
            "deprecatedProps": [
                "aria-haspopup"
            ],
            "props": [
                "aria-errormessage",
                "aria-invalid",
                "aria-readonly",
                "aria-required",
                "aria-valuemax",
                "aria-valuemin",
                "aria-valuenow",
                "aria-valuetext"
            ],
            "hasRange": true,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "widget range",
            "isAbstract": false
        },
        "status": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure live",
            "isAbstract": false
        },
        "strong": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": true,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "structure": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "abstract",
            "isAbstract": true
        },
        "subscript": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": true,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "superscript": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": true,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "switch": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-expanded",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-readonly",
                "aria-relevant",
                "aria-required",
                "aria-roledescription",
                "aria-checked"
            ],
            "deprecatedProps": [
                "aria-haspopup"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [
                "aria-checked"
            ],
            "nameRequired": true,
            "nameFromContent": true,
            "nameProhibited": false,
            "childrenPresentational": true,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "widget",
            "isAbstract": false
        },
        "tab": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-disabled",
                "aria-expanded",
                "aria-haspopup",
                "aria-posinset",
                "aria-selected",
                "aria-setsize"
            ],
            "deprecatedProps": [
                "aria-errormessage",
                "aria-invalid"
            ],
            "props": [
                "aria-disabled",
                "aria-expanded",
                "aria-haspopup",
                "aria-posinset",
                "aria-selected",
                "aria-setsize"
            ],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": true,
            "nameProhibited": false,
            "childrenPresentational": true,
            "requiredParents": [
                "tablist"
            ],
            "requiredChildren": [],
            "roleType": "structure widget",
            "isAbstract": false
        },
        "table": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-colcount",
                "aria-rowcount"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [
                "aria-colcount",
                "aria-rowcount"
            ],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [
                "row",
                "rowgroup"
            ],
            "roleType": "structure",
            "isAbstract": false
        },
        "tablist": {
            "allowedProps": [
                "aria-activedescendant",
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-multiselectable",
                "aria-orientation"
            ],
            "deprecatedProps": [
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [
                "aria-multiselectable",
                "aria-orientation"
            ],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [
                "tab"
            ],
            "roleType": "widget",
            "isAbstract": false
        },
        "tabpanel": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure widget",
            "isAbstract": false
        },
        "term": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "textbox": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-flowto",
                "aria-grabbed",
                "aria-hidden",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-activedescendant",
                "aria-autocomplete",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid",
                "aria-multiline",
                "aria-placeholder",
                "aria-readonly",
                "aria-required"
            ],
            "deprecatedProps": [],
            "props": [
                "aria-activedescendant",
                "aria-autocomplete",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid",
                "aria-multiline",
                "aria-placeholder",
                "aria-readonly",
                "aria-required"
            ],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "widget",
            "isAbstract": false
        },
        "time": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure widget live",
            "isAbstract": false
        },
        "timer": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure widget live",
            "isAbstract": false
        },
        "toolbar": {
            "allowedProps": [
                "aria-activedescendant",
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        },
        "tooltip": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": true,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure widget",
            "isAbstract": false
        },
        "tree": {
            "allowedProps": [
                "aria-activedescendant",
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-orientation",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription",
                "aria-errormessage",
                "aria-invalid",
                "aria-multiselectable",
                "aria-required"
            ],
            "deprecatedProps": [
                "aria-haspopup"
            ],
            "props": [
                "aria-errormessage",
                "aria-invalid",
                "aria-multiselectable",
                "aria-required"
            ],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [
                "group",
                "treeitem"
            ],
            "roleType": "widget structure",
            "isAbstract": false
        },
        "treegrid": {
            "allowedProps": [
                "aria-activedescendant",
                "aria-atomic",
                "aria-busy",
                "aria-colcount",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-multiselectable",
                "aria-orientation",
                "aria-owns",
                "aria-readonly",
                "aria-relevant",
                "aria-required",
                "aria-roledescription",
                "aria-rowcount"
            ],
            "deprecatedProps": [
                "aria-haspopup"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [
                "row",
                "rowgroup"
            ],
            "roleType": "widget structure",
            "isAbstract": false
        },
        "treeitem": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-checked",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-level",
                "aria-live",
                "aria-owns",
                "aria-posinset",
                "aria-relevant",
                "aria-roledescription",
                "aria-selected",
                "aria-setsize",
                "aria-expanded",
                "aria-haspopup"
            ],
            "deprecatedProps": [
                "aria-errormessage",
                "aria-invalid",
                "aria-selected"
            ],
            "props": [
                "aria-expanded",
                "aria-haspopup"
            ],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": true,
            "nameFromContent": true,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [
                "group",
                "tree"
            ],
            "requiredChildren": [],
            "roleType": "structure widget",
            "isAbstract": false
        },
        "widget": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "abstract",
            "isAbstract": true
        },
        "window": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-label",
                "aria-labelledby",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": false,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "abstract",
            "isAbstract": true
        },
        "none": {
            "allowedProps": [
                "aria-atomic",
                "aria-busy",
                "aria-controls",
                "aria-current",
                "aria-describedby",
                "aria-details",
                "aria-disabled",
                "aria-dropeffect",
                "aria-errormessage",
                "aria-flowto",
                "aria-grabbed",
                "aria-haspopup",
                "aria-hidden",
                "aria-invalid",
                "aria-keyshortcuts",
                "aria-live",
                "aria-owns",
                "aria-relevant",
                "aria-roledescription"
            ],
            "deprecatedProps": [
                "aria-disabled",
                "aria-errormessage",
                "aria-haspopup",
                "aria-invalid"
            ],
            "props": [],
            "hasRange": false,
            "requiredProps": [],
            "nameRequired": false,
            "nameFromContent": false,
            "nameProhibited": true,
            "childrenPresentational": false,
            "requiredParents": [],
            "requiredChildren": [],
            "roleType": "structure",
            "isAbstract": false
        }
    }, // end designPatterns

        getRoleObject : function(role) {

          var dp = this.designPatterns;

          for (var r in dp) {

            if (role == r)  return dp[r];

          }

          var ar = this.abstractRoles;
          var ar_len = ar.length;

          for (var i = 0; i < ar_len; i++) {

            if (role == r[i])  return 'abstract';

          }

          return null;
        }

    };

}
/*
 * Copyright 2021 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*              ARIA In HTML                                        */
/* ---------------------------------------------------------------- */

/*
* design patterns for ARIA in HTML
* legitimate keys for each role include:
*
* {Boolean} noRoleAllowed     : No role can be set for the element (required)
* {Boolean} anyRoleAllowed    : Any role can be set for the element (required)
* {String}  defaultRole       : Default role for the element (required)
* {Array}   allowedRoles      : Array of allowed role values (optional)
* {String}  reqAttribute      : Required attribute is present (optional)
* {String   reqAttributeValue : Required attribute value (optional)
* {Boolean} hasAccName        : ELement has an accessible name (optional)
* {Boolean} hasNoRole         : ELement has no role attribute (optional)
* {Boolean} hasListAttribute  : Element has a datalist (optional)
* - :
* - :
*/


if (typeof OpenAjax.a11y.ariaInHTML == "undefined") {
  OpenAjax.a11y.ariaInHTML = {
    "elementInfo": {
        "a[href]": {
            "tagName": "a",
            "defaultRole": "link",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "button",
                "checkbox",
                "menuitem",
                "menuitemcheckbox",
                "menuitemradio",
                "option",
                "radio",
                "switch",
                "tab",
                "treeitem"
            ],
            "attr1": "href",
            "id": "a[href]"
        },
        "a": {
            "tagName": "a",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "a"
        },
        "abbr": {
            "tagName": "abbr",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "abbr"
        },
        "address": {
            "tagName": "address",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "address"
        },
        "area[href]": {
            "tagName": "area",
            "defaultRole": "link",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "href",
            "id": "area[href]"
        },
        "area": {
            "tagName": "area",
            "defaultRole": "generic",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "id": "area"
        },
        "article": {
            "tagName": "article",
            "defaultRole": "article",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "application",
                "document",
                "feed",
                "main",
                "none",
                "presentation",
                "region"
            ],
            "id": "article"
        },
        "aside": {
            "tagName": "aside",
            "defaultRole": "complementary",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "feed",
                "none",
                "note",
                "presentation",
                "region",
                "search"
            ],
            "id": "aside"
        },
        "audio": {
            "tagName": "audio",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "application"
            ],
            "id": "audio"
        },
        "b": {
            "tagName": "b",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "b"
        },
        "base": {
            "tagName": "base",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [],
            "id": "base"
        },
        "bdi": {
            "tagName": "bdi",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "bdi"
        },
        "bdo": {
            "tagName": "bdo",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "bdo"
        },
        "blockquote": {
            "tagName": "blockquote",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "blockquote"
        },
        "body": {
            "tagName": "body",
            "defaultRole": "generic",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "id": "body"
        },
        "br": {
            "tagName": "br",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "presentation",
                "none"
            ],
            "id": "br"
        },
        "button": {
            "tagName": "button",
            "defaultRole": "button",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "checkbox",
                "link",
                "menuitem",
                "menuitemcheckbox",
                "menuitemradio",
                "option",
                "radio",
                "switch",
                "tab"
            ],
            "id": "button"
        },
        "canvas": {
            "tagName": "canvas",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "canvas"
        },
        "caption": {
            "tagName": "caption",
            "defaultRole": "generic",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "id": "caption"
        },
        "cite": {
            "tagName": "cite",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "cite"
        },
        "code": {
            "tagName": "code",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "code"
        },
        "col": {
            "tagName": "col",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [],
            "id": "col"
        },
        "colgroup": {
            "tagName": "colgroup",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [],
            "id": "colgroup"
        },
        "data": {
            "tagName": "data",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "data"
        },
        "datalist": {
            "tagName": "datalist",
            "defaultRole": "listbox",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "id": "datalist"
        },
        "dd": {
            "tagName": "dd",
            "defaultRole": "definition",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "id": "dd"
        },
        "del": {
            "tagName": "del",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "del"
        },
        "dfn": {
            "tagName": "dfn",
            "defaultRole": "term",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "dfn"
        },
        "details": {
            "tagName": "details",
            "defaultRole": "group",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "id": "details"
        },
        "dialog": {
            "tagName": "dialog",
            "defaultRole": "dialog",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "alertdialog"
            ],
            "id": "dialog"
        },
        "div": {
            "tagName": "div",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "div"
        },
        "dl": {
            "tagName": "dl",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "group",
                "list",
                "presentation",
                "none"
            ],
            "id": "dl"
        },
        "dt": {
            "tagName": "dt",
            "defaultRole": "term",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "listitem"
            ],
            "id": "dt"
        },
        "em": {
            "tagName": "em",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "em"
        },
        "embed": {
            "tagName": "embed",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "application",
                "document",
                "img",
                "presentation",
                "none"
            ],
            "id": "embed"
        },
        "fieldset": {
            "tagName": "fieldset",
            "defaultRole": "group",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "none",
                "presentation",
                "radiogroup"
            ],
            "id": "fieldset"
        },
        "figcaption": {
            "tagName": "figcaption",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "group",
                "presentation",
                "none"
            ],
            "id": "figcaption"
        },
        "figure[figcaption]": {
            "tagName": "figure",
            "defaultRole": "figure",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "hasFigcaption": true,
            "id": "figure[figcaption]"
        },
        "figure": {
            "tagName": "figure",
            "defaultRole": "figure",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "figure"
        },
        "footer[contentinfo]": {
            "tagName": "footer",
            "defaultRole": "contentinfo",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "group",
                "none",
                "presentation"
            ],
            "isLandmark": true,
            "id": "footer[contentinfo]"
        },
        "footer": {
            "tagName": "footer",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "group",
                "none",
                "presentation"
            ],
            "id": "footer"
        },
        "form": {
            "tagName": "form",
            "defaultRole": "form",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "search",
                "none",
                "presentation"
            ],
            "id": "form"
        },
        "h1": {
            "tagName": "h1",
            "defaultRole": "heading",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "none",
                "presentation",
                "tab"
            ],
            "id": "h1"
        },
        "h2": {
            "tagName": "h2",
            "defaultRole": "heading",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "none",
                "presentation",
                "tab"
            ],
            "id": "h2"
        },
        "h3": {
            "tagName": "h3",
            "defaultRole": "heading",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "none",
                "presentation",
                "tab"
            ],
            "id": "h3"
        },
        "h4": {
            "tagName": "h4",
            "defaultRole": "heading",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "none",
                "presentation",
                "tab"
            ],
            "id": "h4"
        },
        "h5": {
            "tagName": "h5",
            "defaultRole": "heading",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "none",
                "presentation",
                "tab"
            ],
            "id": "h5"
        },
        "h6": {
            "tagName": "h6",
            "defaultRole": "heading",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "none",
                "presentation",
                "tab"
            ],
            "id": "h6"
        },
        "head": {
            "tagName": "head",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [],
            "id": "head"
        },
        "header[banner]": {
            "tagName": "header",
            "defaultRole": "banner",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "group",
                "none",
                "presentation"
            ],
            "isLandmark": true,
            "id": "header[banner]"
        },
        "header": {
            "tagName": "header",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "group",
                "none",
                "presentation"
            ],
            "id": "header"
        },
        "hgroup": {
            "tagName": "hgroup",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "hgroup"
        },
        "hr": {
            "tagName": "hr",
            "defaultRole": "separator",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "none",
                "presentation"
            ],
            "id": "hr"
        },
        "html": {
            "tagName": "html",
            "defaultRole": "document",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [],
            "id": "html"
        },
        "i": {
            "tagName": "i",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "i"
        },
        "iframe": {
            "tagName": "iframe",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "application",
                "document",
                "img",
                "none",
                "presentation"
            ],
            "id": "iframe"
        },
        "img[accname]": {
            "tagName": "img",
            "defaultRole": "img",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "button",
                "checkbox",
                "link",
                "menuitem",
                "menuitemcheckbox",
                "menuitemradio",
                "option",
                "progressbar",
                "scrollbar",
                "separator",
                "slider",
                "switch",
                "tab",
                "treeitem"
            ],
            "hasAccname": true,
            "id": "img[accname]"
        },
        "img[alt]": {
            "tagName": "img",
            "defaultRole": "img",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "button",
                "checkbox",
                "link",
                "menuitem",
                "menuitemcheckbox",
                "menuitemradio",
                "option",
                "progressbar",
                "scrollbar",
                "separator",
                "slider",
                "switch",
                "tab",
                "treeitem"
            ],
            "attr1": "alt",
            "id": "img[alt]"
        },
        "img[emptyalt]": {
            "tagName": "img",
            "defaultRole": "presentation",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "alt=\"\"",
            "id": "img[emptyalt]"
        },
        "img": {
            "tagName": "img",
            "defaultRole": "img",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "id": "img"
        },
        "input[type=button]": {
            "tagName": "input",
            "defaultRole": "button",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "link",
                "menuitem",
                "menuitemcheckbox",
                "menuitemradio",
                "option",
                "radio",
                "switch",
                "tab"
            ],
            "attr1": "type=button",
            "id": "input[type=button]"
        },
        "input[type=checkbox]": {
            "tagName": "input",
            "defaultRole": "checkbox",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "menuitemcheckbox",
                "option",
                "switch",
                "button"
            ],
            "attr1": "type=checkbox",
            "id": "input[type=checkbox]"
        },
        "input[type=color]": {
            "tagName": "input",
            "defaultRole": "generic",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "type=color",
            "id": "input[type=color]"
        },
        "input[type=date]": {
            "tagName": "input",
            "defaultRole": "generic",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "type=date",
            "id": "input[type=date]"
        },
        "input[type=datetime-local]": {
            "tagName": "input",
            "defaultRole": "generic",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "type=datetime-local",
            "id": "input[type=datetime-local]"
        },
        "input[type=email][list]": {
            "tagName": "input",
            "defaultRole": "combobox",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "type=email",
            "attr2": "list",
            "id": "input[type=email][list]"
        },
        "input[type=email]": {
            "tagName": "input",
            "defaultRole": "textbox",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "type=email",
            "id": "input[type=email]"
        },
        "input[type=file]": {
            "tagName": "input",
            "defaultRole": "generic",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "type=file",
            "id": "input[type=file]"
        },
        "input[type=hidden]": {
            "tagName": "input",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [],
            "attr1": "type=hidden",
            "id": "input[type=hidden]"
        },
        "input[type=image]": {
            "tagName": "input",
            "defaultRole": "button",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "link",
                "menuitem",
                "menuitemcheckbox",
                "menuitemradio",
                "radio",
                "switch"
            ],
            "attr1": "type=image",
            "id": "input[type=image]"
        },
        "input[type=month]": {
            "tagName": "input",
            "defaultRole": "generic",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "type=month",
            "id": "input[type=month]"
        },
        "input[type=number]": {
            "tagName": "input",
            "defaultRole": "spinbutton",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "type=number",
            "id": "input[type=number]"
        },
        "input[type=password]": {
            "tagName": "input",
            "defaultRole": "generic",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "type=password",
            "id": "input[type=password]"
        },
        "input[type=radio]": {
            "tagName": "input",
            "defaultRole": "radio",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "menuitemradio"
            ],
            "attr1": "type=radio",
            "id": "input[type=radio]"
        },
        "input[type=range]": {
            "tagName": "input",
            "defaultRole": "slider",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "type=range",
            "id": "input[type=range]"
        },
        "input[type=reset]": {
            "tagName": "input",
            "defaultRole": "button",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "type=reset",
            "id": "input[type=reset]"
        },
        "input[type=search][list]": {
            "tagName": "input",
            "defaultRole": "combobox",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "type=search",
            "attr2": "list",
            "id": "input[type=search][list]"
        },
        "input[type=search]": {
            "tagName": "input",
            "defaultRole": "searchbox",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "type=search",
            "id": "input[type=search]"
        },
        "input[type=submit]": {
            "tagName": "input",
            "defaultRole": "button",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "type=submit",
            "id": "input[type=submit]"
        },
        "input[type=tel][list]": {
            "tagName": "input",
            "defaultRole": "combobox",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "type=tel",
            "attr2": "list",
            "id": "input[type=tel][list]"
        },
        "input[type=tel]": {
            "tagName": "input",
            "defaultRole": "textbox",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "type=tel",
            "id": "input[type=tel]"
        },
        "input[type=text][list]": {
            "tagName": "input",
            "defaultRole": "combobox",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "type=text",
            "attr2": "list",
            "id": "input[type=text][list]"
        },
        "input[type=text]": {
            "tagName": "input",
            "defaultRole": "textbox",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "combobox",
                "searchbox",
                "spinbutton"
            ],
            "attr1": "type=text",
            "id": "input[type=text]"
        },
        "input[type=time]": {
            "tagName": "input",
            "defaultRole": "generic",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "type=time",
            "id": "input[type=time]"
        },
        "input[type=url][list]": {
            "tagName": "input",
            "defaultRole": "combobox",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "type=url",
            "attr2": "list",
            "id": "input[type=url][list]"
        },
        "input[type=url]": {
            "tagName": "input",
            "defaultRole": "textbox",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "type=url",
            "id": "input[type=url]"
        },
        "input[type=week]": {
            "tagName": "input",
            "defaultRole": "generic",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "attr1": "type=week",
            "id": "input[type=week]"
        },
        "ins": {
            "tagName": "ins",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "ins"
        },
        "kbd": {
            "tagName": "kbd",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "kbd"
        },
        "label": {
            "tagName": "label",
            "defaultRole": "generic",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "id": "label"
        },
        "legend": {
            "tagName": "legend",
            "defaultRole": "generic",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "id": "legend"
        },
        "li": {
            "tagName": "li",
            "defaultRole": "listitem",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "menuitem",
                "menuitemcheckbox",
                "menuitemradio",
                "option",
                "none",
                "presentation",
                "radio",
                "separator",
                "tab",
                "treeitem"
            ],
            "id": "li"
        },
        "link": {
            "tagName": "link",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [],
            "id": "link"
        },
        "main": {
            "tagName": "main",
            "defaultRole": "main",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "id": "main"
        },
        "map": {
            "tagName": "map",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [],
            "id": "map"
        },
        "math": {
            "tagName": "math",
            "defaultRole": "math",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "id": "math"
        },
        "mark": {
            "tagName": "mark",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "mark"
        },
        "menu": {
            "tagName": "menu",
            "defaultRole": "list",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "directory",
                "group",
                "listbox",
                "menu",
                "menubar",
                "none",
                "presentation",
                "radiogroup",
                "tablist",
                "toolbar",
                "tree"
            ],
            "id": "menu"
        },
        "meta": {
            "tagName": "meta",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [],
            "id": "meta"
        },
        "meter": {
            "tagName": "meter",
            "defaultRole": "generic",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "id": "meter"
        },
        "nav": {
            "tagName": "nav",
            "defaultRole": "navigation",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "menu",
                "menubar",
                "tablist"
            ],
            "id": "nav"
        },
        "noscript": {
            "tagName": "noscript",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [],
            "id": "noscript"
        },
        "object": {
            "tagName": "object",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "application",
                "document",
                "img"
            ],
            "id": "object"
        },
        "ol": {
            "tagName": "ol",
            "defaultRole": "list",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "directory",
                "group",
                "listbox",
                "menu",
                "menubar",
                "none",
                "presentation",
                "radiogroup",
                "tablist",
                "toolbar",
                "tree"
            ],
            "id": "ol"
        },
        "optgroup": {
            "tagName": "optgroup",
            "defaultRole": "group",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "id": "optgroup"
        },
        "option": {
            "tagName": "option",
            "defaultRole": "option",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "id": "option"
        },
        "output": {
            "tagName": "output",
            "defaultRole": "status",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "output"
        },
        "p": {
            "tagName": "p",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "p"
        },
        "param": {
            "tagName": "param",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [],
            "id": "param"
        },
        "picture": {
            "tagName": "picture",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [],
            "id": "picture"
        },
        "pre": {
            "tagName": "pre",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "pre"
        },
        "progress": {
            "tagName": "progress",
            "defaultRole": "progressbar",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "id": "progress"
        },
        "q": {
            "tagName": "q",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "q"
        },
        "rp": {
            "tagName": "rp",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "rp"
        },
        "rt": {
            "tagName": "rt",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "rt"
        },
        "ruby": {
            "tagName": "ruby",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "ruby"
        },
        "s": {
            "tagName": "s",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "s"
        },
        "samp": {
            "tagName": "samp",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "samp"
        },
        "script": {
            "tagName": "script",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [],
            "id": "script"
        },
        "section[accname]": {
            "tagName": "section",
            "defaultRole": "region",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "alert",
                "alertdialog",
                "application",
                "banner",
                "complementary",
                "contentinfo",
                "dialog",
                "document",
                "feed",
                "log",
                "main",
                "marquee",
                "navigation",
                "none",
                "note",
                "presentation",
                "search",
                "status",
                "tabpanel"
            ],
            "hasAccname": true,
            "id": "section[accname]"
        },
        "section": {
            "tagName": "section",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "alert",
                "alertdialog",
                "application",
                "banner",
                "complementary",
                "contentinfo",
                "dialog",
                "document",
                "feed",
                "log",
                "main",
                "marquee",
                "navigation",
                "none",
                "note",
                "presentation",
                "search",
                "status",
                "tabpanel"
            ],
            "id": "section"
        },
        "select": {
            "tagName": "select",
            "defaultRole": "combobox",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "menu"
            ],
            "id": "select"
        },
        "select[size-or-multiple]": {
            "tagName": "select",
            "defaultRole": "listbox",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "hasSizeOrMultiple": true,
            "id": "select[size-or-multiple]"
        },
        "slot": {
            "tagName": "slot",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [],
            "id": "slot"
        },
        "small": {
            "tagName": "small",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "small"
        },
        "source": {
            "tagName": "source",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [],
            "id": "source"
        },
        "span": {
            "tagName": "span",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "span"
        },
        "strong": {
            "tagName": "strong",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "strong"
        },
        "style": {
            "tagName": "style",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [],
            "id": "style"
        },
        "sub": {
            "tagName": "sub",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "sub"
        },
        "summary": {
            "tagName": "summary",
            "defaultRole": "button",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "id": "summary"
        },
        "sup": {
            "tagName": "sup",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "sup"
        },
        "svg": {
            "tagName": "SVG",
            "defaultRole": "graphics-document",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "SVG"
        },
        "table": {
            "tagName": "table",
            "defaultRole": "table",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "table"
        },
        "tbody": {
            "tagName": "tbody",
            "defaultRole": "rowgroup",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "tbody"
        },
        "template": {
            "tagName": "template",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [],
            "id": "template"
        },
        "textarea": {
            "tagName": "textarea",
            "defaultRole": "textbox",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "id": "textarea"
        },
        "tfoot": {
            "tagName": "tfoot",
            "defaultRole": "rowgroup",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "tfoot"
        },
        "thead": {
            "tagName": "thead",
            "defaultRole": "rowgroup",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "thead"
        },
        "time": {
            "tagName": "time",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "time"
        },
        "title": {
            "tagName": "title",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [],
            "id": "title"
        },
        "td[cell]": {
            "tagName": "td",
            "defaultRole": "cell",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "ownedbyTable": true,
            "id": "td[cell]"
        },
        "td[gridcell]": {
            "tagName": "td",
            "defaultRole": "gridcell",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "ownedbyGrid": true,
            "ownedbyTreegrid": true,
            "id": "td[gridcell]"
        },
        "td": {
            "tagName": "td",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "td"
        },
        "th[cell]": {
            "tagName": "th",
            "defaultRole": "cell",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "ownedbyTable": true,
            "id": "th[cell]"
        },
        "th[gridcell]": {
            "tagName": "th",
            "defaultRole": "gridcell",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "ownedbyGrid": true,
            "ownedbyTreegrid": true,
            "id": "th[gridcell]"
        },
        "th[colheder]": {
            "tagName": "th",
            "defaultRole": "colheader",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "ownedbyTable": true,
            "ownedbyGrid": true,
            "ownedbyTreegrid": true,
            "id": "th[colheder]"
        },
        "th": {
            "tagName": "th",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "th"
        },
        "tr[table]": {
            "tagName": "tr",
            "defaultRole": "row",
            "noRoleAllowed": true,
            "anyRoleAllowed": false,
            "ownedbyTable": true,
            "ownedbyGrid": true,
            "ownedbyTreegrid": true,
            "id": "tr[table]"
        },
        "tr": {
            "tagName": "tr",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "tr"
        },
        "track": {
            "tagName": "track",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [],
            "id": "track"
        },
        "u": {
            "tagName": "u",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "u"
        },
        "ul": {
            "tagName": "ul",
            "defaultRole": "list",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "directory",
                "group",
                "listbox",
                "menu",
                "menubar",
                "none",
                "presentation",
                "radiogroup",
                "tablist",
                "toolbar",
                "tree"
            ],
            "id": "ul"
        },
        "var": {
            "tagName": "var",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "var"
        },
        "video": {
            "tagName": "video",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": false,
            "allowedRoles": [
                "application"
            ],
            "id": "video"
        },
        "wbr": {
            "tagName": "wbr",
            "defaultRole": "generic",
            "noRoleAllowed": false,
            "anyRoleAllowed": true,
            "id": "wbr"
        }
    },

    getElementAriaInfo : function (node) {

        var tagName = node.tagName.toLowerCase();
        var elemInfo, type;

        switch (tagName) {
            case 'a':
                if (node.href) {
                    elemInfo = this.elementInfo['a[href]'];
                } else {
                    elemInfo = this.elementInfo['a'];
                }
                break;

            case 'area':
                if (node.href) {
                    elemInfo = this.elementInfo['area[href]'];
                } else {
                    elemInfo = this.elementInfo['area'];
                }
                break;

            case 'img':
                if (node.hasAttribute('aria-label') ||
                    node.hasAttribute('aria-labelledby')) {
                    elemInfo = this.elementInfo['img[accname]'];
                } else {
                    if (node.hasAttribute('alt')) {
                        if (node.alt.trim().length) {
                            elemInfo = this.elementInfo['img[alt]'];
                        } else {
                            elemInfo = this.elementInfo['img[emptyalt]'];
                        }
                    } else {
                        elemInfo = this.elementInfo['img'];
                    }
                }
                break;

            case 'input':

                type = node.getAttribute('type');

                if (!type) {
                    type = 'text';
                }


                tagName += '[type=' + type + ']';

                if (node.hasAttribute('list')) {
                    tagName += '[list]';
                }

                elemInfo = this.elementInfo[tagName];
                break;

            case 'section':
                if (node.hasAttribute('aria-label') ||
                    node.hasAttribute('aria-labelledby')) {
                    elemInfo = this.elementInfo['section[accname]'];
                } else {
                    elemInfo = this.elementInfo['section'];
                }
                break;

            case 'select':
                if (node.multiple || (node.size > 1)) {
                    elemInfo = this.elementInfo['select[size-or-multiple]'];
                } else {
                    elemInfo = this.elementInfo['select'];
                }
                break;

            case 'figure':

                if (node.querySelector('figcaption')) {
                    elemInfo = this.elementInfo['figure[figcaption]'];
                } else {
                    elemInfo = this.elementInfo['figure'];
                }

                break;

            default:
                elemInfo = this.elementInfo[tagName];

        }

        if (!elemInfo) {
            elemInfo = {
              "tagName": node.tagName,
              "defaultRole": "generic",
              "noRoleAllowed": false,
              "anyRoleAllowed": true
            }
        }

        return elemInfo;
    }
  };
}
/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';


/* ---------------------------------------------------------------- */
/*        Utilities and String Extensions                           */
/* ---------------------------------------------------------------- */

/**
 * @namespace OpenAjax.a11y.util
 */

OpenAjax.a11y =  OpenAjax.a11y || {};
OpenAjax.a11y.util =  OpenAjax.a11y.util || {};

/**
 * @function cleanForUTF8
 *
 * @memberOf OpenAjax.a11y.util
 *
 * @desc Returns an string with only UTF8 characters
 *
 * @param  {String}  str - string to test
 *
 * @return {String}  String with only UTF 8
 */

OpenAjax.a11y.util.cleanForUTF8 = function(str) {

  var nstr = "";
  var str_len = str.length;

  for (var i = 0; i < str_len; i++) {
    var c = str[i];
    if (c >= ' ' && c < '~') nstr += c;
  }

  return nstr;
};


/**
 * @function getFormattedDate
 *
 * @memberOf OpenAjax.a11y.util
 *
 * @desc Returns a fomratted string (YYYY-MM-DD) represeting the current date
 *       with leading zeros
 *
 * @return {String}  Formatted date string
 */

OpenAjax.a11y.util.getFormattedDate = function() {

  function leadingZero(n) {
    var n1 = n.toString();
    if (n < 10) n1 = "0" + n;
    return n1;
  }

  var date = new Date();

  var y = date.getFullYear();
  var m = date.getMonth() + 1;
  var d = date.getDate();
  var hours = date.getHours() + 1;
  var minutes = date.getMinutes() + 1;

  return y + "-" + leadingZero(m) + "-" + leadingZero(d) + ":" + leadingZero(hours)+ ":" + leadingZero(minutes);

};


/**
 * @function getStringUsingURL
 *
 * @memberOf OpenAjax.a11y.util
 *
 * @desc Reads a URL into a string
 *       Used with creating HTML reports
 *
 * @param  {String}  url     - url to file
 */

OpenAjax.a11y.util.initStringUsingURL = function(url) {

  var xmlhttp = new XMLHttpRequest();

//  OpenAjax.a11y.logger.debug( "REQUESTING URL: " + url);

  xmlhttp.open("GET", url, false);
  xmlhttp.send(null);

  var str = xmlhttp.responseText;

//  OpenAjax.a11y.logger.debug( "TEXT: " + str);

  return str;

};



/**
 * @function validLanguageCode
 *
 * @memberOf OpenAjax.a11y.util
 *
 * @desc Identifies if a language code is valid
 *
 * @param  {String}  language code -  INAN language code
 *
 * @return {Boolean}  If a valid language code return true, otherwsie false
 */

OpenAjax.a11y.util.validLanguageCode = function(code) {

  var LANGUAGE_CODES = OpenAjax.a11y.LANGUAGE_CODES;

  code = code.toLowerCase();

  if ((typeof code === 'string') || code.length) {

    var parts = code.split("-");

    if (parts.length > 1) {
      for (var i = 0; i <parts.length; i++) {
        if (LANGUAGE_CODES.subtags.indexOf(parts[i]) < 0) return false;
      }
      return true;
    }
    else {
      if (LANGUAGE_CODES.subtags.indexOf(code) >= 0) return true;
      if (LANGUAGE_CODES.tags.indexOf(code) >= 0) return true;
    }
  }

  return false;

};


/**
 * @function transformElementMarkup
 *
 * @memberOf OpenAjax.a11y.util
 *
 * @desc Converts element markup in strings to capitalized text (default) or adds <code> element
 *
 * @param {String}  str  - String to convert element text
 *
 * @return  String
 */

OpenAjax.a11y.util.transformElementMarkup = function(str) {

  var new_str = "";

  var transform_option = 1; // default is capitalize

  if (OpenAjax.a11y.ELEMENT_FORMATING == "HTML") transform_option = 2; // transform to html
  if (OpenAjax.a11y.ELEMENT_FORMATING == "NONE") transform_option = 3; // just removes @ sign from string

  if (str && str.length) {
    var max = str.length;
    var transform_flag = false;

    for (var i = 0; i < max; i++) {

      var c = str[i];

      if (c == '@') {

        if (transform_option == 2) {
          if (transform_flag)
            new_str += '</code>';
          else
            new_str += '<code>';
        }

        transform_flag = !transform_flag;
        continue;
      }

      if (transform_flag && transform_option == 1)
        new_str += c.toUpperCase();
      else
        new_str += c;
    }
  }
  return new_str;
};

/**
 * @function urlExists
 *
 * @memberOf OpenAjax.a11y.util
 *
 * @desc Determines if a URL exits
 *
 * @param {String} url      - url to test if it exists
 *
 * @return  Number
 */

OpenAjax.a11y.util.urlExists = function (url) {

 if (OpenAjax.a11y.SUPPORTS_URL_TESTING && OpenAjax.a11y.URL_TESTING_ENABLED) {
  try {

   var http = new XMLHttpRequest();
   http.open('HEAD', url, false);
   http.send(null);
   if (http.status!==404) {
//     OpenAjax.a11y.logger.debug( "URL: " + url + " (valid)");
     return OpenAjax.a11y.URL_RESULT.VALID;
   }
   else {
//     OpenAjax.a11y.logger.debug( "URL: " + url + " (INVALID)");
     return OpenAjax.a11y.URL_RESULT.INVALID;
   }
  }
  catch (e) {
   return OpenAjax.a11y.URL_RESULT.ERROR;
  }
 }
 else {
  return OpenAjax.a11y.URL_RESULT.NOT_TESTED;
 }

};

/**
 * @function RGBToHex
 * @memberOf OpenAjax.a11y.util
 *
 * @desc Converts an RGB color to Hex values
 *
 * @param {String} rgb_color - RGB Color
 *
 * @return  String
 */

OpenAjax.a11y.util.RGBToHEX = function( rgb_color ) {

 function stringToHex(d) {
  var hex = Number(d).toString(16);
  if (hex.length == 1) {
   hex = "0" + hex;
  }
  return hex;
 }

 var i;
 var length;

 if (!rgb_color) return "000000";

 var hex = [];
 var color_hex = "000000";
 var components = rgb_color.match(/[\d.]+/g);

 if (components && components.length) {
  length = components.length;

  if (length == 3) {
   // RGB value
   for (i=0; i<3; i++) {
    hex.push(stringToHex(components[i]));
   } // end loop

   color_hex = hex[0] + hex[1] + hex[2];
   // OpenAjax.a11y.logger.debug( rgb_color + " " + color_hex );

  }
  else {

   if (length == 4) {
    // RGBA value
    for (i=0; i<3; i++) {
     hex[i] = stringToHex(Math.round(parseFloat(components[i])*parseFloat(components[3])));
    } // end loop
    color_hex = hex[0] + hex[1] + hex[2];
   }
  }
 }

 return color_hex;
};


/**
 * @function normalizeSpace
 * @memberOf OpenAjax.a11y.util
 *
 * @desc Normalizes spaces in a string
 *
 * @param {String} s - string to be normalized
 *
 * @return  String
 */

OpenAjax.a11y.util.normalizeSpace = function (s) {
  // Replace repeated spaces, newlines and tabs with a single space

  if (typeof s !== 'string') return "";

// **** NOTE *****
// This function was changed to support fae-util based on HTMLUnit, which does not seem to
// handle character entities the same as a browser DOM
// This resulted in special characters being generated triggering false positives in some
/// rules, usually Landmark rules related to content being outside a landmark

//  if (s.replace) return s.replace(/^\s*|\s(?=\s)|\s*$/g, "");

  var len = s.length;
  var s1 = "";
  var last_c = 32;

  for (var i = 0; i < len; i++) {

    var c = s.charCodeAt(i);

    // only include printable characters less than '~' character
    if (c < 32 || c > 126) continue;

    if ((c !== 32) || (last_c !== 32)) {
      s1 += s[i];
      last_c = c;
    }

  }

  // trim off any trailing spaces
  while(s1.length && s1.slice(-1) === ' ') {
    s1 = s1.slice(0, -1);
  }

  return s1;

};

/**
 * @function replaceAll
 * @memberOf OpenAjax.a11y.util
 *
 * @desc Normalizes spaces in a string
 *
 * @param {String}  s       - String to have replacements
 * @param {String}  str1    - String to replace
 * @param {String}  str2    - The replacement string
 *
 * @return  String
 */

OpenAjax.a11y.util.replaceAll = function(s, str1, str2) {

  var len = s.length;
  var pos = s.indexOf(str1);
  var s1  = "";

  while (pos >= 0) {

    s1 += s.slice(0,pos);
    s1 += str2;
    s   = s.slice((pos+str1.length), len);

    pos = s.indexOf(str1);
    len = s.length;

  }

  s1 += s.slice(0, len);

  return s1;

};
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                      AbbreviationsCache                          */
/* ---------------------------------------------------------------- */

/**
 * @constructor AbbreviationsCache
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Constructor for abbreviations cache object which contains a list of
 *    abbreviation items representing the abbreviations defined
 *    in a document. The item also contains a list of all the
 *    dom element objects that share the same abbreviation
 *
 * @param {DOMCache}   dom_cache   - Reference to the DOMCache object
 *
 * @property {DOMCache} dom_cache  - Reference to the DOMCache object
 *
 * @property {Boolean}  up_to_date - Boolean true if the cache has been creating using the current DOMElements, else false
 *                                   NOTE: This is a common property of all caches and is used when selectively build caches
 *                                         based on whether a rule needs the cache
 *
 * @property {String}   sort_property   - Property of abbreviation item that the list is sorted on
 * @property {Boolean}  sort_ascending  - true if list is sorted by ascending values, otherwsie false
 *
 * @property {Array}   abbreviation_items  - List of abbreviation items
 * @property {Number}  length              - Number of abbreviation items in list
 *
 * @property {ResultRuleSummary}  rule_summary_result  - Rule results associated with this cache
 */

OpenAjax.a11y.cache.AbbreviationsCache = function (dom_cache) {

  this.dom_cache  = dom_cache;
  this.up_to_date = false;

  this.abbreviation_items = [];
  this.length = 0;

  this.sort_property  = 'abbreviation_text';
  this.sort_ascending = true;

};

/**
 * @method addAbbreviationItem
 *
 * @memberOf OpenAjax.a11y.cache.AbbreviationsCache
 *
 * @desc Adds a DOM Element object with an abbreviation to the abbreviation item list.
 *       If the abreviation item does not exist the function will create one
 *
 * @param {DOMElement}  dom_element  - dom element to add to a abbreviation list
 */

OpenAjax.a11y.cache.AbbreviationsCache.prototype.addAbbreviationItem = function (dom_element) {

 var abbreviation_item = null;
 var abbreviation_items_len = this.abbreviation_items.length;
 var found = false;
 var node_text = dom_element.getText();

 for (var i=0; i < abbreviation_items_len; i++ ) {
  abbreviation_item = this.abbreviation_items[i];

  if (node_text == abbreviation_item.abbreviation_text) {

    abbreviation_item.dom_elements.push(dom_element);
    abbreviation_item.count = abbreviation_item.dom_elements.length;

    found = true;
    break;
  }
 } // end loop

 if (!found) {
  abbreviation_item = new OpenAjax.a11y.cache.AbbreviationItem(node_text);

  abbreviation_item.dom_elements.push(dom_element);
  abbreviation_item.count = abbreviation_item.dom_elements.length;
  abbreviation_item.cache_id = "abbrev_" + this.length;

  this.abbreviation_items.push(abbreviation_item);
  this.length = this.length + 1;
 }

};

/**
 * @deprecated getAbbreviationItemByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.AbbreviationsCache
 *
 * @desc Returns the abbreviation item with the cache id
 *
 * @param {String}  cache_id  - cache id of the abbreviation item object
 *
 * @return {AbbreviationItem} Returns abbreviation item object if cache id found, otherwise null
 */

OpenAjax.a11y.cache.AbbreviationsCache.prototype.getAbbreviationItemByCacheId = function (cache_id) {
  return this.getItemByCacheId(cache_id);
};

/**
 * @method getItemByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.AbbreviationsCache
 *
 * @desc Returns the abbreviation item with the cache id
 *
 * @param {String}  cache_id  - cache id of the abbreviation item object
 *
 * @return {AbbreviationItem} Returns abbreviation item object if cache id found, otherwise null
 */

OpenAjax.a11y.cache.AbbreviationsCache.prototype.getItemByCacheId = function (cache_id) {

  var i, j;
  var ai, de;
  var dom_elements, dom_elements_len;

  var abbreviation_items     = this.abbreviation_items;
  var abbreviation_items_len = abbreviation_items.length;

  if (cache_id && cache_id.length) {

    for (i = 0; i < abbreviation_items_len; i++) {
      ai = abbreviation_items[i];

      if (ai.cache_id == cache_id) return ai;

      dom_elements     = ai.dom_elements;
      dom_elements_len = dom_elements.length;

      for (j = 0; j < dom_elements_len; j++ ) {
        de = dom_elements[j];
        if (de.cache_id == cache_id) return de;
      } // end loop
    } // end loop
  }

 return null;
};

/**
 * @method emptyCache
 *
 * @memberOf OpenAjax.a11y.cache.AbbreviationsCache
 *
 * @desc Empties all the abbreviation items from the cache
 */

OpenAjax.a11y.cache.AbbreviationsCache.prototype.emptyCache = function () {

 this.abbreviation_items.length = 0;
 this.sort_property = 'abbreviation_text';
 this.sort_ascending = true;
 this.up_to_date = false;

};

/**
 * @method updateCacheItems
 *
 * @memberOf OpenAjax.a11y.cache.AbbreviationsCache
 *
 * @desc Updates the AbbreviationsCache object with information from a DOMElement object
 *    This is used during the creation of the cache and is used by the functions for
 *    either creating the cache all at one time or selectively
 *
 * @param {DOMElement}  dom_element  - DOM Element object to add to the abbreviations cache
 */

OpenAjax.a11y.cache.AbbreviationsCache.prototype.updateCacheItems = function (dom_element) {

 if ((dom_element.tag_name == 'abbr') ||
   (dom_element.tag_name == 'acronym')) {

   this.addAbbreviationItem(dom_element);

 }

};

/**
 * @method traverseDOMElementsForAbbreviations
 *
 * @memberOf OpenAjax.a11y.cache.AbbreviationsCache
 *
 * @desc Traverses the DOMElements to update the abbreviation cache
 */

OpenAjax.a11y.cache.AbbreviationsCache.prototype.traverseDOMElementsForAbbreviations = function (dom_element) {

 if (!dom_element) return;

 if (dom_element.type == Node.ELEMENT_NODE) {

  this.updateCacheItems(dom_element);

  for (var i = 0; i < dom_element.child_dom_elements.length; i++ ) {
   this.traverseDOMElementsForAbbreviations(dom_element.child_dom_elements[i]);
  } // end loop

 }

};

/**
 * @method updateCache
 *
 * @memberOf OpenAjax.a11y.cache.AbbreviationsCache
 *
 * @desc Traverses the DOMElements to update the abbreviation cache
 *    This function is used to update the abbreviation cache
 *    when needed by a rule, it sets the up to date flag when done
 */

OpenAjax.a11y.cache.AbbreviationsCache.prototype.updateCache = function () {
 var i;
 var children = this.dom_cache.element_cache.child_dom_elements;
 var children_len = children.length;

 for (i=0; i < children_len; i++) {
  this.traverseDOMElementsForAbbreviations(children[i]);
 }

 this.up_to_date = true;

};

/**
 * @method sortAbbreviationItems
 *
 * @memberOf OpenAjax.a11y.cache.AbbreviationsCache
 *
 * @desc Sorts abbreviations by abbreviation_text property
 *
 * @param {Boolean}  ascending  - true if sort in ascending order; false in descending order
 *
 * @return {Boolean}  Returns true if list was sorted, false if not
 */

OpenAjax.a11y.cache.AbbreviationsCache.prototype.sortAbbreviationItems = function(ascending) {

  var swapped = false;
  var temp = null;
  var i;

  if( !this.abbreviation_items || (this.abbreviation_items.length === 0)) {
    return false;
  } // endif

  this.sort_ascending = ascending;

  var abbreviation_items_len = this.abbreviation_items.length;

  if( ascending ) {
    do{
      swapped = false;
      for (i = 1; i < abbreviation_items_len; i++ ) {
        if (this.abbreviation_items[i-1].abbreviation_text > this.abbreviation_items[i].abbreviation_text) {
          // swap the values
          temp = this.abbreviation_items[i-1];
          this.abbreviation_items[i-1] = this.abbreviation_items[i];
          this.abbreviation_items[i] = temp;
          swapped = true;
        }
      } // end loop
    } while (swapped);
  }
  else {
    do {
      swapped = false;
      for (i = 1; i < abbreviation_items_len; i++ ) {
        if (this.abbreviation_items[i-1].abbreviation_text < this.abbreviation_items[i].abbreviation_text) {
          // swap the values
          temp = this.abbreviation_items[i-1];
          this.abbreviation_items[i-1] = this.abbreviation_items[i];
          this.abbreviation_items[i] = temp;
          swapped = true;
        }
      } // end loop
    } while (swapped);
  }

  this.sort_property = 'abbreviation_text';

  return true;

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.AbbreviationsCache
 *
 * @desc Returns a text string representation of the abbreviation cache object
 *
 * @return {String} Returns string represention the abbreviations cache object
 */

OpenAjax.a11y.cache.AbbreviationsCache.prototype.toString = function () {

 var str ="\n\nAbbreviation Information\n";

 var list_length = this.abbreviation_items.length;

 for (var i=0; i < list_length; i++ ) {
  str += this.abbreviation_items[i].toString();
 } // end loop

 return str;
};

/* ---------------------------------------------------------------- */
/*                      AbbreviationItem                            */
/* ---------------------------------------------------------------- */

/**
 * @constructor AbbreviationItem
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Constructor for abbreviation item object which contains information
 *       about dom elements that share the same abbreviation
 *
 * @param  {String}  abbreviation  - text of abbreviation
 *
 * @property  {String}  cache_id            - String that uniquely identifies the cache element in the DOMCache
 * @property  {String}  abbreviation_text   - text of abbreviation
 *
 * @property  {Array}   dom_elements  - List of dom elements associated with the abbreviation
 * @property  {Number}  count         - Number of dom elements that share this abbreviation
 */

OpenAjax.a11y.cache.AbbreviationItem = function (abbreviation) {

  this.cach_id = "";

  this.abbreviation_text = abbreviation;

  this.dom_elements = [];
  this.count = 0;

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.AbbreviationItem
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.AbbreviationItem.prototype.getElementResults = function () {
  return this.dom_elements[0].getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.AbbreviationItem
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.AbbreviationItem.prototype.getStyle = function () {

  return this.dom_elements[0].getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.AbbreviationItem
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.AbbreviationItem.prototype.getAttributes = function () {

  return [];

};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.AbbreviationItem
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.AbbreviationItem.prototype.getCacheProperties = function () {

  return [];

};


/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.AbbreviationItem
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.AbbreviationItem.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};

/**

 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.AbbreviationItem
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.AbbreviationItem.prototype.getEvents = function () {

  return [];

};



/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.AbbreviationItem
 *
 * @desc Returns a text string representation of the abbreviation item object
 *
 * @return {String} Returns string represention the abbreviation item object
 */

OpenAjax.a11y.cache.AbbreviationItem.prototype.toString = function () {

 return "Abbreviation: " + this.abbreviation_text;
};



/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                       ColorContrstCache                          */
/* ---------------------------------------------------------------- */

/**
 * @constructor ColorContrastCache
 *
 * @memberOf OpenAjax.a11y.cache
 *
* @desc Constructor for ColorContrastCache object which contains a list of
*    color contrast items representing the color contrast combinations
*    used in a document. The item also contains a list of all the
*    DOM Element nodes that contain that color contrast combination
 *
 * @param {DOMCache}   dom_cache   - Reference to the DOMCache object
 *
 * @property {DOMCache} dom_cache  - Reference to the DOMCache object
 *
 * @property {Boolean}  up_to_date - Boolean true if the cache has been creating using the current DOMElements, else false
 *                                   NOTE: This is a common property of all caches and is used when selectively build caches
 *                                         based on whether a rule needs the cache
 *
 * @property {String}    sort_property   - Property of ColorContrastItem that the list is sorted on
 * @property {Boolean}   sort_ascending  - true if list is sorted by ascending values, otherwsie false
 *
 * @property {Array}    color_contrst_items  - List of color contrast items
 * @property {Number}   length               - Number of color contrast items in list
 *
 * @property {ResultRuleSummary}  rule_summary_result  - Rule results associated with this cache
 */

OpenAjax.a11y.cache.ColorContrastCache = function (dom_cache) {

  this.dom_cache = dom_cache;
  this.color_contrast_items =[];

  this.sort_property = 'color_contrast_ratio';
  this.sort_ascending = false;

  this.up_to_date = false;
  this.length = 0;


};

/**
 * @method addColorContrastItem
 *
 * @memberOf OpenAjax.a11y.cache.ColorContrastCache
 *
 * @desc Adds a DOM text object information to a color contrast item in the color contrast
 *       cache, if it does not match any of the current color contrast items it will create a
 *       new color contrast item.
 *
 * @param {DOMText}  dom_text_node  - dom text_node to add to color contrast list
 */

OpenAjax.a11y.cache.ColorContrastCache.prototype.addColorContrastItem = function (dom_text_node) {

  var i;

  var cci;
  var cs;
  var color_contrast_items_len = this.color_contrast_items.length;
  var found = false;

  for (i = 0; i < color_contrast_items_len; i++) {
    cci = this.color_contrast_items[i];
    cs = dom_text_node.computed_style;

    // OpenAjax.a11y.logger.debug("color compare " + dom_text_node.computed_style.color + " with " + item.color );

    if ( cci &&
         cci.color &&
         (cs.color_hex     == cci.color)         &&
         (cs.is_large_font == cci.is_large_font) &&
         (cs.background_color_hex == cci.background_color) &&
         ((cs.background_image == 'none' && cci.background_image == 'none') ||
          ((cs.background_image    == cci.background_image) &&
           (cs.background_repeat   == cci.background_repeat) &&
           (cs.background_position == cci.background_position)))) {

      cci.dom_text_nodes.push(dom_text_node);
      cci.node_count = cci.dom_text_nodes.length;

      cci.addToCharacterCount(dom_text_node.text_length);

      found = true;
      break;
    }
  }
  // end loop

  if (!found) {
    cs = dom_text_node.computed_style;

    cci = new OpenAjax.a11y.cache.ColorContrastItem(cs.font_family, cs.font_size, cs.font_weight, cs.color_hex, cs.background_color_hex, cs.background_image, cs.background_repeat, cs.background_position, cs.is_large_font, cs.color_contrast_ratio, dom_text_node.character_count);

    cci.dom_text_nodes.push(dom_text_node);
    cci.node_count = cci.dom_text_nodes.length;

    this.color_contrast_items.push(cci);
    this.length = this.length + 1;
    cci.cache_id = "cc_" + this.length;
  }
};

/**
 * @method getColorContrastItemById
 *
 * @memberOf OpenAjax.a11y.cache.ColorContrastCache
 *
 * @desc Returns the color contrast item with the cache id
 *
 * @param {String}  cache_id  - cache id of the color contrast item
 *
 * @return {ColorContrastItem} Returns color contrst item if cache id found, otherwise null
 */

OpenAjax.a11y.cache.ColorContrastCache.prototype.getColorContrastItemById = function (cache_id) {
  this.getItemByCacheId(cache_id);
};

/**
 * @method getItemByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.ColorContrastCache
 *
 * @desc Returns the color contrast item with the cache id
 *
 * @param {String}  cache_id  - cache id of the color contrast item
 *
 * @return {ColorContrastItem} Returns color contrst item if cache id found, otherwise null
 */

OpenAjax.a11y.cache.ColorContrastCache.prototype.getItemByCacheId = function (cache_id) {

  var i, j;
  var cci, dtn;
  var dom_text_nodes, dom_text_nodes_len;

  var color_contrast_items     = this.color_contrast_items;
  var color_contrast_items_len = color_contrast_items.length;

  if (cache_id && cache_id.length) {

    for (i = 0; i < color_contrast_items_len; i++) {

      cci = color_contrast_items[i];

      if (this.color_contrast_items[i].cache_id == cache_id) {
        return this.color_contrast_items[i];
      }

      dom_text_nodes     = cci.dom_text_nodes;
      dom_text_nodes_len = dom_text_nodes.length;

      for (j = 0; j < dom_text_nodes_len; j++ ) {
        dtn = dom_text_nodes[j];
        if (dtn.cache_id == cache_id) return dtn;
      } // end loop

    } // end loop
  }

  return null;
};


/**
 * @method emptyCache
 *
 * @memberOf OpenAjax.a11y.cache.ColorContrastCache
 *
 * @desc Empties all the color contrast items from the cache
 */

OpenAjax.a11y.cache.ColorContrastCache.prototype.emptyCache = function () {

  this.color_contrast_items.length = 0;
  this.up_to_date = false;
};

/**
 * @method updateCacheItems
 *
 * @memberOf OpenAjax.a11y.cache.ColorContrastCache
 *
 * @desc Updates the ColorContrastCache object with information from a DOMElement object
 *    This is used during the creation of the cache and is used by the functions for
 *    either creating the cache all at one time or selectively
 *
 * @param {DOMText}  dom_text  - DOM text  object to add to the color contrast cache
 */

OpenAjax.a11y.cache.ColorContrastCache.prototype.updateCacheItems = function (dom_text_node) {

  var tn;

  if (dom_text_node.parent_element) {
    tn =  dom_text_node.parent_element.tag_name;

    if (tn !== 'script' && tn !== 'object' && tn !== 'style') {
      this.addColorContrastItem(dom_text_node);
    }
  }

};

/**
 * @method traverseDOMElementsForColorContrast
 *
 * @memberOf OpenAjax.a11y.cache.ColorContrastCache
 *
 * @desc Traverses the DOMElements to update the color contrast cache
 */

OpenAjax.a11y.cache.ColorContrastCache.prototype.traverseDOMElementsForColorContrast = function (dom_element) {

  if (! dom_element) return;

  if (dom_element.type == Node.ELEMENT_NODE) {

    for (var i = 0; i < dom_element.child_dom_elements.length; i++) {
      this.traverseDOMElementsForColorContrast(dom_element.child_dom_elements[i]);
    }
    // end loop
  }
  else {
    this.updateCacheItems(dom_element);
  }

};

/**
 * @method updateCache
 *
 * @memberOf OpenAjax.a11y.cache.ColorContrastCache
 *
 * @desc Traverses the DOMElements to update the color contrast cache
 *    This function is used to update the color contrast cache
 *    when needed by a rule, it sets the up to date flag when done
 */

OpenAjax.a11y.cache.ColorContrastCache.prototype.updateCache = function () {
  var i;
  var children = this.dom_cache.element_cache.child_dom_elements;
  var children_len = children.length;

  for (i = 0; i < children_len; i++) {
    this.traverseDOMElementsForColorContrast(children[i]);
  }

  this.up_to_date = true;
};

/**
 * @method sortCCRItems
 *
 * @memberOf OpenAjax.a11y.cache.ColorContrastCache
 *
 * @desc Sorts abbreviations by color contrast cache by color contrast ratio property
 *
 * @param {Boolean}  ascending  - true if sort in ascending order; false in descending order
 *
 * @return {Boolean}  Returns true if list was sorted, false if not
 */

OpenAjax.a11y.cache.ColorContrastCache.prototype.sortCCRItems = function (ascending) {

  var swapped = false;
  var temp = null;
  var i;

  if (! this.color_contrast_items || (this.color_contrast_items.length === 0)) {
    return false;
  }
  // endif

  this.sort_ascending = ascending;

  var color_contrast_items_len = this.color_contrast_items.length;

  if (ascending) {
    do {
      swapped = false;
      for (i = 1; i < color_contrast_items_len; i++) {
        if (parseInt(this.color_contrast_items[i - 1].color_contrast_ratio, 10) > parseInt(this.color_contrast_items[i].color_contrast_ratio, 10)) {
          // swap the values
          temp = this.color_contrast_items[i - 1];
          this.color_contrast_items[i - 1] = this.color_contrast_items[i];
          this.color_contrast_items[i] = temp;
          swapped = true;
        }
      }
      // end loop
    }
    while (swapped);
  } else {
    do {
      swapped = false;
      for (i = 1; i < color_contrast_items_len; i++) {
        if (parseInt(this.color_contrast_items[i - 1].color_contrast_ratio, 10) < parseInt(this.color_contrast_items[i].color_contrast_ratio, 10)) {
          // swap the values
          temp = this.color_contrast_items[i - 1];
          this.color_contrast_items[i - 1] = this.color_contrast_items[i];
          this.color_contrast_items[i] = temp;
          swapped = true;
        }
      }
      // end loop
    }
    while (swapped);
  }

  this.sort_property = 'color_contrast_ratio';

  return true;
};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.ColorContrastCache
 *
 * @desc Returns a text string representation of the color contrast cache object
 *
 * @return {String} Returns string represention the color contrast cache object
 */

OpenAjax.a11y.cache.ColorContrastCache.prototype.toString = function () {

  var i;

  var str = "\n\nColor Contrast List Information\n";

  var list_length = this.color_contrast_items.length;

  for (i = 0; i < list_length; i++) {
    str += this.color_contrast_items[i].toString();
  }
  // end loop

  return str;
};

/* ---------------------------------------------------------------- */
/*                      ColorContrastItem                           */
/* ---------------------------------------------------------------- */

/**
 * @constructor ColorContrastItem
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Constructor for ColorContrastItem object which contains information
 *       about dom elements that share the same abbreviation
 *
 * @param  {String}  font_family           - Value of the CSS font family property
 * @param  {String}  font_size             - Value of the CSS font size property
 * @param  {String}  font_weight           - Value of the CSS font weight property
 * @param  {String}  color                 - Value of the CSS font color property
 * @param  {String}  background_color      - Value of the CSS background color property
 * @param  {String}  background_image      - Value of the CSS background image property
 * @param  {String}  background_repeat     - Value of the CSS background repeat property
 * @param  {String}  background_position   - Value of the CSS background position property
 * @param  {String}  color_contrast_ratio  - Calculated color contrast ratio
 * @param  {String}  count                 - Initial number of characters
 *
 * @property  {String}  cache_id  - String that uniquely identifies the cache element in the DOMCache
 *
 * @property  {String}  font_family           - Value of the CSS font family property
 * @property  {String}  font_size             - Value of the CSS font size property
 * @property  {String}  font_weight           - Value of the CSS font weight property
 * @property  {String}  color                 - Value of the CSS font color property
 * @property  {String}  background_color      - Value of the CSS background color property
 * @property  {String}  background_image      - Value of the CSS background image property
 * @property  {String}  background_repeat     - Value of the CSS background repeat property
 * @property  {String}  background_position   - Value of the CSS background position property
 * @property  {String}  color_contrast_ratio  - Calculated color contrast ratio
 * @property  {String}  character_count       - Number of characters in the document that share these color contrast properties
 *
 * @property  {Boolean}  is_large_font  - true if font is considered large, otherwise false
 *
 * @property  {String}   dom_elements - List of dom elements with the same color contrast item properties
 */

OpenAjax.a11y.cache.ColorContrastItem = function (font_family, font_size, font_weight, color, bg_color, bg_image, bg_repeat, bg_position, is_large_font, ccr, count) {

  this.cache_id = "";

  this.font_family          = font_family;
  this.font_size            = font_size;
  this.font_weight          = font_weight;
  this.color                = color;
  this.background_color     = bg_color;
  this.background_image     = bg_image;
  this.background_repeat    = bg_repeat;
  this.background_position  = bg_position;

  this.color_contrast_ratio = ccr;
  this.character_count = count;

  this.is_large_font = is_large_font;

  this.dom_text_nodes = [];
};

/**
 * @member addToCharacterCount
 *
 * @memberOf OpenAjax.a11y.cache.ColorContrastItem
 *
 * @desc Add to the total number of characters in the document that matches
 *       the properties of this color contrast item
 */

OpenAjax.a11y.cache.ColorContrastItem.prototype.addToCharacterCount = function (length) {

  this.character_count += length;
};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.ColorContrastItem
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.ColorContrastItem.prototype.getElementResults = function () {
  return this.dom_text_nodes[0].getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.ColorContrastItem
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.ColorContrastItem.prototype.getStyle = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = [];

  cache_nls.addPropertyIfDefined(properties, this, 'is_large_font');
  cache_nls.addPropertyIfDefined(properties, this, 'color_contrast_ratio');

  cache_nls.addPropertyIfDefined(properties, this, 'color');
  cache_nls.addPropertyIfDefined(properties, this, 'background_color');
  cache_nls.addPropertyIfDefined(properties, this, 'background_image');
  cache_nls.addPropertyIfDefined(properties, this, 'background_repeat');
  cache_nls.addPropertyIfDefined(properties, this, 'background_position');

  cache_nls.addPropertyIfDefined(properties, this, 'font_family');
  cache_nls.addPropertyIfDefined(properties, this, 'font_size');
  cache_nls.addPropertyIfDefined(properties, this, 'font_weight');

  return properties;

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.ColorContrastItem
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.ColorContrastItem.prototype.getAttributes = function () {

  return [];

};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.ColorContrastItem
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.ColorContrastItem.prototype.getCacheProperties = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = [];

  cache_nls.addPropertyIfDefined(properties, this, 'character_count');

  return properties;

};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.ColorContrastItem
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.ColorContrastItem.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return null;
  }

  return this[property];
};

/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.ColorContrastItem
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.ColorContrastItem.prototype.getEvents = function () {

  return [];

};


/**
 * @member toString
 *
 * @memberOf OpenAjax.a11y.cache.ColorContrastItem
 *
 * @desc Returns a text string representation of the color contrast item object
 *
 * @return {String} Returns string represention the color contrast item object
 */

OpenAjax.a11y.cache.ColorContrastItem.prototype.toString = function () {

  var str = this.dom_text_nodes.length;

  if (this.dom_text_nodes.length != 1) str += " elements";
  else str += " element";

  return str;
};
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                       ControlInfo                                */
/* ---------------------------------------------------------------- */

/**
 * @constructor ControlInfo
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a ControlInfo object for preserving the current control information
 *        when traversing the DOM for form control information
 *
 * @param {ControlInfo} control_info - Current ControlInfo object
 *
 * @property {ControlElement}   control_element  - Parent ControlElement (if any)
 * @property {FieldsetElement}  fieldset_element - Parent FieldsetElement (if any)
 * @property {GroupingElement}  grouping_element - Parent GroupingElement (if any)
 * @property {SelectElement}    select_element   - Parent SelectElement (if any)
 * @property {LabelElement}     label_element    - Parent LabelElement (if any)
 * @property {FormElement}      form_element     - Parent FormElement (if any)
 */

OpenAjax.a11y.cache.ControlInfo = function (control_info) {

 if (control_info) {
  this.control_element  = control_info.control_element;
  this.fieldset_element = control_info.fieldset_element;
  this.grouping_element = control_info.grouping_element;
  this.select_element   = control_info.select_element;
  this.label_element    = control_info.label_element;
  this.form_element     = control_info.form_element;
  this.parent_widget    = control_info.parent_widget;
 }
 else {
  this.control_element  = null;
  this.fieldset_element = null;
  this.grouping_element = null;
  this.select_element   = null;
  this.label_element    = null;
  this.form_element     = null;
  this.parent_widget    = null;
 }
};

/* ---------------------------------------------------------------- */
/*                       ControlsCache                              */
/* ---------------------------------------------------------------- */

/**
 * @constructor ControlsCache
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc ControlsCache is the constructor for lists of control cache element objects and
 *       the root of a tree representation of the control cache element relationships
 *
 * @param {DOMCache}   dom_cache   - Reference to the DOMCache object
 *
 * @property {DOMCache} dom_cache  - Reference to the DOMCache object
 *
 * @property {Boolean}  up_to_date - Boolean true if the cache has been creating using the current DOMElements, else false
 *                                   NOTE: This is a common property of all caches and is used when selectively build caches
 *                                          based on whether a rule needs the cache
 *
 * @property {Array}    child_cache_elements  - Root array of the tree representation of the controls in the document
 *
 * @property {Array}    control_elements      - List of all the InputElement, TextareaElement, ButtonElement, SelectElement,
 * @property {Number}   control_length        - Length of the control_elements array and used in calculating cache IDs
 *
 * @property {Array}    widget_elements      - List of all the widget elements
 * @property {Number}   widget_length        - Length of the widget list array and used in calculating cache IDs
 *
 * @property {Array}    interactive_elements  - List of all interactive elements
 *
 * @property {Array}    elements_with_role            - List of all the widget elements
 * @property {Number}   elements_with_aria_attributes - Length of the widget list array and used in calculating cache IDs
 *
 * @property {Number}   elements_with_events  - List of DOM elements with event handlers
 *
 * @property {Array}    label_elements        - List of all the LabelElement objects in the cache
 * @property {Number}   label_length          - Length of the label_elements array and used in calculating cache IDs
 *
 * @property {Array}    grouping_elements     - List of all the FieldsetElement objects in the cache
 * @property {Number}   grouping_length       - Length of the Fireldset_elements array and used in calculating cache IDs
 *
 * @property {Array}    form_elements         - List of all the FormElement objects in the cache
 * @property {Number}   form_length           - Length of the form_elements array and used in calculating cache IDs
 *
 * @property {String}   sort_property         - The property the list of control element object is currenlty sorted by
 * @property {Boolean}  ascending             - true if the list is ascending order or false if descending
 *
 * @property {ResultRuleSummary}  rule_summary_result  - Rule results associated with this
 */

OpenAjax.a11y.cache.ControlsCache = function (dom_cache) {

  this.dom_cache     = dom_cache;
  this.up_to_date    = false;

  this.child_cache_elements  = [];

  this.interactive_elements = [];

  this.control_elements = [];
  this.control_length  = 0;

  this.widget_elements = [];
  this.widget_length  = 0;

  this.elements_with_role = [];
  this.elements_with_aria_attributes = [];

  this.elements_with_events = [];

  this.label_elements  = [];
  this.label_length   = 0;

  this.grouping_elements = [];
  this.grouping_length = 0;

  this.form_elements   = [];
  this.form_length   = 0;

  this.sort_property  = 'document_order';
  this.ascending    = true;

};

/**
 * @method addChildControl
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Adds a cache control element to the root tree representation of control elements
 *
 * @param  {WidgetElement | ButtonElement | FieldsetElement | FormElement | InputElement | LabelElement| LegendElement | OptgroupElement | OptionElement | SelectElement | TextareaElement } control_element   - Cache control element object to add
 */

OpenAjax.a11y.cache.ControlsCache.prototype.addChildControl = function (control_element) {

  if (control_element) {
    this.child_cache_elements.push(control_element);
  }

};

/**
 * @method addControlElement
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Adds a cache control element to the list of controls array and generates a cache_id for each control
 *
 * @param  {WidgetElement | ButtonElement | FieldsetElement | FormElement | InputElement | LabelElement| LegendElement | OptgroupElement | OptionElement | SelectElement | TextareaElement } control_element   - Cache control element object to add
 *
 * @return  {Number} Returns the number of control objects in the control_elements array
 */

OpenAjax.a11y.cache.ControlsCache.prototype.addControlElement = function (control_element) {

//  OpenAjax.a11y.logger.debug("  Adding control element: " + control_element.dom_element.tag_name + " ("+ control_element.is_widget + ")");

  // item must exist and have the position property
  if (control_element) {
    this.control_length += 1;
    control_element.document_order = this.control_length;
    control_element.cache_id = "control_" + this.control_length;
    this.control_elements.push( control_element );
    return true;
  }
  return this.control_length;
};

/**
 * @method addLabelElement
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Add LabelElement object to list of label elements and generates a cache id for the object
 *
 * @param  {LabelElement} label_element  - LabelElement object to add
 *
 * @return  Nothing
 */

OpenAjax.a11y.cache.ControlsCache.prototype.addLabelElement = function (label_element) {

  if (label_element) {
    this.label_length += 1;
    label_element.document_order = this.label_length;
    label_element.cache_id = "label_" + this.label_length;
    this.label_elements.push( label_element );
  }

};

/**
 * @method addFormElement
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Add a FormElement object to the list of form elements and generates a cache id for the object
 *
 * @param  {FormElement} form_element  - FormElement to add
 *
 * @return {Number} Returns number of FormElement objects in the list of form elements
 */

OpenAjax.a11y.cache.ControlsCache.prototype.addFormElement = function (form_element) {

  // item must exist and have the position property
  if (form_element) {
    this.form_length = this.form_length + 1;
    form_element.document_order = this.form_length;
    form_element.cache_id = "form_" + this.form_length;
    this.form_elements.push( form_element );
  }

  return this.form_length;

};

/**
 * @method addGroupingElement
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Adds a GroupingElement to the list of grouping elements and generates a cache id for the object
 *
 * @param  {GroupingElement}  grouping_element  - GroupingElement to add
 *
 * @return {Number} Returns the number of GroupingElement objects in the list of grouping elements
 */

OpenAjax.a11y.cache.ControlsCache.prototype.addGroupingElement = function (grouping_element) {

  if (grouping_element) {
    this.grouping_length = this.grouping_length + 1;
    grouping_element.document_order = this.grouping_length;
    grouping_element.cache_id = "grouping_" + this.grouping_length;
    this.grouping_elements.push(grouping_element);
  }

  return this.grouping_length;

};


/**
 * @method emptyCache
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Resests the ControlsCache object properties and empties all the lists and arrays
 */

OpenAjax.a11y.cache.ControlsCache.prototype.emptyCache = function () {

  this.up_to_date    = false;

  this.child_cache_elements  = [];

  this.control_elements = [];
  this.control_length  = 0;

  this.label_elements  = [];
  this.label_length   = 0;

  this.grouping_elements = [];
  this.grouping_length = 0;

  this.form_elements   = [];
  this.form_length   = 0;

  this.sort_property  = 'document_order';
  this.ascending    = true;

};

/**
 * @method updateCacheItems
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Updates the ControlsCache object by checking to see if a DOMElement
 *          should be added to the control cache objects
 *
 * @param  {DOMElement}   dom_element   - DOMElement object to check for inclusion in controls cache
 * @param  {ControlInfo}  control_info  - Information about the current control relationships in the DOM
 *
 * @return {ControlInfo}  Returns updated control info object
 */

OpenAjax.a11y.cache.ControlsCache.prototype.updateCacheItems = function (dom_element, control_info) {

  var be;
  var fe;
  var ge;
  var ie;
  var le;
  var me;
  var oe;
  var pe;
  var se;
  var te;
  var we;

//  if (dom_element.tag_name === 'h2')       OpenAjax.a11y.logger.debug("DOM Element (ctl): " + dom_element);
//  if (dom_element.tag_name === 'textarea') OpenAjax.a11y.logger.debug("DOM Element (ctl): " + dom_element);
//  if (dom_element.tag_name === 'button')   OpenAjax.a11y.logger.debug("DOM Element (ctl): " + dom_element);

  var interactive_element_added = false;

  var ci = new OpenAjax.a11y.cache.ControlInfo(control_info);

  var normalizeSpace = OpenAjax.a11y.util.normalizeSpace;

  // check for widget

  if (dom_element.hasEvents()) {
    this.elements_with_events.push(dom_element);

    if (!interactive_element_added) {
      ie = new OpenAjax.a11y.cache.InteractiveElement(dom_element, false, true);

      this.dom_cache.getNameForLink(ie);

      this.interactive_elements.push(ie);
      interactive_element_added = true;
    }

  }

  if (dom_element.has_role) this.elements_with_role.push(dom_element);

  if (dom_element.has_aria_attributes) {

    // OpenAjax.a11y.logger.debug(dom_element + " has aria attributes");
    this.elements_with_aria_attributes.push(dom_element);
  }


  if (dom_element.is_widget) {

    we = new OpenAjax.a11y.cache.WidgetElement(dom_element, control_info);
    this.addLabel(we, "", OpenAjax.a11y.SOURCE.NONE);

    this.addControlElement(we);
    this.widget_elements.push(we);

    if (control_info.control_element) {
      control_info.control_element.addChildControl(we);
    }
    else {
      this.addChildControl(we);
    }

    ci.control_element = we;

    if (!we.has_aria_owns) ci.parent_widget = we;


  }
  else {


    switch (dom_element.tag_name) {

    case 'form':
      fe = new OpenAjax.a11y.cache.FormElement(dom_element, control_info);

      this.addFormElement(fe);

      if (control_info.control_element) {
        control_info.control_element.addChildControl(fe);
      }
      else {
        this.addChildControl(fe);
      }

      ci.control_element = fe;
      ci.form_element = fe;

      break;

    case 'fieldset':
      fe = new OpenAjax.a11y.cache.FieldsetElement(dom_element, control_info);

      this.addGroupingElement(fe);

      if (control_info.control_element) {
        control_info.control_element.addChildControl(fe);
      }
      else {
        this.addChildControl(fe);
      }

      ci.control_element = fe;
      ci.fieldset_element = fe;
      ci.grouping_element = fe;
      break;

    case 'legend':
      le = new OpenAjax.a11y.cache.LegendElement(dom_element, control_info);
      le.computed_label = this.getElementTextContent(le, false);
      le.computed_label_for_comparison = normalizeSpace(le.computed_label.toLowerCase());
      le.computed_label_length = le.computed_label_for_comparison.length;

      this.addLabelElement(le);

      if (control_info.control_element) {
        control_info.control_element.addChildControl(le);
      }
      else {
        this.addChildControl(le);
      }

      if (control_info.fieldset_element) {
        control_info.fieldset_element.legend_element = le;
      }

      ci.control_element = le;
      break;

    case 'label':
      le = new OpenAjax.a11y.cache.LabelElement(dom_element, control_info);
      le.computed_label = this.getElementTextContent(le, false);
      le.computed_label_for_comparison = normalizeSpace(le.computed_label.toLowerCase());
      le.computed_label_length = le.computed_label_for_comparison.length;

      this.addLabelElement(le);

      if (control_info.control_element) {
//        OpenAjax.a11y.logger.debug("[Controls Cache]  Adding child control: " + control_info.control_element);
        control_info.control_element.addChildControl(le);
      }
      else {
        this.addChildControl(le);
      }

      ci.control_element = le;
      ci.label_element  = le;
      break;

    case 'input':
      ie = new OpenAjax.a11y.cache.InputElement(dom_element, control_info);
      this.addLabel(ie, "", OpenAjax.a11y.SOURCE.NONE);

      if (ie.dom_element.node.type.toLowerCase() != "hidden") {

        this.addControlElement(ie);

        if (control_info.control_element) {
          control_info.control_element.addChildControl(ie);
        }
        else {
          this.addChildControl(ie);
        }

        if (control_info.form_element) {
          control_info.form_element.number_of_controls += 1;
          if (ie.type === 'submit') {
            control_info.form_element.submit_button = ie;
          }
          if (ie.type === 'reset') {
            control_info.form_element.reset_button = ie;
          }
        }

        if (control_info.grouping_element) {
          control_info.grouping_element.number_of_controls += 1;
        }
      }


      if (!interactive_element_added) {
        ie = new OpenAjax.a11y.cache.InteractiveElement(dom_element, false, false);

        this.dom_cache.getNameForLink(ie);

        this.interactive_elements.push(ie);
        interactive_element_added = true;
      }

      // For ARIA in HTML rule

      var typeId = dom_element.node.getAttribute('type');
      if (typeId) {
        typeId = '[' + typeId + ']';
      } else {
        typeId = '';
      }

      var listId = dom_element.node.hasAttribute('list');
      if (listId) {
        listId = '[list]';
      } else {
        listId = '';
      }

      break;

    case 'button':
      be = new OpenAjax.a11y.cache.ButtonElement(dom_element, control_info);

      this.addLabel(be, "", OpenAjax.a11y.SOURCE.NONE);

      this.addControlElement(be);

      if (control_info.control_element) {
        control_info.control_element.addChildControl(be);
      }
      else {
        this.addChildControl(be);
      }

      if (control_info.form_element) {
        control_info.form_element.number_of_controls += 1;

        if (be.type === 'submit') {
          control_info.form_element.submit_button = be;
        }
        if (be.type === 'reset') {
          control_info.form_element.reset_button = be;
        }

      }

      if (control_info.grouping_element) {
        control_info.grouping_element.number_of_controls += 1;
      }

      ci.control_element = be;

      if (!interactive_element_added) {
        ie = new OpenAjax.a11y.cache.InteractiveElement(dom_element, false, false);

        this.dom_cache.getNameForLink(ie);

        this.interactive_elements.push(ie);
        interactive_element_added = true;
      }


      break;

    case 'meter':
      me = new OpenAjax.a11y.cache.MeterElement(dom_element, control_info);
      this.addLabel(me, "", OpenAjax.a11y.SOURCE.NONE);

      this.addControlElement(me);

      if (control_info.control_element) {
        control_info.control_element.addChildControl(me);
      }
      else {
        this.addChildControl(me);
      }

      if (control_info.form_element) {
        control_info.form_element.number_of_controls += 1;
      }

      if (control_info.grouping_element) {
        control_info.grouping_element.number_of_controls += 1;
      }

      break;


    case 'progress':
      pe = new OpenAjax.a11y.cache.ProgressElement(dom_element, control_info);
      this.addLabel(pe, "", OpenAjax.a11y.SOURCE.NONE);

      this.addControlElement(pe);

      if (control_info.control_element) {
        control_info.control_element.addChildControl(pe);
      }
      else {
        this.addChildControl(pe);
      }

      if (control_info.form_element) {
        control_info.form_element.number_of_controls += 1;
      }

      if (control_info.grouping_element) {
        control_info.grouping_element.number_of_controls += 1;
      }


      break;

    case 'output':
      oe = new OpenAjax.a11y.cache.OutputElement(dom_element, control_info);
      this.addLabel(oe, "", OpenAjax.a11y.SOURCE.NONE);

      this.addControlElement(oe);

      if (control_info.control_element) {
        control_info.control_element.addChildControl(oe);
      }
      else {
        this.addChildControl(oe);
      }

      if (control_info.form_element) {
        control_info.form_element.number_of_controls += 1;
      }

      if (control_info.grouping_element) {
        control_info.grouping_element.number_of_controls += 1;
      }

      break;


    case 'textarea':
      te = new OpenAjax.a11y.cache.TextareaElement(dom_element, control_info);
      this.addLabel(te, "", OpenAjax.a11y.SOURCE.NONE);

      this.addControlElement(te);

      if (control_info.control_element) {
        control_info.control_element.addChildControl(te);
      }
      else {
        this.addChildControl(te);
      }

      if (control_info.form_element) {
        control_info.form_element.number_of_controls += 1;
      }

      if (control_info.grouping_element) {
        control_info.grouping_element.number_of_controls += 1;
      }

      if (!interactive_element_added) {
        ie = new OpenAjax.a11y.cache.InteractiveElement(dom_element, false, false);

        this.dom_cache.getNameForLink(ie);

        this.interactive_elements.push(ie);
        interactive_element_added = true;
      }

      break;

    case 'select':
      se = new OpenAjax.a11y.cache.SelectElement(dom_element, control_info);
      this.addLabel(se, "", OpenAjax.a11y.SOURCE.NONE);

      this.addControlElement(se);

      if (control_info.control_element) {
        control_info.control_element.addChildControl(se);
      }
      else {
        this.addChildControl(se);
      }

      if (control_info.form_element) {
        control_info.form_element.number_of_controls += 1;
      }

      if (control_info.grouping_element) {
        control_info.grouping_element.number_of_controls += 1;
      }

      ci.select_element = se;
      ci.control_element = se;

      if (!interactive_element_added) {
        ie = new OpenAjax.a11y.cache.InteractiveElement(dom_element, false, false);

        this.dom_cache.getNameForLink(ie);

        this.interactive_elements.push(ie);
        interactive_element_added = true;
      }

      break;

    case 'optgroup':
      oe = new OpenAjax.a11y.cache.OptgroupElement(dom_element, control_info);

      if (dom_element.node.label && dom_element.node.label.length) {
        oe.label = dom_element.node.label;
        oe.label_length = oe.label.length;
      }

      if (control_info.control_element) {
       control_info.control_element.addChildControl(oe);
      }
      else {
        this.addChildControl(oe);
      }

      ci.control_element = oe;
      break;

    case 'option':
      oe = new OpenAjax.a11y.cache.OptionElement(dom_element, control_info);

      oe.computed_label = this.getElementTextContent(oe, false);
      oe.computed_label_for_comparison = normalizeSpace(oe.computed_label.toLowerCase());
      oe.computed_label_length = oe.computed_label_for_comparison.length;


      if (control_info.control_element) {
        control_info.control_element.addChildControl(oe);
      }
      else {
        this.addChildControl(oe);
      }

      if (control_info.select_element) {
        control_info.select_element.addOption(oe);
      }

      break;

    case 'a':
    case 'object':
    case 'embed':
    case 'applet':
    case 'video':
    case 'audio':

      if (!interactive_element_added) {
        ie = new OpenAjax.a11y.cache.InteractiveElement(dom_element, false, false);

        this.dom_cache.getNameForLink(ie);

        this.interactive_elements.push(ie);
        interactive_element_added = true;
      }

      break;

    default:

      // check to see if it is a grouping label
      if(dom_element.is_group) {
        ge = new OpenAjax.a11y.cache.GroupingElement(dom_element, control_info);

        this.addGroupingElement(ge);
        this.addControlElement(ge);

        if (control_info.control_element) {
          control_info.control_element.addChildControl(ge);
        }
        else {
          this.addChildControl(ge);
        }

        ci.control_element = ge;
        ci.grouping_element = ge;

      }

      break;

    } // end switch

    if (dom_element.has_tabindex && (parseInt(dom_element.tab_index,10) > 0)) {
      if (!interactive_element_added) {
        ie = new OpenAjax.a11y.cache.InteractiveElement(dom_element, true, false);

        this.dom_cache.getNameForLink(ie);

        this.interactive_elements.push(ie);
        interactive_element_added = true;
      }
    }

    if (dom_element.has_tabindex &&
        (parseInt(dom_element.tab_index,10) < 0) &&
        ((tag_name === 'a') ||
         (tag_name === 'button') ||
         (tag_name === 'input') ||
         (tag_name === 'textarea') ||
         (tag_name === 'select') ||
         (tag_name === 'option') ||
         (tag_name === 'progress') ||
         (tag_name === 'meter'))) {
      if (!interactive_element_added) {
        ie = new OpenAjax.a11y.cache.InteractiveElement(dom_element, true, false);

        this.dom_cache.getNameForLink(ie);

        this.interactive_elements.push(ie);
        interactive_element_added = true;
      }
    }


    // if we are in a widget there a few HTML elements with implied roles

    if (control_info.parent_widget) {

      var implied_role = null;
      var role = control_info.parent_widget.dom_element.role;
      var tag_name = dom_element.tag_name;

      if (tag_name === 'tr' && (" grid rowgroup treegrid".indexOf(role) > 0)) {
        implied_role = 'row';
      }

      if ((tag_name === 'td' || tag_name === 'th') && (" grid rowgroup treegrid".indexOf(role) > 0)) {

        var scope = dom_element.node.getAttribute('scope');

        if (typeof scope === 'string') {
          scope = scope.toLowerCase();
          if (scope === 'col') implied_role = 'columnheader';
          else if (scope === 'row') implied_role = 'rowheader';
        }
      }

      if ((tag_name === 'thead' || tag_name === 'tfoot' || tag_name === 'tbody') && role === 'grid') {
        implied_role = 'rowgroup';
      }

      if (implied_role && (implied_role.length > 0)) {

//        OpenAjax.a11y.logger.debug("  Adding implied role: " + implied_role);

        dom_element.setImpliedRole(implied_role);

        we = new OpenAjax.a11y.cache.WidgetElement(dom_element, control_info);
        this.addLabel(we, "", OpenAjax.a11y.SOURCE.NONE);

        this.addControlElement(we);
        this.widget_elements.push(we);

        if (control_info.control_element) {
          control_info.control_element.addChildControl(we);
        }
        else {
          this.addChildControl(we);
        }

        ci.control_element = we;
        if (!we.has_aria_owns) ci.parent_widget = we;

      }

    }

  }

  return ci;
};

/**
 * @method traverseDOMElementsForControlElements
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Traverses DOMElement objects in the tree to update the controls cache
 *
 * @param  {DOMElement}  dom_element   - DOMElement object to check for inclusion in controls cache
 * @param  {ControlInfo} control_info  - Current control information object that contains information
 */

OpenAjax.a11y.cache.ControlsCache.prototype.traverseDOMElementsForControlElements = function (dom_element, control_info) {

  var i;
  var ci;

  if (!dom_element) return;

  if (dom_element.type == Node.ELEMENT_NODE) {

    ci = this.updateCacheItems(dom_element, control_info);

    for (i = 0; i < dom_element.child_dom_elements.length; i++ ) {
      this.traverseDOMElementsForFormElements(dom_element.child_dom_elements[i], ci);
    } // end loop

  }
};

/**
 * @method updateCache
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Traverses the DOMElements to update the controls cache
 *       NOTE: This function is only used when the specialized caches
 *       are build as rules need them.  In this condition, if the rules
 *       dependent on the controls cache are disabled, this cache would
 *       not be updated
 */

OpenAjax.a11y.cache.ControlsCache.prototype.updateCache = function () {
 var i;
 var children = this.dom_cache.element_cache.child_dom_elements;
 var children_len = children.length;

 var control_info = new OpenAjax.a11y.cache.ControlInfo(null);

 for (i=0; i < children_len; i++) {
  this.traverseDOMElementsForControlElements(children[i], control_info);
 }

 this.calculateControlLabels();
 this.applyAriaOwns();

 this.up_to_date = true;
};

/**
 * @method getRuleResults
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Returns an array of rule results for the cache items in the controls cache
 *
 * @param  {Number}  filter  - Filter for returning rules with particular type(s) of
 *
 * @return {Array} Returns array of rule results, can be empty
 */

OpenAjax.a11y.cache.ControlsCache.prototype.getRuleResults = function (filter) {

  function traverseCacheItems(cache_item) {

    var flag = false;
    var de = cache_item.dom_element;

    if ((local_filter & RESULT_FILTER.PASS)                  && de.rules_passed.length)        flag = true;
    if (!flag && (local_filter & RESULT_FILTER.VIOLATION)    && de.rules_violations.length)    flag = true;
    if (!flag && (local_filter & RESULT_FILTER.WARNING)      && de.rules_warnings.length)      flag = true;
    if (!flag && (local_filter & RESULT_FILTER.WEBSITE_MANUAL_CHECK) && de.rules_manual_checks.length) flag = true;
    if (!flag && (local_filter & RESULT_FILTER.PAGE_MANUAL_CHECK)    && de.rules_manual_checks.length) flag = true;
    if (!flag && (local_filter & RESULT_FILTER.ELEMENT_MANUAL_CHECK) && de.rules_manual_checks.length) flag = true;
    if (!flag && (local_filter & RESULT_FILTER.NA)       && de.rules_hidden.length)        flag = true;

    if (flag) cache_items.push(cache_item);

    if (cache_item.child_cache_elements) {
      var child_cache_elements     = cache_item.child_cache_elements;
      var child_cache_elements_len = child_cache_elements.length;

      for (var i = 0; i < child_cache_elements_len; i++) {
        var ci = child_cache_elements[i];

        traverseCacheItems(ci);
      }
    }
  }

  var RESULT_FILTER = OpenAjax.a11y.RESULT_FILTER;
  var cache_items = [];

  var local_filter;

  if (!filter)
    local_filter = RESULT_FILTER.ALL;
  else
    local_filter = filter;

  var child_cache_elements     = this.child_cache_elements;
  var child_cache_elements_len = child_cache_elements.length;

  for (var i = 0; i < child_cache_elements_len; i++) {
    var ci = child_cache_elements[i];

    traverseCacheItems(ci);

  }

  return cache_items;

};



/**
 * @method getItemByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Finds the the control cache element object with the matching cache id
 *
 * @param  {String }  cache_id  - Cache id of control cache element object
 *
 * @return {Object} Returns cache control element object if cache id is found, otherwise null
 */

OpenAjax.a11y.cache.ControlsCache.prototype.getItemByCacheId = function (cache_id) {

  var item = null;

  item = this.getControlElementByCacheId(cache_id);
  if (item) return item;

  item = this.getLabelElementByCacheId(cache_id);
  if (item) return item;

  item = this.getFormElementByCacheId(cache_id);
  if (item) return item;

  item = this.getFieldsetElementByCacheId(cache_id);

  return item;

};

/**
 * @method getControlElementByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Finds the the control cache element object with the matching cache id
 *
 * @param  {String }  cache_id  - Cache id of control cache element object
 *
 * @return {Object} Returns cache control element object if cache id is found, otherwise null
 */

OpenAjax.a11y.cache.ControlsCache.prototype.getControlElementByCacheId = function (cache_id) {

  for (var i = 0; i<this.control_elements.length; i++) {
    if (this.control_elements[i].cache_id == cache_id) return this.control_elements[i];
  }

  return null;
};

/**
 * @method getControlElementById
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Finds the the control cache element object with the matching id
 *
 * @param  {String }  id  - id of control cache element object
 *
 * @return {Object} Returns cache control element object if cache id is found, otherwise null
 */

OpenAjax.a11y.cache.ControlsCache.prototype.getControlElementById = function (id) {

  for (var i = 0; i < this.control_elements.length; i++) {
    if (this.control_elements[i].dom_element.id == id) {
      return this.control_elements[i];
    }
  }

  return null;
};

/**
 * @method getWidgetElementById
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Finds the the control cache element object with the matching id
 *
 * @param  {String }  id  - id of widget cache element object
 *
 * @return {Object} Returns cache widget element object if cache id is found, otherwise null
 */

OpenAjax.a11y.cache.ControlsCache.prototype.getWidgetElementById = function (id) {

  for (var i = 0; i < this.widget_elements.length; i++) {
    if (this.widget_elements[i].dom_element.id === id) {
      return this.widget_elements[i];
    }
  }

  return null;
};

/**
 * @method getLabelElementByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Finds the the LabelElement object with the matching cache id
 *
 * @param  {String}  cache_id  - Cache id of LabelElement object
 *
 * @return {LabelElement}  Returns label element with the cache id if found, otherwise null
 */

OpenAjax.a11y.cache.ControlsCache.prototype.getLabelElementByCacheId = function (cache_id) {

  for (var i = 0; i < this.label_elements.length; i++) {
    if (this.label_elements[i].cache_id == cache_id) return this.label_elements[i];
  }

  return null;
};

/**
 * @method getFormElementByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Finds the the FormElement object with the matching cache id
 *
 * @param  {String}  cache_id  - Cache id of FormElement object
 *
 * @return {FormElement}  Returns form element with the cache id if found, otherwise null
 */

OpenAjax.a11y.cache.ControlsCache.prototype.getFormElementByCacheId = function (cache_id) {

 var i;

 for (i=0; i<this.form_elements.length; i++) {
  if (this.form_elements[i].cache_id == cache_id) {
   return this.form_elements[i];
  }
 }

 return null;
};

/**
 * @method getFieldsetElementByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Finds the the FieldsetElement object with the matching cache id
 *
 * @param  {String}  cache_id  - Cache id of FieldsetElement object
 *
 * @return {FieldsetElement}  Returns fieldset element with the cache id if found, otherwise null
 */

OpenAjax.a11y.cache.ControlsCache.prototype.getFieldsetElementByCacheId = function (cache_id) {

 var i;

 for (i=0; i<this.grouping_elements.length; i++) {
  if (this.grouping_elements[i].cache_id == cache_id) {
   return this.grouping_elements[i];
  }
 }

 return null;
};

/**
 * @method getElementTextContent
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Traverses the cache to get the text content associated with the label, this will include the
 *       values of form controls in the label references
 *
 * @param  {LabelElement}  label_element           - LabelElement object to calculate the text content
 * @param  {Boolean}       include_control_values  - True if the values of form controls should be included in
 *                                                   accessible name calculation
 *
 * @return {String}  Returns the text content of a LabelElement
 */

OpenAjax.a11y.cache.ControlsCache.prototype.getElementTextContent = function (label_element, include_control_values) {

 var strings = [];

 function getText(dom_element) {
  var i;

  // If text node get the text and return
  if( dom_element.type == Node.TEXT_NODE ) {
   var text = dom_element.text;
   strings.push( text );
  } else {
   // if an element for through all the children elements looking for text
   if( dom_element.type == Node.ELEMENT_NODE ) {

     switch (dom_element.tag_name) {

     case 'img':
     case 'area':
       if (( typeof dom_element.alt === 'string') &&
           dom_element.alt.length) strings.push(dom_element.alt);
       break;

     case 'input':
     case 'output':
       if (include_control_values && dom_element.node.type == 'text') strings.push(dom_element.node.value);
       break;

     case 'select':
     // *** need to add some code here to get
       break;

     case 'textarea':
     // *** need to add some code here to get
       break;

     default:
       break;

    } // end switch

    for (i = 0; i < dom_element.child_dom_elements.length; i++ ) {
     getText( dom_element.child_dom_elements[i]);
    }

   }
  }
 } // end function getText

 getText(label_element.dom_element);

 return OpenAjax.a11y.util.normalizeSpace(strings.join(""));

};

/**
 * @method calculateLabelsUsingARIA
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Iterates the array for control cache elements and calculates the accessible name for
 *         any control elements if there is ARIA markup
 */

OpenAjax.a11y.cache.ControlsCache.prototype.calculateLabelsUsingARIA = function () {

  var control_elements     = this.control_elements;
  var control_elements_len = control_elements.length;

  // first check if an label by reference

  for (var i = 0; i < control_elements_len; i++) {

    var ce = control_elements[i];
    var de = ce.dom_element;

    if ( (de.aria_labelledby && de.aria_labelledby.length) ||
         (de.aria_label && de.aria_label.length) ||
         (de.role_info)) {

      this.dom_cache.getNameFromARIALabel(ce);

      // If title attribute is the result clear label for use of other labeling techniques
      if (ce.computed_label_source == OpenAjax.a11y.SOURCE.TITLE_ATTRIBUTE && !ce.role_info) {
        ce.computed_label = "";
        ce.computed_label_for_comparison = "";
        ce.computed_label_length = 0;
        this.addLabel(ce, "", OpenAjax.a11y.SOURCE.NONE);
//        OpenAjax.a11y.logger.debug("   LABEL 3: " + ce.computed_label);
      }
    }
  }
};


/**
 * @method getGroupingLabel
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Returns legend content for computed label if control is contained in a fieldset/legend
 *
 * @param {Object}  control  -  Control Object
 */

OpenAjax.a11y.cache.ControlsCache.prototype.getGroupingLabel = function (control) {

   var grouping_element = control.grouping_element;
   var label = "";

   // Add fieldset/legend information if defined
   while (grouping_element) {

     if (grouping_element.computed_label) {
       label +=  " " + grouping_element.computed_label;
     }
     else {
       if (grouping_element &&
           grouping_element.legend_element&&
           grouping_element.legend_element.computed_label) {
         label +=  " " + grouping_element.legend_element.computed_label;
       }
     }
     grouping_element = grouping_element.grouping_element;
   }

   return label;

};

/**
 * @method addLabel
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Adds legend content to computed label if control is contained in a fieldset/legend
 *
 * @param {Object}  control -  Control Object
 * @param {String}  label   -  label text
 * @param {Number}  source  -  label source
 */

OpenAjax.a11y.cache.ControlsCache.prototype.addLabel = function (control, label, source) {

  var SOURCE = OpenAjax.a11y.SOURCE;

  if (source === SOURCE.NONE) {
    control.computed_label  = "";
    if (control.dom_element.role_info) control.accessible_name = "";
  } else {
    if (!control.labels) control.labels = [];
    control.labels.push(label);

    control.computed_label = "";

    for (var i = 0; i < control.labels.length; i++) {
      control.computed_label += control.labels[i];
    }

    if ((source != SOURCE.ARIA_LABELLEDBY) &&
        (source != SOURCE.ARIA_LABEL)) {
      control.computed_label += this.getGroupingLabel(control);
    }
  }

  control.computed_label_source         = source;
  control.computed_label_for_comparison = OpenAjax.a11y.util.normalizeSpace(control.computed_label.toLowerCase());
  control.computed_label_length         = control.computed_label_for_comparison.length;

};


/**
 * @method calculateLabelsByReference
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Iterates the list of label elements and calculates the accessible label for
 *       any control elements that are referenced by label elements with for attribute
 */

OpenAjax.a11y.cache.ControlsCache.prototype.calculateLabelsByReference = function () {

  var SOURCE = OpenAjax.a11y.SOURCE;

  var label_elements      = this.label_elements;
  var label_elements_len = label_elements.length;

  // first check if an label by reference

  for (var i = 0; i < label_elements_len; i++) {

    var le = label_elements[i];

//    OpenAjax.a11y.logger.debug("LABEL: " + le + " (" + le.for_id + ")");

    var id;
    if (le.for_id) {
      id = le.for_id;
    }
    else {
      id = null;
    }

    if (id && id.length && !le.hidden_label) {

      var ce = this.getControlElementById(id);

      if (ce) {

        // check to see if label defined (i.e. an ARIA technique)
        le.unused_label = false;

        if ((ce.computed_label_source !== SOURCE.ARIA_LABELLEDBY) &&
            (ce.computed_label_source !== SOURCE.ARIA_LABEL)) {
          this.addLabel(ce, le.computed_label, OpenAjax.a11y.SOURCE.LABEL_REFERENCE);
          le.control_element = ce;
        }
        else {
          le.duplicate_label = true;
        }
      }
      else {
        le.unused_label = true;
      }

    }
  }
};

/**
 * @method calculateLabelsByEncapsulation
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Iterates the list of label elements and calculates the accessible label for
 *       any control elements that are encapsulated by a label element
 */

OpenAjax.a11y.cache.ControlsCache.prototype.calculateLabelsByEncapsulation = function () {

  var control_elements = this.control_elements;
  var control_elements_len = control_elements.length;

  for (var i = 0; i < control_elements_len; i++) {

    var ce = control_elements[i];

    switch (ce.control_type) {

    case OpenAjax.a11y.CONTROL_TYPE.BUTTON_ELEMENT:
      if (ce.computed_label_for_comparison.length === 0) {
        this.addLabel(ce, this.getElementTextContent(ce, false), OpenAjax.a11y.SOURCE.TEXT_CONTENT);
      }
      break;

    default:

      // first check if an label exists

      if (ce.computed_label_for_comparison.length === 0 && ce.label_element) {
        this.addLabel(ce, ce.label_element.computed_label, OpenAjax.a11y.SOURCE.LABEL_ENCAPSULATION);
        ce.label_element.unused_label = false;
        ce.label_element.control_element = ce;
      }
      break;
    } // end switch
  } // end loop
};

/**
 * @method calculateLabelsByOther
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Iterates the list of control elements and calculates the
 *       accessible label for any control elements that do NOT have
 *       a computed label, but has a VALUE, ALT or TITLE attribute value
 */

OpenAjax.a11y.cache.ControlsCache.prototype.calculateLabelsByOther = function () {

  var CONTROL_TYPE = OpenAjax.a11y.CONTROL_TYPE;

  var control_elements     = this.control_elements;
  var control_elements_len = control_elements.length;

  // first check if an label exits

  for (var i = 0; i < control_elements_len; i++) {

    var ce = control_elements[i];

    if (ce.computed_label_for_comparison.length === 0) {
      var de = ce.dom_element;

      switch (ce.control_type) {

      case CONTROL_TYPE.BUTTON_INPUT:

        if ((ce.computed_label_for_comparison.length === 0) && ce.value && ce.value.length) {
          this.addLabel(ce, ce.value, OpenAjax.a11y.SOURCE.VALUE_ATTRIBUTE);
        }
        else {
          this.addLabel(ce, "", OpenAjax.a11y.SOURCE.NONE);
        }
        break;

      case CONTROL_TYPE.IMAGE:

        if (de.alt) {
          this.addLabel(ce, de.alt, OpenAjax.a11y.SOURCE.ALT_ATTRIBUTE);
        }
        else {
          if (de.title && de.title.length) {
            this.addLabel(ce, de.title, OpenAjax.a11y.SOURCE.TITLE_ATTRIBUTE);
          }
          else {
            this.addLabel(ce, "", OpenAjax.a11y.SOURCE.NONE);
          }
        }
        break;

      case CONTROL_TYPE.SUBMIT:

        if (ce.value && ce.value.length) {
          this.addLabel(ce, ce.value, OpenAjax.a11y.SOURCE.VALUE_ATTRIBUTE);
        }
        else {
          this.addLabel(ce, "SUBMIT", OpenAjax.a11y.SOURCE.BUTTON_TYPE);
        }
        break;

      case CONTROL_TYPE.RESET:

        if (ce.value && ce.value.length) {
          this.addLabel(ce, ce.value, OpenAjax.a11y.SOURCE.VALUE_ATTRIBUTE);
        }
        else {
          this.addLabel(ce, "RESET", OpenAjax.a11y.SOURCE.BUTTON_TYPE);
        }
        break;

      default:

        if (de.title &&
            de.title.length) {
          // first check if an label exists

          this.addLabel(ce, ce.dom_element.title, OpenAjax.a11y.SOURCE.TITLE_ATTRIBUTE);
        }

        break;
      } // end switch
    }
  }
};

/**
 * @method calculateControlLabels
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Calculates labels for all form controls, based on the order of label
 *       calculation techniques used by browsers to generate accessible names
 *       for accessibility APIs used by assistive technologies
 */

OpenAjax.a11y.cache.ControlsCache.prototype.calculateControlLabels = function () {

  // These functions are called in the order of overrides
  // Once a control has a label it is ignored by subsequent function calls
  this.calculateLabelsUsingARIA();
  this.calculateLabelsByReference();
  this.calculateLabelsByEncapsulation();
  this.calculateLabelsByOther();
};

/**
 * @method applyAriaOwns
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Applies parent/child widget relationships based on the aria-owns property
 *       if aria-owns property is defined for any widgets
 */

OpenAjax.a11y.cache.ControlsCache.prototype.applyAriaOwns = function () {

  var widgets = this.widget_elements;
  var widgets_len = widgets.length;

  for (var i = 0; i < widgets_len; i++) {

    var widget = widgets[i];

    if (widget.has_aria_owns) {

      var ids = widget.getOwnedIds();
      var ids_len = ids.length;

      for (var j = 0; j < ids_len; j++) {

         var id = ids[j];

         var de = this.dom_cache.element_cache.getDOMElementById(id);

         if (de) {
           de.addOwnedBy(widget);
         }
      }
    }

  }

};


/**
 * @method removeFromChildCacheElements
 *
 * @memberOf OpenAjax.a11y.cache.ControlsCache
 *
 * @desc Removes a control from the tree view of form controls and widgets
 */

OpenAjax.a11y.cache.ControlsCache.prototype.removeFromChildCacheElements = function (item) {

  function removeItem(list) {

    for (var i = 0; i < list.length; i++ ) {

      if (list[i] === item) {
        list = list.splice(i, 1);
        return true;
      }

      if (list.child_cach_elements && list.child_cach_elements.lengh) {
         if (removeItem(item)) return true;
      }
    }
    return false;
  }

  removeItem(this.child_cache_elements);

};


/* ---------------------------------------------------------------- */
/*                       FormElement                                */
/* ---------------------------------------------------------------- */

/**
 * @constructor FormElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a FormElement object used to hold information about form elements
 *
 * @param  {DOMelement}   dom_element   - dom_element object references DOMElement of the form element
 *
 * @property  {DOMElement}  dom_element           - DOMElement associated with the form element
 * @property  {String}      cache_id              - String that uniquely identifies the cache element in the DOMCache
 * @property  {Number}      document_order        - Ordinal position of the form element in the document in relationship to other form elements
 *
 * @property  {Array}       child_cache_elements  - Array of child cache control elements as part of cache control tree
 * @property  {Number}      control_type          - Constant indicating the type of cache control object
 *
 * @property  {Boolean}     needs_label    - True if the control needs a label element or aria technique, otherwise false
 * @property  {Boolean}     has_validity   - True if the control supports validation, otherwise false
 * @property  {Boolean}     has_pattern    - True if the pattern attribute is defined, otherwise false
 * @property  {Boolean}     is_valid       - True if the pattern is valid, otherwise false
 *
 * @property  {Number}      number_of_controls    - Number of controls in form
 *
 * @property  {String}  action  - The value of the action attribute of the form control
 * @property  {String}  method  - The value of the method attribute of the form control
 * @property  {String}  name_attribute  - The value of the name attribute of the form control
 */

OpenAjax.a11y.cache.FormElement = function (dom_element) {

  this.dom_element  = dom_element;
  this.child_cache_elements = [];
  this.cache_id     = "";
  this.document_order = 0;

  this.needs_label  = false;
  this.has_validity = false;
  this.has_pattern  = false;
  this.is_valid     = true;
  this.submit_button = null;
  this.reset_button  = null;


  this.control_type = OpenAjax.a11y.CONTROL_TYPE.FORM;
  this.number_of_controls = 0;

  this.action = dom_element.node.action;
  this.method = dom_element.node.method;

  this.name_attribute   = dom_element.node.name;

};

/**
 * @method addChildControl
 *
 * @memberOf OpenAjax.a11y.cache.FormElement
 *
 * @desc Adds a cache control element to the tree representation of control elements
 *
 * @param  {WidgetElement | ButtonElement | FieldsetElement | FormElement | InputElement | LabelElement| LegendElement | OptgroupElement | OptionElement | SelectElement | TextareaElement } control_element   - Cache control element object to add
 */

OpenAjax.a11y.cache.FormElement.prototype.addChildControl = function (child_control) {

  if (child_control) {
   this.child_cache_elements.push(child_control);



  }
};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.FormElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.FormElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.FormElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style items
 */

OpenAjax.a11y.cache.FormElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};


/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.FormElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.FormElement.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.FormElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @return {Array} Returns a array of cache properties
 */

OpenAjax.a11y.cache.FormElement.prototype.getCacheProperties = function () {

  var properties = this.dom_element.getCacheProperties();

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.FormElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.FormElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};


/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.FormElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event information
 */

OpenAjax.a11y.cache.FormElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};


/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.FormElement
 *
 * @desc Returns a text string representation of the FormElement
 *
 * @return {String} Returns string represention the FormElement object
 */

OpenAjax.a11y.cache.FormElement.prototype.toString = function () {
  var s = "form(";

  if (this.number_of_controls === 1) s += "1 control)";
  else s += this.number_of_controls + " controls)";

  return s;
};

/* ---------------------------------------------------------------- */
/*                       FieldsetElement                            */
/* ---------------------------------------------------------------- */

/**
 * @constructor FieldsetElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a FieldsetElement object used to hold information about fieldset elements
 *
 * @param  {DOMelement}   dom_element   - The dom element object representing the fieldset element
 * @param  {ControlInfo}  control_info  - Information about parent controls
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the fieldset element
 * @property  {String}      cache_id        - String that uniquely identifies the cache element object in the cache
 * @property  {Number}      document_order  - Ordinal position of the fieldset element in the document in relationship to other fieldset elements
 *
 * @property  {Array}       child_cache_elements  - Array of child cache control elements as part of cache control tree
 * @property  {Number}      control_type          - Constant indicating the type of cache control object
 *
 * @property  {Boolean}     needs_label    - True if the control needs a label element or aria technique, otherwise false
 * @property  {Boolean}     has_validity   - True if the control supports validation, otherwise false
 * @property  {Boolean}     has_pattern    - True if the pattern attribute is defined, otherwise false
 *
 * @property  {Number}      number_of_controls    - Number of controls in form
 *
 * @property  {FieldsetElement}  fieldset_element  - Reference to any fieldset elements this fieldset is nested in
 * @property  {LegendElement}    legend_element    - Reference to the legend element contained in the fieldset
 * @property  {Number}           legend_count      - Number of legend elements contained in the fieldset
 */

OpenAjax.a11y.cache.FieldsetElement = function (dom_element, control_info) {

  this.dom_element    = dom_element;
  this.cache_id       = "";
  this.document_order = 0;

  this.needs_label = false;
  this.has_validity = false;
  this.has_pattern = false;

  this.child_cache_elements = [];
  this.control_type = OpenAjax.a11y.CONTROL_TYPE.FIELDSET;
  this.number_of_controls = 0;

  this.grouping_element = control_info.grouping_element;

  this.legend_element = null;

  this.legend_count = 0;

};

/**
 * @method addChildControl
 *
 * @memberOf OpenAjax.a11y.cache.FieldsetElement
 *
 * @desc Adds a cache control element to the tree representation of control elements
 *
 * @param  {WidgetElement | ButtonElement | FieldsetElement | FormElement | InputElement | LabelElement| LegendElement | OptgroupElement | OptionElement | SelectElement | TextareaElement } control_element   - Cache control element object to add
 */

OpenAjax.a11y.cache.FieldsetElement.prototype.addChildControl = function (child_control) {

  if (child_control) {
    this.child_cache_elements.push(child_control);
  }

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.FieldsetElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.FieldsetElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.FieldsetElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.FieldsetElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.FieldsetElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.FieldsetElement.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

//  cache_nls.addPropertyIfUndefined(attributes, this, 'tag_name');

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.FieldsetElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.FieldsetElement.prototype.getCacheProperties = function (unsorted) {

  var properties = this.dom_element.getCacheProperties(unsorted);

//  cache_nls.addPropertyIfDefined(properties, this, 'tag_name');

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.FieldsetElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.FieldsetElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};


/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.FieldsetElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.FieldsetElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.FieldsetElement
 *
 * @desc Returns a text string representation of the fieldset element
 *
 * @return {String} Returns string represention the FieldsetElement object
 */

OpenAjax.a11y.cache.FieldsetElement.prototype.toString = function () {

 var s = "fieldset: ";

 if (this.legend_element && this.legend_element.computed_label.length) s += this.legend_element.computed_label;
 else s += 'no legend';

 return s;

};

/* ---------------------------------------------------------------- */
/*                       GroupingElement                            */
/* ---------------------------------------------------------------- */

/**
 * @constructor GroupingElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a GroupingElement object used to hold information about fieldset elements
 *
 * @param  {DOMelement}   dom_element   - The dom element object representing the fieldset element
 * @param  {ControlInfo}  control_info  - Information about parent controls
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the fieldset element
 * @property  {String}      cache_id        - String that uniquely identifies the cache element object in the cache
 * @property  {Number}      document_order  - Ordinal position of the fieldset element in the document in relationship to other fieldset elements
 *
 * @property  {Array}       child_cache_elements  - Array of child cache control elements as part of cache control tree
 * @property  {Number}      control_type          - Constant indicating the type of cache control object
 *
 * @property  {Boolean}     needs_label    - True if the control needs a label element or aria technique, otherwise false
 *
 * @property  {Number}      number_of_controls    - Number of controls in form
 *
 * @property  {GroupingElement}  fieldset_element  - Reference to any fieldset elements this fieldset is nested in
 */

OpenAjax.a11y.cache.GroupingElement = function (dom_element, control_info) {

  this.dom_element    = dom_element;
  this.cache_id       = "";
  this.document_order = 0;

  this.needs_label = false;
  this.has_validity = false;
  this.has_pattern = false;

  this.child_cache_elements = [];
  this.control_type = OpenAjax.a11y.CONTROL_TYPE.GROUPING;
  this.number_of_controls = 0;

  this.grouping_element = control_info.grouping_element;

  this.computed_label = "";
  this.computed_label_length = 0;
  this.computed_label_for_comparison = "";

};

/**
 * @method addChildControl
 *
 * @memberOf OpenAjax.a11y.cache.GroupingElement
 *
 * @desc Adds a cache control element to the tree representation of control elements
 *
 * @param  {WidgetElement | ButtonElement | FieldsetElement | FormElement | InputElement | LabelElement| LegendElement | OptgroupElement | OptionElement | SelectElement | TextareaElement } control_element   - Cache control element object to add
 */

OpenAjax.a11y.cache.GroupingElement.prototype.addChildControl = function (child_control) {

  if (child_control) {
    this.child_cache_elements.push(child_control);
  }

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.FieldsetElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.GroupingElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.FieldsetElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.GroupingElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.FieldsetElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.GroupingElement.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.FieldsetElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.GroupingElement.prototype.getCacheProperties = function (unsorted) {

  var properties = this.dom_element.getCacheProperties(unsorted);

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.FieldsetElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.GroupingElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};


/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.FieldsetElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.GroupingElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.FieldsetElement
 *
 * @desc Returns a text string representation of the grouping element
 *
 * @return {String} Returns string represention the GroupingElement object
 */

OpenAjax.a11y.cache.GroupingElement.prototype.toString = function () {

  var de = this.dom_element;
  var s  = de.tag_name;

  if (de.has_role) s += '[role=' + de.role + ']';

  if (this.computed_label) s += ': ' + this.computed_label;

  return s;

};

/* ---------------------------------------------------------------- */
/*                       LegendElement                              */
/* ---------------------------------------------------------------- */

/**
 * @constructor LegendElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a LegendElement object used to hold information about legend elements
 *
 * @param  {DOMelement}   dom_element   - The dom element object representing the legend element
 * @param  {ControlInfo}  control_info  - Information about the parent controls
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the legend element
 * @property  {String}      cache_id        - String that uniquely identifies the cache element object in the cache
 * @property  {Number}      document_order  - Ordinal position of the legend element in the document in relationship to other legend elements
 *
 * @property  {Array}       child_cache_elements  - Array of child cache control elements as part of cache control tree
 * @property  {Number}      control_type          - Constant indicating the type of cache control object
 *
 * @property  {Boolean}     needs_label    - True if the control needs a label element or aria technique, otherwise false
 * @property  {Boolean}     has_validity   - True if the control supports validation, otherwise false
 * @property  {Boolean}     has_pattern    - True if the pattern attribute is defined, otherwise false
 *
 * @property  {FieldsetElement}  fieldset_element     - Reference to any fieldset elements this legend is nested in
 * @property  {String}           computed_label                - Text content of the legend element
 * @property  {String}           computed_label_for_comparison - Label for comparison (lowercase, space normalization and trimmed)
 */

OpenAjax.a11y.cache.LegendElement = function (dom_element, control_info) {

  this.dom_element  = dom_element;
  this.cache_id     = "";
  this.document_order = 0;

  this.needs_label = false;
  this.has_validity = false;
  this.has_pattern = false;

  this.child_cache_elements = [];
  this.control_type = OpenAjax.a11y.CONTROL_TYPE.LEGEND;

  this.grouping_element = control_info.grouping_element;

  this.labels = [];
  this.computed_label = "";
  this.computed_label_length = 0;
  this.computed_label_for_comparison = "";

  if (control_info.grouping_element) {
    control_info.grouping_element.legend_count++;
  }

};

/**
 * @method addChildControl
 *
 * @memberOf OpenAjax.a11y.cache.LegendElement
 *
 * @desc Adds a cache control element to the tree representation of control elements
 *
 * @param  {WidgetElement | ButtonElement | FieldsetElement | FormElement | InputElement | LabelElement| LegendElement | OptgroupElement | OptionElement | SelectElement | TextareaElement } control_element   - Cache control element object to add
 */

OpenAjax.a11y.cache.LegendElement.prototype.addChildControl = function (child_control) {

 if (child_control) {
  this.child_cache_elements.push(child_control);
 }

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.LegendElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.LegendElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.LegendElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.LegendElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.LegendElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.LegendElement.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.LegendElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.LegendElement.prototype.getCacheProperties = function (unsorted) {

  var properties = this.dom_element.getCacheProperties(unsorted);

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.LegendElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.LegendElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};



/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.LegendElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.LegendElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};
/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.LegendElement
 *
 * @desc Returns a text string representation of the legend element
 *
 * @return {String} Returns string represention the LegendElement object
 */

OpenAjax.a11y.cache.LegendElement.prototype.toString = function () {
 if (this.computed_label.length)
   return "legend: " + this.computed_label;
 else
   return "legend: empty";

};

/* ---------------------------------------------------------------- */
/*                       LabelElement                               */
/* ---------------------------------------------------------------- */

/**
 * @constructor LabelElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a LabelElement object used to hold information about label elements
 *
 * @param  {DOMelement}   dom_element   - The dom element object representing the label element
 * @param  {ControlInfo}  control_info  - Information about the parent controls
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the label element
 * @property  {String}      cache_id        - String that uniquely identifies the cache element object in the cache
 * @property  {Number}      document_order  - Ordinal position of the label element in the document in relationship to other label elements
 *
 * @property  {Array}       child_cache_elements  - Array of child cache control elements as part of cache control tree
 * @property  {Number}      control_type          - Constant indicating the type of cache control object
 *
 * @property  {Boolean}     needs_label    - True if the control needs a label element or aria technique, otherwise false
 * @property  {Boolean}     has_validity   - True if the control supports validation, otherwise false
 * @property  {Boolean}     has_pattern    - True if the pattern attribute is defined, otherwise false
 *
 * @property  {String}      computed_label                 - Text content of the label element
 * @property  {Number}      computed_label_len             - Length of the computed label
 * @property  {String}      computed_label_for_comparison  - Label for comparison (lowercase, space normalization and trimmed)
 *
 * @property  {Boolean}     unused_label                   - Boolean indicting where the label references a form control
 * @property  {Object}      control_element    - Reference to the control that the label elements is associated with
 *
 * @property  {FieldsetElement}  fieldset_element     - Reference to any fieldset elements this label is nested in
 */

OpenAjax.a11y.cache.LabelElement = function (dom_element, control_info) {

  this.dom_element    = dom_element;
  this.cache_id       = "";
  this.document_order = 0;

  this.needs_label = false;
  this.has_validity = false;
  this.has_pattern = false;

  this.child_cache_elements = [];

  this.control_type = OpenAjax.a11y.CONTROL_TYPE.LABEL;

  this.labels = [];
  this.computed_label = "";
  this.computed_label_length = 0;
  this.computed_label_for_comparison = "";
  this.computed_label_source = OpenAjax.a11y.SOURCE.TEXT_CONTENT;

  this.unused_label    =  true;
  this.duplicate_label =  false;
  this.hidden_label = (dom_element.computed_style.is_visible_to_at === OpenAjax.a11y.VISIBILITY.HIDDEN);
  this.control_element =  null;

  this.grouping_element = control_info.grouping_element;

  this.for_id = dom_element.node.getAttribute('for');

};

/**
 * @method addChildControl
 *
 * @memberOf OpenAjax.a11y.cache.LabelElement
 *
 * @desc Adds a cache control element to the tree representation of control elements
 *
 * @param  {WidgetElement | ButtonElement | FieldsetElement | FormElement | InputElement | LabelElement| LegendElement | OptgroupElement | OptionElement | SelectElement | TextareaElement } control_element   - Cache control element object to add
 */

OpenAjax.a11y.cache.LabelElement.prototype.addChildControl = function (child_control) {

 if (child_control) {
  this.child_cache_elements.push(child_control);
 }

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.LabelElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.LabelElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.LabelElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.LabelElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.LabelElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.LabelElement.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.LabelElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.LabelElement.prototype.getCacheProperties = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties(unsorted);

  cache_nls.addPropertyIfDefined(properties, this, 'computed_label');
  cache_nls.addPropertyIfDefined(properties, this, 'computed_label_for_comparison');

  cache_nls.addPropertyIfDefined(properties, this, 'unused_label');
  cache_nls.addPropertyIfDefined(properties, this, 'hidden_label');

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.LabelElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.LabelElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};

/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.LabelElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.LabelElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};
/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.LabelElement
 *
 * @desc Returns a text string representation of the label element
 *
 * @return {String} Returns string represention the LabelElement object
 */

OpenAjax.a11y.cache.LabelElement.prototype.toString = function () {
 if (this.computed_label_for_comparison.length)
   return "label: " + this.computed_label;
 else
   return "label: empty";
};

/* ---------------------------------------------------------------- */
/*                       InputElement                               */
/* ---------------------------------------------------------------- */

/**
 * @constructor InputElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a InputElement object used to hold information about input elements
 *
 * @param  {DOMelement}   dom_element   - The dom element object representing the input element
 * @param  {ControlInfo}  control_info  - Information about the parent controls
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the input element
 * @property  {String}      cache_id        - String that uniquely identifies the cache element object in the cache
 * @property  {Number}      document_order  - Ordinal position of the control element in the document in relationship to other control elements
 *
 * @property  {Array}       child_cache_elements  - Array of child cache control elements as part of cache control tree
 * @property  {String}      type                  - Type of input element
 * @property  {Number}      control_type          - Constant indicating the type of cache control object
 * @property  {String}      name_attribute        - Text content of the name attribute
 *
 * @property  {Boolean}     needs_label    - True if the control needs a label element or aria technique, otherwise false
 * @property  {Boolean}     has_validity   - True if the control supports validation, otherwise false
 * @property  {Boolean}     is_valid       - True if the control has a valid value, otherwise false
 * @property  {Boolean}     has_pattern    - True if the pattern attribute is defined, otherwise false
 *
 * @property  {String}      computed_label                 - Calculated label for the input element
 * @property  {Number}      computed_label_length          - Length of the label property
 * @property  {Number}      computed_label_source          - Constant representing how a label was calculated
 * @property  {String}      computed_label_for_comparison  - Label for comparison (lowercase, space normalization and trimmed)
 *
 * @property  {LabelElement}     label_element    - Reference to any label element that this input is nested in
 * @property  {FieldsetElement}  fieldset_element - Reference to any fieldset elements this input is nested in
 *
 * @property  {String}      readonly   - The value of the readonly attribute
 * @property  {String}      disabled   - The value of the disabled attribute
 * @property  {String}      value      - The value of the readonly attribute
 * @property  {String}      checked    - The value of the disabled attribute
 *
 * @property  {Boolean}  is_owned       - True if this control is owned by another widget
 * @property  {Array}    owner_controls - Array of all the widgets that own this widget (NOTE: More than one owner is an error)
 */

OpenAjax.a11y.cache.InputElement = function (dom_element, control_info) {

  var node = dom_element.node;

  dom_element.is_interactive = true;

  this.dom_element = dom_element;
  this.cache_id    = "";
  this.document_order = 0;

  this.value   = node.value;
  this.checked = node.checked;

  this.name_attribute = node.getAttribute('name');
  this.required       = node.getAttribute('required');
  this.aria_required  = node.getAttribute('aria-required');
  this.aria_invalid   = node.getAttribute('aria-invalid');

  this.control_type  = OpenAjax.a11y.CONTROL_TYPE.UNKNOWN;

  this.needs_label  = false;
  this.has_validity = false;
  this.has_pattern  = false;
  this.is_valid = true;

  if (node.validity &&
      (typeof node.validity.valid === 'boolean')) {
    this.is_valid     = node.validity.valid;
  }

  var pattern = node.getAttribute('pattern');
  if (pattern && (pattern.length > 0)) this.has_pattern = true;

  var type = "";

  if (dom_element.has_type_attr) type = dom_element.type_attr;

  if ((typeof type !== 'string') || (type.length === 0)) type = 'text';

  this.type = type;

  switch (type) {

  case 'button':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.BUTTON_INPUT;
    break;

  case 'checkbox':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.CHECKBOX;
    this.needs_label  = true;
    break;

  case 'color':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.COLOR;
    this.needs_label  = true;
    this.has_validity = true;
    this.has_pattern = dom_element.has_pattern;
    break;

  case 'date':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.DATE;
    this.needs_label  = true;
    this.has_validity = true;
    this.has_pattern = dom_element.has_pattern;
    break;

  case 'datetime':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.DATETIME;
    this.needs_label  = true;
    this.has_validity = true;
    this.has_pattern = dom_element.has_pattern;
    break;

  case 'datetime-local':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.DATETIME_LOCAL;
    this.needs_label  = true;
    this.has_validity = true;
    this.has_pattern = dom_element.has_pattern;
    break;

  case 'month':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.MONTH;
    this.needs_label  = true;
    this.has_validity = true;
    this.has_pattern = dom_element.has_pattern;
    break;

  case 'time':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.TIME;
    this.needs_label  = true;
    this.has_validity = true;
    this.has_pattern = dom_element.has_pattern;
    break;

  case 'week':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.WEEK;
    this.needs_label  = true;
    this.has_validity = true;
    this.has_pattern = dom_element.has_pattern;
    break;

  case 'email':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.EMAIL;
    this.needs_label  = true;
    this.has_validity = true;
    this.has_pattern = dom_element.has_pattern;
    break;


  case 'file':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.FILE;
    this.needs_label  = true;
    break;

  case 'hidden':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.HIDDEN;
    break;

  case 'image':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.IMAGE;
    break;

  case 'number':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.NUMBER;
    this.needs_label  = true;
    this.has_validity = true;
    this.has_pattern = dom_element.has_pattern;
    break;

  case 'password':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.PASSWORD;
    this.needs_label  = true;
    this.has_validity = true;
    this.has_pattern = dom_element.has_pattern;
    break;

  case 'radio':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.RADIO;
    this.needs_label  = true;
    break;

  case 'range':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.RANGE;
    this.needs_label  = true;
    this.has_validity = true;
    break;

  case 'reset':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.RESET;
    break;

  case 'search':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.SEARCH;
    this.needs_label  = true;
    this.has_validity = true;
    this.has_pattern = dom_element.has_pattern;
    break;

  case 'submit':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.SUBMIT;
    break;

  case 'tel':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.TEL;
    this.needs_label  = true;
    this.has_validity = true;
    this.has_pattern = dom_element.has_pattern;
    break;

  case 'text':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.TEXT;
    this.needs_label  = true;
    this.has_validity = true;
    this.has_pattern = dom_element.has_pattern;
    break;

  case 'url':
    this.control_type  = OpenAjax.a11y.CONTROL_TYPE.URL;
    this.needs_label  = true;
    this.has_validity = true;
    this.has_pattern = dom_element.has_pattern;
    break;

  default:
    break;
  }

  this.readonly  = node.readonly;
  this.disabled  = node.disabled;

  this.label_element  = control_info.label_element;
  this.grouping_element = control_info.grouping_element;

  this.is_owned = false;
  this.owner_controls = [];

};

/**
 * @method addOwnerControl
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Adds a ARIA owner control element reference
 *
 * @param  {WidegtElement} owner_control   - Cache control element object to add
 */

OpenAjax.a11y.cache.InputElement.prototype.addOwnerControl = function (owner_control) {

  if (owner_control) {
   this.is_owned = true;
   this.owner_controls.push(owner_control);
  }
};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.InputElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.InputElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.InputElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.InputElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.InputElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.InputElement.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.InputElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.InputElement.prototype.getCacheProperties = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties(unsorted);

  cache_nls.addPropertyIfDefined(properties, this, 'label');
  cache_nls.addPropertyIfDefined(properties, this, 'computed_label_source');
  cache_nls.addPropertyIfDefined(properties, this, 'label_for_comparison');
  cache_nls.addPropertyIfDefined(properties, this, 'is_widget');

  cache_nls.addPropertyIfDefined(properties, this, 'needs_label');
  cache_nls.addPropertyIfDefined(properties, this, 'has_validity');
  cache_nls.addPropertyIfDefined(properties, this, 'has_pattern');
  cache_nls.addPropertyIfDefined(properties, this, 'is_valid');

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.InputElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.InputElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};


/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.InputElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.InputElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method getLabelNLS
 *
 * @memberOf OpenAjax.a11y.cache.InputElement
 *
 * @desc Returns an object with an NLS localized string and style properties
 *       If label is empty a missing label message will the returned
 *
 * @return {String | Object} Returns a String if the label has content,
 *                            but if label is empty it returns an object
 *                            with a 'label and 'style' property
 */

OpenAjax.a11y.cache.InputElement.prototype.getLabelNLS = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  if (this.computed_label_length) {
    return this.computed_label;
  }
  else {
    return cache_nls.getNLSMissingLabelMessage();
  }

};

/**
 * @method getLabelSourceNLS
 *
 * @memberOf OpenAjax.a11y.cache.InputElement
 *
 * @desc Returns an object with an NLS localized information on the source of the label
 *
 * @return {String | Object} Returns a String if the label has content,
 *                            but if label is empty it returns an object
 *                            with a 'label and 'style' property
 */

OpenAjax.a11y.cache.InputElement.prototype.getLabelSourceNLS = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  return cache_nls.getValueNLS('computed_label_source', this.computed_label_source);

};



/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.InputElement
 *
 * @desc Returns a text string representation of the input element
 *
 * @return {String} Returns string represention the InputElement object
 */

OpenAjax.a11y.cache.InputElement.prototype.toString = function () {
  var label = "no label";
  if (this.computed_label_for_comparison.length) label = this.computed_label;

  return "input[" + this.type + "]: " + label;

};

/* ---------------------------------------------------------------- */
/*                       ButtonElement                               */
/* ---------------------------------------------------------------- */

/**
 * @constructor ButtonElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a ButtonElement object used to hold information about button elements
 *
 * @param  {DOMelement}   dom_element   - The dom element object representing the button element
 * @param  {ControlInfo}  control_info  - Information about the parent controls
 *
 * @property  {DOMElement}  dom_element  - Reference to the dom element representing the button element
 * @property  {String}      cache_id     - String that uniquely identifies the cache element object in the cache
 *
 * @property  {String}      name_attribute  - Value of the name attribute
 *
 * @property  {Array}       child_cache_elements  - Array of child cache control elements as part of cache control tree
 * @property  {Number}      control_type          - Constant indicating the type of cache control object
 *
 * @property  {Boolean}     needs_label    - True if the control needs a label element or aria technique, otherwise false
 * @property  {Boolean}     has_validity   - True if the control supports validation, otherwise false
 * @property  {Boolean}     is_valid       - True if the control has a valid value, otherwise false
 * @property  {Boolean}     has_pattern    - True if the pattern attribute is defined, otherwise false
 *
 * @property  {FieldsetElement}  fieldset_element - Reference to any fieldset elements this button element is nested in
 *
 * @property  {String}     computed_label                  - Calculated label for the button element
 * @property  {Number}     computed_label_length           - Length of the label property
 * @property  {String}     computed_label_for_comparison  - Label for comparison (lowercase, space normalization and trimmed)
 *
 * @property  {String}     readonly              - The value of the readonly attribute
 * @property  {String}     disabled              - The value of the disabled attribute
 *
 * @property  {Boolean}  is_owned       - True if this control is owned by another widget
 * @property  {Array}    owner_controls - Array of all the widgets that own this widget (NOTE: More than one owner is an error)
 */

OpenAjax.a11y.cache.ButtonElement = function (dom_element, control_info) {

  dom_element.is_interactive = true;

  this.dom_element = dom_element;
  this.cache_id    = "";

  this.child_cache_elements = [];

  var node = dom_element.node;

  this.control_type   = OpenAjax.a11y.CONTROL_TYPE.BUTTON_ELEMENT;

  this.name_attribute = node.getAttribute('name');

  this.readonly  = node.readonly;
  this.disabled  = node.disabled;

  this.grouping_element = control_info.grouping_element;

  this.is_owned = false;
  this.owner_controls = [];

  this.needs_label  = false;
  this.has_validity = false;
  this.has_pattern  = false;
  this.is_valid     = true;

  this.type = node.type;

};

/**
 * @method addOwnerControl
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Adds a ARIA owner control element reference
 *
 * @param  {WidegtElement} owner_control   - Cache control element object to add
 */

OpenAjax.a11y.cache.ButtonElement.prototype.addOwnerControl = function (owner_control) {

  if (owner_control) {
   this.is_owned = true;
   this.owner_controls.push(owner_control);
  }
};


/**
 * @method addChildControl
 *
 * @memberOf OpenAjax.a11y.cache.ButtonElement
 *
 * @desc Adds a cache control element to the tree representation of control elements
 *
 * @param  {WidgetElement | ButtonElement | FieldsetElement | FormElement | InputElement | LabelElement| LegendElement | OptgroupElement | OptionElement | SelectElement | TextareaElement } control_element   - Cache control element object to add
 */

OpenAjax.a11y.cache.ButtonElement.prototype.addChildControl = function (child_control) {
  if (child_control) {
    this.child_cache_elements.push(child_control);
  }
};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.ButtonElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.ButtonElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.ButtonElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.ButtonElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.ButtonElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.ButtonElement.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.ButtonElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.ButtonElement.prototype.getCacheProperties = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties(unsorted);

  cache_nls.addPropertyIfDefined(properties, this, 'computed_label');
  cache_nls.addPropertyIfDefined(properties, this, 'computed_label_source');
  cache_nls.addPropertyIfDefined(properties, this, 'computed_label_for_comparison');

  cache_nls.addPropertyIfDefined(properties, this, 'needs_label');

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.ButtonElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.ButtonElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};


/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.ButtonElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.ButtonElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method getLabelNLS
 *
 * @memberOf OpenAjax.a11y.cache.ButtonElement
 *
 * @desc Returns an object with an NLS localized string and style properties
 *       If label is empty a missing label message will the returned
 *
 * @return {String | Object} Returns a String if the label has content,
 *                            but if label is empty it returns an object
 *                            with a 'label and 'style' property
 */

OpenAjax.a11y.cache.ButtonElement.prototype.getLabelNLS = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  if (this.computed_label_length) {
    return this.computed_label;
  }
  else {
    return cache_nls.getNLSMissingLabelMessage();
  }

};

/**
 * @method getLabelSourceNLS
 *
 * @memberOf OpenAjax.a11y.cache.ButtonElement
 *
 * @desc Returns an object with an NLS localized information on the source of the label
 *
 * @return {String | Object} Returns a String if the label has content,
 *                            but if label is empty it returns an object
 *                            with a 'label and 'style' property
 */

OpenAjax.a11y.cache.ButtonElement.prototype.getLabelSourceNLS = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  return cache_nls.getValueNLS('computed_label_source', this.computed_label_source);

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.ButtonElement
 *
 * @desc Returns a text string representation of the button element
 *
 * @return {String} Returns string represention the ButtonElement object
 */

OpenAjax.a11y.cache.ButtonElement.prototype.toString = function () {
  var label = "no label";
  if (this.computed_label_for_comparison.length) label = this.computed_label;

  return "button: " + label;
};

/* ---------------------------------------------------------------- */
/*                    TextareaElement                               */
/* ---------------------------------------------------------------- */

/**
 * @constructor TextareaElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a TextareaElement object used to hold information about textarea elements
 *
 * @param  {DOMelement}   dom_element   - The dom element object representing the textarea element
 * @param  {ControlInfo}  control_info  - Information about the parent controls
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the textarea element
 * @property  {String}      cache_id        - String that uniquely identifies the cache element object in the cache
 * @property  {Number}      document_order  - Ordinal position of the control element in the document in relationship to other control elements
 *
 * @property  {String}      name_attribute  - Value of the name attribute
 * @property  {String}      type            - Type of form control
 *
 * @property  {Array}       child_cache_elements  - Array of child cache control elements as part of cache control tree
 * @property  {Number}      control_type          - Constant indicating the type of cache control object
 *
 * @property  {Boolean}     needs_label    - True if the control needs a label element or aria technique, otherwise false
 * @property  {Boolean}     has_validity   - True if the control supports validation, otherwise false
 * @property  {Boolean}     is_valid       - True if the control has a valid value, otherwise false
 * @property  {Boolean}     has_pattern    - True if the pattern attribute is defined, otherwise false
 *
 * @property  {String}      computed_label                 - Calculated label for the textarea element
 * @property  {Number}      computed_label_length          - Length of the label property
 * @property  {String}      computed_label_for_comparison  - Label for comparison (lowercase, space normalization and trimmed)
 *
 * @property  {LabelElement}     label_element    - Reference to any label element that this input is nested in
 * @property  {FieldsetElement}  fieldset_element - Reference to any fieldset elements this input is nested in
 *
 * @property  {String}      rows       - The value of the rows attribute
 * @property  {String}      cols       - The value of the cols attribute
 *
 * @property  {String}      readonly   - The value of the readonly attribute
 * @property  {String}      disabled   - The value of the disabled attribute
 *
 * @property  {Boolean}  is_owned       - True if this control is owned by another widget
 * @property  {Array}    owner_controls - Array of all the widgets that own this widget (NOTE: More than one owner is an error)
 */

OpenAjax.a11y.cache.TextareaElement = function (dom_element, control_info) {

  var node = dom_element.node;

  dom_element.is_interactive = true;

  this.dom_element    = dom_element;
  this.cache_id       = "";
  this.document_order = 0;
  this.type = "textarea";

  this.needs_label  = true;
  this.has_validity = true;
  this.has_pattern  = false;
  this.is_valid     = true;

  if (node.validity &&
      (typeof node.validity.valid === 'boolean')) {
    this.is_valid     = node.validity.valid;
  }

  this.control_type = OpenAjax.a11y.CONTROL_TYPE.TEXTAREA;

  this.label_element  = control_info.label_element;
  this.grouping_element = control_info.grouping_element;

  this.name_attribute  = node.getAttribute('name');

  this.rows = node.getAttribute('rows');
  this.cols = node.getAttribute('cols');

  this.readonly  = node.readonly;
  this.disabled  = node.disabled;

  this.is_owned = false;
  this.owner_controls = [];

};

/**
 * @method addOwnerControl
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Adds a ARIA owner control element reference
 *
 * @param  {WidegtElement} owner_control   - Cache control element object to add
 */

OpenAjax.a11y.cache.TextareaElement.prototype.addOwnerControl = function (owner_control) {

  if (owner_control) {
   this.is_owned = true;
   this.owner_controls.push(owner_control);
  }
};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.TextareaElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.TextareaElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.TextareaElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.TextareaElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.TextareaElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.TextareaElement.prototype.getAttributes = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;
  var attributes = this.dom_element.getAttributes();

  cache_nls.addPropertyIfUndefined(attributes, this, 'rows');
  cache_nls.addPropertyIfUndefined(attributes, this, 'cols');

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.TextareaElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.TextareaElement.prototype.getCacheProperties = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties(unsorted);

  cache_nls.addPropertyIfDefined(properties, this, 'label');
  cache_nls.addPropertyIfDefined(properties, this, 'computed_label_source');
  cache_nls.addPropertyIfDefined(properties, this, 'label_for_comparison');

  cache_nls.addPropertyIfDefined(properties, this, 'needs_label');

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.TextareaElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.TextareaElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};

/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.TextareaElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.TextareaElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method getLabelNLS
 *
 * @memberOf OpenAjax.a11y.cache.TextareaElement
 *
 * @desc Returns an object with an NLS localized string and style properties
 *       If label is empty a missing label message will the returned
 *
 * @return {String | Object} Returns a String if the label has content,
 *                            but if label is empty it returns an object
 *                            with a 'label and 'style' property
 */

OpenAjax.a11y.cache.TextareaElement.prototype.getLabelNLS = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  if (this.computed_label_length) {
    return this.computed_label;
  }
  else {
    return cache_nls.getNLSMissingLabelMessage();
  }

};


/**
 * @method getLabelSourceNLS
 *
 * @memberOf OpenAjax.a11y.cache.TextareaElement
 *
 * @desc Returns an object with an NLS localized information on the source of the label
 *
 * @return {String | Object} Returns a String if the label has content,
 *                            but if label is empty it returns an object
 *                            with a 'label and 'style' property
 */

OpenAjax.a11y.cache.TextareaElement.prototype.getLabelSourceNLS = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;
  return cache_nls.getValueNLS('computed_label_source', this.computed_label_source);

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.TextareaElement
 *
 * @desc Returns a text string representation of the textarea element
 *
 * @return {String} Returns string represention the Element object
 */

OpenAjax.a11y.cache.TextareaElement.prototype.toString = function () {
  var str = "textarea";

  if (this.rows && this.cols) str += "[" + this.rows + "x" + this.cols + "]";

  var label = "no label";
  if (this.computed_label_for_comparison.length) label = this.computed_label;

  return str + ": " + label;
};

/* ---------------------------------------------------------------- */
/*                    ProgressElement                               */
/* ---------------------------------------------------------------- */

/**
 * @constructor ProgressElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a ProgressElement object used to hold information about Progress elements
 *
 * @param  {DOMelement}   dom_element   - The dom element object representing the Progress element
 * @param  {ControlInfo}  control_info  - Information about the parent controls
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the Progress element
 * @property  {String}      cache_id        - String that uniquely identifies the cache element object in the cache
 * @property  {Number}      document_order  - Ordinal position of the control element in the document in relationship to other control elements
 *
 * @property  {String}      name_attribute  - Value of the name attribute
 * @property  {String}      type            - Type of form control
 *
 * @property  {Array}       child_cache_elements  - Array of child cache control elements as part of cache control tree
 * @property  {Number}      control_type          - Constant indicating the type of cache control object
 *
 * @property  {Boolean}     needs_label    - True if the control needs a label element or aria technique, otherwise false
 * @property  {Boolean}     has_validity   - True if the control supports validation, otherwise false
 * @property  {Boolean}     is_valid       - True if the control has a valid value, otherwise false
 * @property  {Boolean}     has_pattern    - True if the pattern attribute is defined, otherwise false
 *
 * @property  {String}      computed_label                 - Calculated label for the Progress element
 * @property  {Number}      computed_label_length          - Length of the label property
 * @property  {String}      computed_label_for_comparison  - Label for comparison (lowercase, space normalization and trimmed)
 *
 * @property  {LabelElement}     label_element    - Reference to any label element that this input is nested in
 * @property  {FieldsetElement}  fieldset_element - Reference to any fieldset elements this input is nested in
 *
 * @property  {String}  max   - The value of the max attribute
 * @property  {String}  value - The value of the value attribute
 *
 * @property  {Boolean}  is_owned       - True if this control is owned by another widget
 * @property  {Array}    owner_controls - Array of all the widgets that own this widget (NOTE: More than one owner is an error)
 */

OpenAjax.a11y.cache.ProgressElement = function (dom_element, control_info) {

  var node = dom_element.node;

  dom_element.is_interactive = true;

  this.dom_element    = dom_element;
  this.cache_id       = "";
  this.document_order = 0;
  this.type = "Progress";

  this.needs_label  = true;
  this.has_validity = false;
  this.has_pattern  = false;
  this.is_valid     = true;

  this.control_type = OpenAjax.a11y.CONTROL_TYPE.Progress;

  this.label_element  = control_info.label_element;
  this.grouping_element = control_info.grouping_element;

  this.name_attribute  = node.getAttribute('name');

  this.value   = node.getAttribute('value');
  this.max     = node.getAttribute('max');
  this.percent = 0;

  var d = parseInt(this.max, 10);
  var v = parseInt(this.value, 10);

  if ((typeof d === 'number') &&
      (typeof v === 'number') &&
      (d > 0)) this.percent = (100.0 * v) / d;

  this.is_owned = false;
  this.owner_controls = [];

};

/**
 * @method addOwnerControl
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Adds a ARIA owner control element reference
 *
 * @param  {WidegtElement} owner_control   - Cache control element object to add
 */

OpenAjax.a11y.cache.ProgressElement.prototype.addOwnerControl = function (owner_control) {

  if (owner_control) {
   this.is_owned = true;
   this.owner_controls.push(owner_control);
  }
};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.ProgressElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.ProgressElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.ProgressElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.ProgressElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.ProgressElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.ProgressElement.prototype.getAttributes = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;
  var attributes = this.dom_element.getAttributes();

  cache_nls.addPropertyIfUndefined(attributes, this, 'value');
  cache_nls.addPropertyIfUndefined(attributes, this, 'max');

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.ProgressElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.ProgressElement.prototype.getCacheProperties = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties(unsorted);

  cache_nls.addPropertyIfDefined(properties, this, 'label');
  cache_nls.addPropertyIfDefined(properties, this, 'computed_label_source');
  cache_nls.addPropertyIfDefined(properties, this, 'label_for_comparison');

  cache_nls.addPropertyIfDefined(properties, this, 'needs_label');
  cache_nls.addPropertyIfDefined(properties, this, 'percent');

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.ProgressElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.ProgressElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};

/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.ProgressElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.ProgressElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method getLabelNLS
 *
 * @memberOf OpenAjax.a11y.cache.ProgressElement
 *
 * @desc Returns an object with an NLS localized string and style properties
 *       If label is empty a missing label message will the returned
 *
 * @return {String | Object} Returns a String if the label has content,
 *                            but if label is empty it returns an object
 *                            with a 'label and 'style' property
 */

OpenAjax.a11y.cache.ProgressElement.prototype.getLabelNLS = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  if (this.computed_label_length) {
    return this.computed_label;
  }
  else {
    return cache_nls.getNLSMissingLabelMessage();
  }

};


/**
 * @method getLabelSourceNLS
 *
 * @memberOf OpenAjax.a11y.cache.ProgressElement
 *
 * @desc Returns an object with an NLS localized information on the source of the label
 *
 * @return {String | Object} Returns a String if the label has content,
 *                            but if label is empty it returns an object
 *                            with a 'label and 'style' property
 */

OpenAjax.a11y.cache.ProgressElement.prototype.getLabelSourceNLS = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  return cache_nls.getValueNLS('computed_label_source', this.computed_label_source);

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.ProgressElement
 *
 * @desc Returns a text string representation of the Progress element
 *
 * @return {String} Returns string represention the Element object
 */

OpenAjax.a11y.cache.ProgressElement.prototype.toString = function () {
  var label = "no label";
  if (this.computed_label_for_comparison.length) label = this.computed_label;

  return "Progress: " + label;
};

/* ---------------------------------------------------------------- */
/*                    OutputElement                               */
/* ---------------------------------------------------------------- */

/**
 * @constructor OutputElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a OutputElement object used to hold information about Progress elements
 *
 * @param  {DOMelement}   dom_element   - The dom element object representing the Progress element
 * @param  {ControlInfo}  control_info  - Information about the parent controls
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the Progress element
 * @property  {String}      cache_id        - String that uniquely identifies the cache element object in the cache
 * @property  {Number}      document_order  - Ordinal position of the control element in the document in relationship to other control elements
 *
 * @property  {String}      name_attribute  - Value of the name attribute
 * @property  {String}      type            - Type of form control
 *
 * @property  {Array}       child_cache_elements  - Array of child cache control elements as part of cache control tree
 * @property  {Number}      control_type          - Constant indicating the type of cache control object
 *
 * @property  {Boolean}     needs_label    - True if the control needs a label element or aria technique, otherwise false
 * @property  {Boolean}     has_validity   - True if the control supports validation, otherwise false
 * @property  {Boolean}     is_valid       - True if the control has a valid value, otherwise false
 * @property  {Boolean}     has_pattern    - True if the pattern attribute is defined, otherwise false
 *
 * @property  {String}      computed_label                 - Calculated label for the Progress element
 * @property  {Number}      computed_label_length          - Length of the label property
 * @property  {String}      computed_label_for_comparison  - Label for comparison (lowercase, space normalization and trimmed)
 *
 * @property  {LabelElement}     label_element    - Reference to any label element that this input is nested in
 * @property  {FieldsetElement}  fieldset_element - Reference to any fieldset elements this input is nested in
 *
 * @property  {String} value - The value of the value attribute
 *
 * @property  {Boolean}  is_owned       - True if this control is owned by another widget
 * @property  {Array}    owner_controls - Array of all the widgets that own this widget (NOTE: More than one owner is an error)
 */

OpenAjax.a11y.cache.OutputElement = function (dom_element, control_info) {

  var node = dom_element.node;

  dom_element.is_interactive = true;

  this.dom_element    = dom_element;
  this.cache_id       = "";
  this.document_order = 0;
  this.type = "Progress";

  this.needs_label  = true;
  this.has_validity = false;
  this.has_pattern  = false;
  this.is_valid     = true;

  this.control_type = OpenAjax.a11y.CONTROL_TYPE.Output;

  this.label_element  = control_info.label_element;
  this.grouping_element = control_info.grouping_element;

  this.value = node.getAttribute('value');

  this.is_owned = false;
  this.owner_controls = [];

};

/**
 * @method addOwnerControl
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Adds a ARIA owner control element reference
 *
 * @param  {WidegtElement} owner_control   - Cache control element object to add
 */

OpenAjax.a11y.cache.OutputElement.prototype.addOwnerControl = function (owner_control) {

  if (owner_control) {
   this.is_owned = true;
   this.owner_controls.push(owner_control);
  }
};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.OutputElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.OutputElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.OutputElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.OutputElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.OutputElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.OutputElement.prototype.getAttributes = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;
  var attributes = this.dom_element.getAttributes();

  cache_nls.addPropertyIfUndefined(attributes, this, 'value');

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.OutputElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.OutputElement.prototype.getCacheProperties = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties(unsorted);

  cache_nls.addPropertyIfDefined(properties, this, 'label');
  cache_nls.addPropertyIfDefined(properties, this, 'computed_label_source');
  cache_nls.addPropertyIfDefined(properties, this, 'label_for_comparison');

  cache_nls.addPropertyIfDefined(properties, this, 'needs_label');

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.OutputElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.OutputElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};

/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.OutputElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.OutputElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method getLabelNLS
 *
 * @memberOf OpenAjax.a11y.cache.OutputElement
 *
 * @desc Returns an object with an NLS localized string and style properties
 *       If label is empty a missing label message will the returned
 *
 * @return {String | Object} Returns a String if the label has content,
 *                            but if label is empty it returns an object
 *                            with a 'label and 'style' property
 */

OpenAjax.a11y.cache.OutputElement.prototype.getLabelNLS = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  if (this.computed_label_length) {
    return this.computed_label;
  }
  else {
    return cache_nls.getNLSMissingLabelMessage();
  }

};


/**
 * @method getLabelSourceNLS
 *
 * @memberOf OpenAjax.a11y.cache.OutputElement
 *
 * @desc Returns an object with an NLS localized information on the source of the label
 *
 * @return {String | Object} Returns a String if the label has content,
 *                            but if label is empty it returns an object
 *                            with a 'label and 'style' property
 */

OpenAjax.a11y.cache.OutputElement.prototype.getLabelSourceNLS = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  return cache_nls.getValueNLS('computed_label_source', this.computed_label_source);

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.OutputElement
 *
 * @desc Returns a text string representation of the Progress element
 *
 * @return {String} Returns string represention the Element object
 */

OpenAjax.a11y.cache.OutputElement.prototype.toString = function () {
  var label = "no label";
  if (this.computed_label_for_comparison.length) label = this.computed_label;

  return "Output: " + label;
};


/* ---------------------------------------------------------------- */
/*                    MeterElement                               */
/* ---------------------------------------------------------------- */

/**
 * @constructor MeterElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a MeterElement object used to hold information about Progress elements
 *
 * @param  {DOMelement}   dom_element   - The dom element object representing the Progress element
 * @param  {ControlInfo}  control_info  - Information about the parent controls
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the Progress element
 * @property  {String}      cache_id        - String that uniquely identifies the cache element object in the cache
 * @property  {Number}      document_order  - Ordinal position of the control element in the document in relationship to other control elements
 *
 * @property  {String}      name_attribute  - Value of the name attribute
 * @property  {String}      type            - Type of form control
 *
 * @property  {Array}       child_cache_elements  - Array of child cache control elements as part of cache control tree
 * @property  {Number}      control_type          - Constant indicating the type of cache control object
 *
 * @property  {Boolean}     needs_label    - True if the control needs a label element or aria technique, otherwise false
 * @property  {Boolean}     has_validity   - True if the control supports validation, otherwise false
 * @property  {Boolean}     is_valid       - True if the control has a valid value, otherwise false
 * @property  {Boolean}     has_pattern    - True if the pattern attribute is defined, otherwise false
 *
 * @property  {String}      computed_label                 - Calculated label for the Progress element
 * @property  {Number}      computed_label_length          - Length of the label property
 * @property  {String}      computed_label_for_comparison  - Label for comparison (lowercase, space normalization and trimmed)
 *
 * @property  {LabelElement}     label_element    - Reference to any label element that this input is nested in
 * @property  {FieldsetElement}  fieldset_element - Reference to any fieldset elements this input is nested in
 *
 * @property  {String} max   - The value of the max attribute
 * @property  {String} max   - The value of the min attribute
 * @property  {String} value - The value of the value attribute
 *
 * @property  {Boolean}  is_owned       - True if this control is owned by another widget
 * @property  {Array}    owner_controls - Array of all the widgets that own this widget (NOTE: More than one owner is an error)
 */

OpenAjax.a11y.cache.MeterElement = function (dom_element, control_info) {

  var node = dom_element.node;

  dom_element.is_interactive = true;

  this.dom_element    = dom_element;
  this.cache_id       = "";
  this.document_order = 0;
  this.type = "Progress";

  this.needs_label  = true;
  this.has_validity = false;
  this.has_pattern  = false;
  this.is_valid     = true;

  this.control_type = OpenAjax.a11y.CONTROL_TYPE.METER;

  this.label_element  = control_info.label_element;
  this.grouping_element = control_info.grouping_element;

  this.min   = node.getAttribute('min');
  this.max   = node.getAttribute('max');
  this.value = node.getAttribute('value');

  this.is_owned = false;
  this.owner_controls = [];

};

/**
 * @method addOwnerControl
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Adds a ARIA owner control element reference
 *
 * @param  {WidegtElement} owner_control   - Cache control element object to add
 */

OpenAjax.a11y.cache.MeterElement.prototype.addOwnerControl = function (owner_control) {

  if (owner_control) {
   this.is_owned = true;
   this.owner_controls.push(owner_control);
  }
};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.MeterElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.MeterElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.MeterElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.MeterElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.MeterElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.MeterElement.prototype.getAttributes = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;
  var attributes = this.dom_element.getAttributes();

  cache_nls.addPropertyIfUndefined(attributes, this, 'value');
  cache_nls.addPropertyIfUndefined(attributes, this, 'max');
  cache_nls.addPropertyIfUndefined(attributes, this, 'min');

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.MeterElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.MeterElement.prototype.getCacheProperties = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties(unsorted);

  cache_nls.addPropertyIfDefined(properties, this, 'label');
  cache_nls.addPropertyIfDefined(properties, this, 'computed_label_source');
  cache_nls.addPropertyIfDefined(properties, this, 'label_for_comparison');

  cache_nls.addPropertyIfDefined(properties, this, 'needs_label');
  cache_nls.addPropertyIfDefined(properties, this, 'value');

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.MeterElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.MeterElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};

/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.MeterElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.MeterElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method getLabelNLS
 *
 * @memberOf OpenAjax.a11y.cache.MeterElement
 *
 * @desc Returns an object with an NLS localized string and style properties
 *       If label is empty a missing label message will the returned
 *
 * @return {String | Object} Returns a String if the label has content,
 *                            but if label is empty it returns an object
 *                            with a 'label and 'style' property
 */

OpenAjax.a11y.cache.MeterElement.prototype.getLabelNLS = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  if (this.computed_label_length) {
    return this.computed_label;
  }
  else {
    return cache_nls.getNLSMissingLabelMessage();
  }

};

/**
 * @method getLabelSourceNLS
 *
 * @memberOf OpenAjax.a11y.cache.MeterElement
 *
 * @desc Returns an object with an NLS localized information on the source of the label
 *
 * @return {String | Object} Returns a String if the label has content,
 *                            but if label is empty it returns an object
 *                            with a 'label and 'style' property
 */

OpenAjax.a11y.cache.MeterElement.prototype.getLabelSourceNLS = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  return cache_nls.getValueNLS('computed_label_source', this.computed_label_source);

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.MeterElement
 *
 * @desc Returns a text string representation of the Progress element
 *
 * @return {String} Returns string represention the Element object
 */

OpenAjax.a11y.cache.MeterElement.prototype.toString = function () {
  var label = "no label";
  if (this.computed_label_for_comparison.length) label = this.computed_label;

  return "Meter: " + label;
};

/* ---------------------------------------------------------------- */
/*                      SelectElement                               */
/* ---------------------------------------------------------------- */

/**
 * @constructor SelectElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a SelectElement object used to hold information about select elements
 *
 * @param  {DOMelement}   dom_element   - The dom element object representing the select element
 * @param  {ControlInfo}  control_info  - Information about the parent controls
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the select element
 * @property  {String}      cache_id        - String that uniquely identifies the cache element object in the cache
 * @property  {Number}      document_order  - Ordinal position of the control element in the document in relationship to other control elements
 *
 * @property  {String}      name_attribute  - Value of the name attribute
 * @property  {String}      type            - String indicating the type of form control
 *
 * @property  {Array}       child_cache_elements  - Array of child cache control elements as part of cache control tree
 * @property  {Array}       option_elements       - Array of child cache option elements
 * @property  {Number}      control_type          - Constant indicating the type of cache control object
 *
 * @property  {Boolean}     needs_label    - True if the control needs a label element or aria technique, otherwise false
 * @property  {Boolean}     has_validity   - True if the control supports validation, otherwise false
 * @property  {Boolean}     is_valid       - True if the control has a valid value, otherwise false
 * @property  {Boolean}     has_pattern    - True if the pattern attribute is defined, otherwise false
 *
 * @property  {LabelElement}     label_element    - Reference to any label element that this input is nested in
 * @property  {FieldsetElement}  fieldset_element - Reference to any fieldset elements this select element is nested in
 *
 * @property  {String}      computed_label                 - Calculated label for the select element
 * @property  {Number}      computed_label_length          - Length of the label property
 * @property  {String}      computed_label_for_comparison  - Label for comparison (lowercase, space normalization and trimmed)
 * @property  {String}      size                  - The value of the size attribute
 * @property  {String}      multiple              - The value of the multiple attribute
 *
 * @property  {Boolean}  is_owned       - True if this control is owned by another widget
 * @property  {Array}    owner_controls - Array of all the widgets that own this widget (NOTE: More than one owner is an error)
 */

OpenAjax.a11y.cache.SelectElement = function (dom_element, control_info) {

  dom_element.is_interactive = true;

  this.dom_element    = dom_element;

  this.cache_id       = "";
  this.document_order = 0;

  this.child_cache_elements = [];

  this.option_elements = [];

  this.control_type = OpenAjax.a11y.CONTROL_TYPE.SELECT;

  var node = dom_element.node;

  this.name_attribute  = node.getAttribute('name');
  this.type = "select";

  this.size   = node.size;
  this.multiple = node.multiple;

  this.label_element  = control_info.label_element;
  this.grouping_element = control_info.grouping_element;

  this.is_owned = false;
  this.owner_controls = [];

  this.needs_label  = true;
  this.has_validity = false;
  this.has_pattern  = false;
  this.is_valid     = true;

  if (node.validity &&
      (typeof node.validity.valid === 'boolean')) {
    this.is_valid     = node.validity.valid;
  }

};

/**
 * @method addChildControl
 *
 * @memberOf OpenAjax.a11y.cache.SelectElement
 *
 * @desc Adds a cache control element to the tree representation of control elements
 *
 * @param  {WidgetElement | ButtonElement | FieldsetElement | FormElement | InputElement | LabelElement| LegendElement | OptgroupElement | OptionElement | SelectElement | TextareaElement } control_element   - Cache control element object to add
 */

OpenAjax.a11y.cache.SelectElement.prototype.addChildControl = function (child_control) {

 if (child_control) {
  this.child_cache_elements.push(child_control);
 }

};

/**
 * addOption
 *
 * @desc add a OptionElement object reference to the tree of
 *
 * @param  child_control    Object control cache element object
 *
 * @return  nothing
 */

OpenAjax.a11y.cache.SelectElement.prototype.addOption = function (option_element) {

  if (option_element) {
    this.option_elements.push(option_element);
    option_element.document_order = this.option_elements.length;
    option_element.cache_id    = this.cache_id + "_" + this.option_elements.length;
  }

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.SelectElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.SelectElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.SelectElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.SelectElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.SelectElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.SelectElement.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.SelectElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.SelectElement.prototype.getCacheProperties = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties(unsorted);

  cache_nls.addPropertyIfDefined(properties, this, 'label');
  cache_nls.addPropertyIfDefined(properties, this, 'computed_label_source');
  cache_nls.addPropertyIfDefined(properties, this, 'label_for_comparison');

  cache_nls.addPropertyIfDefined(properties, this, 'needs_label');

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.SelectElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.SelectElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};


/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.SelectElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.SelectElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method getLabelNLS
 *
 * @memberOf OpenAjax.a11y.cache.SelectElement
 *
 * @desc Returns an object with an NLS localized string and style properties
 *       If label is empty a missing label message will the returned
 *
 * @return {String | Object} Returns a String if the label has content,
 *                            but if label is empty it returns an object
 *                            with a 'label and 'style' property
 */

OpenAjax.a11y.cache.SelectElement.prototype.getLabelNLS = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  if (this.computed_label_length) {
    return this.computed_label;
  }
  else {
    return cache_nls.getNLSMissingLabelMessage();
  }

};


/**
 * @method getLabelSourceNLS
 *
 * @memberOf OpenAjax.a11y.cache.SelectElement
 *
 * @desc Returns an object with an NLS localized information on the source of the label
 *
 * @return {String | Object} Returns a String if the label has content,
 *                            but if label is empty it returns an object
 *                            with a 'label and 'style' property
 */

OpenAjax.a11y.cache.SelectElement.prototype.getLabelSourceNLS = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  return cache_nls.getValueNLS('computed_label_source', this.computed_label_source);

};

/**
 * @method addOwnerControl
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Adds a ARIA owner control element reference
 *
 * @param  {WidegtElement} owner_control   - Cache control element object to add
 */

OpenAjax.a11y.cache.SelectElement.prototype.addOwnerControl = function (owner_control) {

  if (owner_control) {
   this.is_owned = true;
   this.owner_controls.push(owner_control);
  }
};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.SelectElement
 *
 * @desc Returns a text string representation of the select element
 *
 * @return {String} Returns string represention the SelectElement object
 */

OpenAjax.a11y.cache.SelectElement.prototype.toString = function () {
  var label = "no label";
  if (this.computed_label_for_comparison.length) label = this.computed_label;

  return "select[" + this.option_elements.length + " options]: " + label;
};

/* ---------------------------------------------------------------- */
/*                       OptgroupElement                               */
/* ---------------------------------------------------------------- */

/**
 * @constructor OptgroupElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a OptgroupElement object used to hold information about optgroup elements
 *
 * @param  {DOMelement}   dom_element   - The dom element object representing the optgroup element
 * @param  {ControlInfo}  control_info  - Information about the parent controls
 *
 * @property  {DOMElement}  dom_element  - Reference to the dom element representing the optgroup element
 * @property  {String}      cache_id     - String that uniquely identifies the cache element object in the cache
 *
 * @property  {Array}       child_cache_elements  - Array of child cache control elements as part of cache control tree
 * @property  {Number}      control_type          - Constant indicating the type of cache control object
 *
 * @property  {SelectElement}  select_element     - Reference to the select element that this optgroup is nested in
 *
 * @property  {String}      computed_label                 - Calculated label for the select element
 * @property  {Number}      computed_label_length          - Length of the label property
 * @property  {String}      computed_label_for_comparison  - Label for comparison (lowercase, space normalization and trimmed)
 */

OpenAjax.a11y.cache.OptgroupElement = function (dom_element, control_info) {

 this.dom_element = dom_element;
 this.cache_id    = "";

 this.child_cache_elements = [];

 this.control_type = OpenAjax.a11y.CONTROL_TYPE.OPTGROUP;

 this.select_element = control_info.select_element;

 this.computed_label = dom_element.node.computed_label;
 if (this.computed_label) {
   this.computed_label_length = this.computed_label.length;
   this.computed_label_for_comparison = OpenAjax.a11y.util.normalizeSpace(this.computed_label.toLowerCase());
 }
 else {
   this.computed_label_length = 0;
   this.computed_label_for_comparison = "";
 }

};

/**
 * @method addChildControl
 *
 * @memberOf OpenAjax.a11y.cache.OptgroupElement
 *
 * @desc Adds a cache control element to the tree representation of control elements
 *
 * @param  {WidgetElement | ButtonElement | FieldsetElement | FormElement | InputElement | LabelElement| LegendElement | OptgroupElement | OptionElement | SelectElement | TextareaElement } control_element   - Cache control element object to add
 */

OpenAjax.a11y.cache.OptgroupElement.prototype.addChildControl = function (child_control) {

 if (child_control) {
  this.child_cache_elements.push(child_control);
 }

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.OptgroupElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.OptgroupElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.OptgroupElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.OptgroupElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.OptgroupElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.OptgroupElement.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.OptgroupElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.OptgroupElement.prototype.getCacheProperties = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties(unsorted);

  cache_nls.addPropertyIfDefined(properties, this, 'label');
  cache_nls.addPropertyIfDefined(properties, this, 'computed_label_source');
  cache_nls.addPropertyIfDefined(properties, this, 'label_for_comparison');

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.OptgroupElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.OptgroupElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};


/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.OptgroupElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.OptgroupElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};
/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.OptgroupElement
 *
 * @desc Returns a text string representation of the optgroup element
 *
 * @return {String} Returns string represention the OptgroupElement object
 */

OpenAjax.a11y.cache.OptgroupElement.prototype.toString = function () {
 return "OPTGROUP with " + this.child_cache_elements.length + " options";
};

/* ---------------------------------------------------------------- */
/*                      OptionElement                               */
/* ---------------------------------------------------------------- */

/**
 * @constructor OptionElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a OptgroupElement object used to hold information about optgroup elements
 *
 * @param  {DOMelement}   dom_element   - The dom element object representing the optgroup element
 * @param  {ControlInfo}  control_info  - Information about the parent controls
 *
 * @property  {DOMElement}  dom_element        - Reference to the dom element representing the optgroup element
 * @property  {String}      cache_id     - String that uniquely identifies the cache element object in the cache
 *
 * @property  {Number}      control_type       - Constant indicating the type of cache control object
 *
 * @property  {SelectElement}  select_element  - Reference to the select element that this optgroup is nested in
 *
 * @property  {String}         value           - Value of the value attribute
 */

OpenAjax.a11y.cache.OptionElement = function (dom_element, control_info) {

 this.dom_element = dom_element;
 this.cache_id    = "";

 this.control_type   = OpenAjax.a11y.CONTROL_TYPE.OPTION;

 this.select_element = control_info.select_element;

 this.value = dom_element.node.value;

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.OptionElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.OptionElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.OptionElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.OptionElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.OptionElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.OptionElement.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.OptionElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.OptionElement.prototype.getCacheProperties = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties(unsorted);

  cache_nls.addPropertyIfDefined(properties, this, 'label');
  cache_nls.addPropertyIfDefined(properties, this, 'computed_label_source');
  cache_nls.addPropertyIfDefined(properties, this, 'label_for_comparison');

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.OptionElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.OptionElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};

/**

 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.OptionElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.OptionElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.OptionElement
 *
 * @desc Returns a text string representation of the option element
 *
 * @return {String} Returns string represention the OptionElement object
 */

OpenAjax.a11y.cache.OptionElement.prototype.toString = function () {
 return "OPTION: " + this.value;
};

/* ---------------------------------------------------------------- */
/*                       WidgetElement                               */
/* ---------------------------------------------------------------- */

/**
 * @constructor WidgetElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a InputElement object used to hold information about input elements
 *
 * @param  {DOMelement}   dom_element   - The dom element object representing the input element
 * @param  {ControlInfo}  control_info  - Information about the parent controls
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the input element
 * @property  {String}      cache_id        - String that uniquely identifies the cache element object in the cache
 * @property  {Number}      document_order  - Ordinal position of the control element in the document in relationship to other control elements
 *
 * @property  {Boolean}     has_aria_owns              - if the widget has aria-owns, use this to calculate children
 * @property  {Array}       child_cache_elements  - Array of child cache control elements as part of cache control tree
 * @property  {String}      type                  - String indicating the type of input element
 * @property  {Number}      control_type          - Constant indicating the type of cache control object
 *
 * @property  {Boolean}     needs_label    - True if the control needs a label element or aria technique, otherwise false
 * @property  {Boolean}     has_validity   - True if the control supports validation, otherwise false
 * @property  {Boolean}     is_valid       - True if the control has a valid value, otherwise false
 * @property  {Boolean}     has_pattern    - True if the pattern attribute is defined, otherwise false
 *
 * @property  {String}   name_attribute        - Text content of the name attribute
 * @property  {String}   required       - The value of the required property
 * @property  {String}   aria_required  - The value of the aria-required property
 * @property  {String}   aria_invalid   - The value of the aria-invlaid property
 * @property  {Boolean}  aria_busy      - The value of the aria-busy property
 *
 * @property  {String}  computed_label                 - Calculated label for the input element
 * @property  {Number}  computed_label_length          - Length of the label property
 * @property  {Number}  computed_label_source          - Constant representing how a label was calculated
 * @property  {String}  computed_label_for_comparison  - Label for comparison (lowercase, space normalization and trimmed)
 *
 * @property  {LabelElement}     label_element    - Reference to any label element that this input is nested in
 * @property  {FieldsetElement}  fieldset_element - Reference to any fieldset elements this input is nested in
 *
 * @property  {String}  readonly  - The value of the readonly attribute
 * @property  {String}  disabled  - The value of the disabled attribute
 * @property  {String}  value     - The value of value property
 * @property  {String}  checked   - The true if checked property
 *
 * @property  {Boolean}  is_owned       - True if this widget is owned by another widget
 * @property  {Array}    owner_controls - Array of all the widgets that own this widget (NOTE: More than one owner is an error)
 * @property  {Array}    owned_dom_elements - Array of all the dom elements referenced by aria-owns
 */

OpenAjax.a11y.cache.WidgetElement = function (dom_element, control_info) {

  var node = dom_element.node;

  dom_element.widget_element = this;

  this.dom_element    = dom_element;
  this.has_aria_owns       = dom_element.hasOwns();
  this.cache_id       = "";
  this.document_order = 0;
  this.parent_widget  = control_info.parent_widget;

  this.child_cache_elements = [];
  this.owned_dom_elements = [];
  this.type    = node.type;
  this.value   = node.value;
  this.checked = node.checked;

  this.name_attribute = node.getAttribute('name');
  this.required       = node.getAttribute('required');
  this.aria_required  = node.getAttribute('aria-required');
  this.aria_invalid   = node.getAttribute('aria-invalid');
  this.aria_busy      = node.getAttribute('aria-busy');
  if (this.aria_busy) {
    this.aria_busy = this.aria_busy.toLowerCase() === 'true';
  }

  this.control_type   = OpenAjax.a11y.CONTROL_TYPE.WIDGET;

  this.label_element    = control_info.label_element;
  this.grouping_element = control_info.grouping_element;

  this.aria_attributes_with_invalid_values  = [];
  this.aria_attributes_missing              = [];

  this.is_owned = false;
  this.owner_controls = [];

  var role_info = OpenAjax.a11y.aria.getRoleObject(dom_element.role);

  this.needs_label  = false;
  this.has_validity = false;
  this.has_pattern  = false;
  this.is_valid     = true;

  if (role_info && role_info.nameRequired) this.needs_label  = true;

  this.updateOwnedBy()

};

/**
 * @method updateOwnedby
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Updates the associated dom element with parent widget information form the DOM tree
 *
 */

OpenAjax.a11y.cache.WidgetElement.prototype.updateOwnedBy = function () {

  var roles = this.dom_element.role_info.requiredParents;

  for (var i = 0; i < roles.length; i += 1) {
    var we = this.getParentWidgetElement(roles[i]);

    if (we) {
      this.dom_element.addOwnedBy(we);
    }
  }

};

/**
 * @method addChildControl
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Adds a cache control element to the tree representation of control elements
 *
 * @param  {WidegtElement | ButtonElement | FieldsetElement | FormElement | InputElement | LabelElement| LegendElement | OptgroupElement | OptionElement | SelectElement | TextareaElement } control_element   - Cache control element object to add
 * @param  {Boolean} override_owns  - If true, allow child elements to be added if the widget has an owns property
 */

OpenAjax.a11y.cache.WidgetElement.prototype.addChildControl = function (child_control, override_owns) {

  if (this.has_aria_owns && ((typeof override_owns != 'boolean') || ((typeof override_owns === 'boolean') && !override_owns))) return;

  if (child_control) {
   this.child_cache_elements.push(child_control);
  }
};

/**
 * @method addOwnerControl
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Adds a ARIA owner control element reference
 *
 * @param  {WidegtElement} owner_control   - Cache control element object to add
 */

OpenAjax.a11y.cache.WidgetElement.prototype.addOwnerControl = function (owner_control) {

  if (owner_control) {
   this.is_owned = true;
   this.parent_widget = owner_control;
   this.owner_controls.push(owner_control);
  }
};

/**
 * @method getOwnedIds
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Returns an array of strings representing the ids in the aria-owns property
 *
 * @return {Array} Returns an array of string objects represrenting the ids of the aria-owns property
 */

OpenAjax.a11y.cache.WidgetElement.prototype.getOwnedIds = function () {

  var aria_owns = this.dom_element.aria_owns;
  var return_array = [];

  if (typeof aria_owns === 'string' && (aria_owns.length > 0)) {

    if (aria_owns.indexOf(' ') > 0) {
      return_array = aria_owns.split(' ');
    }
    else {
      return_array.push(aria_owns);
    }

  }

  return return_array;

};

/**
 * @method hasRequiedChildRole
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Tests if a widget has a child ARIA element with a certain role
 *
 * @param {String}  role -  Role to find
 *
 * @return {Boolean} Returns true if widget has child element with role, otherwise false
 */

OpenAjax.a11y.cache.WidgetElement.prototype.hasRequiredChildRole = function (role) {

  for (var i = 0; i < this.owned_dom_elements.length; i += 1) {
    if (this.owned_dom_elements[i].role === role) {
      return true;
    }
  }

  return false;

};

/**
 * @method isOwnedByRole
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Tests if a widget is owned by ARIA element with a certain role
 *
 * @param {String}  role -  Role to find
 *
 * @return {Boolean} Returns true if widget is owned by element with role, otherwise false
 */

OpenAjax.a11y.cache.WidgetElement.prototype.isOwnedByRole = function (role) {

  for (var i = 0; i < this.dom_element.owned_by.length; i += 1) {
    var we = this.dom_element.owned_by[i];
    if (we.dom_element.role === role) {
      return true;
    }
  }

  return false;

};

/**
 * @method getParentWidgetElement
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Get reference to a parent element with a certain role
 *
 * @param {String}  role -  Role to find
 *
 * @return {Object} Returns widget if parent element with role exists, otherwise false
 */

OpenAjax.a11y.cache.WidgetElement.prototype.getParentWidgetElement = function (role) {

   function checkParentElementForRole(dom_element) {

     if (!dom_element) return false;

     if (dom_element.role === role) {
       return dom_element.widget_element;
     }
     else {
       return checkParentElementForRole(dom_element.parent_element);
     }

   }

   return checkParentElementForRole(this.dom_element.parent_element);

};


/**
 * @method hasOwnedRole
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Tests if a widget has a owned ARIA element with a certain role
 *
 * @param {String}  role -  Role to find
 *
 * @return {Boolean} Returns true if widget has owned element with role, otherwise false
 */

OpenAjax.a11y.cache.WidgetElement.prototype.hasOwnedRole = function (role) {

   function checkOwnedChildren(dom_elements) {

     var flag = false;

     for (var i = 0; i < dom_elements.length; i++) {

       var dom_element = dom_elements[i];

       if (dom_element.role === role) {
         flag = true;
         break;
       }
       else {
         if (dom_element.child_dom_elements && dom_element.child_dom_elements.length) {
           flag = checkOwnedChildren(dom_element.child_dom_elements);
         }
       }
     }

     return flag;

   }

   return checkOwnedChildren(this.owned_dom_elements);

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.WidgetElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.WidgetElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.WidgetElement.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.WidgetElement.prototype.getCacheProperties = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties(unsorted);

  cache_nls.addPropertyIfDefined(properties, this, 'computed_label');
  cache_nls.addPropertyIfDefined(properties, this, 'computed_label_source');
  cache_nls.addPropertyIfDefined(properties, this, 'computed_label_for_comparison');
  cache_nls.addPropertyIfDefined(properties, this, 'is_widget');
  cache_nls.addPropertyIfDefined(properties, this, 'is_section');
  cache_nls.addPropertyIfDefined(properties, this, 'is_owned');
  cache_nls.addPropertyIfDefined(properties, this, 'needs_label');
  cache_nls.addPropertyIfDefined(properties, this, 'owner_controls');
  cache_nls.addPropertyIfDefined(properties, this, 'parent_widget');

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.WidgetElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};


/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.WidgetElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};


/**
 * @method getLabelNLS
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Returns an object with an NLS localized string and style properties
 *       If label is empty a missing label message will the returned
 *
 * @return {String | Object} Returns a String if the label has content,
 *                            but if label is empty it returns an object
 *                            with a 'label and 'style' property
 */

OpenAjax.a11y.cache.WidgetElement.prototype.getLabelNLS = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  if (this.computed_label_length) {
    return this.computed_label;
  }
  else {
    return cache_nls.getNLSMissingLabelMessage();
  }

};

/**
 * @method getLabelSourceNLS
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Returns an object with an NLS localized information on the source of the label
 *
 * @return {String | Object} Returns a String if the label has content,
 *                            but if label is empty it returns an object
 *                            with a 'label and 'style' property
 */

OpenAjax.a11y.cache.WidgetElement.prototype.getLabelSourceNLS = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  return cache_nls.getValueNLS('computed_label_source', this.computed_label_source);

};



/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.WidgetElement
 *
 * @desc Returns a text string representation of the input element
 *
 * @return {String} Returns string represention the InputElement object
 */

OpenAjax.a11y.cache.WidgetElement.prototype.toString = function () {
  var label = "no label";
  if (this.computed_label_for_comparison.length) label = this.computed_label;

  return this.dom_element.tag_name + "[role=" + this.dom_element.role + "]: " + label;

};

/* ---------------------------------------------------------------- */
/*                       InteractiveElement                         */
/* ---------------------------------------------------------------- */

/**
 * @constructor InteractiveElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a InteractiveElement object used to hold information about elements that could respond to user actions
 *
 * @param  {DOMelement}   dom_element   - The dom element object representing the input element
 * @param  {String}       tag_name      - The dom element object representing the input element
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the input element
 * @property  {Number}      document_order  - Ordinal position of the control element in the document in relationship to other control elements
 */

OpenAjax.a11y.cache.InteractiveElement = function (dom_element, has_tabindex, has_events) {

  this.is_embedded_app = false;
  this.has_tabindex_behavior = false;

  this.dom_element = dom_element;
  var tag_name = dom_element.tag_name;

  this.element_id = tag_name;

  if (tag_name === 'input') {
    if (dom_element.has_type_attr) this.element_id = "input[type=" + dom_element.type_attr + "]";
    else this.element_id = 'input[type=text]';
  }

  if (has_tabindex || dom_element.has_tabindex) {
    if ((dom_element.tabindex !== '0') ||
         ((tag_name !== 'a') &&
          (tag_name !== 'button') &&
          (tag_name !== 'input') &&
          (tag_name !== 'select') &&
          (tag_name !== 'textarea'))) {

      this.element_id = tag_name + '[tabindex=' + dom_element.tabindex + ']';
      this.has_tabindex_behavior = true;
     }
  }

  if (has_events || dom_element.hasEvents()) this.element_id =  tag_name + "[events]";

  if (tag_name === 'object' ||
      tag_name === 'embed' ||
      tag_name === 'video' ||
      tag_name === 'audio') {
    this.is_embedded_app = true;
    this.element_id = tag_name;
  }
};


/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.InteractiveElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.InteractiveElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.InteractiveElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.InteractiveElement.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.InteractiveElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.InteractiveElement.prototype.getCacheProperties = function (unsorted) {

  var properties = this.dom_element.getCacheProperties(unsorted);

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.InteractiveElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.InteractiveElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};


/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.InteractiveElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.InteractiveElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};


/**
 * @method getLabelNLS
 *
 * @memberOf OpenAjax.a11y.cache.InteractiveElement
 *
 * @desc Returns an object with an NLS localized string and style properties
 *       If label is empty a missing label message will the returned
 *
 * @return {String | Object} Returns a String if the label has content,
 *                            but if label is empty it returns an object
 *                            with a 'label and 'style' property
 */

OpenAjax.a11y.cache.InteractiveElement.prototype.getLabelNLS = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  if (this.computed_label_length) {
    return this.computed_label;
  }
  else {
    return cache_nls.getNLSMissingLabelMessage();
  }

};

/**
 * @method getLabelSourceNLS
 *
 * @memberOf OpenAjax.a11y.cache.InteractiveElement
 *
 * @desc Returns an object with an NLS localized information on the source of the label
 *
 * @return {String | Object} Returns a String if the label has content,
 *                            but if label is empty it returns an object
 *                            with a 'label and 'style' property
 */

OpenAjax.a11y.cache.InteractiveElement.prototype.getLabelSourceNLS = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  return cache_nls.getValueNLS('computed_label_source', this.computed_label_source);

};


/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.InteractiveElement
 *
 * @desc Returns a text string representation of the input element
 *
 * @return {String} Returns string represention the InteractiveElement object
 */

OpenAjax.a11y.cache.InteractiveElement.prototype.toString = function () {

    var str = "";

    if (this.accessible_name_for_comparison.length) str = ': ' + this.accessible_name;

    return this.element_id + str;

};
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions andf
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                       DOMElementCache                            */
/* ---------------------------------------------------------------- */

/**
 * @constructor DOMElementCache
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a DOMElementCache object for represeting a DOM in a web browser
 *
 * @property {Array}  dom_elements        - A simple array of all the DOMElement objects in the cache
 * @property {Array}  dom_text            - A simple array of all the DOMText objects in the cache
 * @property {Object} page_element        - The dom element that is used as a place to collect results for rules with scope of page
 * @property {Array}  child_dom_elements  - The roor of a tree of DOMElement objects representing the node relationships on the DOM
 * @property {String} sort_property       - String  The DOMElement property the dom_elements array is sorted by
 * @property {Number} length              - The running length of the dom_elements array used for calculating the cache_id property of a DOMElement
 */

OpenAjax.a11y.cache.DOMElementCache = function () {

 this.dom_elements = [];
 this.dom_text = [];

 this.child_dom_elements = [];

 this.page_element = null;

 this.sort_property = 'document_order';
 this.length = 0;
 this.text_length = 0;

};

/**
 * @method initCache
 *
 * @memberOf OpenAjax.a11y.cache.DOMElementCache
 *
 * @desc Initializes properties of the DOMElementCache
 *
 * @return Nothing
 */

OpenAjax.a11y.cache.DOMElementCache.prototype.initCache = function () {

 this.dom_elements         = [];
 this.child_dom_elements   = [];
 this.sort_property        = 'document_order';
 this.page_element         = null;
 this.length               = 0;

};

/**
 * @method getPageElement
 *
 * @memberOf OpenAjax.a11y.cache.DOMElementCache
 *
 * @desc Gets the DOM node used to contain page level rule results
 *
 * @return {DOMElement} DOM element object used to contain page level rule results
 */

OpenAjax.a11y.cache.DOMElementCache.prototype.getPageElement = function () {

 return this.page_element;

};

/**
 * @method addDOMElement
 *
 * @memberOf OpenAjax.a11y.cache.DOMElementCache
 *
 * @desc Adds a DOMElement object to the array of all DOMElements and calculates the elements cache ID
 *
 * @param {DOMElement}  dom_element  - DOMElement object to add
 *
 * @return  {Number}  Returns the current number of elements in the array of DOMElements
 */

OpenAjax.a11y.cache.DOMElementCache.prototype.addDOMElement = function (dom_element) {

  // item must exist and have the position property
  if (dom_element) {
    this.length = this.length + 1;
    dom_element.document_order = this.dom_elements.length + 1;
    dom_element.cache_id = "element_" + this.length;
    this.dom_elements.push( dom_element );

    // only one page element per page
    if (!this.page_element &&
        (dom_element.tag_name === 'body')) {
      this.page_element = dom_element;
    }
 }

 return this.dom_elements.length;

};

/**
 * @method addDOMText
 *
 * @memberOf OpenAjax.a11y.cache.DOMElementCache
 *
 * @desc Adds a DOM text object to the array of all DOM text and calculates the cache ID
 *
 * @param {DOMText}  dom_text  - DOM text object to add
 *
 * @return  {Number}  Returns the current number of elements in the array of DOM text objects
 */

OpenAjax.a11y.cache.DOMElementCache.prototype.addDOMText = function (dom_text) {

 // item must exist and have the position property
 if (dom_text) {
  this.text_length  += 1;
  dom_text.document_order = this.text_length;
  dom_text.cache_id       = "text_" + this.text_length;
  this.dom_text.push(dom_text);
 }

 return this.dom_text.length;

};

/**
 * @method addChild
 *
 * @memberOf OpenAjax.a11y.cache.DOMElementCache
 *
 * @desc Adds a DOMElement or DOMText object to the root level of the tree reflecting the DOM of document
 *
 * @param {DOMElement | DOMText} dom_object  - DOMElement or DOMText object to add to the tree
 */

OpenAjax.a11y.cache.DOMElementCache.prototype.addChild = function (dom_object) {

  if (dom_object) {
    this.child_dom_elements.push(dom_object);
  }
};

/**
 * @method getDOMElementById
 *
 * @memberOf OpenAjax.a11y.cache.DOMElementCache
 *
 * @desc Returns the DOMElement object with the id attribute value
 *
 * @param {String} id - id of DOMElement object to find
 *
 * @return {DOMElement} Returns DOMElement with the associated id if found, otherwise null
 */

OpenAjax.a11y.cache.DOMElementCache.prototype.getDOMElementById = function (id) {

  var dom_elements     = this.dom_elements;
  var dom_elements_len = dom_elements.length;

  if (id && id.length) {
    for (var i = 0; i < dom_elements_len; i++) {
      var de = dom_elements[i];
      if (de.id === id) {
        return de;
      }
    } // end loop
  }
  return null;
};


/**
 * @method getDOMElementByName
 *
 * @memberOf OpenAjax.a11y.cache.DOMElementCache
 *
 * @desc Returns the DOMElement object with the id attribute value
 *
 * @param {String} name - name of DOMElement object to find
 *
 * @return {DOMElement} Returns DOMElement with the associated name if found, otherwise null
 */

OpenAjax.a11y.cache.DOMElementCache.prototype.getDOMElementByName = function (name) {

  var dom_elements     = this.dom_elements;
  var dom_elements_len = dom_elements.length;

  if (name && name.length) {
    for (var i = 0; i < dom_elements_len; i++) {

      var de = dom_elements[i];

      if (de.has_name && (de.name === name)) {
        return de;
      }
    } // end loop
  }
  return null;
};

/**
 * @deprecated getDOMElementByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.DOMElementCache
 *
 * @desc Finds the the DOMElement object with the matching cache ID value
 *
 * @param {String} cache_id  - cache_id of DOMElement object to find
 *
 * @return {DOMElement} Returns DOMElement with the associated cache ID if found, otherwise null
 */

OpenAjax.a11y.cache.DOMElementCache.prototype.getDOMElementByCacheId = function (cache_id) {
  return this.getItemByCacheId(cache_id);
};

/**
 * @method getItemByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.DOMElementCache
 *
 * @desc Finds the the DOMElement object with the matching cache ID value
 *
 * @param {String} cache_id  - cache_id of DOMElement object to find
 *
 * @return {DOMElement} Returns DOMElement with the associated cache ID if found, otherwise null
 */

OpenAjax.a11y.cache.DOMElementCache.prototype.getItemByCacheId = function (cache_id) {

  var i;
  var dom_elements_len = this.dom_elements.length;

  if (cache_id && cache_id.length) {
    for (i=0; i < dom_elements_len; i++) {
      if (this.dom_elements[i].cache_id == cache_id) {
        return this.dom_elements[i];
      }
    } // end loop
  }
  return null;
};


/**
 * @method getItemsByElementResults
 *
 * @memberOf OpenAjax.a11y.cache.DOMElementCache
 *
 * @desc Returns an array of cache items with node results based on the filter
 *
 * @param  {Number}  filter  - Filter for returning items with node results of a
 *                             particular type(s)
 *
 * @return {Array} Returns array of cache items, can be empty
 */

OpenAjax.a11y.cache.DOMElementCache.prototype.getItemsByElementResults = function (filter, all_flag) {

  return OpenAjax.a11y.util.getItemsByElementResults(this.dom_elements, filter, all_flag);

};


/**
 * @method getTextFromIds
 *
 * @memberOf OpenAjax.a11y.cache.DOMElementCache
 *
 * @desc    Gets the accessible text content from a list of ids
 *
 * @note    Used in calculating accessible names, labels and descriptions
 *
 * @param   {String} ids - a space separated list of ids
 *
 * @return  {String} Returns a string with the concatenated text content of the elements with ids
 */

OpenAjax.a11y.cache.DOMElementCache.prototype.getTextFromIds = function( ids ) {

  var i;
  var text_array = [];
  var id_array = ids.split(' ');
  var id_array_len = id_array.length;
  var dom_element = null;

  for (i=0; i<id_array_len; i++) {
    dom_element = this.getDOMElementById(id_array[i]);
    if (dom_element) {
      text_array.push(dom_element.getText());
    }
  } // end loop

  return text_array.join(' ');
};

/**
 * @method getUndefinedIds
 *
 * @memberOf OpenAjax.a11y.cache.DOMElementCache
 *
 * @desc    Idenfies any undefined ids in the DOM from a string of ids
 *
 * @note    Tests if a list of ids are include valid values
 *
 * @param   {String} ids - a space separated list of ids
 *
 * @return  {String} Returns a string containing the list of invalid ids
 */

OpenAjax.a11y.cache.DOMElementCache.prototype.getUndefinedIds = function( ids ) {

  var i;
  var invalid_ids = [];
  var id_array = ids.split(' ');
  var id_array_len = id_array.length;

  for (i=0; i<id_array_len; i++) {
    var id = id_array[i];
    var dom_element = this.getDOMElementById(id);
    if (!dom_element) invalid_ids.push(id);
  } // end loop

  return invalid_ids.join(' ');
};


/**
 * @method checkForUniqueIDs
 *
 * @memberOf OpenAjax.a11y.cache.DOMElementCache
 *
 * @desc Check DOMElements for unique ids and set id_unique property for all DOMElements in the cache
 *       Sets the 'id_unique' property on DOMElement objects that do not have unique ID attribute values
 */

OpenAjax.a11y.cache.DOMElementCache.prototype.checkForUniqueIDs = function () {

  var i;
  var j;

  var dom_elements = this.dom_elements;
  var dom_elements_len1 = dom_elements.length-1;
  var dom_elements_len2 = dom_elements.length;

  var de1;
  var de2;

  for (i = 0; i < dom_elements_len1; i++ ) {
    de1 = dom_elements[i];

    for (j=i+1; j < dom_elements_len2; j++) {
      de2 = dom_elements[j];

      if(de1.id.length && de2.id.length && de1.id == de2.id) {
        de1.id_unique = OpenAjax.a11y.ID.NOT_UNIQUE;
        de2.id_unique = OpenAjax.a11y.ID.NOT_UNIQUE;
      }
    }
  }
};


/* ---------------------------------------------------------------- */
/*                       DOMText Object                             */
/* ---------------------------------------------------------------- */

/**
 * @constructor DOMText
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc DOMText object represents DOM nodes of type text
 *
 *
 * @param  {Object}      node           - The DOM text node
 * @param  {DOMElement}  parent_element - DOMElement object that is the current parent in the tree
 *
 * @property  {LandmarkElement}  parent_landmark - LandmarkElement object that contains the text content
 * @property  {DOMElement}       body_element    - DOMElement of the body element that this element is
 *                                                 this is important for testing if elements are in the
 *                                                 same document if their are frames and iframes
 *
 * @property {Number}  type - Type of DOM node element or text
 * @property {String}  text - Text content of DOM text node
 *
 * @property {String}   text_normalized         - Normalized text in the node
 * @property {Number}   text_length             - length of the normalized text in the node
 *
 * @property {String}  cache_id        - String that uniquely identifies the cache element in the DOMCache
 * @property {Number}  document_order  - The ordinal position of this DOM text node in the DOM
 *
 * @property {Object}  computed_style  - Object that contains information about run time styling of the node
 * @property {Object}  events          - Object that contains information about event handlers attached to the node and its descendents
 *
 * @property {Boolean}  has_rule_results       - Boolean indicating if the node has any rule results
 * @property {Array}    rules_violations       - Array of ElementResult objects with severity of 'Violation'
 * @property {Array}    rules_manual_checks    - Array of ElementResult objects with severity of 'Manual Check'
 * @property {Array}    rules_warnings         - Array of ElementResult objects with severity of 'Warning'
 * @property {Array}    rules_passed           - Array of ElementResult objects with severity of 'Passed'
 * @property {Array}    rules_hidden           - Array of ElementResult objects with severity of 'Hidden'
 */

OpenAjax.a11y.cache.DOMText = function (node, parent_element) {

  this.node = node;
  this.type = Node.TEXT_NODE;
  this.text = node.data;
  this.parent_element = parent_element;

  this.parent_landmark      = null;
  this.body_element         = null;

  this.text_normalized = OpenAjax.a11y.util.normalizeSpace(this.text);
  var text_length      = this.text_normalized.length;
  this.text_length     = text_length;

  parent_element.addToCharacterCount(text_length);

  this.computed_style = parent_element.computed_style;

  // Create areas to store rule results associates with this node
  this.has_rule_results = false;
  this.rules_violations                = [];
  this.rules_manual_checks             = [];
  this.rules_warnings                  = [];
  this.rules_passed                    = [];
  this.rules_hidden                    = [];
};

/**
 * @method addText
 *
 *
 * @memberOf OpenAjax.a11y.cache.DOMText
 *
 * @desc   Check DOMElement for presence of attribute with specified value
 *
 * @param  {String} text  - text content to add
 *
 * @return {Number}  Length of the normailized text content of the DOM text node
 */

OpenAjax.a11y.cache.DOMText.prototype.addText = function (text) {

  this.text += text;

  this.text_normalized = OpenAjax.a11y.util.normalizeSpace(this.text);

  var text_length = this.text_normalized.length;

  this.parent_element.addToCharacterCount(text_length - this.text_length);

  this.text_length = text_length;

};


/**
 * @method getId
 *
 * @memberOf OpenAjax.a11y.cache.DOMText
 *
 * @desc   If defined, return the id of the dom node containing this text
 *
 * @return {String} If defined return id value, else empty string
 */

OpenAjax.a11y.cache.DOMText.prototype.getId = function () {

  return this.parent_element.getId();

};

/**
 * @method getClassName
 *
 * @memberOf OpenAjax.a11y.cache.DOMText
 *
 * @desc   If defined, return the class attribute value of the dom node containing this text
 *
 * @return {String} If defined return class value value, else empty string
 */

OpenAjax.a11y.cache.DOMText.prototype.getClassName = function () {

  return this.parent_element.getClassName();

};

/**
 * @method getParentLandmark
 *
 * @memberOf OpenAjax.a11y.cache.DOMText
 *
 * @desc   If defined, return the parent landmark element information
 *
 * @return {String} If defined return class value value, else empty string
 */

OpenAjax.a11y.cache.DOMText.prototype.getParentLandmark = function () {

  return this.parent_element.getParentLandmark();

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.DOMText
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.DOMText.prototype.getElementResults = function () {

  function addResultNodes(items) {

    var len = items.length;

    for (var i = 0; i < len; i++ ) {
      result_nodes.push(items[i]);
    }

  }

  var result_nodes = [];

  addResultNodes(this.rules_violations);
  addResultNodes(this.rules_manual_checks);
  addResultNodes(this.rules_warnings);
  addResultNodes(this.rules_passed);
  addResultNodes(this.rules_hidden);

  return result_nodes;

};

/**
 * @method getAccessibility
 *
 * @memberOf OpenAjax.a11y.cache.DOMText
 *
 * @desc Returns the worst severity level of rule results
 *
 * @return {Object} Results an object wiith two properties: 'severity' : nls value of the severity, 'style' : a severity styling constant
 */

OpenAjax.a11y.cache.DOMText.prototype.getAccessibility = function () {

  var cache_nls      = OpenAjax.a11y.nls.Cache;
  var RESULT_VALUE       = OpenAjax.a11y.RESULT_VALUE;

  var severity = cache_nls.getResultValueNLS(RESULT_VALUE.NONE);

//  if (this.rules_hidden.length) {
//    severity = cache_nls.getResultValueNLS(RESULT_VALUE.HIDDEN);
//  }

  if (this.rules_passed.length) {
    severity = cache_nls.getResultValueNLS(RESULT_VALUE.PASS);
  }

  if (this.rules_manual_checks.length) {
    severity = cache_nls.getResultValueNLS(RESULT_VALUE.MANUAL_CHECK);
  }

  if (this.rules_warnings.length) {
    severity = cache_nls.getResultValueNLS(RESULT_VALUE.WARNING);
  }

  if (this.rules_violations.length) {
    severity = cache_nls.getResultValueNLS(RESULT_VALUE.VIOLATION);
  }

  return severity;

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.DOMText
 *
 * @desc Returns an empty array, text nodes do not have attributes
 *
 * @return {Array} Returns a empty array
 */

OpenAjax.a11y.cache.DOMText.prototype.getAttributes = function () {

  return [];

};

/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.DOMText
 *
 * @desc Returns an empty array, text nodes do not have events
 *
 * @return {Array} Returns a empty array
 */

OpenAjax.a11y.cache.DOMText.prototype.getEvents = function () {

  return [];

};


/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.DOMText
 *
 * @desc Returns an array of styling information for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of NLS objects for styling
 */

OpenAjax.a11y.cache.DOMText.prototype.getCacheProperties = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties  = [];

  cache_nls.addPropertyIfDefined(properties, this, 'text_normalized');
  cache_nls.addPropertyIfDefined(properties, this, 'text_length');
  cache_nls.addPropertyIfDefined(properties, this, 'has_rule_results');

  cache_nls.addPropertyIfDefined(properties, this, 'parent_landmark');
  cache_nls.addPropertyIfDefined(properties, this, 'body_element');

  return properties;

};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.DOMText
 *
 * @desc Returns an array of styling information for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of NLS objects for styling
 */

OpenAjax.a11y.cache.DOMText.prototype.getStyle = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties  = [];

  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'is_visible_onscreen');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'is_visible_to_at');

  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'display');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'visibility');

  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'color');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'opacity');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'background_color');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'background_image');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'background_repeat');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'background_position');

  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'font_family');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'font_size');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'font_weight');

  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'position');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'left');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'top');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'width');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'height');

  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'outline_style');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'outline_color');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'outline_width');

  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'pseudo_focus');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'pseudo_before');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'pseudo_after');

  return properties;

};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.DOMText
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number | Object} Returns the value of the property
 */

OpenAjax.a11y.cache.DOMText.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    if (typeof this.computed_style[property] == 'undefined') {
      if (typeof this.parent_element[property] == 'undefined') {
        if (this.parent_landmark) {
          if (typeof this.parent_landmark[property] == 'undefined') {
            if (typeof this.parent_landmark.dom_element[property] == 'undefined') {
              return null;
            }
            else {
              return this.parent_landmark.dom_element[property];
            }
          }
          else {
            return this.parent_landmark[property];
          }
        }
      }
      else {
        return this.parent_element[property];
      }
    }
    else {
      return this.computed_style[property];
    }
  }

  return this[property];
};


/**
 * @method getColorContrastElementResult
 *
 * @memberOf OpenAjax.a11y.cache.DOMText
 *
 * @desc Returns a node result for a color contrast rule
 *
 * @return {Object} Returns node result object of a color contrast rule
 */

OpenAjax.a11y.cache.DOMText.prototype.getColorContrastElementResult = function() {

  function findColorContrastRule(node_results) {

    var node_results_len = node_results.length;

    for (var i = 0; i < node_results_len; i++ ) {

      var node_result = node_results[i];

      var rule_id = node_result.getRuleId();

      if (rule_id === "COLOR_1") return node_result;
      if (rule_id === "COLOR_2") return node_result;

    }

    return null;
  }

  var nr = findColorContrastRule(this.rules_violations);
  if (nr) return nr;

  nr = findColorContrastRule(this.rules_manual_checks);
  if (nr) return nr;

  nr = findColorContrastRule(this.rules_warnings);
  if (nr) return nr;

  nr = findColorContrastRule(this.rules_passed);
  if (nr) return nr;

  nr = findColorContrastRule(this.rules_hidden);
  if (nr) return nr;

  return null;

};

/**
 * @method getText
 *
 * @memberOf OpenAjax.a11y.cache.DOMText
 *
 * @desc Returns text content of a DOMText element
 *
 * @return {String} Returns the text content dom text node
 */

OpenAjax.a11y.cache.DOMText.prototype.getText = function() {
  return this.text_normalized;
};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.DOMText
 *
 * @desc Returns text representation of a DOMText element
 *
 * @return {String} Returns a string representing the DOM text node
 */

OpenAjax.a11y.cache.DOMText.prototype.toString = function(option) {
  var str;

  if (option == 'text') str = "'" +  this.text_normalized + "'";
  else str = this.parent_element.tag_name + ": '" +  this.text_normalized + "'";

  return str;
};


/* ---------------------------------------------------------------- */
/*                       DOMElement Object                          */
/* ---------------------------------------------------------------- */

/**
 * @constructor DOMElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc The DOMElement object represents a dom node of a document
 *
 * @param {Object} node                     - DOM node object of the element
 * @param {Object} parent_element           - DOMElement object that is the parent element of this node
 *
 * @property  {String}    cache_id            - String that uniquely identifies the cache element in the DOMCache
 * @property  {String}    xpath               - String that identifies the position of the element in the document
 *
 * @property {Array}      child_dom_elements  - The child DOMElement and DOMText objects of this DOMElement in the tree
 * @property {DOMElement} parent_element      - The parent DOMElement of this DOMElement in the tree
 *
 * @property {LandmarkElement}  parent_landmark - LandmarkElement object that contains this element
 * @property  {DOMElement}       body_element    - DOMElement of the body element that this element is
 *                                                 this is important for testing if elements are in the
 *                                                 same document if their are frames and iframes
 *
 * @property {Number}     type                - Type of DOM node is element
 * @property {Number}     document_order      - The ordinal position of this DOM element node in the DOM
 *
 * @property {Object}     node                - Reference to the 'live' DOM element represented by this object
 * @property {String}     tag_name            - Tag name of the HTML element in lowercase characters (i.e. p, div, h1, span ...)
 * @property {Array}      aria_attributes     - Array of ARIA properties and states defined for the node
 *
 * @property {String}     id         - id attribute value of the DOM node (can be empty)
 * @property {Number}     id_unique  - Indicates if id is defined, unique or has a duplicate in the document
 *
 * @property {Number}     character_count  - Count of text charcters in the immediate child DOM text nodes
 *
 * @property {String}     class_name     - The value of the class attribute of the DOM node
 * @property {String}     role           - The value of the role attribute of the DOM node
 *
 * @property {String}     alt      - String   The value of the alt attribute of the DOM node
 * @property {Boolean}    has_alt  - true if the alt attribute is defined, otherwise false
 *
 * @property {String}     src      - String   The value of the src attribute of the DOM node
 * @property {Boolean}    has_src  - true if the src attribute is defined, otherwise false
 *
 * @property {String}     href      - String   The value of the href attribute of the DOM node
 * @property {Boolean}    has_href  - true if the href attribute is defined, otherwise false
 *
 * @property {String}     title               - The value of the title            attribute of the DOM node
 * @property {String}     aria_describedby    - The value of the aria-describedby attribute of the DOM node
 * @property {String}     aria_hidden         - The value of the aria-hidden      attribute of the DOM node
 * @property {String}     aria_label          - The value of the aria-label       attribute of the DOM node
 * @property {String}     aria_labelledby     - The value of the aria-labelledby  attribute of the DOM node
 *
 * @property {Boolean}     has_aria_activedescendant     - True if the current element has defined aria-activedescendent attribute, otherwise false
 * @property {Boolean}     ancestor_has_aria_activedescendant - True if a ancestor element has defined aria-activedescendent attribute, otherwise false
 *
 * @property {String}     calculated_aria_description  - If aria-describedby defined this is a string of the
 *                                                       description content
 *
 * @property {String}     role                - Implicit or set role on the element
 * @property {String}     implicit_role       - Implict role of the elements based on ARIA in HTML spec
 * @property {Boolean}    has_role            - True if element has a role value, otherwise false
 * @property {Boolean}    has_aria_owns            - True if element has a aria-owns property, otherwise false
 * @property {Boolean}    has_aria-attributes - True if element has a aria attributes, otherwise false
 * @property {Boolean}    is_widget           - True if element is a ARIA widget, otherwise false
 * @property {Boolean}    is_landmark         - True if element is a ARIA landmark, otherwise false
 * @property {Boolean}    is_live             - True if element is a ARIA live region, otherwise false
 * @property {Boolean}    is_section          - True if element is a section role, otherwise false
 * @property {Array}      aria_attributes     - Array of ARIA property and state attributes (i.e. attributes
 *                                              beginning with 'aria-')
 * @property {Array}      other_attributes    - Array of other attribute names and values found on the element
 *                                              not sotred in another property of this object
 *
 * @property {Array}      invalid_aria_attributes             - Array of attributes that start with aria-, but are not defined by aria
 * @property {Array}      aria_attributes_with_invlaid_values - Array of attributes who have
 *
 *
 * @property {Object}     role_info       - Object containing information about a widget
 * @property {Object}     owned_by        - Array of reference to Widget objects that own the dom element using aria-owns
 * @property {Object}     widget_element  - Reference to the corresponding widget element
 *
 *
 * @property {Object}     events              - Object that contains information about events associated with the node
 * @property {Object}     computed_style      - Object that contains information about run time styling of the node
 * @property {Boolean}    has_outline         - True if element CSS outline property is not 'none' and 'width' > 0
 *
 * @property {Boolean}    has_rule_results       - Boolean indicating if the node has any rule results
 * @property {Array}      rules_passed           - Array of ElementResult objects with severity of 'Passed'
 * @property {Array}      rules_violations       - Array of ElementResult objects with severity of 'Violation'
 * @property {Array}      rules_manual_checks    - Array of ElementResult objects with severity of 'Manual Check'
 * @property {Array}      rules_warnings         - Array of ElementResult objects with severity of 'Warning'
 * @property {Array}      rules_hidden           - Array of ElementResult objects with severity of 'Hidden'
 *
 * @param {Object}    node            - The DOM text node
 * @param {DOMElement}  parent_element  - DOMElement object that is the parent DOMElement object in the tree
 * @param {doc}   document  - Document object of the current page being analyzed, only defined when element
                              is a 'body' element to get information about events attached to the document
 */

OpenAjax.a11y.cache.DOMElement = function (node, parent_dom_element, doc) {

  function addAriaAttribute (name, value) {

    function getTokens(list) {

      var str = "";
      var last = list.length - 1;

      for (var i = 0; i < list.length; i++) {
         str += list[i];
         if (i !== last) str += " | ";
      }

      return str;
    }

    function validValue(value, type, values, allowUndeterminedValue) {

      var i;
      var j;

      var v = parseInt(value, 10);

      switch (type) {

      case 'boolean':
        if (value === 'true' || value === 'false') return true;
        break;

      case 'decimal':
        if (typeof parseFloat(value) === 'number') return true;
        break;

      case 'idref':
        if (value.length) return true;
        break;

      case 'idrefs':
        if (value.length) return true;
        break;

      case 'integer':
        if (!isNaN(v) &&
            ( v > 0) ||
            (allowUndeterminedValue && (v === -1 || v === 0))) {
          return true;
        }
        break;

      case 'nmtoken':
        for (i = 0; i < values.length; i++) {
          if (value === values[i]) return true;
        }
        break;

      case 'tristate':
      case 'nmtokens':
        var tokens = [];
        tokens.push(value);
        if (value.indexOf(' ') > 0) tokens = value.split(' ');

        var flag = true;

        for (i = 0; i < tokens.length && flag; i++) {
          flag = false;
          for (j = 0; j < values.length && !flag; j++) {
            if (tokens[i] === values[j]) flag = true;
          }
        }
        return flag;

      case 'number':
        if (!isNaN(value) && value.length) return true;
        break;

      case 'positive':
        if (!isNaN(value) &&
            (parseInt(value, 10) > 0)) return true;
        break;

      case 'string':
        if (value.length) return true;
        break;

      default:
        break;

      }

      return false;

    }   // end addAriaAttribute function

    var property_info = OpenAjax.a11y.aria.propertyDataTypes[name];

    var av = {};
    av.name = name;
    av.value = value;
    av.type = "undefined";
    av.is_valid_attribute = true;
    av.is_value_valid     = false;
    av.tokens = null;

    if (property_info) {
      av.type = property_info.type;
      if (property_info.values && property_info.values.length) {
        av.tokens = getTokens(property_info.values);
      }

      if (typeof property_info.values !== 'undefined') {
        av.is_value_valid = validValue(av.value, av.type, property_info.values, property_info.allowUndeterminedValue);
      } else {
        av.is_value_valid = validValue(av.value, av.type, []);
      }
    }
    else {
      av.is_valid_attribute = false;
      invalid_aria_attributes.push(av);
    }
    aria_attributes.push(av);
  }


  function addOtherAttribute (name, value) {

    var oa = {};
    oa.name  = name;
    oa.value = "";

    if (typeof value !== 'undefined') {
      oa.value = value;
      other_attributes.push(oa);
    }
    else {
      if ((name === 'required') ||
          (name === 'readonly') ||
          (name === 'disabled') ||
          (name === 'multiple')) {
        other_attributes.push(oa);
      }
    }
  }


  var i;
  var attr;
  var attributes;
  var role_info;

  // check to make sure it is a valid node
  if (!node) return null;


  this.document = doc;

  this.has_element_children = false;

  this.type           = Node.ELEMENT_NODE;
  this.document_order = 0;
  this.node           = node;
  this.tag_name       = node.tagName.toLowerCase();
  this.id             = node.id;
  this.name           = "";

//  OpenAjax.a11y.logger.debug("[DOMElement][tag_name]: " + this.tag_name);

  this.owned_by = [];
  this.widget_element = null;

  this.element_aria_info = OpenAjax.a11y.ariaInHTML.getElementAriaInfo(node);

//  OpenAjax.a11y.logger.debug("[DOMElement][element_aria_info]: " + this.element_aria_info);

  if (!this.id || this.id.length === 0) {
    this.id_unique  = OpenAjax.a11y.ID.NOT_DEFINED;
  }
  else {
    this.id_unique  = OpenAjax.a11y.ID.UNIQUE;
  }

  this.character_count = 0;

  // Save relationships with other elements
  this.parent_element = parent_dom_element;
  this.child_dom_elements = [];

  var aria_attributes = [];
  var invalid_aria_attributes = [];
  var other_attributes = [];

  this.parent_landmark = null;
  this.body_element    = null;

  // Cache important attributes for accessibility
  i = 0;
  attr = null;
  attributes = node.attributes;

  this.html_attrs = {};
  this.aria_attrs = {};

  this.class_name = "";

  if (typeof node.className === 'string') this.class_name = node.className;

//  OpenAjax.a11y.logger.debug("[DOMElement][tag_name]" + this.tag_name);

  this.tab_index = node.tabIndex;

//  OpenAjax.a11y.logger.debug("[DOMElement]: " + node.tagName + "; tabindex: " + this.tab_index+ "; is number: " + !isNaN(this.tab_index));

  this.draggable = undefined;

  this.is_interactive  = false;
  if ((this.tag_name === 'a') ||
      (this.tag_name === 'button') ||
      (this.tag_name === 'input') ||
      (this.tag_name === 'select') ||
      (this.tag_name === 'textarea') ||
      (this.tag_name === 'video') ||
      (this.tag_name === 'audio') ||
      (this.tag_name === 'object') ||
      (this.tag_name === 'embed') ||
      (this.tag_name === 'applet')) {
    this.is_interactive  = true;
  }

  this.input_type = '';
  if (this.tag_name === 'input') {
    this.input_type = 'text';

    if (node.getAttribute('type')) {
      this.input_type = node.getAttribute('type');
    }

    this.input_type = this.input_type.toLowerCase();

  }

  this.is_widget       = false;
  this.is_implied_role = false;
  this.is_landmark     = false;
  this.is_live         = false;
  this.is_section      = false;
  this.is_abstract     = false;
  this.is_presentation = false;
  this.is_group        = false;

  this.has_alt                   = false;
  this.has_aria_atomic           = false;
  this.has_aria_attributes       = false;
  this.has_aria_activedescendant = false;
  this.has_aria_controls         = false;
  this.has_aria_describedby      = false;
  this.has_aria_flowto           = false;
  this.has_aria_hidden           = false;
  this.has_aria_invalid          = false;
  this.has_aria_label            = false;
  this.has_aria_labelledby       = false;
  this.has_aria_live             = false;
  this.has_aria_owns             = false;
  this.has_aria_required         = false;
  this.has_autofocus             = false;
  this.has_headers               = false;
  this.has_href                  = false;
  this.has_type_attr             = false;
  this.has_lang                  = false;
  this.has_longdesc              = false;
  this.has_name                  = false;
  this.has_pattern               = false;
  this.has_placeholder           = false;
  this.has_required              = false;
  this.has_role                  = false;
  this.has_scope                 = false;
  this.has_src                   = false;
  this.has_summary               = false;
  this.has_tabindex              = false;
  this.has_title                 = false;
  this.has_value                 = false;


  this.implicit_role  = this.element_aria_info.defaultRole;
  this.role           = "";
  this.role_info      = null;
  this.aria_invalid   = false;
  this.aria_required  = false;
  this.title = '';


  this.ancestor_has_aria_activedescendant = false;
  if (parent_dom_element) this.ancestor_has_aria_activedescendant = parent_dom_element.ancestor_has_aria_activedescendant;

  // Check for ARIA Attributes

  for (i = 0; i < attributes.length; i++) {

    attr = attributes[i];

    if (attr.name.toLowerCase().indexOf('aria-') === 0) {
      this.aria_attrs[attr.name] = attr.value;
    } else {
      this.html_attrs[attr.name] = attr.value;
    }

    var attr_value = OpenAjax.a11y.util.normalizeSpace(attr.value);

    switch (attr.name) {

    case 'alt':
      this.alt = attr.value;
      this.has_alt = true;
      addOtherAttribute(attr.name, attr_value);
      break;

    case 'aria-activedescendant':
      this.has_aria_activedescendant = true;
      addAriaAttribute('aria-activedescendant', attr_value);
      break;

    case 'aria-atomic':
      this.has_aria_atomic = true;
      this.aria_atomic = attr_value;
      addAriaAttribute('aria-atomic', attr_value);
      this.has_aria_attributes = true;
      break;

    case 'aria-controls':
      this.has_aria_controls  = true;
      addAriaAttribute('aria-controls', attr_value);
      break;

    case 'aria-describedby':
      this.has_aria_describedby = true;
      this.aria_describedby = attr_value;
      addAriaAttribute('aria-describedby', attr_value);
      this.has_aria_attributes = true;
      break;

    case 'aria-flowto':
      this.has_aria_flowto  = true;
      this.aria_flowto = attr_value;
      addAriaAttribute('aria-flowto', attr_value);
      break;

    case 'aria-hidden':
      this.aria_hidden = attr_value.toLowerCase();
      addAriaAttribute('aria-hidden', attr_value);
      this.has_aria_attributes = true;
      this.has_aria_hidden = true;
      break;

    case 'aria-invalid':
      this.aria_invalid = attr_value.toLowerCase() === 'true';
      addAriaAttribute('aria-invalid', attr_value);
      this.has_aria_invalid = true;
      break;

    case 'aria-label':
      this.aria_label = attr_value;;
      addAriaAttribute('aria-label', attr_value);
      this.has_aria_label = true;
      break;

    case 'aria-labelledby':
      this.has_aria_labelledby = true;
      this.aria_labelledby = attr_value;;
      addAriaAttribute('aria-labelledby', attr_value);
      break;

    case 'aria-live':
      this.is_live  = true;
      this.has_aria_live = true;
      this.aria_live = attr_value;
      addAriaAttribute('aria-live', attr_value);
      this.has_aria_attributes = true;
      break;

    case 'aria-owns':
      this.has_aria_owns  = true;
      this.aria_owns = attr_value;
      addAriaAttribute('aria-owns', attr_value);
      break;


    case 'aria-required':
      this.aria_required = attr_value.toLowerCase() === 'true';
      addAriaAttribute('aria-required', attr_value);
      this.has_aria_required = true;
      break;

    case 'autofocus':
      this.has_autofocus  = true;
      break;

    case 'class':
      this.class_name = attr_value.toLowerCase();
      addOtherAttribute(attr.name, attr_value);
      break;

    case 'draggable':
      this.draggable = attr_value.toLowerCase();
      addOtherAttribute(attr.name, attr_value);
      break;

    case 'headers':
      if (attr_value.length > 0) this.has_headers = true;
      break;

    case 'href':
      this.has_href = true;
      this.href = attr_value;
      addOtherAttribute('href', attr_value);
      break;

    case 'lang':
      this.lang = attr_value;
      this.has_lang = true;
      addOtherAttribute(attr.name, attr_value);
      break;

    case 'name':
      this.has_name = true;
      this.name = attr_value;
      break;

    case 'longdesc':
      if (attr_value.length > 0) {
        this.has_longdesc = true;
        this.longdesc = attr_value;
      }
      break;

    case 'pattern':
      if (attr_value.length > 0) this.has_pattern = true;
      break;

    case 'placeholder':
      if (attr_value.length > 0) this.has_placeholder = true;
      break;

    case 'required':
      this.has_required = true;
      break;

    case 'type':
      if (attr_value.length > 0) {
        this.has_type_attr = true;
        this.type_attr     = attr_value.toLowerCase();
      }
      break;


    case 'role':

      var role = attr_value.toLowerCase();

      this.has_role = true;
      this.role = role;

      role_info = OpenAjax.a11y.aria.getRoleObject(role);

      if (!role_info || !role_info.roleType) continue;

      this.role_info = role_info;

      if (role === 'group') this.is_group = true;
      if (role === 'none') this.is_presentation = true;
      if (role === 'presentation') this.is_presentation = true;

      if (role_info.roleType.indexOf('range') >= 0) {
        this.is_range = true;
      }

      if (role_info.roleType.indexOf('widget') >= 0 ||
          role_info.roleType.indexOf('window') >= 0) {

        this.is_interactive = true;
        this.is_widget = true;
        this.is_tab_stoppable = true;
        if (role_info.container && role_info.container.length) {
          this.is_tab_stoppable = false;
        }
      }

      this.is_landmark = role_info.roleType.indexOf('landmark') >= 0;
      this.is_live = role_info.roleType.indexOf('live') >= 0;
      this.is_section = role_info.roleType.indexOf('section') >= 0 || role_info.roleType.indexOf('structure') >= 0;
      this.is_abstract = role_info.roleType.indexOf('abstract') >= 0;

      break;

    case 'scope':
      this.scope = attr.value;
      if (attr_value.length > 0) this.has_scope = true;
      break;

    case 'src':
      this.has_src = true;
      this.src = attr.value;
      addOtherAttribute('src', attr.value);
      break;

    case 'summary':
      this.summary = attr.value;
      if (attr_value.length > 0) this.has_summary = true;
      break;

    case 'tabindex':
      if (!isNaN(attr.value)) {
        this.tabindex = attr.value;
        this.has_tabindex = true;
      }
      break;

    case 'title':
      this.has_title = true;
      this.title = attr.value;
      break;

    case 'value':
      this.has_value = true;
      this.value = attr.value;
      break;

    default:

      if (attr.name.indexOf('aria-') === 0 ) {
        addAriaAttribute(attr.name, attr_value);
        this.has_aria_attributes = true;
      }
      else {
        addOtherAttribute(attr.name, attr_value);
      }
      break;

    } // end switch
  } // end loop


  this.aria_attributes          = aria_attributes;
  this.other_attributes         = other_attributes;
  this.invalid_aria_attributes  = invalid_aria_attributes;

  this.events = {};
  this.events.supports_events = false;

  switch (OpenAjax.a11y.EVENT_HANDLER_PROCESSOR) {

  case 'firefox':
    this.events = this.EnumerateFirefoxEvents(node, parent_dom_element);
    break;

  case 'fae-util':
    this.events = this.EnumerateFaeUtilEvents(node, parent_dom_element);
    break;

  default:
    this.events = this.EnumerateInlineEvents(node, parent_dom_element);
    break;
  }


  // Create areas to store rule results associates with this node
  this.has_rule_results = false;
  this.rules_violations                = [];
  this.rules_manual_checks             = [];
  this.rules_warnings                  = [];
  this.rules_passed                    = [];
  this.rules_hidden                    = [];

//  OpenAjax.a11y.logger.debug("[DOMElement][done]");

  return this;

};

/**
 * @method getAttributeValue
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc  Get attribute value, if not defined by author returns default value, if no default
 *        value returns empty string
 *
 * @param  {String} attr          - ARIA Attribute to get value
 *
 * @return {String or Number} - Value of attribute based on the value type of the attribute,
 *                              if not defined return empty string
 }
 */

OpenAjax.a11y.cache.DOMElement.prototype.getAttributeValue = function (attr) {


  function valueAsPropertyType(value) {

    var v;

    if (value) {
      switch (attr_info.type) {
        case 'decimal':
          v = parseFloat(value);
          if (!isNaN(v)) {
            value = v;
          }
          break;

        case 'number':
        case 'integer':
          v = parseInt(value, 10);
          if (!isNaN(v)) {
            value = v;
          }
          break;

        default:
          break;
      }
    }

    return value;
  }

  var value = '';
  var attr_info = OpenAjax.a11y.aria.propertyDataTypes[attr];

  if (attr_info) {
    // Try IDL first
    if (attr_info.idlAttribute) {
      value = this.node[attr_info.idlAttribute];
    }

    if (!value) {
      value = this.node.getAttribute(attr);
      if (!value) {
        value = attr_info.defaultValue;
      }
    }
  }

  return valueAsPropertyType(value);
}

/**
 * @method isAttributeValueValid
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc  Checkes the value based on the property information information
 *        for a valid value
 *
 * @param  {String}           attr - ARIA Attribute to validate
 * @param  {String or Number} value - Value to validate
 *
 * @return {Boolean} true if allowed value and type, otherwise false
 */

OpenAjax.a11y.cache.DOMElement.prototype.isAttributeValueValid = function (attr, value) {

  var attr_info = OpenAjax.a11y.aria.propertyDataTypes[attr];

  var flag = false;

  var v = parseInt(value, 10);

  switch (attr_info.type) {

  case 'boolean':
    flag = typeof value === 'boolean';
    break;

  case 'number':
  case 'decimal':
    flag = typeof value === 'number';
    break;

  case 'idref':
  case 'idrefs':
  case 'string':
    flag = (typeof value === 'string') && (value.length > 0);
    break;

  case 'integer':
  case 'positive':
    if ((typeof v === 'number') &&
        ((v > 0) ||
         (attr_info.type.allowUndeterminedValue && (v === -1 || v === 0)))) {
      flag = true;
    }
    break;

  case 'tristate':
  case 'nmtoken':
    flag = attr_info.values.indexOf(value.toLowerCase()) >= 0;
    break;

  case 'nmtokens':
    var values = value.split(' ');
    flag = true;
    for (var i = 0; i < values.length && flag; i += 1) {
      flag = flag && (attr_info.values.indexOf(values[i]) >= 0);
    }
    break;

  default:
    break;

  }

//  console.log('[valid][' + attr + '][value]: ' + value + ' (' + (typeof value) + ')' + ' [flag]: ' + flag);

  return flag;

}

/**
 * @method addOwnedby
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc  Updates array of reference to widget elements that own this dom element
 *
 * @param  {object} widget_element - Widget element that owns
 } r
 */

OpenAjax.a11y.cache.DOMElement.prototype.addOwnedBy = function (widget_element) {

  function updateReferences(de) {
    // a widget element can only own this node once
    if (de.owned_by.indexOf(widget_element) < 0) {
      var role = widget_element.dom_element.role;
      if (de.role_info && de.role_info.requiredParents.indexOf(role) >= 0) {
        de.owned_by.push(widget_element);
      }
    }

    if (widget_element.owned_dom_elements.indexOf(de) < 0) {
      widget_element.owned_dom_elements.push(de);
    }

    for (var i = 0; i < de.child_dom_elements.length; i += 1) {
      var child_de = de.child_dom_elements[i];
      if (child_de.type === Node.ELEMENT_NODE) {
        updateReferences(child_de);
      }
    }

  }

  updateReferences(this);

};

/**
 * @method setImpliedRole
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc  Sets an implid role for the DOM element
 *
 * @param  {String} role - new role for the element
 */

OpenAjax.a11y.cache.DOMElement.prototype.setImpliedRole = function (role) {

  if (!this.has_role && typeof role === 'string' && (role.length > 0)) {

    var role_info = OpenAjax.a11y.aria.getRoleObject(role);

    if (!role_info) return;

    this.has_role = true;
    this.role = role;
    this.is_implied_role = true;

    this.role_info = role_info;

    if (role_info && role_info.roleType) {

      if (role_info.roleType.indexOf('widget') >= 0 ||
          role_info.roleType.indexOf('window') >= 0) {
        this.is_widget = true;
      }

      if (role_info.roleType.indexOf('landmark') >= 0) {
        this.is_landmark = true;
      }

      if (role_info.roleType.indexOf('live') >= 0) {
        this.is_live = true;
      }

      if (role_info.roleType.indexOf('abstract') >= 0) {
        this.is_abstract = true;
      }

      if (role_info.roleType.indexOf('section') >= 0) {
        this.is_section = true;
      }

    }
  }
};

/**
 * @method getId
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc   If definded, return the id of the dom node
 *
 * @return {String} If defined return id value, else empty string
 */

OpenAjax.a11y.cache.DOMElement.prototype.getId = function () {

  if (this.id) return this.id;

  return "";

};

/**
 * @method getRole
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc   If definded, return the role
 *
 * @return {String} If defined return role value, else empty string
 */

OpenAjax.a11y.cache.DOMElement.prototype.getRole = function () {

  if (this.role) return this.role;

  return "";

};

/**
 * @method getClassName
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc   If defined, return the class attribute value of the dom node
 *
 * @return {String} If defined return class value value, else empty string
 */

OpenAjax.a11y.cache.DOMElement.prototype.getClassName = function () {

  if (this.class_name) return this.class_name;

  return "";

};


/**
 * @method getParentLandmark
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc   If defined, return the parent landmark element information
 *
 * @return {String} If defined return class value value, else empty string
 */

OpenAjax.a11y.cache.DOMElement.prototype.getParentLandmark = function () {

  if (this.parent_landmark) return this.parent_landmark.toString();

  return "none";

};


/**
 * @method hasOwns
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc   Check DOMElement for presence of aria-owns attribute
 *
 * @return {boolean} Indicates whether or not DOMElement has aria-owns attribute with values
 */

OpenAjax.a11y.cache.DOMElement.prototype.hasOwns = function () {

  return this.has_aria_owns;

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.DOMElement.prototype.getElementResults = function () {

  function addResultNodes(items) {

    var len = items.length;

    for (var i = 0; i < len; i++ ) {
      result_nodes.push(items[i]);
    }

  }

  var result_nodes = [];

  addResultNodes(this.rules_violations);
  addResultNodes(this.rules_manual_checks);
  addResultNodes(this.rules_warnings);
  addResultNodes(this.rules_passed);
  addResultNodes(this.rules_hidden);

  return result_nodes;

};

/**
 * @method containsInteractiveElements
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Tests if a DOM element has any descendants that are widgets
 *
 * @return {Boolean}  'True' if at least one descendant dom element is a widget, otherwise 'false'
 */

OpenAjax.a11y.cache.DOMElement.prototype.containsInteractiveElements = function () {

  function checkChildren(children) {

     if (!children || !children.length ) return false;

     var flag = false;

     for (var i = 0; (i < children.length) && !flag; i++) {

       var child = children[i];

       if (child.type != Node.ELEMENT_NODE) continue;

       if (child.is_interactive) flag = true;
       else if (child.child_dom_elements.length) flag = checkChildren(child.child_dom_elements);

     }

     return flag;

  }

  return checkChildren(this.child_dom_elements);

};


/**
 * @method getHasDescribedBy
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns NLS string on whether the dom element has a aria-describedby attribute
 *
 * @return {String} If true returns "Yes", else "No"
 */

OpenAjax.a11y.cache.DOMElement.prototype.getHasDescribedBy = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  if (this.has_aria_describedby) return cache_nls.getLabelAndValueNLS('has_aria_describedby', this.has_aria_describedby).value;

  return "";
};

/**
 * @method getAccessibility
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns the worst severity level of rule results
 *
 * @return {Object} Results an object wiith two properties: 'severity' : nls value of the severity, 'style' : a severity styling constant
 */

OpenAjax.a11y.cache.DOMElement.prototype.getAccessibility = function () {

  var cache_nls      = OpenAjax.a11y.nls.Cache;
  var RESULT_VALUE       = OpenAjax.a11y.RESULT_VALUE;

  var severity = cache_nls.getResultValueNLS(RESULT_VALUE.NONE);

  if (this.rules_passed.length) {
    severity = cache_nls.getResultValueNLS(RESULT_VALUE.PASS);
  }

  if (this.rules_manual_checks.length) {
    severity = cache_nls.getResultValueNLS(RESULT_VALUE.MANUAL_CHECK);
  }

  if (this.rules_warnings.length) {
    severity = cache_nls.getResultValueNLS(RESULT_VALUE.WARNING);
  }

  if (this.rules_violations.length) {
    severity = cache_nls.getResultValueNLS(RESULT_VALUE.VIOLATION);
  }

  return severity;

};


/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.DOMElement.prototype.getAttributes = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;
  var i;

  var attributes  = [];

  for (i = 0; i < this.aria_attributes.length; i++) {
    var aa = this.aria_attributes[i];
    attributes.push(cache_nls.getLabelAndValueNLS(aa.name, aa.value));
  }

  for (i = 0; i < this.other_attributes.length; i++) {
    var oa = this.other_attributes[i];
    attributes.push(cache_nls.getLabelAndValueNLS(oa.name, oa.value));
  }

  if (!unsorted) this.sortItems(attributes);

  return attributes;

};

/**
 * @method hasEvents
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns if an element has user interface events attached to it
 *
 * @return {Boolean} Returns true if event user interface event handlers are attached to the node, otherwise false
 */

OpenAjax.a11y.cache.DOMElement.prototype.hasEvents = function () {

  var has_events = false;

  has_events = has_events || this.events.has_load;

  has_events = has_events || this.events.has_change;

  has_events = has_events || this.events.has_click;
  has_events = has_events || this.events.has_double_click;

  has_events = has_events || this.events.has_focus;
  has_events = has_events || this.events.has_blur;

  has_events = has_events || this.events.has_key_down;
  has_events = has_events || this.events.has_key_press;
  has_events = has_events || this.events.has_key_up;

  has_events = has_events || this.events.has_mouse_down;
  has_events = has_events || this.events.has_mouse_up;
  has_events = has_events || this.events.has_mouse_move;
  has_events = has_events || this.events.has_mouse_out;
  has_events = has_events || this.events.has_mouse_over;
  has_events = has_events || this.events.has_mouse_enter;
  has_events = has_events || this.events.has_mouse_leave;

  has_events = has_events || this.events.has_drag;
  has_events = has_events || this.events.has_drag_end;
  has_events = has_events || this.events.has_drag_enter;
  has_events = has_events || this.events.has_drag_leave;
  has_events = has_events || this.events.has_drag_over;
  has_events = has_events || this.events.has_drag_start;
  has_events = has_events || this.events.has_drop;

  return has_events;
};


/**
 * @method   hasChangeEvents
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns true if the element has change events
 *
 * @param  {Array}   prop_list : If defined, the names of the event handlers defined will be added to the list as property object
 *
 * @return {Boolean} Returns "True" element has change event
 */

OpenAjax.a11y.cache.DOMElement.prototype.hasChangeEvents = function (prop_list) {

  function addEvent(event, name) {

    if (event) {
      has_event = true;

      if (prop_list && prop_list.length === 'number') {
        var prop = {};

        prop.label = name;
        prop.value = 'true';
        prop.description = "";

        prop_list.push(prop);
      }
    }
  }

  var has_event = false;

  addEvent(this.events.has_change,  'onchange');

  return has_event;

};

/**
 * @method getChangeEvents
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns string identifying change event handler
 */

OpenAjax.a11y.cache.DOMElement.prototype.getChangeEvents = function () {

  function addEvent(event, name) {
    if (event) {
      events += name + ' ';
    }
  }

  var events = "";

  addEvent(this.events.has_change,  'onchange');

  return events;

};


/**
 * @method hasFocusEvents
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns true if the element has focus or blur events
 *
 * @param  {Array}   prop_list : If defined, the names of the event handlers defined will be added to the list as property object
 *
 * @return {Boolean} Returns "True" element has focus and blur events
 */

OpenAjax.a11y.cache.DOMElement.prototype.hasFocusEvents = function (prop_list) {

  function addEvent(event, name) {

    if (event) {
      has_event = true;

      if (prop_list && prop_list.length === 'number') {
        var prop = {};

        prop.label = name;
        prop.value = 'true';
        prop.description = "";

        prop_list.push(prop);
      }
    }
  }

  var has_event = false;

  addEvent(this.events.has_focus,  'onfocus');
  addEvent(this.events.has_blur,   'onblur');

  return has_event;

};

/**
 * @method getFocusEvents
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns string identifying focus specfic event handlers
 */

OpenAjax.a11y.cache.DOMElement.prototype.getFocusEvents = function () {

  function addEvent(event, name) {
    if (event) {
      events += name + ' ';
    }
  }

  var events = "";

  addEvent(this.events.has_focus,  'onfocus');
  addEvent(this.events.has_blur,   'onblur');

  return events;

};



/**
 * @method hasClickEvents
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns true if the element has click or double click events
 *
 * @param  {Array}   prop_list : If defined, the names of the event handlers defined will be added to the list as property object
 *
 * @return {Boolean} Returns "True" element has click and double click events
 */

OpenAjax.a11y.cache.DOMElement.prototype.hasClickEvents = function (prop_list) {

  function addEvent(event, name) {

    if (event) {
      has_event = true;

      if (prop_list && prop_list.length === 'number') {
        var prop = {};

        prop.label = name;
        prop.value = 'true';
        prop.description = "";

        prop_list.push(prop);
      }
    }
  }

  var has_event = false;

  addEvent(this.events.has_click,  'onclick');
  addEvent(this.events.has_double_click,    'ondoubleclick');

  return has_event;

};

/**
 * @method getClickEvents
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns string identifying click specfic event handlers
 */

OpenAjax.a11y.cache.DOMElement.prototype.getClickEvents = function () {

  function addEvent(event, name) {
    if (event) {
      events += name + ' ';
    }
  }

  var events = "";

  addEvent(this.events.has_click,  'onclick');
  addEvent(this.events.has_double_click,    'ondoubleclick');

  return events;

};

/**
 * @method hasMouseEvents
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns true if the element has mouse specfic event handlers (i.e. up, down, move, over, out)
 *
 * @param  {Array}   prop_list : If defined, the names of the event handlers defined will be added to the list as property object
 *
 * @return {Boolean} Returns "True" element has mouse up, down, move, over and/or out events
 */

OpenAjax.a11y.cache.DOMElement.prototype.hasMouseEvents = function (prop_list) {

  function addEvent(event, name) {

    if (event) {
      has_event = true;

      if (prop_list && prop_list.length === 'number') {
        var prop = {};

        prop.label = name;
        prop.value = 'true';
        prop.description = "";

        prop_list.push(prop);
      }
    }
  }

  var has_event = false;

  addEvent(this.events.has_mouse_down,  'onmousedown');
  addEvent(this.events.has_mouse_up,    'onmouseup');
  addEvent(this.events.has_mouse_move,  'onmousemove');
  addEvent(this.events.has_mouse_out,   'onmouseout');
  addEvent(this.events.has_mouse_over,  'onmouseover');
  addEvent(this.events.has_mouse_enter, 'onmouseenter');
  addEvent(this.events.has_mouse_leave, 'onmouseleave');

  return has_event;

};

/**
 * @method getMouseEvents
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns string identifying mouse specfic event handlers (i.e. up, down, move, over, out)
 */

OpenAjax.a11y.cache.DOMElement.prototype.getMouseEvents = function () {

  function addEvent(event, name) {
    if (event) {
      events += name + ' ';
    }
  }

  var events = "";

  addEvent(this.events.has_mouse_down,  'onmousedown');
  addEvent(this.events.has_mouse_up,    'onmouseup');
  addEvent(this.events.has_mouse_move,  'onmousemove');
  addEvent(this.events.has_mouse_out,   'onmouseout');
  addEvent(this.events.has_mouse_over,  'onmouseover');
  addEvent(this.events.has_mouse_enter, 'onmouseenter');
  addEvent(this.events.has_mouse_leave, 'onmouseleave');

  return events;

};

/**
 * @method hasDragEvents
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns true if the element has drag specfic event handlers
 *
 * @param  {Array}   prop_list : If defined, the names of the event handlers defined will be added to the list as property object
 *
 * @return {Boolean} Returns true if element has drag events. otherwise false
 */

OpenAjax.a11y.cache.DOMElement.prototype.hasDragEvents = function (prop_list) {

  function addEvent(event, name) {

//     OpenAjax.a11y.logger.debug("   " + name + "=" + event);

    if (event) {
      has_event = true;

      if (prop_list && prop_list.length === 'number') {
        var prop = {};

        prop.label = name;
        prop.value = 'true';
        prop.description = "";

        prop_list.push(prop);
      }
    }
  }

  var has_event = false;

//  OpenAjax.a11y.logger.debug("DRAG: " + de.toString());

  addEvent(this.events.has_drag,       'ondrag');
  addEvent(this.events.has_drag_end,   'ondragend');
  addEvent(this.events.has_drag_enter, 'ondragenter');
  addEvent(this.events.has_drag_leave, 'ondragleave');
  addEvent(this.events.has_drag_over,  'ondragover');
  addEvent(this.events.has_drag_start, 'ondragstart');
  addEvent(this.events.has_drop,       'ondrop');

  return has_event;

};

/**
 * @method getDragEvents
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns string identifying drag specfic event handlers
 */

OpenAjax.a11y.cache.DOMElement.prototype.getDragEvents = function () {

  function addEvent(event, name) {
    if (event) {
      events += name + ' ';
    }
  }

  var events = "";

  addEvent(this.events.has_drag,       'ondrag');
  addEvent(this.events.has_drag_end,   'ondragend');
  addEvent(this.events.has_drag_enter, 'ondragenter');
  addEvent(this.events.has_drag_leave, 'ondragleave');
  addEvent(this.events.has_drag_over,  'ondragover');
  addEvent(this.events.has_drag_start, 'ondragstart');
  addEvent(this.events.has_drop,       'ondrop');

  return events;

};

/**
 * @method hasKeyboardEvents
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns true if the element has keyboard specfic event handlers
 *
 * @param  {Array}   prop_list : If defined, the names of the event handlers defined will be added to the list as property object
 *
 * @return {Boolean} Returns true if element has keyboard events, otherwise false
 */

OpenAjax.a11y.cache.DOMElement.prototype.hasKeyboardEvents = function (str, prop_list) {

  function addEvent(event, name) {

    if (event) {
      has_event = true;

      if (prop_list && prop_list.length === 'number') {
        var prop = {};

        prop.label = name;
        prop.value = 'true';
        prop.description = "";

        prop_list.push(prop);
      }
    }
  }

  var has_event = false;

  addEvent(this.events.has_key_down,  'onkeydown');
  addEvent(this.events.has_key_press, 'onkeypress');
  addEvent(this.events.has_key_up,    'onkeyup');
  if (this.tag_name == 'a') addEvent(this.events.has_click, 'onclick');

  return has_event;

};

/**
 * @method getKeyboardEvents
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns string identifying drag specfic event handlers
 */

OpenAjax.a11y.cache.DOMElement.prototype.getKeyboardEvents = function () {

  function addEvent(event, name) {
    if (event) {
      events += name + ' ';
    }
  }

  var events = "";

  addEvent(this.events.has_key_down,  'onkeydown');
  addEvent(this.events.has_key_press, 'onkeypress');
  addEvent(this.events.has_key_up,    'onkeyup');
  if (this.tag_name == 'a') addEvent(this.events.has_click, 'onclick');

  return events;

};



/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns an array of objects representing events associated with the element
 *
 * @return {Array} Returns a array of event object results
 */

OpenAjax.a11y.cache.DOMElement.prototype.getEvents = function () {

  function addHasEvent(event_type, event_on_element, event_on_ancestor) {

    var o = {};

    o.label = event_type;
    o.event_on_element        = nls_false;
    o.event_on_element_style  = "no";
    o.event_on_ancestor       = nls_false;
    o.event_on_ancestor_style = "no";

    if (event_on_element) {
      o.event_on_element        = nls_true;
      o.event_on_element_style  = "yes";
    }

    if (event_on_ancestor) {
      o.event_on_ancestor       = nls_true;
      o.event_on_ancestor_style = "yes";
    }

    events.push(o);

  }

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var nls_false = cache_nls.getBooleanNLS(false);
  var nls_true  = cache_nls.getBooleanNLS(true);

  var events = [];

  addHasEvent('blur',          this.events.has_blur,          this.events.ancestor_has_blur);
  addHasEvent('focus',         this.events.has_focus,         this.events.ancestor_has_focus);

  addHasEvent('click',         this.events.has_click,         this.events.ancestor_has_click);
  addHasEvent('double click',  this.events.has_double_click,  this.events.ancestor_has_double_click);

  addHasEvent('key down',      this.events.has_key_down,      this.events.ancestor_has_key_down);
  addHasEvent('key press',     this.events.has_key_press,     this.events.ancestor_has_key_press);
  addHasEvent('key down',      this.events.has_key_up,        this.events.ancestor_has_key_up);

  addHasEvent('mouse down',    this.events.has_mouse_down,    this.events.ancestor_has_mouse_down);
  addHasEvent('mouse up',      this.events.has_mouse_up,      this.events.ancestor_has_mouse_up);
  addHasEvent('mouse move',    this.events.has_mouse_move,    this.events.ancestor_has_mouse_move);

  addHasEvent('mouse leave',    this.events.has_mouse_leave,    this.events.ancestor_has_mouse_leave);
  addHasEvent('mouse enter',    this.events.has_mouse_enter,    this.events.ancestor_has_mouse_enter);

  addHasEvent('mouse out',     this.events.has_mouse_out,     this.events.ancestor_has_mouse_out);
  addHasEvent('mouse over',    this.events.has_mouse_over,    this.events.ancestor_has_mouse_over);

  addHasEvent('drag',        this.events.has_drag,       this.events.ancestor_has_drag);
  addHasEvent('drag end',    this.events.has_drag_end,   this.events.ancestor_has_drag_end);
  addHasEvent('drag enter',  this.events.has_drag_enter, this.events.ancestor_has_drag_enter);
  addHasEvent('drag leave',  this.events.has_drag_leave, this.events.ancestor_has_drag_leave);
  addHasEvent('drag over',   this.events.has_drag_over,  this.events.ancestor_has_drag_over);
  addHasEvent('drag start',  this.events.has_drag_start, this.events.ancestor_has_drag_start);
  addHasEvent('drop',        this.events.has_drop,       this.events.ancestor_has_drag_drop);

  addHasEvent('change',        this.events.has_change,        this.events.ancestor_has_change);

  return events;

};


/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns an array of styling information for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of NLS objects for styling
 */

OpenAjax.a11y.cache.DOMElement.prototype.getStyle = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties  = [];

  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'is_visible_onscreen');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'is_visible_to_at');

  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'display');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'visibility');

  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'color');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'opacity');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'background_color');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'background_image');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'background_repeat');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'background_position');

  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'font_family');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'font_size');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'font_weight');

  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'position');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'left');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'top');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'width');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'height');

  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'outline_style');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'outline_color');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'outline_width');

  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'pseudo_focus');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'pseudo_before');
  cache_nls.addPropertyIfDefined(properties, this.computed_style, 'pseudo_after');

  return properties;

};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns an array of styling information for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of NLS objects for styling
 */

OpenAjax.a11y.cache.DOMElement.prototype.getCacheProperties = function () {

  var i;

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties  = [];

  cache_nls.addPropertyIfDefined(properties, this, 'id_unique');
  cache_nls.addPropertyIfDefined(properties, this, 'xpath');
  cache_nls.addPropertyIfDefined(properties, this, 'character_count');

  cache_nls.addPropertyIfDefined(properties, this, 'calculated_aria_description');

  cache_nls.addPropertyIfDefined(properties, this, 'document_order');

  cache_nls.addPropertyIfDefined(properties, this, 'parent_landmark');
  cache_nls.addPropertyIfDefined(properties, this, 'body_element');

  cache_nls.addPropertyIfDefined(properties, this, 'is_interactive');
  cache_nls.addPropertyIfDefined(properties, this, 'is_widget');
  cache_nls.addPropertyIfDefined(properties, this, 'is_landmark');
  cache_nls.addPropertyIfDefined(properties, this, 'is_live');

  cache_nls.addPropertyIfDefined(properties, this, 'has_rule_results');
  cache_nls.addPropertyIfDefined(properties, this, 'has_role');
  cache_nls.addPropertyIfDefined(properties, this, 'is_implied_role');

  cache_nls.addPropertyIfDefined(properties, this, 'has_aria_activedescendant');
  cache_nls.addPropertyIfDefined(properties, this, 'is_owned');
  cache_nls.addPropertyIfDefined(properties, this, 'has_outline');

  var invalid_aria_attributes     = this.invalid_aria_attributes;
  var invalid_aria_attributes_len = invalid_aria_attributes.length;

  for (i = 0; i < invalid_aria_attributes_len; i++) {
    cache_nls.addInvalidAttribute(properties, invalid_aria_attributes[i]);
  }

  return properties;

};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number | Object} Returns the value of the property
 */

OpenAjax.a11y.cache.DOMElement.prototype.getCachePropertyValue = function (property) {

//  OpenAjax.a11y.logger.debug("dom element property: " + property + " value= " + this[property]);

  if (typeof this[property] === 'undefined') {
     if(typeof this.computed_style[property] === 'undefined') {
       if(typeof this.events[property] === 'undefined') {
         for (var i = 0; i < this.aria_attributes.length; i++) {
            var attr = this.aria_attributes[i];
            if (attr.name === property) return attr.value;
         }
         return null;
       }
       else {
         return this.events[property];
       }
     }
     else {
       return this.computed_style[property];
     }
  }

  return this[property];

};


/**
 * @method sortItems
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.DOMElement.prototype.sortItems = function (items) {

  var swapped = false;
  var temp = null;
  var i;
  var items_len = items.length;

  do{
    swapped = false;
    for (i = 1; i < items_len; i++ ) {
     if (items[i-1].label.toLowerCase() > items[i].label.toLowerCase()) {
      // swap the values
      temp = items[i-1];
      items[i-1] = items[i];
      items[i] = temp;
      swapped = true;
     }
    } // end loop
  } while (swapped);

};

/**
 * @method initEvents
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc  Creates am initial event object with no events identified
 *
 * @param  {DOMElement} parent_dom_element - Parent DOMElement object associated with the node's parent node
 *
 * @return {Object}  Returns an object with events set to false
 */

OpenAjax.a11y.cache.DOMElement.prototype.initEvents = function (parent_dom_element) {

  var events = {};
  events.supports_events = false;

    events.has_blur         = false;

    events.has_change       = false;

    events.has_click        = false;
    events.has_double_click = false;

    events.has_focus        = false;

    events.has_key_down     = false;
    events.has_key_press    = false;
    events.has_key_up       = false;

    events.has_load         = false;

    events.has_mouse_down   = false;
    events.has_mouse_up     = false;
    events.has_mouse_move   = false;
    events.has_mouse_out    = false;
    events.has_mouse_over   = false;
    events.has_mouse_enter  = false;
    events.has_mouse_leave  = false;

    events.has_drag       = false;
    events.has_drag_end   = false;
    events.has_drag_enter = false;
    events.has_drag_leave = false;
    events.has_drag_over  = false;
    events.has_drag_start = false;
    events.has_drop       = false;

    events.has_pointer_up      = false;
    events.has_pointer_cancel  = false;
    events.has_pointer_move    = false;
    events.has_pointer_over    = false;
    events.has_pointer_out     = false;
    events.has_pointer_enter   = false;
    events.has_pointer_leave   = false;

    events.has_touch_start   = false;
    events.has_touch_end     = false;
    events.has_touch_leave   = false;
    events.has_touch_move    = false;
    events.has_touch_cancel  = false;

    if (parent_dom_element && parent_dom_element.events) {
      events.ancestor_has_blur         = parent_dom_element.events.has_blur         || parent_dom_element.events.ancestor_has_blur;
      events.ancestor_has_change       = parent_dom_element.events.has_change       || parent_dom_element.events.ancestor_has_change;
      events.ancestor_has_click        = parent_dom_element.events.has_click        || parent_dom_element.events.ancestor_has_click;
      events.ancestor_has_double_click = parent_dom_element.events.has_double_click || parent_dom_element.events.ancestor_has_double_click;
      events.ancestor_has_focus        = parent_dom_element.events.has_focus        || parent_dom_element.events.ancestor_has_focus;
      events.ancestor_has_key_down     = parent_dom_element.events.has_key_down     || parent_dom_element.events.ancestor_has_key_down;
      events.ancestor_has_key_press    = parent_dom_element.events.has_key_press    || parent_dom_element.events.ancestor_has_key_press;
      events.ancestor_has_key_up       = parent_dom_element.events.has_key_up       || parent_dom_element.events.ancestor_has_key_up;
      events.ancestor_has_load         = parent_dom_element.events.has_load         || parent_dom_element.events.ancestor_has_load;

      events.ancestor_has_mouse_down   = parent_dom_element.events.has_mouse_down   || parent_dom_element.events.ancestor_has_mouse_down;
      events.ancestor_has_mouse_up     = parent_dom_element.events.has_mouse_up     || parent_dom_element.events.ancestor_has_mouse_up;
      events.ancestor_has_mouse_move   = parent_dom_element.events.has_mouse_move   || parent_dom_element.events.ancestor_has_mouse_move;
      events.ancestor_has_mouse_out    = parent_dom_element.events.has_mouse_out    || parent_dom_element.events.ancestor_has_mouse_out;
      events.ancestor_has_mouse_over   = parent_dom_element.events.has_mouse_over   || parent_dom_element.events.ancestor_has_mouse_over;
      events.ancestor_has_mouse_enter  = parent_dom_element.events.has_mouse_enter  || parent_dom_element.events.ancestor_has_mouse_enter;
      events.ancestor_has_mouse_leave  = parent_dom_element.events.has_mouse_leave  || parent_dom_element.events.ancestor_has_mouse_leave;

      events.ancestor_has_drag       = parent_dom_element.events.has_drag       || parent_dom_element.events.ancestor_has_drag;
      events.ancestor_has_drag_end   = parent_dom_element.events.has_drag_end   || parent_dom_element.events.ancestor_has_drag_end;
      events.ancestor_has_drag_enter = parent_dom_element.events.has_drag_enter || parent_dom_element.events.ancestor_has_drag_enter;
      events.ancestor_has_drag_leave = parent_dom_element.events.has_drag_leave || parent_dom_element.events.ancestor_has_drag_leave;
      events.ancestor_has_drag_over  = parent_dom_element.events.has_drag_over  || parent_dom_element.events.ancestor_has_drag_over;
      events.ancestor_has_drag_start = parent_dom_element.events.has_drag_start || parent_dom_element.events.ancestor_has_drag_start;
      events.ancestor_has_drop       = parent_dom_element.events.has_drop       || parent_dom_element.events.ancestor_has_drop;

      events.ancestor_has_pointer_up      = parent_dom_element.events.has_pointer_up     || parent_dom_element.events.ancestor_has_pointer_up;
      events.ancestor_has_pointer_cancel  = parent_dom_element.events.has_pointer_cancel || parent_dom_element.events.ancestor_has_pointer_cancel;
      events.ancestor_has_pointer_move    = parent_dom_element.events.has_pointer_move   || parent_dom_element.events.ancestor_has_pointer_move;
      events.ancestor_has_pointer_over    = parent_dom_element.events.has_pointer_over   || parent_dom_element.events.ancestor_has_pointer_over;
      events.ancestor_has_pointer_out     = parent_dom_element.events.has_pointer_out    || parent_dom_element.events.ancestor_has_pointer_out;
      events.ancestor_has_pointer_enter   = parent_dom_element.events.has_pointer_enter  || parent_dom_element.events.ancestor_has_pointer_enter;
      events.ancestor_has_pointer_leave   = parent_dom_element.events.has_pointer_leave  || parent_dom_element.events.ancestor_has_pointer_leave;

      events.ancestor_has_touch_start   = parent_dom_element.events.has_touch_start  || parent_dom_element.events.ancestor_has_touch_start;
      events.ancestor_has_touch_end     = parent_dom_element.events.has_touch_end    || parent_dom_element.events.ancestor_has_touch_end;
      events.ancestor_has_touch_leave   = parent_dom_element.events.has_touch_leave  || parent_dom_element.events.ancestor_has_touch_leave;
      events.ancestor_has_touch_move    = parent_dom_element.events.has_touch_move   || parent_dom_element.events.ancestor_has_touch_move;
      events.ancestor_has_touch_cancel  = parent_dom_element.events.has_touch_cancel || parent_dom_element.events.ancestor_has_touch_cancel;
    }
    else {
      events.ancestor_has_blur         = false;
      events.ancestor_has_change       = false;
      events.ancestor_has_click        = false;
      events.ancestor_has_double_click = false;
      events.ancestor_has_focus        = false;
      events.ancestor_has_key_down     = false;
      events.ancestor_has_key_press    = false;
      events.ancestor_has_key_up       = false;
      events.ancestor_has_load         = false;

      events.ancestor_has_mouse_down   = false;
      events.ancestor_has_mouse_up     = false;
      events.ancestor_has_mouse_move   = false;
      events.ancestor_has_mouse_out    = false;
      events.ancestor_has_mouse_over   = false;
      events.ancestor_has_mouse_enter  = false;
      events.ancestor_has_mouse_leave  = false;

      events.ancestor_has_drag       = false;
      events.ancestor_has_drag_end   = false;
      events.ancestor_has_drag_enter = false;
      events.ancestor_has_drag_leave = false;
      events.ancestor_has_drag_over  = false;
      events.ancestor_has_drag_start = false;
      events.ancestor_has_drop       = false;

      events.ancestor_has_pointer_up      = false;
      events.ancestor_has_pointer_cancel  = false;
      events.ancestor_has_pointer_move    = false;
      events.ancestor_has_pointer_over    = false;
      events.ancestor_has_pointer_out     = false;
      events.ancestor_has_pointer_enter   = false;
      events.ancestor_has_pointer_leave   = false;

      events.ancestor_has_touch_start   = false;
      events.ancestor_has_touch_end     = false;
      events.ancestor_has_touch_leave   = false;
      events.ancestor_has_touch_move    = false;
      events.ancestor_has_touch_cancel  = false;
   }

   return events;
};

/**
 * @method EnumerateFirefoxEvents
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc  Finds the event information of the node for a DOMElement object
 *
 * @param  {Object}     node              - Object The DOM element node that corresponds
 *                                          to this DOMElement object, and from which
 *                                          common information is derived for the DOM
 *                                          element cache.
 *
 * @param  {DOMElement} parent_dom_element - Parent DOMElement object associated with the node's parent node
 *
 * @return {Object}  Returns an object with event information
 */

OpenAjax.a11y.cache.DOMElement.prototype.EnumerateFirefoxEvents = function (node, parent_dom_element) {

  var i;
  var event_info;

  var Components = Components || {};

  if (node.tagName && node.tagName.toLowerCase() === 'body') {
     event_info = this.EnumerateFirefoxEvents(this.document, null);
//     OpenAjax.a11y.logger.debug('body: ' + event_info.has_key_down);
     parent_dom_element = {};
     parent_dom_element.events = event_info;
  }

  var events = this.initEvents(parent_dom_element);

  var event_listener = Components.classes["@mozilla.org/eventlistenerservice;1"];

  if (event_listener !== null &&
    event_listener !== undefined) {

    events.supports_events = true;

   var event_listener_service = event_listener.getService(Components.interfaces.nsIEventListenerService);
   var node_event_service     = event_listener_service.getListenerInfoFor(node, {});

   for (i = 0; i < node_event_service.length; i++) {
     var node_event_information = node_event_service[i].QueryInterface(Components.interfaces.nsIEventListenerInfo);

//     OpenAjax.a11y.logger.debug("Event Info: type=" + node_event_information.type + " system event=" + node_event_information.inSystemEventGroup + " allows untrusted=" + node_event_information.allowsUntrusted);

       switch (node_event_information.type) {

       case "blur":
         events.has_blur = true;
         break;

       case "change":
         events.has_change = true;
         break;

       case "click":
         events.has_click = true;
         break;

       case "dbclick":
         events.has_double_click = true;
         break;

       case "focus":
         events.has_focus   = true;
         break;

       case "keydown":
         events.has_key_down  = true;
         break;

       case "keypress":
         events.has_key_press = true;
         break;

       case "keyup":
         events.has_key_up   = true;
         break;

       case "load":
         events.has_load    = true;
         break;

       case "mousedown":
         events.has_mouse_down = true;
         break;

       case "mouseup":
         events.has_mouse_up  = true;
         break;

       case "mousemove":
         events.has_mouse_move = true;
         break;

       case "mouseout":
         events.has_mouse_out = true;
         break;

       case "mouseover":
         events.has_mouse_over = true;
         break;

       case "mouseenter":
         events.has_mouse_enter = true;
         break;

       case "mouseleave":
         events.has_mouse_leave = true;
         break;

       case "drag":
         events.has_drag = true;
         break;

       case "dragend":
         events.has_drag_end = true;
         break;

       case "dragenter":
         events.has_drag_enter = true;
         break;

       case "dragleave":
         events.has_drag_leave = true;
         break;

       case "dragover":
         events.has_drag_over = true;
         break;

       case "dragstart":
         events.has_drag_start = true;
         break;

       case "drop":
         events.has_drop = true;
         break;

       case "pointerup":
         events.has_pointer_up = true;
         break;

       case "pointer_cancel":
         events.has_pointer_cancel = true;
         break;

       case "pointer_move":
         events.has_pointer_move = true;
         break;

       case "pointer_over":
         events.has_pointer_over = true;
         break;

       case "pointer_out":
         events.has_pointer_out = true;
         break;

       case "pointer_enter":
         events.has_pointer_enter = true;
         break;

       case "pointer_leave":
         events.has_pointer_leave = true;
         break;

       case "touchstart":
         events.has_touch_start = true;
         break;

       case "touchend":
         events.has_touch_end = true;
         break;

       case "touchcancel":
         events.has_touch_cancel = true;
         break;

       case "touchleave":
         events.has_touch_leave = true;
         break;

       case "touchmove":
         events.has_touch_move = true;
         break;

       default:
         break;

       } // endswitch
   } // end loop
 }

 return events;

};

/**
 * @method EnumerateFaeUtilEvents
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc  Finds the event information of the node for a DOMElement object
 *
 * @param  {Object}     node              - Object The DOM element node that corresponds
 *                                          to this DOMElement object, and from which
 *                                          common information is derived for the DOM
 *                                          element cache.
 *
 * @param  {DOMElement} parent_dom_element - Parent DOMElement object associated with the node's parent node
 *
 * @return {Object}  Returns an object with event information
 */

OpenAjax.a11y.cache.DOMElement.prototype.EnumerateFaeUtilEvents = function (node, parent_dom_element) {

  function testForEvent(e) {

    var has_event = node.getAttribute(e);

    if (has_event == 'true') {
      events.supports_events = true;
      return true;
    }

    return false;

  }

  var events = this.initEvents(parent_dom_element);

  events.has_blur         = testForEvent('oaa-has-blur');
  events.has_change       = testForEvent('oaa-has-change');
  events.has_click        = testForEvent('oaa-has-click');
  events.has_double_click = testForEvent('oaa-has-double_click');
  events.has_focus        = testForEvent('oaa-has-focus');

  events.has_key_down     = testForEvent('oaa-has-key_down');
  events.has_key_press    = testForEvent('oaa-has-key_press');
  events.has_key_up       = testForEvent('oaa-has-key_up');

  events.has_load         = testForEvent('oaa-has-load');

  events.has_mouse_down   = testForEvent('oaa-has-mouse_down');
  events.has_mouse_up     = testForEvent('oaa-has-mouse_up');
  events.has_mouse_move   = testForEvent('oaa-has-mouse_move');
  events.has_mouse_out    = testForEvent('oaa-has-mouse_out');
  events.has_mouse_over   = testForEvent('oaa-has-mouse_over');

  events.has_mouse_enter  = testForEvent('oaa-has-mouse_enter');
  events.has_mouse_leave  = testForEvent('oaa-has-mouse_leave');

  events.has_drag       = testForEvent('oaa-has-drag');
  events.has_drag_end   = testForEvent('oaa-has-drag_end');
  events.has_drag_enter = testForEvent('oaa-has-drag_enter');
  events.has_drag_leave = testForEvent('oaa-has-drag_leave');
  events.has_drag_over  = testForEvent('oaa-has-over');
  events.has_drag_start = testForEvent('oaa-has-start');
  events.has_drop       = testForEvent('oaa-has-drop');

  events.has_pointer_up      = testForEvent('oaa-pointer-up');
  events.has_pointer_cancel  = testForEvent('oaa-pointer-cancel');
  events.has_pointer_move    = testForEvent('oaa-pointer-move');
  events.has_pointer_over    = testForEvent('oaa-pointer-over');
  events.has_pointer_out     = testForEvent('oaa-pointer-out');
  events.has_pointer_enter   = testForEvent('oaa-pointer-enter');
  events.has_pointer_leave   = testForEvent('oaa-pointer-leave');

  events.has_touch_start   = testForEvent('oaa-touch-start');
  events.has_touch_end     = testForEvent('oaa-touch-end');
  events.has_touch_leave   = testForEvent('oaa-touch-leave');
  events.has_touch_move    = testForEvent('oaa-touch-move');
  events.has_touch_cancel  = testForEvent('oaa-touch-cancel');

  return events;

};

/**
 * @method EnumerateInlineEvents
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc  Finds the event information of the node for a DOMElement object based online on
 *        inline event markup
 *
 * @param  {Object}     node              - Object The DOM element node that corresponds
 *                                          to this DOMElement object, and from which
 *                                          common information is derived for the DOM
 *                                          element cache.
 *
 * @param  {DOMElement} parent_dom_element - Parent DOMElement object associated with the node's parent node
 *
 * @return {Object}  Returns an object with event information
 */

OpenAjax.a11y.cache.DOMElement.prototype.EnumerateInlineEvents = function (node, parent_dom_element) {

  function testForEvent(e) {

    var has_event = node.getAttribute(e);

    if (has_event == 'true') {
      events.supports_events = true;
      return true;
    }

    return false;

  }

  function testForPropertyAndJQueryEvent(p) {

    // If JQuery is defined
    var $ = $ || {};

    if (typeof node['on' + p] === 'function') {
      events.supports_events = true;
      return true;
    }

    try {
      if ($(node)) {
        var $events = $._data($(node)[0], "events" );

        if(typeof $events != "undefined"){
          //iteration to get each one of the handlers
          $.each($events, function(i, event){
            $.each(event, function(i, handler){
              if(handler.type == p) return true;
          });
        });
        }
      }
    }
    catch(e) {
      return false;
    }

    return false;

  }


  var events = this.initEvents(parent_dom_element);

  var attributes = node.attributes;
  var attributes_len = attributes.length;

  for (var i = 0; i < attributes_len; i++) {

    switch(attributes[i].name.toLowerCase()) {

    case 'onblur':
      events.has_blur = true;
      break;

    case 'onchange':
      events.has_change = true;
      break;

    case 'onclick':
      events.has_click = true;
      break;

    case 'ondbclick':
      events.has_double_click = true;
      break;

    case 'onkeydown':
      events.has_key_down = true;
      break;

    case 'onkeypress':
      events.has_key_press = true;
      break;

    case 'onkeyup':
      events.has_key_up = true;

      break;

    case 'onload':
      events.has_load = true;

      break;

    case 'onmousedown':
      events.has_mouse_down = true;
      break;

    case 'onmouseup':
      events.has_mouse_up = true;
      break;

    case 'onmousemove':
      events.has_mouse_move = true;
      break;

    case 'onmouseout':
      events.has_mouse_out = true;
      break;

    case 'onmouseover':
      events.has_mouse_over = true;
      break;

    case 'onmouseenter':
      events.has_mouse_enter = true;
      break;

    case 'onmouseleave':
      events.has_mouse_leave = true;

      break;

    case 'onmousedrag':
      events.has_drag  = true;
      break;

    case 'ondragend':
      events.has_drag_end = true;
      break;

    case 'ondragenter':
      events.has_drag_enter  = true;
      break;

    case 'ondragleave':
      events.has_drag_leave = testForEvent('oaa-has-drag_leave');
      break;

    case 'ondragover':
      events.has_drag_over  = testForEvent('oaa-has-over');
      break;

    case 'onstart':
      events.has_drag_start = testForEvent('oaa-has-start');
      break;

    case 'ondrop':
      events.has_drop       = testForEvent('oaa-has-drop');
      break;

    case 'ontouchstart':
      events.has_touch_start   = testForEvent('oaa-touch-start');
      break;

    case 'ontouchend':
      events.has_touch_end     = testForEvent('oaa-touch-end');
      break;

    case 'ontouchleave':
      events.has_touch_leave   = testForEvent('oaa-touch-leave');
      break;

    case 'ontouchmove':
      events.has_touch_move    = testForEvent('oaa-touch-move');
      break;

    case 'ontouchcancel':
      events.has_touch_cancel  = testForEvent('oaa-touch-cancel');
      break;

    default:
      break;
    }
  }

  // test for use of events added using

  events.has_blur         = testForPropertyAndJQueryEvent('blur');
  events.has_change       = testForPropertyAndJQueryEvent('change');
  events.has_click        = testForPropertyAndJQueryEvent('click');
  events.has_double_click = testForPropertyAndJQueryEvent('dblclick');
  events.has_focus        = testForPropertyAndJQueryEvent('focus');

  events.has_key_down     = testForPropertyAndJQueryEvent('keydown');
  events.has_key_press    = testForPropertyAndJQueryEvent('keypress');
  events.has_key_up       = testForPropertyAndJQueryEvent('keyup');

  events.has_load         = testForPropertyAndJQueryEvent('load');

  events.has_mouse_down   = testForPropertyAndJQueryEvent('mousedown');
  events.has_mouse_up     = testForPropertyAndJQueryEvent('mouseup');
  events.has_mouse_move   = testForPropertyAndJQueryEvent('mousemove');
  events.has_mouse_out    = testForPropertyAndJQueryEvent('mouseout');
  events.has_mouse_over   = testForPropertyAndJQueryEvent('mouseover');

  events.has_mouse_enter  = testForPropertyAndJQueryEvent('mouseenter');
  events.has_mouse_leave  = testForPropertyAndJQueryEvent('mouseleave');

  events.has_drag       = testForPropertyAndJQueryEvent('drag');
  events.has_drag_end   = testForPropertyAndJQueryEvent('dragend');
  events.has_drag_enter = testForPropertyAndJQueryEvent('dragenter');
  events.has_drag_leave = testForPropertyAndJQueryEvent('dragleave');
  events.has_drag_over  = testForPropertyAndJQueryEvent('dragover');
  events.has_drag_start = testForPropertyAndJQueryEvent('dragstart');
  events.has_drop       = testForPropertyAndJQueryEvent('drop');

  events.has_touch_start   = testForPropertyAndJQueryEvent('touchstart');
  events.has_touch_end     = testForPropertyAndJQueryEvent('touchend');
  events.has_touch_leave   = testForPropertyAndJQueryEvent('touchleave');
  events.has_touch_move    = testForPropertyAndJQueryEvent('touchmove');
  events.has_touch_cancel  = testForPropertyAndJQueryEvent('touchcancel');



  if (parent_dom_element && parent_dom_element.events) {
    events.ancestor_has_blur         = parent_dom_element.events.has_blur         || parent_dom_element.events.ancestor_has_blur;
    events.ancestor_has_change       = parent_dom_element.events.has_change       || parent_dom_element.events.ancestor_has_change;
    events.ancestor_has_click        = parent_dom_element.events.has_click        || parent_dom_element.events.ancestor_has_click;
    events.ancestor_has_double_click = parent_dom_element.events.has_double_click || parent_dom_element.events.ancestor_has_double_click;
    events.ancestor_has_focus        = parent_dom_element.events.has_focus        || parent_dom_element.events.ancestor_has_focus;
    events.ancestor_has_key_down     = parent_dom_element.events.has_key_down     || parent_dom_element.events.ancestor_has_key_down;
    events.ancestor_has_key_press    = parent_dom_element.events.has_key_press    || parent_dom_element.events.ancestor_has_key_press;
    events.ancestor_has_key_up       = parent_dom_element.events.has_key_up       || parent_dom_element.events.ancestor_has_key_up;
    events.ancestor_has_load         = parent_dom_element.events.has_load         || parent_dom_element.events.ancestor_has_load;

    events.ancestor_has_mouse_down   = parent_dom_element.events.has_mouse_down   || parent_dom_element.events.ancestor_has_mouse_down;
    events.ancestor_has_mouse_up     = parent_dom_element.events.has_mouse_up     || parent_dom_element.events.ancestor_has_mouse_up;
    events.ancestor_has_mouse_move   = parent_dom_element.events.has_mouse_move   || parent_dom_element.events.ancestor_has_mouse_move;
    events.ancestor_has_mouse_out    = parent_dom_element.events.has_mouse_out    || parent_dom_element.events.ancestor_has_mouse_out;
    events.ancestor_has_mouse_over   = parent_dom_element.events.has_mouse_over   || parent_dom_element.events.ancestor_has_mouse_over;
    events.ancestor_has_mouse_enter  = parent_dom_element.events.has_mouse_enter  || parent_dom_element.events.ancestor_has_mouse_enter;
    events.ancestor_has_mouse_leave  = parent_dom_element.events.has_mouse_leave  || parent_dom_element.events.ancestor_has_mouse_leave;

    events.ancestor_has_drag       = parent_dom_element.events.has_drag       || parent_dom_element.events.ancestor_has_drag;
    events.ancestor_has_drag_end   = parent_dom_element.events.has_drag_end   || parent_dom_element.events.ancestor_has_drag_end;
    events.ancestor_has_drag_enter = parent_dom_element.events.has_drag_enter || parent_dom_element.events.ancestor_has_drag_enter;
    events.ancestor_has_drag_leave = parent_dom_element.events.has_drag_leave || parent_dom_element.events.ancestor_has_drag_leave;
    events.ancestor_has_drag_over  = parent_dom_element.events.has_drag_over  || parent_dom_element.events.ancestor_has_drag_over;
    events.ancestor_has_drag_start = parent_dom_element.events.has_drag_start || parent_dom_element.events.ancestor_has_drag_start;
    events.ancestor_has_drop       = parent_dom_element.events.has_drop       || parent_dom_element.events.ancestor_has_drop;

    events.has_pointer_up      = parent_dom_element.events.pointer_up     || parent_dom_element.events.ancestor_pointer_up;
    events.has_pointer_cancel  = parent_dom_element.events.pointer_cancel || parent_dom_element.events.ancestor_pointer_cancel;
    events.has_pointer_move    = parent_dom_element.events.pointer_move   || parent_dom_element.events.ancestor_pointer_move;
    events.has_pointer_over    = parent_dom_element.events.pointer_over   || parent_dom_element.events.ancestor_pointer_over;
    events.has_pointer_out     = parent_dom_element.events.pointer_out    || parent_dom_element.events.ancestor_pointer_out;
    events.has_pointer_enter   = parent_dom_element.events.pointer_enter  || parent_dom_element.events.ancestor_pointer_enter;
    events.has_pointer_leave   = parent_dom_element.events.pointer_leave  || parent_dom_element.events.ancestor_pointer_leave;

    events.ancestor_has_touch_start   = parent_dom_element.events.touch_start  || parent_dom_element.events.ancestor_touch_start;
    events.ancestor_has_touch_end     = parent_dom_element.events.touch_end    || parent_dom_element.events.ancestor_touch_end;
    events.ancestor_has_touch_leave   = parent_dom_element.events.touch_leave  || parent_dom_element.events.ancestor_touch_leave;
    events.ancestor_has_touch_move    = parent_dom_element.events.touch_move   || parent_dom_element.events.ancestor_touch_move;
    events.ancestor_has_touch_cancel  = parent_dom_element.events.touch_cancel || parent_dom_element.events.ancestor_touch_cancel;

  }

  return events;

};



/**
 * @method addChild
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc    Adds a DOMElement or DOMText object to the tree of DOM text/elements
 *
 * @param  {DOMElement | DOMText} child_object  - DOMElement or DOMText object
 *
 * @return  Nothing
 */

OpenAjax.a11y.cache.DOMElement.prototype.addChild = function ( child_object ) {

 if (child_object) {
  this.child_dom_elements.push(child_object);
 }

};

/**
 * @method addToCharacterCount
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc  Adds to the current character count of the text content of the
 *          contained in the DOMelement and its immediate children
 *
 * @param {Number} length - Number to add to the character count
 *
 * @return Nothing
 */

OpenAjax.a11y.cache.DOMElement.prototype.addToCharacterCount = function ( length ) {

 this.character_count += length;

};

/**
 * @method addComputedStyle
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc    Adds computed style information to the DOMElement object and
 *          calculate the color contrast ratio
 *
 * @param  {DOMElement} parent_element  - The parent DOMElement object, used
 *                                        for information about inherited style
 *                                        information
 *
 * @return Nothing
 */

OpenAjax.a11y.cache.DOMElement.prototype.addComputedStyle = function (parent_element) {

 this.computed_style = new OpenAjax.a11y.cache.DOMElementComputedStyle(this, parent_element);
 this.computed_style.calculateColorContrastRatio();

 this.has_outline = true;

 if (this.computed_style.outline_style === 'none') this.has_outline = false;
 if (this.computed_style.outline_width === '0')    this.has_outline = false;
};

/**
 * @method calculateXPath
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc   Calculate the XPath string that uniquely identifies the
 *           DOM node referenced by this DOMElement's node property and
 *           set its xpath property to this calculated value.
 *
 * @param  {DOMElement} parent_element - The parent DOMElement object, used
 *                                       for information for xpath calculation
 *
 * @usage Sets the DOMElement's xpath property
 *
 * @return Nothing
 */

OpenAjax.a11y.cache.DOMElement.prototype.calculateXPath = function (parent_element) {

 function attributePredicate(attrName, attrValue) {
  return "[@" + attrName + "='" + attrValue + "']";
 }

 this.xpath = "";

 // If a root node ignore calculation
 if (!this.tag_name) {
  return;
 }

 // now build up the XPath using parent, tag_name, id, role and class values
 if (parent_element && parent_element.xpath) {
  this.xpath = parent_element.xpath + "/" + this.tag_name;
 }
 else {
  this.xpath = "/" + this.tag_name;
 }

 if (this.id) {
  this.xpath += attributePredicate("id", this.id);
 }

 if (this.role) {
  this.xpath += attributePredicate("role", this.role);
 }
 else {
  if (this.class_name) {
   this.xpath += attributePredicate("class", this.class_name);
  }
 }

};


/**
 * @method getText
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns text content of a DOMElement, including the ALT text of images
 *       through recursion through the DOMText and DOMElement descendents of
 *       the DOMElement
 *
 * @return {String} Returns the text content of an element and its children
 */

OpenAjax.a11y.cache.DOMElement.prototype.getText = function() {

  function getText(dom_element, strings) {
    // If text node get the text and return
    if( dom_element.type == Node.TEXT_NODE ) {
      strings.push( dom_element.text );
    } else {
      // if an element for through all the children elements looking for text
      if( dom_element.type == Node.ELEMENT_NODE ) {
        // check to see if IMG or AREA element and to use ALT content if defined
        if((dom_element.tag_name == 'img') || (dom_element.tag_name == 'area')) {

          if (dom_element.alt) {
            strings.push(dom_element.alt);
          }

        } else {

          for (var i = 0; i < dom_element.child_dom_elements.length; i++ ) {
            getText(dom_element.child_dom_elements[i], strings);
          } // end loop

        }
      }
    }
  } // end function getStrings

 // Create return object
 var str = "";
 var strings = [];

 getText(this, strings);

 if (strings.length) str = OpenAjax.a11y.util.normalizeSpace(strings.join(" "));

 return str;

};

 /**
 * @method getTextObject
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns an object with information about the accessible text of a DOMElement object
 *         and its descendents
 *
 * @param {Boolean}  visible  - Optional, if true text must be visible to be included. default false
 *
 * @return {Object}  Returns an object with the following properties:
 *                     'height',
 *                     'width',
 *                     'image_count',
 *                     'name',
 *                     'name_from_text_nodes',
 *                     'name_from_image_alt',
 */

OpenAjax.a11y.cache.DOMElement.prototype.getTextObject = function(visible) {

  if (typeof visible !== 'boolean') visible = false;

  function getText(dom_element, strings, texts, alts) {
    // If text node get the text and return
    if( dom_element.type == Node.TEXT_NODE ) {
      var text = dom_element.text;
      strings.push( text );
      texts.push( text );
    } else {
      // if an element for through all the children elements looking for text
      if( dom_element.type == Node.ELEMENT_NODE ) {
        // check to see if IMG or AREA element and to use ALT content if defined
        if((dom_element.tag_name == 'img') || (dom_element.tag_name == 'area')) {

          if (dom_element.alt) {
            strings.push(dom_element.alt);
            alts.push(dom_element.alt);
          }

          if( dom_element.node.offsetHeight > o.height ) {
            o.height = dom_element.node.offsetHeight;
          } //endif

          if( dom_element.node.offsetWidth > o.width ) {
             o.width = dom_element.node.offsetWidth;
          } //endif

          o.image_count = o.image_count + 1;

        } else {

          for (var i = 0; i < dom_element.child_dom_elements.length; i++ ) {
            if (!visible || dom_element.computed_style.is_visible_onscreen) {
              getText( dom_element.child_dom_elements[i], strings, texts, alts);
            }
          } // endfor

        } // endif
      } // endif
    } // endif
  } // end function getStrings

  // Create return object
  var o = {};
  var name_array = [];
  var name_from_text_nodes_array = [];
  var name_from_image_alt_array = [];
  o.height = 0;
  o.width = 0;
  o.image_count = 0;


  if (!visible || this.computed_style.is_visible_onscreen) {
    getText(this, name_array, name_from_text_nodes_array, name_from_image_alt_array);
  }

  var normalizeSpace = OpenAjax.a11y.util.normalizeSpace;

  o.name                 = normalizeSpace(name_array.join(""));
  o.name_from_text_nodes = normalizeSpace(name_from_text_nodes_array.join("").toLowerCase());
  o.name_from_image_alt  = normalizeSpace(name_from_image_alt_array.join("").toLowerCase());
  return o;

}; // end function OpenAjax.cache.util.getAccessibleText


/**
 * @method getElementCount
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc Returns a String of the text content of a DOMElement and all its descendent DOMElements
 *
 * @return {Number}  Returns the number of descendent elements in a DOMElement object
 */

OpenAjax.a11y.cache.DOMElement.prototype.getElementCount = function() {

  function countElements(dom_element) {
    // If text node get the text and return
    if( dom_element.type == Node.ELEMENT_NODE ) {
      count++;
      for (var i = 0; i < dom_element.child_dom_elements.length; i++ ) {
        countElements(dom_element.child_dom_elements[i]);
      } // end loop
    }
  } // end function getStrings

 // Create return object
 var count = 0;

 countElements(this);

 return count;

};


/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.DOMElement
 *
 * @desc  Create a text String that represents the DOMElement object
 *
 * @return {String}
 */

OpenAjax.a11y.cache.DOMElement.prototype.toString = function() {
 var str = this.tag_name;

 if (this.tag_name === 'input' && this.type && this.type.length) str += '[type=' + this.type + ']';
 if (this.role && this.role.length) str += '[role=' + this.role + ']';
 if (this.id && this.id.length) str += "[id=" + this.id + ']';
 if (this.class_name && this.class_name.length) str += "[class=" + this.class_name + ']';

 return str;
};

/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                            DOMCache                              */
/* ---------------------------------------------------------------- */

/**
 * @constructor DOMCache
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Constructs a DOMCache Object
 *
 * @param  {String}  url       - URL of the page being evaluated
 * @param  {String}  title     - The value of title property of the document being evaluated
 * @param  {Object}  document  - The document object reference of the document being evaluated
 *
 * @property {String}  nls       - NLS cache items for properties
 * @property {String}  url       - URL of the page being evaluated
 * @property {String}  base_url  - Base URL of the page being evaluated calculated from the URL
 * @property {String}  title     - The value of title property of the document being evaluated
 * @property {Object}  document  - The document object reference of the document being evaluated
 *
 * DOM cache element objects
 * @property {Object}  element_cache          - dom element cache for all elements
 * @property {Object}  element_with_id_cache  - dom element cache items with a defined id
 *
 * Specialize cache element objects
 * @property {Object}  abbreviations_cache       - Cache of abbreviation elements
 * @property {Object}  color_contrast_cache      - Cache of abbreviation items
 * @property {Object}  controls_cache            - Cache of form controls and widgets
 * @property {Object}  headings_landmarks_cache  - Cache of headings and abbreviations
 * @property {Object}  frames_cache              - Cache of frames and iframes
 * @property {Object}  images_cache              - Cache of image and area elements
 * @property {Object}  keyboard_focus_cache      - Cache of all interactive elements on a web page
 * @property {Object}  languages_cache           - Cache of language change items
 * @property {Object}  links_cache               - Cache of a and area elements
 * @property {Object}  lists_cache               - Cache of list elements
 * @property {Object}  media_cache               - Cache of media elements
 * @property {Object}  tables_cache              - Cache of table elements
 * @property {Object}  timing_cache              - Cache of elements with moving, flashing or auto-updating content
 *
 * @example
 *
 * var dom_cache = new OpenAjax.a11y.cache.DOMCache(url, title, doc, locale);
 * dom_cache.updateDOMElementCache();
 * dom_cache.updateAllCaches();
 */

OpenAjax.a11y.cache.DOMCache = function (url, title, document) {

 this.nls = OpenAjax.a11y.nls.Cache.getCacheNLS();

 this.url = url;
 this.base_url = this.url;
 this.has_body_element = false;

 var pos = this.base_url.lastIndexOf('/');
 if (pos >= 0) {
  this.base_url = this.base_url.substring(0,(pos+1));
 }
 else {
  this.base_url = this.base_url + "/";
 }

 this.title = title;
 this.document = document;
 this.lang = document.documentElement.getAttribute('lang');

};

/**
 * @method initCache
 * @memberOf OpenAjax.a11y.cache.DOMCache
 *
 * @desc Initialize specialized caches
 *    The specialized caches will be updated all at once or or when
 *    needed by a rule depending on how an evaluation is requested
 */

OpenAjax.a11y.cache.DOMCache.prototype.initCache = function () {

 this.element_with_id_cache = new OpenAjax.a11y.cache.DOMElementCache();
 this.element_cache         = new OpenAjax.a11y.cache.DOMElementCache();

 this.abbreviations_cache      = new OpenAjax.a11y.cache.AbbreviationsCache(this);
// this.color_contrast_cache     = new OpenAjax.a11y.cache.ColorContrastCache(this);
 this.text_cache               = new OpenAjax.a11y.cache.TextCache(this);
 this.controls_cache           = new OpenAjax.a11y.cache.ControlsCache(this);
 this.headings_landmarks_cache = new OpenAjax.a11y.cache.HeadingsLandmarksCache(this);
 this.frames_cache             = new OpenAjax.a11y.cache.FramesCache(this);
 this.images_cache             = new OpenAjax.a11y.cache.ImagesCache(this);
 this.keyboard_focus_cache     = new OpenAjax.a11y.cache.KeyboardFocusCache(this);
 this.languages_cache          = new OpenAjax.a11y.cache.LanguagesCache(this);
 this.links_cache              = new OpenAjax.a11y.cache.LinksCache(this);
 this.lists_cache              = new OpenAjax.a11y.cache.ListsCache(this);
 this.media_cache              = new OpenAjax.a11y.cache.MediaCache(this);
 this.tables_cache             = new OpenAjax.a11y.cache.TablesCache(this);
 this.timing_cache             = new OpenAjax.a11y.cache.TimingFlashingCache(this);

 this.frame_count = 0;
 this.iframe_count = 0;

 // Page information
 this.element_information         = new OpenAjax.a11y.cache.ElementInformation();

};

/**
 * @method isUpToDate
 * @memberOf OpenAjax.a11y.cache.DOMCache
 *
 * @desc Checks to see if the specified cache is up to date
 *
 * @param cache_name String Cache to update
 *
 * @return Object with two properties:
 *     o.up_to_date Boolean true if cache is up to date, otherwise false
 *     o.exists   Boolean true if cache exists, otherwise false
 */

OpenAjax.a11y.cache.DOMCache.prototype.isUpToDate = function (cache_name) {

 if (this[cache_name])
  return { up_to_date: this[cache_name].up_to_date, exists : true };
 else
  return { up_to_date: false, exists : false };

};

/**
 * @method updateCache
 *
 * @memberOf OpenAjax.a11y.cache.DOMCache
 *
 * @desc Updates the specified cache
 *
 * @param cache_name String name of the cache to update
 *
 * @return {Boolean} Returns true if cache is updated, false if cache does not exist
 */

OpenAjax.a11y.cache.DOMCache.prototype.updateCache = function (cache_name) {

 if (this[cache_name]) {
  if (!this[cache_name].up_to_date) {
   this[cache_name].updateCache();
  }
  return true;
 }

 return false;

};

/**
 * @method traverseDOMElementsForAllCaches
 * @memberOf OpenAjax.a11y.cache.DOMCache
 *
 * @desc Updates all the specialized caches at one time, in general this
 *    is faster than updating the caches individually based on the
 *    needs of rules, but may create caches that will not be used if
 *    some rules are disabled
 *
 * @param  dom_element            Object  Current DOMElement object being processed
 * @param  landmark_info          Object  LandmarkInfo object containing current landmark and heading information for tree representations
 * @param  heading_global_info    Object  HeadingInfo object containing current heading information used for heading nesting rules
 * @param  heading_landmark_info  Object  HeadingInfo object containing current heading information used for heading nesting rules
 * @param  table_info             Object  TableInfo object containing current table information for tree representations
 * @param  control_info           Object  ControlInfo object containing current control information for tree representations
 * @param  list_info              Object  Current LanguageElement object that contains the DOMElement
 *
 * @return none
 */

OpenAjax.a11y.cache.DOMCache.prototype.traverseDOMElementsForAllCaches = function (dom_element,
                                          landmark_info,
                                          heading_global_info,
                                          table_info,
                                          control_info,
                                          list_info,
                                          media_info,
                                          frame_info) {

  if (!dom_element) return;
  // if an element for through all the children elements looking for text

  switch (dom_element.type) {

    case Node.ELEMENT_NODE:
      // flag for testing for an HTML DOM versus a XML DOM
      if (dom_element.tag_name === 'body') this.has_body_element = true;

//  OpenAjax.a11y.logger.debug("[traverseDOMElementsForAllCaches][dom_element]: " + dom_element.tag_name + " " + dom_element.type);

      this.abbreviations_cache.updateCacheItems(dom_element);
      this.images_cache.updateCacheItems(dom_element);
      this.languages_cache.updateCacheItems(dom_element);
      this.links_cache.updateCacheItems(dom_element);

      var hi = this.headings_landmarks_cache.updateCacheItems(dom_element, landmark_info, heading_global_info);
      var ti = this.tables_cache.updateCacheItems(dom_element, table_info);
      var ci = this.controls_cache.updateCacheItems(dom_element, control_info);
      var li = this.lists_cache.updateCacheItems(dom_element, list_info);
      var mi = this.media_cache.updateCacheItems(dom_element, media_info);
      var fi = this.frames_cache.updateCacheItems(dom_element, frame_info);

//  if (dom_element.tag_name === 'h2')        OpenAjax.a11y.logger.debug("[traverseDOMElementsForAllCaches][dom_element]: " + dom_element);
//  if (dom_element.tag_name === 'input')     OpenAjax.a11y.logger.debug("[traverseDOMElementsForAllCaches][dom_element]: " + dom_element);
//  if (dom_element.tag_name === 'textarea')  OpenAjax.a11y.logger.debug("[traverseDOMElementsForAllCaches][dom_element]: " + dom_element);

      var children_length = dom_element.child_dom_elements.length;
        for (var i = 0; i < children_length; i++ ) {
        this.traverseDOMElementsForAllCaches(dom_element.child_dom_elements[i], hi, heading_global_info, ti, ci, li, mi, fi);
      } // end loop

      this.element_information.countElement(dom_element);

      break;

    case Node.TEXT_NODE:
      this.text_cache.updateCacheItems(dom_element);
      this.headings_landmarks_cache.updateCacheItems(dom_element, landmark_info, heading_global_info);
      break;

    default:
      break;

  }
};


/**
 * @method updateAllCaches
 * @memberOf OpenAjax.a11y.cache.DOMCache
 *
 * @desc Traverses the DOMElements and
 *       calls the update function to see which specialized caches want information on this element
 *
 * @return none
 */

OpenAjax.a11y.cache.DOMCache.prototype.updateAllCaches = function () {
 var children = this.element_cache.child_dom_elements;
 var children_len = children.length;

  var hi = new OpenAjax.a11y.cache.LandmarkInfo(null);
  var hi_g = new OpenAjax.a11y.cache.HeadingInfo(null);
  var ti = new OpenAjax.a11y.cache.TableInfo(null);
  var ci = new OpenAjax.a11y.cache.ControlInfo(null);
  var li = new OpenAjax.a11y.cache.ListInfo(null);
  var mi = new OpenAjax.a11y.cache.MediaInfo();
  var fi = new OpenAjax.a11y.cache.FrameInfo(null);


  for (var i = 0; i < children_len; i++) {
    this.traverseDOMElementsForAllCaches(children[i], hi, hi_g, ti, ci, li, mi, fi);
  }

  this.controls_cache.calculateControlLabels();
  this.controls_cache.applyAriaOwns();

  this.keyboard_focus_cache.createKeyboardFocusCache();
  this.timing_cache.createTimingFlashingCache();

};

/**
 * @method updateDOMElementCache
 * @memberOf OpenAjax.a11y.cache.DOMCache
 *
 * @desc Updates a DOMElement object caches by traversing the DOM of the browser object
 *
 * @return DOMCache Object
 */

OpenAjax.a11y.cache.DOMCache.prototype.updateDOMElementCache = function () {

 this.initCache();

 // add title information to DOMElement Cache

 this.addTitleDOMElement();

 // if the page contains a body element start there, since there are fewer elements to traverse
 if (this.document && this.document.body) {
  // OpenAjax.a11y.logger.debug("Creating DOM elements from body element");
  this.updateDOMElements(this.document.body, null, null);
 }
 // If there are frames start at the top element
 else {
  // OpenAjax.a11y.logger.debug("Creating DOM elements with frames");
  this.updateDOMElements(this.document, null, null);
 }

 // Calculate aria-descriptions
 this.calculateDescriptions();

 return this;

};

/**
 * @method addTitleDOMElement
 * @memberOf OpenAjax.a11y.cache.DOMCache
 *
 * @desc Adds a DOMElement to represent a TITLE
 *
 * @return Nothing
 */

OpenAjax.a11y.cache.DOMCache.prototype.addTitleDOMElement = function () {

  var n;
  var node;
  var de;
  var titles = this.document.getElementsByTagName('title');

  if (titles && titles.length && titles[0]) {

    node = titles[0];

    de = new OpenAjax.a11y.cache.DOMElement(node, null);

    this.document_has_title = true;

    de.addComputedStyle(null);
    de.calculateXPath(null);

    this.element_cache.addDOMElement(de);
    this.element_cache.addChild(de);

    // get any text nodes associated with the title element
    for (n = node.firstChild; n !== null; n = n.nextSibling) {
      this.updateDOMElements( n, de, null);
    } // end loop

  }
  else {

    node = this.document.createElement('title');

    de = new OpenAjax.a11y.cache.DOMElement(node, null);

    this.document_has_title = false;

    de.addComputedStyle(null);
    de.xpath = "";

    this.element_cache.addDOMElement(de);
    this.element_cache.addChild(de);

  }

};

/**
 * @method updateDOMElements
 * @memberOf OpenAjax.a11y.cache.DOMCache
 *
 * @desc Traverse document DOM and create a tree of DOMElement objects.
 *    The DOMElement objects will be used to generate more specific
 *    lists of elements without need to touch the document DOM.
 *    Additional information is collected on tables to be used in
 *    creating the table cache
 *
 * @param  {Object} node               - node is the current node object tbing analyzed
 * @param  {Object} parent_dom_element - DOMElement object that is the parent of the current node
 * @param  {Object} previous_sibling   - The DOMElement or DOMText object that is the previous sibling
 *
 * return nothing
 */

OpenAjax.a11y.cache.DOMCache.prototype.updateDOMElements = function (node, parent_dom_element, previous_sibling, showElements) {

  function showElement(node) {
    if (showElements) {
      switch (node.nodeType) {

        case Node.ELEMENT_NODE:
          console.log('ELEM: ' + node.tagName + ' (' + node.className + ')');
          break;

        case Node.TEXT_NODE:
          var txt = node.data;
          console.log('TEXT: ' + txt.length);
          break;

        default:
          console.log('OTHER');
          break;
      }
    }
  }

  if (typeof showElements !== 'boolean') {
    showElements = false;
  }

  var n;
  var nodes;
  var de;
  var dom_element;

  switch (node.nodeType ) {

    case Node.DOCUMENT_NODE:
    case Node.DOCUMENT_TYPE_NODE:
      // OpenAjax.a11y.logger.debug("Document node type");
      break;

    case Node.ELEMENT_NODE:

      var tag_name = node.tagName.toLowerCase();
      showElement(node);

      if (tag_name === 'input' && tag_name === 'hidden') break;

      if (tag_name === 'body') dom_element = new OpenAjax.a11y.cache.DOMElement(node, parent_dom_element, this.document);
      else dom_element = new OpenAjax.a11y.cache.DOMElement(node, parent_dom_element, null);

      dom_element.addComputedStyle(parent_dom_element);

      dom_element.calculateXPath(parent_dom_element);
      this.element_cache.addDOMElement(dom_element);

      if (parent_dom_element) {
        parent_dom_element.has_element_children = true;
        parent_dom_element.addChild(dom_element);
      }
      else {
        this.element_cache.addChild(dom_element);
      }

      if (dom_element.id && dom_element.id.length) {
        // use append so that document_order of the dom_element does not get updated

        de = this.element_with_id_cache.getDOMElementById(dom_element.id);

        if (de) {
          dom_element.id_unique = OpenAjax.a11y.ID.NOT_UNIQUE;
          de.id_unique          = OpenAjax.a11y.ID.NOT_UNIQUE;
        }

        this.element_with_id_cache.dom_elements.push(dom_element);

      }

      switch (dom_element.tag_name) {

        case 'frame':
        case 'iframe':

          if (dom_element.tag_name === 'frame') this.frame_count += 1;
          else this.iframe_count += 1;

    //      OpenAjax.a11y.logger.debug("[updateDOMElements]iframe][found]");

          try {
            var frame_doc = node.contentWindow.document;

            if (frame_doc && frame_doc.firstChild) {
              for (n = frame_doc.firstChild; n !== null; n = n.nextSibling) {
                this.updateDOMElements( n, dom_element, null);
              } // end loop
            }
          } catch (e) {
    //        OpenAjax.a11y.logger.debug("[updateDOMElements][iframe][error]: " + e);
          }

          break;

        default:
          break;

      } // end switch

      var ps = null;

      // Check for custom element

      if (dom_element.tag_name.indexOf('-') >= 0) {
        var rn = node.shadowRoot;
        if (rn) {
          for (n = rn.firstElementChild; n !== null; n = n.nextElementSibling ) {
            ps = this.updateDOMElements(n, dom_element, ps);
          } // end loop
        }
      } else {
        switch (dom_element.tag_name) {
          case 'base':
          case 'link':
          case 'noscript':
          case 'script':
          case 'style':
          case 'template':
          case 'content':
          case 'shadow':
            break;

          case 'slot':
            nodes = node.assignedNodes({ flatten: true });
            for (var i = 0; i < nodes.length; i += 1) {
              n = nodes[i];
              ps = this.updateDOMElements(n, dom_element, ps, showElements);
            } // end loop
            break;

          default:
            for (n = node.firstChild; n !== null; n = n.nextSibling ) {
              ps = this.updateDOMElements(n, dom_element, ps, showElements);
            } // end loop
            break;

        }
      }

      return dom_element;

    case Node.TEXT_NODE:
     // OpenAjax.a11y.logger.debug("DOM node text: " + node.data);

     var dom_text = new OpenAjax.a11y.cache.DOMText(node, parent_dom_element);

     if (dom_text.text_length) {

       if (!previous_sibling || previous_sibling.type != Node.TEXT_NODE) {

         this.element_cache.addDOMText(dom_text);
         if (parent_dom_element) parent_dom_element.addChild(dom_text);
         return dom_text;

       } else {

         if (previous_sibling) previous_sibling.addText(dom_text.text);

         return previous_sibling;
       }
     }
     else {
       return previous_sibling;
     }

    default:
      break;
  } // end switch

  return null;

};


/**
 * @method calculateDescriptions
 *
 * @memberOf OpenAjax.a11y.cache.DOMCache
 *
 * @desc Calculates a description if a element has an aria-describedby attribute defined
 */

OpenAjax.a11y.cache.DOMCache.prototype.calculateDescriptions = function () {

  var de;
  var dom_elements     = this.element_cache.dom_elements;
  var dom_elements_len = dom_elements.length;

  for (var i = 0; i < dom_elements_len; i++ ) {
    de = dom_elements[i];

    if (typeof de.aria_describedby === 'string' && de.aria_describedby.length && !de.calculated_aria_description) {
      de.calculated_aria_description    = this.getTextFromIDs(de.aria_describedby);
      de.undefined_aria_describedby_ids = this.getUndefinedIDs(de.aria_describedby);
    }
  }
};

/**
 * @method getNameForLink
 *
 * @memberOf OpenAjax.a11y.cache.DOMCache
 *
 * @desc Calculates a computed accessible name for a link, using ARIA properties if defined
 *
 * @param {LinkElement} link - Link element object
 */

OpenAjax.a11y.cache.DOMCache.prototype.getNameForLink = function (link) {

  var SOURCE = OpenAjax.a11y.SOURCE;

  var computed_label = "";
  var computed_label_source = SOURCE.NONE;
  var de = link.dom_element;

  if (de.has_aria_labelledby) {
    computed_label = this.element_with_id_cache.getTextFromIds(de.aria_labelledby);
    computed_label_source = SOURCE.ARIA_LABELLEDBY;
  }
  else if (de.has_aria_label) {
    computed_label = de.aria_label;
    computed_label_source = SOURCE.ARIA_LABEL;
  }
  else if (de.has_title) {
    computed_label = de.title;
    computed_label_source = SOURCE.TITLE_ATTRIBUTE;
  }
  else {
    computed_label = de.getText();
    computed_label_source = SOURCE.TEXT_CONTENT;
  }

  link.accessible_name                = computed_label;
  link.accessible_name_for_comparison = OpenAjax.a11y.util.normalizeSpace(computed_label.toLowerCase());
  link.accessible_name_length         = computed_label.length;
  link.accessible_name_source         = computed_label_source;

  this.getDescriptionFromARIADescribedby(link);
};


/**
 * @method getCaptionForTable
 *
 * @memberOf OpenAjax.a11y.cache.DOMCache
 *
 * @desc Calculates a computed caption and summary for a table element, using ARIA properties if defined
 *
 * @param {TableElement} table   - Table element object
 * @param {CaptionElement}       - Caption element object (can be null)
 */

OpenAjax.a11y.cache.DOMCache.prototype.getAccessibleNameDescriptionForTable = function (table, caption) {

  var SOURCE             = OpenAjax.a11y.SOURCE;
  var DESCRIPTION_SOURCE = OpenAjax.a11y.DESCRIPTION_SOURCE;

  var de = table.dom_element;

  if (!caption || caption.accessible_name_for_comparison === "") {

    if (de.has_aria_labelledby) {
      table.accessible_name        = this.element_with_id_cache.getTextFromIds(de.aria_labelledby);
      table.accessible_name_source = SOURCE.ARIA_LABELLEDBY;
    }
    else if (de.has_aria_label) {
      table.accessible_name        = de.aria_label;
      table.accessible_name_source = SOURCE.ARIA_LABEL;
    }
    else {
      if (de.has_summary) {
        table.accessible_name        = de.summary;
        table.accessible_name_source = SOURCE.TABLE_SUMMARY;
      }
      else {
        if (de.has_title) {
          table.accessible_name        = de.title;
          table.accessible_name_source = SOURCE.TITLE_ATTRIBUTE;
        }
      }
    }
  }
  else {
    table.accessible_name        = caption.accessible_name;
    table.accessible_name_source = SOURCE.TABLE_CAPTION;
  }

  table.accessible_name_for_comparison = OpenAjax.a11y.util.normalizeSpace(table.accessible_name.toLowerCase());
  table.accessible_name_length         = table.accessible_name_for_comparison.length;

  // now look for accessible description

//  OpenAjax.a11y.logger.debug("[getAccessibleNameDescriptionForTable]        name: " + table.accessible_name);
//  OpenAjax.a11y.logger.debug("[getAccessibleNameDescriptionForTable]      source: " + table.accessible_name_source);
//  OpenAjax.a11y.logger.debug("[getAccessibleNameDescriptionForTable] has_summary: " + de.has_summary);
//  OpenAjax.a11y.logger.debug("[getAccessibleNameDescriptionForTable]     summary: " + de.summary);


  if ((table.accessible_name_source === SOURCE.TABLE_CAPTION) ||
      (table.accessible_name_source === SOURCE.ARIA_LABELLEDBY) ||
      (table.accessible_name_source === SOURCE.ARIA_LABEL)) {

    if (de.has_summary) {
      table.accessible_description        = de.summary;
      table.accessible_description_source = DESCRIPTION_SOURCE.TABLE_SUMMARY;
    }
    else {
      if (de.has_title) {
        table.accessible_description = de.title;
        table.accessible_description_source = DESCRIPTION_SOURCE.TITLE_ATTRIBUTE;
      }
      else {
        table.accessible_description = this.getDescriptionFromARIADescribedby(table);
        if (table.accessible_description.length) table.accessible_description_source = DESCRIPTION_SOURCE.ARIA_DESCRIBEDBY;
      }
    }
  }
  else {
    if (table.accessible_name_source === SOURCE.TABLE_SUMMARY) {
      if (de.has_title) {
        table.accessible_description = de.title;
        table.accessible_description_source = DESCRIPTION_SOURCE.TITLE_ATTRIBUTE;
      }
      else {
        table.accessible_description = this.getDescriptionFromARIADescribedby(table);
        if (table.accessible_description.length) table.accessible_description_source = DESCRIPTION_SOURCE.ARIA_DESCRIBEDBY;
      }
    }
    else {
      table.accessible_description = this.getDescriptionFromARIADescribedby(table);
      if (table.accessible_description.length) table.accessible_description_source = DESCRIPTION_SOURCE.ARIA_DESCRIBEDBY;
    }
  }

  table.accessible_description_for_comparison = OpenAjax.a11y.util.normalizeSpace(table.accessible_description.toLowerCase());
  table.accessible_description_length         = table.accessible_description_for_comparison.length;


};

/**
 * @method getNameFromARIALabel
 *
 * @memberOf OpenAjax.a11y.cache.DOMCache
 *
 * @desc Calculates a computed label and accessible name based on ARIA properties
 *
 * @param {Object} control           - Control cache element object
 * @param {String} prefix            - Used to include role in the accessible label for landmarks and widgets
 * @param {Boolean} only_when_label  - Only add prefix if there is a label defined (i.e. for REGION landmark)
 */

OpenAjax.a11y.cache.DOMCache.prototype.getNameFromARIALabel = function (control, prefix, only_when_label) {

  if (typeof prefix !== 'string') prefix = "";
  else prefix += " ";

  if (typeof only_when_label !== 'boolean') only_when_label = false;

  var SOURCE = OpenAjax.a11y.SOURCE;

  var compare_label;
  var computed_label = "";
  var computed_label_source = SOURCE.NONE;
  var de = control.dom_element;
  var wi = de.role_info;

  if (de.aria_labelledby) {
    computed_label = this.element_with_id_cache.getTextFromIds(de.aria_labelledby);
    computed_label_source = SOURCE.ARIA_LABELLEDBY;
  }
  else if (de.aria_label) {
    computed_label = de.aria_label;
    computed_label_source = SOURCE.ARIA_LABEL;
  }
  else if (wi && wi.nameFromContent) {
    computed_label = de.getText();
    computed_label_source = SOURCE.TEXT_CONTENT;
  } else if (de.title) {
    computed_label = de.title;
    computed_label_source = SOURCE.TITLE_ATTRIBUTE;
  }

  compare_label = computed_label;
  if ((only_when_label && computed_label.length) ||
      !only_when_label) {
    compare_label = prefix + computed_label;
  }

  control.computed_label = computed_label;
  control.computed_label_length = computed_label.length;
  control.computed_label_source = computed_label_source;
  control.computed_label_for_comparison = OpenAjax.a11y.util.normalizeSpace(compare_label);
  control.accessible_name = computed_label;

  this.getDescriptionFromARIADescribedby(control);
};

/**
 * @method getDescriptionFromARIADescribedby
 *
 * @memberOf OpenAjax.a11y.cache.DOMCache
 *
 * @desc Calculates a description based on ARIA properties
 *
 * @param {Object} element - Cache element object
 *
 * @return  {String} Description string, if no aria-describedby the string is empty
 */

OpenAjax.a11y.cache.DOMCache.prototype.getDescriptionFromARIADescribedby = function (element) {

  var de = element.dom_element;
  if (typeof de === 'undefined') de = element;

  if (de && de.aria_describedby) {
    element.accessible_description = this.element_with_id_cache.getTextFromIds(de.aria_describedby);
    element.accessible_description_for_comparison = OpenAjax.a11y.util.normalizeSpace(element.accessible_description.toLowerCase());
  }
  else {
    element.accessible_description = "";
    element.accessible_description_for_comparison = "";
  }

  return element.accessible_description;

};


/**
 * @method getTextFromIDs
 * @memberOf OpenAjax.a11y.cache.DOMCache
 *
 * @desc Returns the text content of the elements identified in the list of ids
 *
 * @param {String}  ids  An string with space separated ids
 *
 * @return String
 */

OpenAjax.a11y.cache.DOMCache.prototype.getTextFromIDs = function (ids) {

  if (!ids || ids.length === 0) return "";

  return this.element_with_id_cache.getTextFromIds(ids);

};

/**
 * @method getUndefinedIDs
 * @memberOf OpenAjax.a11y.cache.DOMCache
 *
 * @desc Returns the text content of the elements identified in the list of ids
 *
 * @param {String}  ids  An string with space separated ids
 *
 * @return {String} A string of the invalid ids, string is empty if all valid
 */

OpenAjax.a11y.cache.DOMCache.prototype.getUndefinedIDs = function (ids) {

  if (!ids || ids.length === 0) return "";

  return this.element_with_id_cache.getUndefinedIds(ids);

};


/**
 * @method sortArrayOfObjects
 * @memberOf OpenAjax.a11y.cache.DOMCache
 *
 * @desc Sort an array of objects by one of its properties and marks any properties that are duplicates
 *
 * @param {Array}   objects   - Array of objects to sort
 * @param {String}  property  - Text string of property to sort
 * @param {Boolean} ascending - True sort by ascending values otherwise sort by descending values
 *
 * @return Array of sorted objects
 */

OpenAjax.a11y.cache.DOMCache.prototype.sortArrayOfObjects = function(objects, property, ascending ) {

  var swapped = false;
  var temp = null;
  var i;
  var return_objects = [];

  if( !objects && objects.length && !objects[0][property] ) {
    return return_objects;
  } // endif

  var objects_len = objects.length;

  for (i = 0; i < objects_len; i++) {
    return_objects[i] = objects[i];
    return_objects[i].duplicate = false;
  }

  if( ascending ) {
    do{
      swapped = false;
      for (i = 1; i < objects_len; i++ ) {
        if (return_objects[i-1][property] > return_objects[i][property]) {
          // swap the values
          temp = return_objects[i-1];
          return_objects[i-1] = return_objects[i];
          return_objects[i] = temp;
          swapped = true;
        }
        else {
          if (return_objects[i-1][property] === return_objects[i][property]) {
            return_objects[i-1].duplicate = true;
            return_objects[i].duplicate = true;
          }
        }
      } // end loop
    } while (swapped);
  }
  else {
    do {
      swapped = false;
      for (i = 1; i < objects_len; i++) {
        if (return_objects[i-1][property] < return_objects[i][property]) {
          // swap the values
          temp = return_objects[i-1];
          return_objects[i-1] = return_objects[i];
          return_objects[i] = temp;
          swapped = true;
        }
        else {
          if (return_objects[i-1][property] === return_objects[i][property]) {
            return_objects[i-1].duplicate = true;
            return_objects[i].duplicate = true;
          }
        }
      } // end loop
    } while (swapped);
  }

  return return_objects;

};

/**
 * @method getDuplicateObjects
 * @memberOf OpenAjax.a11y.cache.DOMCache
 *
 * @desc Get duplicate objects in an array based on one of its properties and marks any properties that are duplicates
 *       Algorithm assumes that the object list is sorted by the property, so objects with duplicate properties are adjacent
 *       to each other
 *
 * @param {Array}   objects   - Array of objects to sort
 * @param {String}  property  - Text string of property to sort
 *
 * @return [Array][Array] of duplicate objects
 */

OpenAjax.a11y.cache.DOMCache.prototype.getDuplicateObjects = function(objects, property) {

  if( !objects && objects.length && !objects[0][property] ) {
    return return_objects;
  } // endif

  var return_objects = [];
  var objects_len = objects.length;

  var i = 0;
  var j = 0;
  var k = 1;
  while (k < objects_len) {
    return_objects.push([objects[j]]);

    if (objects[j][property] === objects[k][property]) {
      while ((k < objects_len) &&
             (objects[j][property] === objects[k][property])) {
        return_objects[i].push(objects[k]);
        k++;
      }

    }
    j = k;
    k++;
    i++;
  }


  return return_objects;

};



/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                              FrameInfo                            */
/* ---------------------------------------------------------------- */

/**
 * @constructor FrameInfo
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a list information object for preserving the current frame information
 *        when traversing the DOM
 *
 * @param {FrameInfo} frame_info - Current list information object
 *
 * @property {FrameElement}    parent_frame - parent frame element object
 */

OpenAjax.a11y.cache.FrameInfo = function (frame_info) {

  if (frame_info) {
    this.parent_frame   = frame_info.frame_landmark;
  }
  else {
    this.parent_frame   = null;
  }

};

/* ---------------------------------------------------------------- */
/*                            FramesCache                            */
/* ---------------------------------------------------------------- */

/**
 * @constructor FramesCache
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Constructor for frames cache object which contains a list of
 *    frame and iframe items defined in a document.
 *
 * @param {DOMCache}   dom_cache   - Reference to the DOMCache object
 *
 * @property {DOMCache} dom_cache  - Reference to the DOMCache object
 *
 * @property {Boolean}  up_to_date - Boolean true if the cache has been creating using the current DOMElements, else false
 *                                   NOTE: This is a common property of all caches and is used when selectively build caches
 *                                         based on whether a rule needs the cache
 *
 * @property {Array}    child_cache_elements  - Root array of the tree representation of the frame elements in the document
 *
 * @property {Array}   frame_elements    - List of the frame element objects in the document that are not children of a container item
 * @property {Array}   iframe_elements   - List of the iframe element objects
 * @property {Number}  length              - Number of containter element objects in list
 */

OpenAjax.a11y.cache.FramesCache = function (dom_cache) {

  this.dom_cache = dom_cache;
  this.up_to_date = false;

  this.child_cache_elements = [];
  this.frame_elements       = [];
  this.iframe_elements      = [];

};

/**
 * @method addFrameElement
 *
 * @memberOf OpenAjax.a11y.cache.FramesCache
 *
 * @desc Adds a frame element object to the list of frame elements
 *
 * @param  {FrameElement} frame_element   - frame element object to add
 *
 * @return  {Boolean} Returns true if frame element was added to list
 */

OpenAjax.a11y.cache.FramesCache.prototype.addFrameElement = function (frame_element) {

  if (frame_element) {
    if (frame_element.dom_element.tag_name === 'frame') this.frame_elements.push(frame_element);
    else this.iframe_elements.push(frame_element);
    return true;
  }

  return false;

};



/**
 * @method updateCacheItems
 *
 * @memberOf OpenAjax.a11y.cache.FramesCache
 *
 * @desc Update the FramesCache by checking to see if the current
 *       DOMElement is a list-related element and that consequently
 *       a new list element object should be added to this cache.
 *
 * @param  {DOMElement}   dom_element  - dom element object to check for inclusion in lists cache
 * @param  {FrameInfo}    frame_info    - Information about the current frame relationships in the DOM
 *
 * @return {FrameInfo}  Returns updated frame information object
 */

OpenAjax.a11y.cache.FramesCache.prototype.updateCacheItems = function (dom_element, frame_info) {

  var fi = new OpenAjax.a11y.cache.FrameInfo(frame_info);

  // check whether we need to add a new FrameElement
  switch (dom_element.tag_name) {

  case 'frame':
  case 'iframe':

    var fe = new OpenAjax.a11y.cache.FrameElement(dom_element, frame_info);
    this.dom_cache.getNameFromARIALabel(fe);

    this.addFrameElement(fe);

    if (frame_info.parent_frame) {
      frame_info.parent_frame.addChildElement(fe);
    }
    else {
      this.addChildElement(fe);
    }

    fi.parent_frame = fe;

//    OpenAjax.a11y.logger.debug( "[FramesCache][updateCacheItems]      fe: " + fe);
//    OpenAjax.a11y.logger.debug( "[FramesCache][updateCacheItems]  frames: " + this.frame_elements.length);
//    OpenAjax.a11y.logger.debug( "[FramesCache][updateCacheItems] iframes: " + this.iframe_elements.length);

    break;


  default:
    break;

  } // end switch

  return fi;

};


/**
 * @method addChildElement
 *
 * @memberOf OpenAjax.a11y.cache.FramesCache
 *
 * @desc Add a top-level frame element object to the frames cache
 *
 * @param {FrameElement} frame_element - frame cache element object to add to the list cache
 *
 * @return {boolean} indicating success or failure
 */

OpenAjax.a11y.cache.FramesCache.prototype.addChildElement = function (frame_element) {


  if (frame_element) {
    this.child_cache_elements.push(frame_element);
    return true;
  }

  return false;

};

/**
 * @method emptyCache
 *
 * @memberOf OpenAjax.a11y.cache.FramesCache
 *
 * @desc Empties all the properties of the list cache
 */

OpenAjax.a11y.cache.FramesCache.prototype.emptyCache = function () {

  this.dom_cache = null;
  this.up_to_date = false;

  this.child_elements     = [];

  this.frame_elements = [];
  this.iframe_elements = [];
};


/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.FramesCache
 *
 * @desc Returns a text string representation of the lists cache object
 *
 * @return {String} Returns string represention the lists cache object
 */

OpenAjax.a11y.cache.FramesCache.prototype.toString = function () {

 var str = "Frame Information: ";

 if (this.frame_elements.length === 1) str += "1 frame element";
 else str += this.frame_elements.length + " frame elements";

 if (this.iframe_elements.length === 1) str += " and 1 iframe element";
 else str += " and " + this.iframe_elements.length + " iframe elements";

 return str;
};


/* ---------------------------------------------------------------- */
/*                           FrameElement                       */
/* ---------------------------------------------------------------- */

/**
 * @constructor FrameElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Cache object to be inserted into ListsCache; corresponds to
 *       either a OL, UL, DL element in the DOM
 *
 * @param  {DOMelement}  dom_element  - The dom element object representing the input element
 * @param  {FrameInfo}   frame_info    - Current frame information
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the container element
 *
 * @property  {ContainerElement}  parent_container  - Reference to the container element the container element is contained in
 *
 * @property  {Array}   child_cache_elements  - Array of child cache list elements as part of frame cache tree
 *
 */

OpenAjax.a11y.cache.FrameElement = function (dom_element, frame_info) {

  this.dom_element    = dom_element;

  this.parent_frame   = frame_info.parent_frame;

  this.child_cache_elements = [];

  this.computed_label                 = "";
  this.computed_label_length          = 0;
  this.computed_label_source          = OpenAjax.a11y.SOURCE.NONE;
  this.computed_label_for_comparison  = "";
  this.accessible_name                = "";

  this.has_name = false;
  this.src = "";
  if (dom_element.has_src) this.src = dom_element.src;

};


/**
 * @method addChildElement
 *
 * @memberOf OpenAjax.a11y.cache.FrameElement
 *
 * @desc Add a frame element object to the tree of list cache items
 *
 * @param {FrameElement } frame_element - frame cache element object to add to the list cache
 *
 * @return {boolean} indicating success or failure
 */

OpenAjax.a11y.cache.FrameElement.prototype.addChildElement = function (frame_element) {

  if (frame_element) {
    this.child_cache_elements.push(frame_element);
//    OpenAjax.a11y.logger.debug( "[FrameElement][addChildElement] adding child element: " + list_element + " (" + this.child_cache_elements.length + ")");
//    OpenAjax.a11y.logger.debug( "[FrameElement][addChildElement] " + this.toString());

    return true;
  }

  return false;

};




/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.FrameElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.FrameElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.FrameElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.FrameElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.FrameElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.FrameElement.prototype.getAttributes = function () {

  var attributes = this.dom_element.getAttributes();

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.FrameElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.FrameElement.prototype.getCacheProperties = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties(unsorted);

  cache_nls.addPropertyIfDefined(properties, this, 'list_type');
  cache_nls.addPropertyIfDefined(properties, this, 'link_count');

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.FrameElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.FrameElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};

/**

 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.FrameElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.FrameElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.FrameElement
 *
 * @desc Returns a text string representation of the container element object
 *
 * @return {String} Returns string represention the container element object
 */

OpenAjax.a11y.cache.FrameElement.prototype.toString = function () {

  var str = this.dom_element.tag_name + ": " ;

  if (this.computed_label_source != OpenAjax.a11y.SOURCE.NONE) {
    if (this.accessible_name.length) str += this.accessible_name;
    else str += 'empty';
  }
  else {
     str += 'no name';
  }

  if (this.src.length) str +=  ' (' + this.src + ')';
  else str +=  ' (no source url defined)';

  return str;


};



/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*            OpenAjax Heading and Landmark Cache                   */
/* ---------------------------------------------------------------- */

/* ---------------------------------------------------------------- */
/*                    LandmarkInfo Object                           */
/* ---------------------------------------------------------------- */

/**
 * @constructor LandmarkInfo
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc LandmarkInfo is the constructor for information related to landmarks
 *       in building the headings/landmark cache
 *
 * @param {LandmarkInfo}  landmark_info - Current landmark (if any)
 *
 * @property {LandmarkElement}  landmark_element         - parent landmark element
 * @property {LandmarkElement}  main_element             - parent main landmark element
 * @property {SectionElement}   html5_sectioning_element - parent HTML5 sectioning element
 * @property {Object}           page_element             - page object element
 * @property {Object}           body_element             - body element page object element
 * @property {Object}           iframe_element           - iframe object element
 * @property {Object}           inside_sectioning_element - True if inside a sectioning element
 */

OpenAjax.a11y.cache.LandmarkInfo = function (landmark_info) {

  if (landmark_info) {
    this.landmark_element = landmark_info.landmark_element;
    this.main_element     = landmark_info.main_element;
    this.page_element     = landmark_info.page_element;
    this.body_element     = landmark_info.body_element;
    this.iframe_element   = landmark_info.iframe_element;
    this.html5_sectioning_element      = landmark_info.html5_sectioning_element;
    this. inside_sectioning_element    = landmark_info.inside_sectioning_element;
  }
  else {
    this.landmark_element              = null;
    this.main_element                  = null;
    this.page_element                  = null;
    this.body_element                  = null;
    this.iframe_element                = null;
    this.html5_sectioning_element      = null;
    this.inside_sectioning_element    = false;

  }

};

/**
 * @constructor HeadingInfo
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc HeadingInfo is the constructor for information related to heading nesting
 *       in building the headings/landmark cache
 *
 * @param {HeadingInfo}  heading_info - Current heading information (if any)
 *
 * @property {HeadingElement}  nesting_h1  - Visible heading object at H1 level
 * @property {HeadingElement}  nesting_h2  - Visible heading object at H2 level
 * @property {HeadingElement}  nesting_h3  - Visible heading object at H3 level
 * @property {HeadingElement}  nesting_h4  - Visible heading object at H4 level
 * @property {HeadingElement}  nesting_h5  - Visible heading object at H5 level
 */

OpenAjax.a11y.cache.HeadingInfo = function (heading_info) {

  if (heading_info) {
    this.is_past_first_h1 = heading_info.is_past_first_h1;
    this.nesting_h1       = heading_info.nesting_h1;
    this.nesting_h2       = heading_info.nesting_h2;
    this.nesting_h3       = heading_info.nesting_h3;
    this.nesting_h4       = heading_info.nesting_h4;
    this.nesting_h5       = heading_info.nesting_h5;
  }
  else {
    this.is_past_first_h1 = false;
    this.nesting_h1       =  null;
    this.nesting_h2       =  null;
    this.nesting_h3       =  null;
    this.nesting_h4       =  null;
    this.nesting_h5       =  null;
  }

};

/* ---------------------------------------------------------------- */
/*                     HeadingsLandmarksCache                       */
/* ---------------------------------------------------------------- */

/**
 * @constructs HeadingsLandmarksCache
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc HeadingsLandmarksCache is the constructor for lists of heading and landmrk element objects and
 *       the root of a tree representation of the landmark and heading element relationships
 *
 * @param {DOMCache}  dom_cache   - Reference to the DOMCache object
 *
 * @property {DOMCache} dom_cache  - Reference to the DOMCache object
 *
 * @property {Boolean}  up_to_date - Boolean true if the cache has been creating using the current DOMElements, else false
 *                                   NOTE: This is a common property of all caches and is used when selectively build caches
 *                                          based on whether a rule needs the cache
 *
 * @property {Array}  child_cache_elements  - Root array of the tree representation of the landmarks and headings in the document
 *
 * @property {Array}   landmark_elements        - List of all the landmark elements in the document
 * @property {String}  landmarks_sort_property  - Name of the landmark element property the landmark elements array is currently sorted
 * @property {Number}  landmark_length          - The length of the landmark elements list, used in calculating cache id values
 *
 * @property {Array}   heading_elements        - List of all the heading elements in the document
 * @property {String}  headings_sort_property  - Name of the heading element property the heading elements array is currently sorted
 * @property {Number}  heading_length          - The length of the heading elements list, used in calculating cache id values
 *
 * @property {Array}   section_elements        - List of all the HTML5 sectioning elements in the document
 * @property {Number}  section_length          - The length of the HTML5 sectioning elements list, used in calculating cache id values
 *
 * @property {Array}   elements_with_content   - List of content elements and text nodes outside of landmarks
 *
 * @property {Array}   main_elements  - List of all the main landmark elements in the document
 * @property {Number}  main_length    - The length of the main landmark elements list, used in calculating cache id values
 *
 * @property {Array}   h1_elements    - List of all the h1 heading elements in the document
 * @property {Number}  h1_length      - The length of the main landmark elements list, used in calculating cache id values
 *
 * @property {Boolean}  has_main_landmarks  - True if document contians at lewast one main landmark, otherwise false
 * @property {Boolean}  has_title           - Title element is defined in the document
 *
 * @property {TitleElement} title_element  - The title element is used as a placeholder for title rule results
 * @property {PageElementHeadingsLandmarks}  page_element   - The body element is used as a placeholder rule results for items missing in a document like H1 elements and Main landmarks
 *
 * @property {ResultRuleSummary}  rule_summary_result  - Rule results associated with this cache
 */

OpenAjax.a11y.cache.HeadingsLandmarksCache = function (dom_cache) {

  this.dom_cache = dom_cache;

  this.up_to_date    = false;

  this.child_cache_elements   = [];

  this.landmark_elements = [];
  this.landmarks_sort_property = 'document_order';
  this.landmark_length  = 0;

  this.heading_elements = [];
  this.headings_sort_property  = 'document_order';
  this.heading_length  = 0;

  this.section_elements = [];
  this.all_section_elements = [];

  this.elements_with_content = [];

  this.main_elements = [];
  this.main_length   = 0;

  this.h1_elements   = [];
  this.h1_length     = 0;

  this.has_h1_elements    = false;
  this.has_main_landmarks = false;
  this.has_title          = false;

  this.title_element = null;
  this.page_element  = null;

  this.iframe_elements = [];

};

/**
 * @method addChildElement
 *
 * @memberOf OpenAjax.a11y.cache.HeadingsLandmarksCache
 *
 * @desc Adds a landmark or header element object to the root level of a tree of landmark/heading elements
 *
 * @param {LandmarkElement | HeadingElement} child_element - Landmark or heading element object to add
 */

OpenAjax.a11y.cache.HeadingsLandmarksCache.prototype.addChildElement = function (child_element) {

  // item must exist and have the position property
  if (child_element) {
    this.child_cache_elements.push(child_element);
  }

};

/**
 * @method addLandmarkElement
 *
 * @memberOf OpenAjax.a11y.cache.HeadingsLandmarksCache
 *
 * @desc   Adds a landmark element object to the heading elements list
 *
 * @param  {LandmarkElement} heading_element  - Landmark element object to a landmark elements list
 *
 * @return {Number} Returns the length of the landmark elements list
 */

OpenAjax.a11y.cache.HeadingsLandmarksCache.prototype.addLandmarkElement = function (landmark_element) {

  if (landmark_element) {
    var de = landmark_element.dom_element;

    this.landmark_length = this.landmark_length + 1;
    landmark_element.document_order = this.landmark_length;
    landmark_element.cache_id = "landmark_" + this.landmark_length;
    this.landmark_elements.push(landmark_element);

  }


  return this.landmark_length;
};

/**
 * @method addHeadingElement
 *
 * @memberOf OpenAjax.a11y.cache.HeadingsLandmarksCache
 *
 * @desc   Adds a heading element object to the heading elements list
 *
 * @param  {HeadingElement} heading_element  - HeadingElement object to a heading_elements array
 *
 * @return {Number} Returns the length of the heading elements list
 */

OpenAjax.a11y.cache.HeadingsLandmarksCache.prototype.addHeadingElement = function (heading_element) {

  if (heading_element) {
    this.heading_length = this.heading_length + 1;
    heading_element.document_order = this.heading_length;
    heading_element.cache_id = "heading_" + this.heading_length;
    this.heading_elements.push(heading_element);
  }
  return this.heading_length;
};

/**
 * @method addChildMainElement
 *
 * @memberOf OpenAjax.a11y.cache.HeadingsLandmarksCache
 *
 * @desc Adds a main landmark or h1 heading element object to the root level of a tree of title and main elements
 *
 * @param {MainElement | H1Element}  child_element - Main landmark or h1 heading element object to add
 */

OpenAjax.a11y.cache.HeadingsLandmarksCache.prototype.addChildMainElement = function (child_element) {

  // item must exist and have the position property
  if (child_element) {
    this.child_cache_elements.push(child_element);
  }

};

/**
 * @method addH1Element
 *
 * @memberOf OpenAjax.a11y.cache.HeadingsLandmarksCache
 *
 * @desc   Adds a h1 element object to the h1 heading elements list
 *
 * @param  {H1Element}  h1_element  -  h1 heading element to add
 */

OpenAjax.a11y.cache.HeadingsLandmarksCache.prototype.addH1Element = function (h1_element) {

  if (h1_element && h1_element.main_type === OpenAjax.a11y.MAIN.H1_ELEMENT) {
    this.h1_length = this.h1_length + 1;
    h1_element.document_order = this.h1_length;
    h1_element.cache_id = "h1_" + this.h1_length;
    this.h1_elements.push(h1_element);
  }

};

/**
 * @method addMainElement
 *
 * @memberOf OpenAjax.a11y.cache.HeadingsLandmarksCache
 *
 * @desc    Adds a main, h1 or title element object to the main_elements array and cacluates a cache id value
 *
 * @param  {MainElement | H1Element | TitleElement | PageElementHeadingsLandmarks}  main_element  Main, h1 heading or title element object to add
 *
 * @return  {Number}  length is the number of elements in the main_elements list
 */

OpenAjax.a11y.cache.HeadingsLandmarksCache.prototype.addMainElement = function (main_element) {

  if (main_element) {
    this.main_length = this.main_length + 1;
    main_element.document_order = this.main_length;
    main_element.cache_id = "main_" + this.main_length;
    this.main_elements.push(main_element);
  }

  return this.length;
};


/**
 * @method getItemByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.HeadingsLandmarksCache
 *
 * @desc  Finds the landmark or heading element object with the cache id value
 *
 * @param  {String}  cache_id  - cache id of a landmark element object
 *
 * @return  {LandmarkElement | HeadingElement | null} Returns a landmark element object if cache id found, otherwise null
 */

OpenAjax.a11y.cache.HeadingsLandmarksCache.prototype.getItemByCacheId = function (cache_id) {

  var i;
  var elements_with_content     = this.elements_with_content;
  var elements_with_content_len = elements_with_content.length;
  var item = null;

  item = this.getLandmarkElementByCacheId(cache_id);
  if (item) return item;

  item = this.getHeadingElementByCacheId(cache_id);
  if (item) return item;

  for (i = 0; i < elements_with_content_len; i++) {
    item = this.elements_with_content[i];
    if (item.cache_id == cache_id) return item;
  }

  return item;

};

/**
 * @method getLandmarkElementByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.HeadingsLandmarksCache
 *
 * @desc  Finds the landmark element object with the cache id value
 *
 * @param  {String}  cache_id  - cache id of a landmark element object
 *
 * @return  {LandmarkElement | null} Returns a landmark element object if cache id found, otherwise null
 */

OpenAjax.a11y.cache.HeadingsLandmarksCache.prototype.getLandmarkElementByCacheId = function (cache_id) {

  var i;
  var landmark_elements_len = this.landmark_elements.length;

  if (cache_id) {
    for (i=0; i<landmark_elements_len; i++) {
      if (this.landmark_elements[i].cache_id == cache_id) {
        return this.landmark_elements[i];
      }
    } // end loop
  }
 return null;
};

/**
 * @method getHeadingElementByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.HeadingsLandmarksCache
 *
 * @desc  Finds the heading element object with the cache id value
 *
 * @param  {String}  cache_id  - cache id of a heading element object
 *
 * @return  {HeadingElement | null}  Returns a heading object if cache id found, otherwise null
 */

OpenAjax.a11y.cache.HeadingsLandmarksCache.prototype.getHeadingElementByCacheId = function (cache_id) {

  var i;
  var heading_elements_len = this.heading_elements.length;

  if (cache_id) {
    for (i=0; i<heading_elements_len; i++) {
      if (this.heading_elements[i].cache_id == cache_id) {
        return this.heading_elements[i];
      }
    } // end loop
  }

  return null;
};

/**
 * @method initCache
 *
 * @memberOf OpenAjax.a11y.cache.HeadingsLandmarksCache
 *
 * @desc Empties the landmark and headings cache
 */

OpenAjax.a11y.cache.HeadingsLandmarksCache.prototype.initCache = function () {

  this.child_cache_elements  = [];

  this.up_to_date = false;

  this.landmark_elements = [];
  this.landmark_length = 0;
  this.landmarks_sort_property = 'document_order';

  this.section_elements = [];

  this.heading_elements = [];
  this.heading_length = 0;
  this.headings_sort_property = 'document_order';


  this.main_elements = [];
  this.main_length   = 0;

  this.h1_elements   = [];
  this.h1_length     = 0;

  this.page_element = null;

  this.has_h1_elements    = false;
  this.has_main_landmarks = false;
  this.has_title          = false;

  this.iframe_elements = [];

};

/**
 * @method getListOfSectionElements
 *
 * @memberOf OpenAjax.a11y.cache.HeadingsLandmarksCache
 *
 * @desc Returns a list of section element in the document
 *
 * @return {Array}  Returns array of section element objects
 */

OpenAjax.a11y.cache.HeadingsLandmarksCache.prototype.getListOfSectionElements = function () {

  function getChildren(ses) {

    var len = ses.length;

    for (var i = 0; i < len; i++) {
      var se = ses[i];
      list.push(se);
      getChildren(se.child_cache_elements);
    }

  }

  var list = [];

  getChildren(this.section_elements);

  return list;


};

/**
 * @method updateCacheItems
 *
 * @memberOf OpenAjax.a11y.cache.HeadingsLandmarksCache
 *
 * @desc Updates the landmarks and headings cache by checking to see if a DOMElement
 *          should be added
 *
 * @param  {DOMElement}    dom_element    - DOMElement object to check for inclusion in links cache
 * @param  {LandmarkInfo}  landmark_info  - Information about the current landmarks that are parents to this item
 * @param  {HeadingInfo}   heading_info   - Information about the current headers used for nesting rules
 *
 * @return {LandmarkInfo}  Returns updated landmark info object
 */

OpenAjax.a11y.cache.HeadingsLandmarksCache.prototype.updateCacheItems = function (dom_element, landmark_info, heading_info) {

  var me;
  var le;
  var he;
  var se;
  var li = new OpenAjax.a11y.cache.LandmarkInfo(landmark_info);
  var tag_name = dom_element.tag_name;

  if (typeof landmark_info.landmark_element === 'object') {
    dom_element.parent_landmark = landmark_info.landmark_element;
  } else {
    dom_element.parent_landmark = null;
  }

  if (typeof landmark_info.body_element === 'object') {
    dom_element.body_element    = landmark_info.body_element;
  } else {
    dom_element.body_landmark = null;
  }

//  OpenAjax.a11y.logger.debug("Body Element: " +  dom_element.body_element);

  if (dom_element.type == Node.ELEMENT_NODE) {

//    if (!landmark_info.inside_sectioning_element) OpenAjax.a11y.logger.debug("inside sectioning element: " +  landmark_info.inside_sectioning_element + " : " + dom_element.tag_name);

    switch(tag_name) {

      case 'article':
      case 'aside':
      case 'main':
      case 'nav':
      case 'section':
        li.inside_sectioning_element = true;
        break;

      default:
        break;
    }


    // Collect section elements for role restriction rules
    switch(tag_name) {

      case 'address':
      case 'article':
      case 'aside':
      case 'body':
      case 'footer':
      case 'header':
      case 'nav':
      case 'section':

//        OpenAjax.a11y.logger.debug("Section Element: " + tag_name + " (" + this.section_elements.length + " , " + this.getListOfSectionElements().length + ")" );

        se = new OpenAjax.a11y.cache.SectionElement(dom_element);

        this.all_section_elements.push(se);

        if (landmark_info.html5_sectioning_element) landmark_info.html5_sectioning_element.addChildElement(se);
        else this.section_elements.push(se);

        li.html5_sectioning_element = se;

        break;

      default:
        break;

    }

    if (!dom_element.is_landmark &&
        (tag_name == 'h1')) {

      this.has_h1_elements = true;

      he = new OpenAjax.a11y.cache.H1Element(dom_element, landmark_info.main_element);

      this.addH1Element(he);
      this.addHeadingElement(he);

      if (landmark_info.main_element) {
        landmark_info.main_element.addH1Element(he);
      }

      if (landmark_info.landmark_element) {
        landmark_info.landmark_element.addChildElement(he);
      }
      else {
        this.addChildElement(he);
      }

      he.isH1UsedAsLabelForMainRole();

      if ((dom_element.computed_style.is_visible_to_at === OpenAjax.a11y.VISIBILITY.VISIBLE) &&
            he.name_for_comparison.length) {

        heading_info.is_past_first_h1 = true;
        heading_info.nesting_h1       = he;
        heading_info.nesting_h2       = null;
        heading_info.nesting_h3       = null;
        heading_info.nesting_h4       = null;
        heading_info.nesting_h5       = null;

        if (li.landmark_element) {

          var hi = li.landmark_element.heading_info;

          hi.nesting_h1 = he;
          hi.nesting_h2 = null;
          hi.nesting_h3 = null;
          hi.nesting_h4 = null;
          hi.nesting_h5 = null;

        }
      }


      return li;
    }

    if (!dom_element.is_landmark && (
        (tag_name == 'h2') ||
        (tag_name == 'h3') ||
        (tag_name == 'h4') ||
        (tag_name == 'h5') ||
        (tag_name == 'h6'))) {

      he = new OpenAjax.a11y.cache.HeadingElement(dom_element, landmark_info, heading_info);

      this.addHeadingElement(he);

      if (landmark_info.landmark_element) {
        landmark_info.landmark_element.addChildElement(he);
      }
      else {
        this.addChildElement(he);
      }

      if ((dom_element.computed_style.is_visible_to_at === OpenAjax.a11y.VISIBILITY.VISIBLE) &&
          he.name_for_comparison.length) {

        switch (tag_name) {

        case 'h2':
          heading_info.nesting_h2 = he;
          heading_info.nesting_h3 = null;
          heading_info.nesting_h4 = null;
          heading_info.nesting_h5 = null;

          if (li.landmark_element) {

            li.landmark_element.heading_info.nesting_h2 = he;
            li.landmark_element.heading_info.nesting_h3 = null;
            li.landmark_element.heading_info.nesting_h4 = null;
            li.landmark_element.heading_info.nesting_h5 = null;
          }
          break;

        case 'h3':
          heading_info.nesting_h3 = he;
          heading_info.nesting_h4 = null;
          heading_info.nesting_h5 = null;

          if (li.landmark_element) {

            li.landmark_element.heading_info.nesting_h3 = he;
            li.landmark_element.heading_info.nesting_h4 = null;
            li.landmark_element.heading_info.nesting_h5 = null;
          }
          break;

        case 'h4':
          heading_info.nesting_h4 = he;
          heading_info.nesting_h5 = null;

          if (li.landmark_element) {
            li.landmark_element.heading_info.nesting_h4 = he;
            li.landmark_element.heading_info.nesting_h5 = null;
          }
          break;

        case 'h5':
          heading_info.nesting_h5 = he;

          if (li.landmark_element) {
            li.landmark_element.heading_info.nesting_h5 = he;
          }
          break;

        default:
          break;
        }
      }

      return li;
    }

    if (dom_element.is_landmark ||
        (dom_element.tag_name === 'aside' && !dom_element.has_role) ||
//         (dom_element.tag_name === 'form' && !dom_element.has_role) ||
        (dom_element.tag_name === 'main' && !dom_element.has_role) ||
        (dom_element.tag_name === 'nav' && !dom_element.has_role) ||
        (((dom_element.tag_name === 'section' || dom_element.tag_name === 'form') && !dom_element.has_role) &&
         (dom_element.has_aria_label ||
          dom_element.has_aria_labelledby ||
          dom_element.has_title)) ||
        (!landmark_info.inside_sectioning_element && (
         (dom_element.tag_name === 'footer' && !dom_element.has_role)) ||
         (dom_element.tag_name === 'header' && !dom_element.has_role))) {

      if (dom_element.role == 'main' || (dom_element.tag_name === 'main'  && !dom_element.has_role)) {

        this.has_main_landmarks = true;

        me = new OpenAjax.a11y.cache.MainElement(dom_element, dom_element);

        this.dom_cache.getNameFromARIALabel(me, "MAIN");

        this.addLandmarkElement(me);
        this.addMainElement(me);

        if (landmark_info.landmark_element) {
          landmark_info.landmark_element.addChildElement(me);
        }
        else {
          this.addChildElement(me);
        }

        li.landmark_element = me;
        li.main_element     = me;

        return li;
      }
      else {

        if ((dom_element.tag_name === 'header') &&
            (!dom_element.parent_landmark &&
             (!dom_element.has_role || dom_element.role === 'banner') &&
             !landmark_info.inside_sectioning_element)) {
          dom_element.element_aria_info = OpenAjax.a11y.ariaInHTML.elementInfo['header[banner]'];
          dom_element.implicit_role = 'banner';
        }

        if ((dom_element.tag_name === 'footer') &&
            (!dom_element.parent_landmark &&
             (!dom_element.has_role  || dom_element.role === 'contentinfo') &&
             !landmark_info.inside_sectioning_element)) {
          dom_element.element_aria_info = OpenAjax.a11y.ariaInHTML.elementInfo['footer[contentinfo]'];
          dom_element.implicit_role = 'contentinfo';
        }

        if (dom_element.has_role) {
          le = new OpenAjax.a11y.cache.LandmarkElement(dom_element);
          this.dom_cache.getNameFromARIALabel(le, dom_element.role.toUpperCase());
        }
        else {

          switch (dom_element.tag_name) {

          case 'aside':
            le = new OpenAjax.a11y.cache.LandmarkElement(dom_element, 'complementary');
            this.dom_cache.getNameFromARIALabel(le, "COMPLEMENTARY");
            break;

          case 'form':
            le = new OpenAjax.a11y.cache.LandmarkElement(dom_element, 'form');
            this.dom_cache.getNameFromARIALabel(le, "FORM", true);
            break;

          case 'footer':
            if (dom_element.implicit_role === 'contentinfo') {
              le = new OpenAjax.a11y.cache.LandmarkElement(dom_element, 'contentinfo');
              this.dom_cache.getNameFromARIALabel(le, "CONTENTINFO");
            }
            break;

          case 'header':
            if (dom_element.implicit_role === 'banner') {
              le = new OpenAjax.a11y.cache.LandmarkElement(dom_element, 'banner');
              this.dom_cache.getNameFromARIALabel(le, "BANNER");
            }
            break;

          case 'nav':
            le = new OpenAjax.a11y.cache.LandmarkElement(dom_element, 'navigation');
            this.dom_cache.getNameFromARIALabel(le, "NAVIGATION");
            break;

          case 'section':
            le = new OpenAjax.a11y.cache.LandmarkElement(dom_element, 'region');
            this.dom_cache.getNameFromARIALabel(le, "REGION", true);
            break;

          default:
            break;

          }
        }

        this.addLandmarkElement(le);

        if (landmark_info.landmark_element) {
          landmark_info.landmark_element.addChildElement(le);
        }
        else {
          this.addChildElement(le);
        }

        li.landmark_element = le;

        return li;
      }
    }

    if (tag_name == 'title' && !this.has_title) {

      me = new OpenAjax.a11y.cache.TitleElement(dom_element);

      // There is only one title for a document, even when there are frames and iframes
      this.has_title = true;

      this.title_element = me;

      return li;
    }

    if (tag_name == 'body' && !this.page_element) {

      me = new OpenAjax.a11y.cache.PageElementHeadingsLandmarks(dom_element, this.title_element);

      // There is only one body element for a document, even when there are frames and iframes
      this.page_element = me;

      return li;
    }



    // elements that contain rendered content without having child dom text nodes
    if ((tag_name == 'area')     ||
        (tag_name == 'canvas')   ||
        (tag_name == 'input')    ||
        (tag_name == 'img')      ||
        (tag_name == 'textarea') ||
        (tag_name == 'select')) {

      if (!((tag_name == 'input') &&  (dom_element.input_type == 'hidden'))) {
        this.elements_with_content.push(dom_element);
        if (dom_element.parent_landmark) dom_element.parent_landmark.addToElementCount(1);
      }

      return li;
    }

    // elements that may have rendered content without having child dom text nodes
    if ((tag_name === 'applet')   ||
        (tag_name === 'embed')    ||
        (tag_name === 'object')) {
      dom_element.may_have_renderable_content = true;
      this.elements_with_content.push(dom_element);

//      OpenAjax.a11y.logger.debug("Parent Element: " +  dom_element.parent_landmark + " (" + dom_element + ")");

      if (dom_element.parent_landmark) dom_element.parent_landmark.addToElementCount(1);

      return li;
    }

    // Keep track of iframe elements
    if ((tag_name == 'iframe')) {
      this.iframe_elements.push(dom_element);
      li.iframe_element = dom_element;
      return li;
    }

    // Keep track of body elements
    if ((tag_name == 'body')) {
      li.body_element = dom_element;
      return li;
    }


  }
  else {
    tag_name = dom_element.parent_element.tag_name;
    if (tag_name != 'title'  &&
        tag_name != 'script' &&
        tag_name != 'style'  &&
        dom_element.text_length) {
      this.elements_with_content.push(dom_element);

//      OpenAjax.a11y.logger.debug("Parent Element: " +  dom_element.parent_landmark + " (" + dom_element + ")");

      if (dom_element.parent_landmark) dom_element.parent_landmark.addToElementCount(1);

    }
  }

  return li;

};

/**
 * @method traverseDOMElementsForLandmarkElements
 *
 * @memberOf OpenAjax.a11y.cache.HeadingsLandmarksCache
 *
 * @desc Traverses DOMElement objects in the tree to update the landmarks and headings cache
 *
 * @param  {DOMElement}    dom_element - DOMElement object to check for inclusion in landmarks and headings cache
 * @param  {LandmarkInfo}  landmark_info  - Information about the current landmarks that are parents to this item
 * @param  {HeadingInfo}   heading_info   - Information about the current headers used for nesting rules
 */

OpenAjax.a11y.cache.HeadingsLandmarksCache.prototype.traverseDOMElementsForLandmarkElements = function (dom_element, landmark_info, heading_info) {

  if (!dom_element) return;

  if (dom_element.type == Node.ELEMENT_NODE) {

    var li = this.updateCacheItems(dom_element, landmark_info, heading_info);

    for (var i = 0; i < dom_element.child_dom_elements.length; i++ ) {
      this.traverseDOMElementsForLandmarkElements(dom_element.child_dom_elements[i], li);
    }
  }
};


/**
 * @method updateCache
 *
 * @memberOf OpenAjax.a11y.cache.HeadingsLandmarksCache
 *
 * @desc Traverses the DOMElements to update the landmarks and heading cache
 *       NOTE: This function is only used when the specialized caches
 *       are build as rules need them.  In this condition, if the rules
 *       dependent on the landmark and headings cache are disabled, this
 *       cache would not be updated
 */

OpenAjax.a11y.cache.HeadingsLandmarksCache.prototype.updateCache = function () {
  var i;
  var li;
  var hi;
  var children = this.dom_cache.element_cache.child_dom_elements;
  var children_len = children.length;

  this.initCache();

  li = new OpenAjax.a11y.cache.LandmarkInfo(null);
  hi = new OpenAjax.a11y.cache.HeadingInfo(null);

  for (i=0; i < children_len; i++) {
    this.traverseDOMElementsForLandmarkElements(children[i], li, hi);
  }

  this.up_to_date = true;
};


/**
 * @method sortLandmarkElements
 *
 * @memberOf OpenAjax.a11y.cache.HeadingsLandmarksCache
 *
 * @desc    Sorts the landmark elements list based on a property of the landmark element object
 *
 * @param   {String}   property   - LandmarkElement object property used to sort the cache
 * @param   {Boolean}  ascending  - true if sort in ascending order; false in descending order
 *
 * @return  {Boolean}  Return true if list was sorted; false was not sorted due to an error
 */

OpenAjax.a11y.cache.HeadingsLandmarksCache.prototype.sortLandmarkElements = function(property, ascending ) {

  var swapped = false;
  var temp = null;
  var i;

  if( this.landmark_elements && this.landmark_elements.length && !this.landmark_elements[0][property] ) {
    return false;
  } // endif

  var landmark_elements_len = this.landmark_elements.length;

  if( ascending ) {
    do{
      swapped = false;
      for (i = 1; i < landmark_elements_len; i++ ) {
        if (this.landmark_elements[i-1][property] > this.landmark_elements[i][property]) {
          // swap the values
          temp = this.landmark_elements[i-1];
          this.landmark_elements[i-1] = this.landmark_elements[i];
          this.landmark_elements[i] = temp;
          swapped = true;
        }
      } // end loop
    } while (swapped);
  }
  else {
    do {
      swapped = false;
      for (i = 1; i < landmark_elements_len; i++) {
        if (this.landmark_elements[i-1][property] < this.landmark_elements[i][property]) {
          // swap the values
          temp = this.landmark_elements[i-1];
          this.landmark_elements[i-1] = this.landmark_elements[i];
          this.landmark_elements[i] = temp;
          swapped = true;
        }
      } // end loop
    } while (swapped);
  }

  this.landmark_sort_property = property;

  return true;

};

/**
 * @method sortHeadingElements
 *
 * @memberOf OpenAjax.a11y.cache.HeadingsLandmarksCache
 *
 * @desc  Sorts the heading_elements array based on a property of the HeadingElement object
 *
 * @param {String}   property   - HeadingElement object property used to sort the cache
 * @param {Boolean}  ascending  -  true if sort in ascending order; false in descending order
 *
 * @return  {Boolean}  true if list was sorted, false if not
 */

OpenAjax.a11y.cache.HeadingsLandmarksCache.prototype.sortHeadingElements = function(property, ascending ) {

  var swapped = false;
  var temp = null;
  var i;

  if( this.heading_elements && this.heading_elements.length && !this.heading_elements[0][property] ) {
    return false;
  } // endif

  var heading_elements_len = this.heading_elements.length;

  if( ascending ) {
    do{
      swapped = false;
      for (i = 1; i < heading_elements_len; i++ ) {
        if (this.heading_elements[i-1][property] > this.heading_elements[i][property]) {
          // swap the values
          temp = this.heading_elements[i-1];
          this.heading_elements[i-1] = this.heading_elements[i];
          this.heading_elements[i] = temp;
          swapped = true;
        }
      } // end loop

    } while (swapped);
  }
  else {
    do {
      swapped = false;
      for (i = 1; i < heading_elements_len; i++) {

        if (this.heading_elements[i-1][property] < this.heading_elements[i][property]) {
          // swap the values
          temp = this.heading_elements[i-1];
          this.heading_elements[i-1] = this.heading_elements[i];
          this.heading_elements[i] = temp;
          swapped = true;
        }
      } // end loop
    } while (swapped);
  }

  this.heading_sort_property = property;

  return true;

};

/* ---------------------------------------------------------------- */
/*                       SectionElement                            */
/* ---------------------------------------------------------------- */

/**
 * @constructor SectionElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a section element object used to hold information about an HTML5 section element
 *
 * @param  {DOMelement}       dom_element      - The dom element object representing the landmark element
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the landmark element
 *
 * @property  {Array}  child_cache_elements  - Array of child cache section element objects as part of section element tree
 */

OpenAjax.a11y.cache.SectionElement = function (dom_element) {

  this.dom_element           = dom_element;

  this.child_cache_elements  = [];

};

/**
 * @method addChildElement
 *
 * @memberOf OpenAjax.a11y.cache.SectionElement
 *
 * @desc Adds a LandmarkElement or HeaderElement object to the tree of landmark/heading elements
 *
 * @param {LandmarkElement | HeadingElement}  child_element  - Landmark element or heading element object to add
 */

OpenAjax.a11y.cache.SectionElement.prototype.addChildElement = function (child_element) {

  if (child_element) {
    this.child_cache_elements.push(child_element);
  }

};


/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.SectionElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.SectionElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.SectionElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.SectionElement.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.SectionElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.SectionElement.prototype.getCacheProperties = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties(unsorted);

  cache_nls.addPropertyIfDefined(properties, this, 'computed_label');
  cache_nls.addPropertyIfDefined(properties, this, 'computed_label_source');
  cache_nls.addPropertyIfDefined(properties, this, 'computed_label_for_comparison');
  cache_nls.addPropertyIfDefined(properties, this, 'accessible_name');
  cache_nls.addPropertyIfDefined(properties, this, 'elements_with_content_count');

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.SectionElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.SectionElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};


/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.SectionElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.SectionElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.SectionElement
 *
 * @desc Returns a text string representation of the section element
 *
 * @return {String} Returns string represention the section element object
 */

OpenAjax.a11y.cache.SectionElement.prototype.toString = function () {
 var de = this.dom_element;
 var s = de.tag_name;
 if (de.has_role) s = de.tag_name + "[role=" + de.role + "]";
 if (this.accessible_name && this.accessible_name.length) s += ": " + this.accessible_name;

 return s;
};



/* ---------------------------------------------------------------- */
/*                       LandmarkElement                            */
/* ---------------------------------------------------------------- */

/**
 * @constructor LandmarkElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a landmark element object used to hold information about a landmark
 *
 * @param  {DOMelement}       dom_element      - The dom element object representing the landmark element
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the landmark element
 * @property  {String}      cache_id        - String that uniquely identifies the cache element object in the cache
 * @property  {Number}      document_order  - Ordinal position of the landmark element in the document in relationship to other landmark elements
 * @property  {String}      role            - String representing the type of landmark
 *
 * @property  {Array}  child_cache_elements  - Array of child cache landmark and heading element objects as part of cache landmark and header tree
 *
 * @property  {CacheElement}          - iframe or frame reference, this is useful for landmarks rules related to only one (NOTE: can be null)
 *
 * @property  {String}   computed_label                  - Accessible label of the landmark
 * @property  {Number}   computed_label_length           - Length of label text
 * @property  {Number}   computed_label_source           - Constant representing the source of the label (i.e. aria-label, aria-labelledby, title...)
 * @property  {String}   computed_label_for_comparison   - Accessible label for comparison (i.e. lowercase, trimmed and space normalized)
 */

OpenAjax.a11y.cache.LandmarkElement = function (dom_element, landmark) {

  this.dom_element           = dom_element;
  this.cache_id              = "";
  this.document_order        = 0;
  this.role                  = dom_element.role;

  this.landmark              = dom_element.role;
  if (landmark) this.landmark = landmark;

  var hi = new OpenAjax.a11y.cache.HeadingInfo(null);
  this.heading_info = hi;

  this.child_cache_elements  = [];

  this.computed_label                 = "";
  this.computed_label_length          = 0;
  this.computed_label_source          = OpenAjax.a11y.SOURCE.NONE;
  this.computed_label_for_comparison  = "";
  this.accessible_name                = "";

  this.elements_with_content_count = 0;

};

/**
 * @method addChildElement
 *
 * @memberOf OpenAjax.a11y.cache.LandmarkElement
 *
 * @desc Adds a LandmarkElement or HeaderElement object to the tree of landmark/heading elements
 *
 * @param {LandmarkElement | HeadingElement}  child_element  - Landmark element or heading element object to add
 */

OpenAjax.a11y.cache.LandmarkElement.prototype.addChildElement = function (child_element) {

  if (child_element) {
    this.child_cache_elements.push(child_element);
  }

};


/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.LandmarkElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.LandmarkElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method addToElementCount
 *
 * @memberOf OpenAjax.a11y.cache.LandmarkElement
 *
 * @desc Adds N elements to the count of elements with content
 *
 * @param {Number}  n  - Number of elements to add to count
 */

OpenAjax.a11y.cache.LandmarkElement.prototype.addToElementCount = function (n) {

  if (n > 0) this.elements_with_content_count += n;

};


/**
 * @method getElementsWithContentCount
 *
 * @memberOf OpenAjax.a11y.cache.LandmarkElement
 *
 * @desc Get the number of child elements with content, inlcuding the elements with
 *       content of child landmark elements
 *
 * @return {Number}  Number of elements with content
 */

OpenAjax.a11y.cache.LandmarkElement.prototype.getElementsWithContentCount = function () {

  var count = this.elements_with_content_count;

  var child_elements     = this.child_cache_elements;
  var child_elements_len = child_elements.length;

  for (var i = 0; i < child_elements_len; i++) {

    var cle = child_elements[i];

    if (cle.getElementsWithContentCount) {
      count += cle.getElementsWithContentCount();
    }
  }

  return count;
};

/**
 * @method getHeadings
 *
 * @memberOf OpenAjax.a11y.cache.LandmarkElement
 *
 * @desc Get all the heading elements in a landmark
 *
 * @return {Array}  Array of heading elements
 */

OpenAjax.a11y.cache.LandmarkElement.prototype.getHeadings = function () {

  var headings = [];

  var child_elements     = this.child_cache_elements;
  var child_elements_len = child_elements.length;

  for (var i = 0; i < child_elements_len; i++) {

    var cle = child_elements[i];

    if (typeof cle.level === 'number') headings.push(cle);
    else if (cle.getHeadings) headings = headings.concat(cle.getHeadings());
  }

  return headings;
};


/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.LandmarkElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.LandmarkElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.LandmarkElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.LandmarkElement.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.LandmarkElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.LandmarkElement.prototype.getCacheProperties = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties(unsorted);

  cache_nls.addPropertyIfDefined(properties, this, 'computed_label');
  cache_nls.addPropertyIfDefined(properties, this, 'computed_label_source');
  cache_nls.addPropertyIfDefined(properties, this, 'computed_label_for_comparison');
  cache_nls.addPropertyIfDefined(properties, this, 'accessible_name');
  cache_nls.addPropertyIfDefined(properties, this, 'elements_with_content_count');

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.LandmarkElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.LandmarkElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};


/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.LandmarkElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.LandmarkElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.LandmarkElement
 *
 * @desc Returns a text string representation of the landmark element
 *
 * @return {String} Returns string represention the landmark element object
 */

OpenAjax.a11y.cache.LandmarkElement.prototype.toString = function () {
 var de = this.dom_element;
 var s = de.tag_name;
 if (de.has_role) s = de.tag_name + "[role=" + de.role + "]";
 if (this.accessible_name && this.accessible_name.length) s += ": " + this.accessible_name;

 return s;
};

/* ---------------------------------------------------------------- */
/*                       HeadingElement                             */
/* ---------------------------------------------------------------- */

/**
 * @constructor HeadingElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a heading element object used to hold information about a h1 - h6 heading elements
 *
 * @param  {DOMelement}       dom_element      - The dom element object representing the heading element
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the optgroup element
 * @property  {String}      cache_id        - String that uniquely identifies the cache element object in the cache
 * @property  {Number}      document_order  - Ordinal position of the heading element in the document in relationship to other heading elements
 *
 * @property  {Object}  landmark_info       - Landmark information object
 * @property  {Object}  heading_info        - heading information object
 * @property  {Number}  level               - Level of the heading
 *
 * @property  {String}   name                  - Calculated accessible name of the heading
 * @property  {Number}   name_length           - Length of accessible name
 * @property  {String}   name_for_comparison   - Accessible name for comparison (i.e. lowercase, trimmed and space normalized)
 * @property  {String}   name_from_text_nodes  - Accessible name content from text nodes
 * @property  {String}   name_from_image_alt   - Accessible name content from alt content of images
 * @property  {Number}   image_count           - Number of images that are descendents of the link
 * @property  {Boolean}  text_only_from_image  - true if accessble name is only from an image, otherwise false
 * @property  {Boolean}  is_visible            - true if element is visible to AT and/or screen, otherwise false
 * @property  {Boolean}  has_content           - true if element has content, otherwise false
 *
 * @property  {HeadingElement}  nesting_parent_heading   - "parent" heading viewed from a document perspective (i.e. ignore landmarks), can be null
 * @property  {HeadingElement}  landmark_parent_heading  - "parent" heading in current landmark, can be null
 */

OpenAjax.a11y.cache.HeadingElement = function (dom_element, landmark_info, heading_info) {


  this.dom_element     = dom_element;
  this.cache_id        = "";
  this.document_order  = 0;

  var le = landmark_info.landmark_element;

  this.last_parent_heading          = null;
  this.nesting_parent_heading       = null;
  this.last_landmark_parent_heading = null;
  this.landmark_parent_heading      = null;
  this.is_past_first_h1        = heading_info.is_past_first_h1;

  var ano = dom_element.getTextObject(true);  // text content must be visible

  this.name                  = ano.name;
  this.name_length           = ano.name.length;
  this.name_for_comparison   = OpenAjax.a11y.util.normalizeSpace(ano.name.toLowerCase());
  this.name_from_text_nodes  = ano.name_from_text_nodes;
  this.name_from_image_alt   = ano.name_from_image_alt;
  this.image_count           = ano.image_count;
  this.text_only_from_image  = (ano.name_from_text_nodes.length === 0) && (ano.name_from_image_alt.length > 0);

  var is_visible = dom_element.computed_style.is_visible_to_at === OpenAjax.a11y.VISIBILITY.VISIBLE;
  var has_content = this.name_for_comparison.length > 0;

  this.is_visible  = is_visible;
  this.has_content = has_content;

  switch( dom_element.tag_name) {

  case 'h1':
    this.level = 1;

    if (is_visible && has_content) {

      this.last_parent_heading          = null;
      this.nesting_parent_heading       = null;

      if (le) {
        this.last_landmark_parent_heading = null;
        this.landmark_parent_heading      = null;
      }
    }
    break;

  case 'h2':
    this.level = 2;

    if (is_visible && has_content) {

      this.last_parent_heading          = heading_info.nesting_h1;
      this.nesting_parent_heading       = heading_info.nesting_h1;

      if (le) {
        this.last_landmark_parent_heading = le.heading_info.nesting_h1;
        this.landmark_parent_heading      = le.heading_info.nesting_h1;
      }
    }

    break;

  case 'h3':
    this.level = 3;

    if (is_visible && has_content) {
      this.last_parent_heading     = heading_info.nesting_h2;
      this.nesting_parent_heading  = heading_info.nesting_h2;

      if (!this.last_parent_heading) this.last_parent_heading = heading_info.nesting_h1;

      if (le) {
        this.landmark_parent_heading      = le.heading_info.nesting_h2;
        this.last_landmark_parent_heading = le.heading_info.nesting_h2;

        if (!this.last_landmark_parent_heading) this.last_landmark_parent_heading = le.heading_info.nesting_h1;
      }
    }

    break;

  case 'h4':
    this.level = 4;

    if (is_visible && has_content) {
      this.last_parent_heading     = heading_info.nesting_h3;
      this.nesting_parent_heading  = heading_info.nesting_h3;

      if (!this.last_parent_heading) this.last_parent_heading = heading_info.nesting_h2;
      if (!this.last_parent_heading) this.last_parent_heading = heading_info.nesting_h1;

      if (le) {
        this.landmark_parent_heading      = le.heading_info.nesting_h3;
        this.last_landmark_parent_heading = le.heading_info.nesting_h3;

        if (!this.last_landmark_parent_heading) this.last_landmark_parent_heading = le.heading_info.nesting_h2;
        if (!this.last_landmark_parent_heading) this.last_landmark_parent_heading = le.heading_info.nesting_h1;
      }
    }

    break;

  case 'h5':
    this.level = 5;

    if (is_visible && has_content) {
      this.last_parent_heading     = heading_info.nesting_h4;
      this.nesting_parent_heading  = heading_info.nesting_h4;

      if (!this.last_parent_heading) this.last_parent_heading = heading_info.nesting_h3;
      if (!this.last_parent_heading) this.last_parent_heading = heading_info.nesting_h2;
      if (!this.last_parent_heading) this.last_parent_heading = heading_info.nesting_h1;

      if (le) {
        this.landmark_parent_heading      = le.heading_info.nesting_h4;
        this.last_landmark_parent_heading = le.heading_info.nesting_h4;

        if (!this.last_landmark_parent_heading) this.last_landmark_parent_heading = le.heading_info.nesting_h3;
        if (!this.last_landmark_parent_heading) this.last_landmark_parent_heading = le.heading_info.nesting_h2;
        if (!this.last_landmark_parent_heading) this.last_landmark_parent_heading = le.heading_info.nesting_h1;
      }
    }
    break;

  case 'h6':
    this.level = 6;

    if (is_visible && has_content) {
      this.last_parent_heading     = heading_info.nesting_h5;
      this.nesting_parent_heading  = heading_info.nesting_h5;

      if (!this.last_parent_heading) this.last_parent_heading = heading_info.nesting_h4;
      if (!this.last_parent_heading) this.last_parent_heading = heading_info.nesting_h3;
      if (!this.last_parent_heading) this.last_parent_heading = heading_info.nesting_h2;
      if (!this.last_parent_heading) this.last_parent_heading = heading_info.nesting_h1;

      if (le) {
        this.landmark_parent_heading      = le.heading_info.nesting_h5;
        this.last_landmark_parent_heading = le.heading_info.nesting_h5;

        if (!this.last_landmark_parent_heading) this.last_landmark_parent_heading = le.heading_info.nesting_h4;
        if (!this.last_landmark_parent_heading) this.last_landmark_parent_heading = le.heading_info.nesting_h3;
        if (!this.last_landmark_parent_heading) this.last_landmark_parent_heading = le.heading_info.nesting_h2;
        if (!this.last_landmark_parent_heading) this.last_landmark_parent_heading = le.heading_info.nesting_h1;
      }
    }

    break;

  default:
    this.level = 0;
    break;
  } // end switch

  return this;

};


/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.HeadingElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.HeadingElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.HeadingElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.HeadingElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.HeadingElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.HeadingElement.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.HeadingElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.HeadingElement.prototype.getCacheProperties = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties(unsorted);

 cache_nls.addPropertyIfDefined(properties, this, 'name');
 cache_nls.addPropertyIfDefined(properties, this, 'name_for_comparison');
 cache_nls.addPropertyIfDefined(properties, this, 'name_from_text_nodes');
 cache_nls.addPropertyIfDefined(properties, this, 'name_from_image_alt');
 cache_nls.addPropertyIfDefined(properties, this, 'image_count');
 cache_nls.addPropertyIfDefined(properties, this, 'text_only_from_image');

 cache_nls.addPropertyIfDefined(properties, this, 'level');
 cache_nls.addPropertyIfDefined(properties, this, 'is_past_first_h1');
 cache_nls.addPropertyIfDefined(properties, this, 'nesting_parent_heading');
 cache_nls.addPropertyIfDefined(properties, this, 'last_parent_heading');
 cache_nls.addPropertyIfDefined(properties, this, 'landmark_parent_heading');
 cache_nls.addPropertyIfDefined(properties, this, 'last_landmark_parent_heading');

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.HeadingElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.HeadingElement.prototype.getCachePropertyValue = function (property) {

//  OpenAjax.a11y.logger.debug("Heading property: " + property + " value= " + this[property]);

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];

};

/**

 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.HeadingElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.HeadingElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};


/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.HeadingElement
 *
 * @desc Returns a text string representation of the heading (h1-h6) element
 *
 * @return {String} Returns string represention the heading element object
 */

OpenAjax.a11y.cache.HeadingElement.prototype.toString = function() {
 var de = this.dom_element;
 var s = de.tag_name;
 if (de.has_role) s = de.tag_name + "[role=" + de.role + "]";
 if (this.name && this.name.length) s += ": " + this.name;
 else s += ": no content";

 return s;
};

/* ---------------------------------------------------------------- */
/*                        MainElement                               */
/* ---------------------------------------------------------------- */

/**
 * @constructor MainElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a main landmark element object used to hold information about a main landmark
 *
 * @param  {DOMElement}   dom_element      - The dom element object representing the landmark element
 *
 * @property  {DOMElement}   dom_element      - Reference to the dom element representing the main landmark element
 * @property  {String}       cache_id         - String that uniquely identifies the cache element object in the cache
 * @property  {Number}       document_order   - Ordinal position of the title and main cache items in the document to other title and main cache items
 * @property  {String}       role             - String identifying the landmark as "main"
 *
 * @property  {Array}  child_cache_elements  - List of child cache title element, main landmarks and h1 heading element objects as part of cache title and main elements tree
 *
 * @property  {Array}   h1_elements  -  List of all the h1 heading elements that are children of the main landmark
 * @property  {Number}  type         -  Constant representing the type of main landmark
 *
 * @property  {String}   label                  - Accessible label of the landmark
 * @property  {Number}   label_length           - Length of label text
 * @property  {Number}   label_source           - Constant representing the source of the label (i.e. aria-label, aria-labelledby, title...)
 * @property  {String}   label_for_comparison   - Accessible label for comparison (i.e. lowercase, trimmed and space normalized)
 */

OpenAjax.a11y.cache.MainElement = function (dom_element) {

  this.dom_element     = dom_element;
  this.cache_id        = "";
  this.document_order  = 0;
  this.role            = dom_element.role;
  this.landmark        = "main";

  var hi = new OpenAjax.a11y.cache.HeadingInfo(null);
  this.heading_info = hi;


  this.child_cache_elements = [];
  this.h1_elements          = [];
  this.main_type            = OpenAjax.a11y.MAIN.ROLE_MAIN;

  this.computed_label                 = "";
  this.computed_label_length          = 0;
  this.computed_label_source          = OpenAjax.a11y.SOURCE.NONE;
  this.computed_label_for_comparison  = "";
  this.accessible_name                = "";

  this.elements_with_content_count = 0;

};


/**
 * @method addChildElement
 *
 * @memberOf OpenAjax.a11y.cache.MainElement
 *
 * @desc Adds a child landmark or heading object to the tree of landmarks and heading elements
 *
 * @param {Object}  cache_element  -  landmark or heading element object to add to the tree
 */

OpenAjax.a11y.cache.MainElement.prototype.addChildElement = function (cache_element) {

  if (cache_element) {
    this.child_cache_elements.push(cache_element);
  }

};

/**
 * @method addH1Element
 *
 * @memberOf OpenAjax.a11y.cache.MainElement
 *
 * @desc Adds a H1 element to the list of H1 elements that are a child elements of the main content
 *
 * @param {H1Element}  h1_element  -  H1 element object to add to list
 */

OpenAjax.a11y.cache.MainElement.prototype.addH1Element = function (h1_element) {

  if (h1_element) {
    this.h1_elements.push(h1_element);
  }

};


/**
 * @method addToElementCount
 *
 * @memberOf OpenAjax.a11y.cache.MainElement
 *
 * @desc Adds N elements to the count of elements with content
 *
 * @param {Number}  n  - Number of elements to add to count
 */

OpenAjax.a11y.cache.MainElement.prototype.addToElementCount = function (n) {

  if (n > 0) this.elements_with_content_count += n;

};

 /**
 * @method getElementsWithContentCount
 *
 * @memberOf OpenAjax.a11y.cache.MainElement
 *
 * @desc Get the number of child elements with content, inlcuding the elements with
 *       content of child landmark elements
 *
 * @return {Number}  Number of elements with content
 */

OpenAjax.a11y.cache.MainElement.prototype.getElementsWithContentCount = function () {

  var count = this.elements_with_content_count;

  var child_elements     = this.child_cache_elements;
  var child_elements_len = child_elements.length;

  for (var i = 0; i < child_elements_len; i++) {

    var cle = child_elements[i];

    if (cle.getElementsWithContentCount) {
      count += cle.getElementsWithContentCount();
    }
  }

  return count;
};

 /**
 * @method getHeadings
 *
 * @memberOf OpenAjax.a11y.cache.MainElement
 *
 * @desc Get all the heading elements in a landmark
 *
 * @return {Array}  Array of heading elements
 */

OpenAjax.a11y.cache.MainElement.prototype.getHeadings = function () {

  var headings = [];

  var child_elements     = this.child_cache_elements;
  var child_elements_len = child_elements.length;

  for (var i = 0; i < child_elements_len; i++) {

    var cle = child_elements[i];

    if (typeof cle.level === 'number') headings.push(cle);
    else if (cle.getHeadings) headings = headings.concat(cle.getHeadings());
  }

  return headings;
};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.MainElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.MainElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.MainElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.MainElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.MainElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.MainElement.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.MainElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.MainElement.prototype.getCacheProperties = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties(unsorted);

  cache_nls.addPropertyIfDefined(properties, this, 'computed_label');
  cache_nls.addPropertyIfDefined(properties, this, 'computed_label_source');
  cache_nls.addPropertyIfDefined(properties, this, 'computed_label_for_comparison');
  cache_nls.addPropertyIfDefined(properties, this, 'accessible_name');
  cache_nls.addPropertyIfDefined(properties, this, 'elements_with_content_count');

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.MainElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.MainElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};


/**

 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.MainElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.MainElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.MainElement
 *
 * @desc Returns a text string representation of the main landmark element
 *
 * @return {String} Returns string represention the landmark element object
 */

OpenAjax.a11y.cache.MainElement.prototype.toString = function () {
 var de = this.dom_element;
 var s = de.tag_name;
 if (de.has_role) s = de.tag_name + "[role=" + de.role + "]";
 if (this.accessible_name && this.accessible_name.length) s += ": " + this.accessible_name;

 return s;

};

/* ---------------------------------------------------------------- */
/*                         H1Element                                */
/* ---------------------------------------------------------------- */

/**
 * @constructor H1Element
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a h1 heading element object used to hold information about a h1 heading elements used for titling
 *
 * @param  {DOMelement}       dom_element      - The dom element object representing the heading element
 * @param  {MainElement}      main_landmark    - Information about the parent main landmark (NOTE: can be null)
 *
 * @property  {DOMElement}   dom_element      - Reference to the dom element representing the optgroup element
 * @property  {String}       cache_id         - String that uniquely identifies the cache element object in the cache
 * @property  {Number}       document_order   - Ordinal position of the title and main cache items in the document to other title and main cache items
 *
 * @property  {MainElement}      main_landmark    - Information about the parent main landmark (NOTE: can be null)
 *
 * @property  {Array}  child_cache_elements  - List of child cache title element, main landmarks and h1 heading element objects as part of cache title and main elements tree
 *
 * @property  {Number}   type               -  Constant representing the type of main landmark
 * @property  {Boolean}  is_label_for_main  - true if h1 is being used as a label for main landmark, otherwise false
 * @property  {Boolean}  is_child_of_main   - true if h1 is the child of the main landmark it is a label for, otherwise false
 * @property  {Boolean}  text_only_from_image  - true if accessble name is only from an image, otherwise false
 * @property  {Boolean}  is_visible            - true if element is visible to AT and/or screen, otherwise false
 * @property  {Boolean}  has_content           - true if element has content, otherwise false
 *
 * @property  {String}   name                  - Calculated accessible name of the heading
 * @property  {Number}   name_length           - Length of accessible name
 * @property  {String}   name_for_comparison   - Accessible name for comparison (i.e. lowercase, trimmed and space normalized)
 */

OpenAjax.a11y.cache.H1Element = function (dom_element, main_landmark) {

  this.dom_element     = dom_element;
  this.cache_id        = "";
  this.document_order  = 0;

  this.main_landmark    = main_landmark;   // restricted to main landmarks
  this.child_cache_elements = [];   // The child array is always empty for an H1Element
  this.level = 1;


  this.main_type            = OpenAjax.a11y.MAIN.H1_ELEMENT;
  this.is_label_for_main    = false;

  if (main_landmark) this.is_child_of_main = true;
  else this.is_child_of_main     = false;

  var ano = dom_element.getTextObject(true);  // text content must be visible

  this.name                  = ano.name;
  this.name_length           = ano.name.length;
  this.name_for_comparison   = OpenAjax.a11y.util.normalizeSpace(ano.name.toLowerCase());
  this.name_from_text_nodes  = ano.name_from_text_nodes;
  this.name_from_image_alt   = ano.name_from_image_alt;
  this.image_count           = ano.image_count;
  this.text_only_from_image  = (ano.name_from_text_nodes.length === 0) && (ano.name_from_image_alt.length > 0);

  var is_visible = dom_element.computed_style.is_visible_to_at === OpenAjax.a11y.VISIBILITY.VISIBLE;
  var has_content = this.name_for_comparison.length > 0;

  this.is_visible  = is_visible;
  this.has_content = has_content;

  if (is_visible && has_content) {

    this.last_parent_heading          = null;
    this.nesting_parent_heading       = null;

    this.last_landmark_parent_heading = null;
    this.landmark_parent_heading      = null;
  }


};

/**
 * @method isH1UsedAsLabelForMainRole
 *
 * @memberOf OpenAjax.a11y.cache.H1Element
 *
 * @desc  Determines if an H1 element is being used as a label for a main Role
 *
 * @return  {Boolean}  True if the h1 element is being used as a label for the main landmark it is contained in, otherwise false
 */

OpenAjax.a11y.cache.H1Element.prototype.isH1UsedAsLabelForMainRole = function () {

  if (this.dom_element.id.length === 0 ||
      !this.main_landmark) {
    this.is_label_for_main = false;
    return;
  }

  var me = this.main_landmark;
  var de = me.dom_element;

  if (de.aria_labelledby && de.aria_labelledby.indexOf(this.dom_element.id) >= 0) {
    this.is_label_for_main = true;
  }

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.H1Element
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.H1Element.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.H1Element
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.H1Element.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.H1Element
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.H1Element.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.H1Element
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.H1Element.prototype.getCacheProperties = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties(unsorted);

 cache_nls.addPropertyIfDefined(properties, this, 'main_type');
 cache_nls.addPropertyIfDefined(properties, this, 'name');
 cache_nls.addPropertyIfDefined(properties, this, 'name_for_comparison');
 cache_nls.addPropertyIfDefined(properties, this, 'name_from_text_nodes');
 cache_nls.addPropertyIfDefined(properties, this, 'name_from_image_alt');
 cache_nls.addPropertyIfDefined(properties, this, 'image_count');
 cache_nls.addPropertyIfDefined(properties, this, 'text_only_from_image');
 cache_nls.addPropertyIfDefined(properties, this, 'is_label_for_main');
 cache_nls.addPropertyIfDefined(properties, this, 'is_child_of_main');

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.H1Element
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.H1Element.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};

/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.H1Element
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.H1Element.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};


/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.H1Element
 *
 * @desc Returns a text string representation of the h1 heading element
 *
 * @return {String} Returns string represention the h1 heading element object
 */

OpenAjax.a11y.cache.H1Element.prototype.toString = function () {
 var de = this.dom_element;
 var s = de.tag_name;
 if (de.has_role) s = de.tag_name + "[role=" + de.role + "]";
 if (this.name && this.name.length) s += ": " + this.name;
 else s += ": no content";

 return s;

};

/* ---------------------------------------------------------------- */
/*                       TitleElement                               */
/* ---------------------------------------------------------------- */

/**
 * @constructor TitleElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a title element object used to hold information about a title element
 *
 * @param  {DOMelement}   dom_element      - The dom element object representing the heading element
 *
 * @property  {DOMElement}   dom_element      - Reference to the dom element representing the optgroup element
 * @property  {String}       cache_id         - String that uniquely identifies the cache element object in the cache
 * @property  {Number}       document_order   - Ordinal position of the title and main cache items in the document to other title and main cache items
 *
 * @property  {Number}   type  -  Constant representing the title element
 *
 * @property  {String}   name                  - Calculated accessible name of the heading
 * @property  {Number}   name_length           - Length of accessible name
 * @property  {String}   name_for_comparison   - Accessible name for comparison (i.e. lowercase, trimmed and space normalized)
 */

OpenAjax.a11y.cache.TitleElement = function (dom_element) {

  this.dom_element     = dom_element;
  this.cache_id        = "title";
  this.document_order  = 0;

  this.main_type          = OpenAjax.a11y.MAIN.TITLE_ELEMENT;

  this.name                 = dom_element.getText();
  this.name_length          = this.name.length;
  this.name_for_comparison  = OpenAjax.a11y.util.normalizeSpace(this.name.toLowerCase());

  // these can probably be removed some day
  this.child_cache_elements = [];  // This array is always empty for the title element

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.TitleElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.TitleElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.TitleElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.TitleElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.TitleElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.TitleElement.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.TitleElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.TitleElement.prototype.getCacheProperties = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties(unsorted);

 cache_nls.addPropertyIfDefined(properties, this, 'name');
 cache_nls.addPropertyIfDefined(properties, this, 'name_for_comparison');
 cache_nls.addPropertyIfDefined(properties, this, 'main_type');

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.TitleElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.TitleElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};



/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.TitleElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.TitleElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.TitleElement
 *
 * @desc Returns a text string representation of the title element
 *
 * @return {String} Returns string represention the title element object
 */

OpenAjax.a11y.cache.TitleElement.prototype.toString = function () {
  var str = "title: ";

  if (this.name.length) str += this.name;
  else str += 'no content';

  return str;
};


/* ---------------------------------------------------------------- */
/*                       PageElementHeadingsLandmarks                               */
/* ---------------------------------------------------------------- */

/**
 * @constructor PageElementHeadingsLandmarks
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a body element object used to hold information about a title element
 *
 * @param  {DOMelement}   dom_element      - The dom element object representing the heading element
 *
 * @property  {DOMElement}   dom_element      - Reference to the dom element representing the optgroup element
 * @property  {String}       cache_id         - String that uniquely identifies the cache element object in the cache
 * @property  {Number}       document_order   - Ordinal position of the title and main cache items in the document to other title and main cache items
 *
 * @property  {TitleElement} title_element    - Reference to title element (NOTE: can be null)
 *
 * @property  {Array}  child_cache_elements  - List of child cache title element, main landmarks and h1 heading element objects as part of cache title and main elements tree
 *
 * @property  {Number}   type  -  Constant representing the body element
 *
 */

OpenAjax.a11y.cache.PageElementHeadingsLandmarks = function (dom_element, title_element) {

  this.dom_element     = dom_element;
  this.cache_id        = "page_heading";
  this.document_order  = 0;
  this.is_page_element = true;
  this.title_element   = title_element;

  this.main_type          = OpenAjax.a11y.MAIN.BODY_ELEMENT;

  this.child_cache_elements = []; // this is always empty for the body element

  this.num_main_landmarks = 0;          // are defined in landmark rules
  this.num_visible_main_landmarks = 0;  // are defined in landmark rules

};

/**
 * @method addChildMainElement
 *
 * @memberOf OpenAjax.a11y.cache.PageElementHeadingsLandmarks
 *
 * @desc Adds a main landmark  object to the tree of title and main elements
 *
 * @param {MainElement}  main_element  -  Main landmark element object to add
 */

OpenAjax.a11y.cache.PageElementHeadingsLandmarks.prototype.addChildMainElement = function (main_element) {

  if (main_element) {
    this.child_cache_elements.push(main_element);
  }

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.PageElementHeadingsLandmarks
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.PageElementHeadingsLandmarks.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.PageElementHeadingsLandmarks
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.PageElementHeadingsLandmarks.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.PageElementHeadingsLandmarks
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.PageElementHeadingsLandmarks.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.PageElementHeadingsLandmarks
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.PageElementHeadingsLandmarks.prototype.getCacheProperties = function (unsorted) {

  var properties = this.dom_element.getCacheProperties(unsorted);

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.PageElementHeadingsLandmarks
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.PageElementHeadingsLandmarks.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};



/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.PageElementHeadingsLandmarks
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.PageElementHeadingsLandmarks.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.PageElementHeadingsLandmarks
 *
 * @desc Returns a text string representation of the title element
 *
 * @return {String} Returns string represention the title element object
 */

OpenAjax.a11y.cache.PageElementHeadingsLandmarks.prototype.toString = function () {

  return "page";
};
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                            ImageCache                            */
/* ---------------------------------------------------------------- */

/**
 * @constructor ImagesCache
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates cache object representing information related to images in a document
 *
 * @param {DOMCache}   dom_cache   - Reference to the DOMCache object
 *
 * @property {DOMCache} dom_cache  - Reference to the DOMCache object
 *
 * @property {Boolean}  up_to_date - Boolean true if the cache has been creating using the current DOMElements, else false
 *                                   NOTE: This is a common property of all caches and is used when selectively build caches
 *                                         based on whether a rule needs the cache
 *
 * @property {Array}    image_elements  - List of image element objects in the document
 * @property {Number}   length          - Number of img and area element objects in the list
 *
 * @property {Array}    canvas_elements  - List of canvas element objects in the document
 * @property {Array}    svg_elements     - List of svg element objects in the document
 *
 * @property {String}   sort_property   - Image element object property the list of link objects is sorted by
 * @property {Boolean}  sort_ascending  - true if list is sorted in ascending order, otherwise false
 *
 * @property {ResultRuleSummary}  rule_summary_result  - Rule results associated with this cache
 */

OpenAjax.a11y.cache.ImagesCache = function (dom_cache) {

  this.dom_cache = dom_cache;
  this.up_to_date = false;

  this.image_elements = [];
  this.length = 0;

  this.canvas_elements = [];
  this.svg_elements    = [];

  this.sort_property  = 'document_order';
  this.sort_ascending = true;

};

/**
 * @method addImageElement
 *
 * @memberOf OpenAjax.a11y.cache.ImagesCache
 *
 * @desc Adds a image element to the list of image elements and generates a cache id for the object.
 *
 * @param  {ImageElement}  image_element  - image element object to add
 *
 * @return {Number} Returns the length of the list of image element objects
 */

OpenAjax.a11y.cache.ImagesCache.prototype.addImageElement = function (image_element) {

  // item must exist and have the position property
  if (image_element) {
    this.length = this.length + 1;
    image_element.cache_id = "image_" + this.length;
    image_element.document_order = this.length;
    this.image_elements.push(image_element);
  }

  return this.length;

};

/**
 * @method addCanvasElement
 *
 * @memberOf OpenAjax.a11y.cache.ImagesCache
 *
 * @desc Adds a canvas element to the list of canvas elements and generates a cache id for the object.
 *
 * @param  {CanvasElement}  canvas_element  - canvas element object to add
 *
 * @return {Number} Returns the length of the list of canvas element objects
 */

OpenAjax.a11y.cache.ImagesCache.prototype.addCanvasElement = function (canvas_element) {

  // item must exist and have the position property
  if (canvas_element) {
    var len = this.canvas_elements.length;
    canvas_element.cache_id = "canvas_" + (len.length + 1);
    canvas_element.document_order = this.length;
    this.canvas_elements.push(canvas_element);
  }

  return len;

};


/**
 * @method addSVGElement
 *
 * @memberOf OpenAjax.a11y.cache.ImagesCache
 *
 * @desc Adds a SVG element to the list of SVG elements and generates a cache id for the object.
 *
 * @param  {SVGElement}  svg_element  - svg element object to add
 *
 * @return {Number} Returns the length of the list of svg element objects
 */

OpenAjax.a11y.cache.ImagesCache.prototype.addSVGElement = function (svg_element) {

  // item must exist and have the position property
  if (svg_element) {
    var len = this.svg_elements.length;
    svg_element.cache_id = "svg_" + (len.length + 1);
    svg_element.document_order = this.length;
    this.svg_elements.push(svg_element);
  }

  return len;

};

/**
 * @deprecated getImageElementByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.ImagesCache
 *
 * @desc Finds the the image element object with the matching cache id
 *
 * @param  {String}  cache_id  - Cache id of image element object
 *
 * @return {ImageElement | null} Returns cache image element object if cache id is found, otherwise null
 */

OpenAjax.a11y.cache.ImagesCache.prototype.getImageElementByCacheId = function (cache_id) {
  return this.getItemByCacheId(cache_id);
};

/**
 * @method getItemByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.ImagesCache
 *
 * @desc Finds the the image element object with the matching cache id
 *
 * @param  {String}  cache_id  - Cache id of image element object
 *
 * @return {ImageElement | null} Returns cache image element object if cache id is found, otherwise null
 */

OpenAjax.a11y.cache.ImagesCache.prototype.getItemByCacheId = function (cache_id) {

  var i;
  var image_elements_len = this.image_elements.length;

  if (cache_id && cache_id.length) {
    for (i=0; i < image_elements_len; i++) {
      if (this.image_elements[i].cache_id == cache_id) {
        return this.image_elements[i];
      }
    } // end loop
  }

 return null;
};


/**
 * @method emptyCache
 *
 * @memberOf OpenAjax.a11y.cache.ImagesCache
 *
 * @desc Resests the ImagesCache object properties and empties all the lists and arrays
 */

OpenAjax.a11y.cache.ImagesCache.prototype.emptyCache = function () {

  this.image_elements = [];
  this.canvas_elements = [];
  this.svg_elements = [];
  this.sort_property = 'document_order';
  this.up_to_date = false;

};

/**
 * @method updateCacheItems
 *
 * @memberOf OpenAjax.a11y.cache.ImagesCache
 *
 * @desc Updates the images cache object by checking to see if a dom element
 *          should be added to the cache
 *
 * @param  {DOMElement}   dom_element   - dom element object to check for inclusion in images cache
 */

OpenAjax.a11y.cache.ImagesCache.prototype.updateCacheItems = function (dom_element) {

  if ((dom_element.tag_name === 'img') ||
      (dom_element.tag_name === 'area') ||
      ((typeof dom_element.role === 'string') && (dom_element.role === 'img'))) {

    var image_element = new OpenAjax.a11y.cache.ImageElement(dom_element, this.dom_cache.base_url);

    this.getNameForImage(image_element);

    this.addImageElement(image_element);

  }

  if (dom_element.tag_name === 'canvas') {

    var canvas_element = new OpenAjax.a11y.cache.CanvasElement(dom_element, this.dom_cache.base_url);

    this.addCanvasElement(canvas_element);

  }


  if (dom_element.tag_name === 'svg') {

    var svg_element = new OpenAjax.a11y.cache.SVGElement(dom_element, this.dom_cache.base_url);

    this.addSVGElement(svg_element);

  }


};

/**
 * @method traverseDOMElementsForImageElements
 *
 * @memberOf OpenAjax.a11y.cache.ImagesCache
 *
 * @desc Traverses DOMElement objects in the tree to update the images cache
 *
 * @param  {DOMElement}  dom_element - dom element object to check for inclusion in images cache
 */

OpenAjax.a11y.cache.ImagesCache.prototype.traverseDOMElementsForImageElements = function (dom_element) {

  if (!dom_element) return;

  if (dom_element.type == Node.ELEMENT_NODE) {

    this.updateCacheItems(dom_element);

    for (var i = 0; i < dom_element.child_dom_elements.length; i++ ) {
      this.traverseDOMElementsForImageElements(dom_element.child_dom_elements[i]);
    } // end loop
  }

};

/**
 * @method updateCache
 *
 * @memberOf OpenAjax.a11y.cache.ImagesCache
 *
 * @desc Traverses the DOMElements to update the images cache
 *       NOTE: This function is only used when the specialized caches
 *       are build as rules need them.  In this condition, if the rules
 *       dependent on the links cache are disabled, this cache would
 *       not be updated
 */

OpenAjax.a11y.cache.ImagesCache.prototype.updateCache = function () {
  var i;
  var children = this.dom_cache.element_cache.child_dom_elements;
  var children_len = children.length;

  for (i=0; i < children_len; i++) {
    this.traverseDOMElementsForImageElements(children[i]);
  }

  this.up_to_date = true;
};

/**
 * @method getNameFromARIALabel
 *
 * @memberOf OpenAjax.a11y.cache.DOMCache
 *
 * @desc Calculates a computed accessible name based on ALT attribute and ARIA label properties
 *
 * @param {Object} image - Image cache element object
 */

OpenAjax.a11y.cache.ImagesCache.prototype.getNameForImage = function (image) {

  var SOURCE = OpenAjax.a11y.SOURCE;

  var accessible_name = "";
  var accessible_name_source = SOURCE.NONE;
  var de = image.dom_element;

  if (de.has_aria_labelledby) {
    accessible_name = this.dom_cache.element_with_id_cache.getTextFromIds(de.aria_labelledby);
    accessible_name_source = SOURCE.ARIA_LABELLEDBY;
  }
  else if (de.has_aria_label) {
    accessible_name = de.aria_label;
    accessible_name_source = SOURCE.ARIA_LABEL;
  }
  else if (de.has_alt) {
    accessible_name = de.alt;
    accessible_name_source = SOURCE.ALT_ATTRIBUTE;
  }
  else if (de.title) {
    accessible_name = de.title;
    accessible_name_source = SOURCE.TITLE_ATTRIBUTE;
  }

  image.accessible_name = accessible_name;
  image.accessible_name_length = accessible_name.length;
  image.accessible_name_source = accessible_name_source;
  image.accessible_name_for_comparison = OpenAjax.a11y.util.normalizeSpace(accessible_name.toLowerCase());

};

/* ---------------------------------------------------------------- */
/*                            ImageElement                          */
/* ---------------------------------------------------------------- */

/**
 * @constructor ImageElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates image element object representing information related to an image or area element on a web page
 *
 * @param  {DOMelement}   dom_element   - The dom element object representing the image or area element
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the image or area element
 * @property  {String}      cache_id        - String that uniquely identifies the cache element object in the cache
 * @property  {Number}      document_order  - Ordinal position of the image or area element in the document in relationship to other image or area elements
 *
 * @property  {Boolean}     is_image        - True if the role of the image is an image, otherwise false (i.e. through use of role attribute)
 * @property  {Boolean}     is_presentation - True if the role of the image has been changed to presentation, otherwise false
 *
 * @property  {String}   source             - The url in the src property of an image element or href property of an area element
 * @property  {Boolean}  src_is_a_file_name - The filename is an image file and not a data base or other programatic reference
 * @property  {String}   file_name          - The filename of the image
 *
 * @property  {String}   longdesc           - The url in the longdesc property of an image element
 * @property  {Boolean}  has_longdesc       - Does the image have a longdesc attribute
 * @property  {Number}   longdesc_is_broken - Constant representing if the url is broken or untested
 * @property  {String}   longdesc_url       - The full URL of the longdesc attribute
 *
 * @property  {String}   alt                   - Calculated accessible name of the link
 * @property  {String}   alt_for_comparison   - Accessible name for comparison (i.e. lowercase, trimmed and space normalized)
 * @property  {Number}   alt_length           - Number of images that are descendents of the link
 *
 * @property  {Number}   height  - Height of the image in pixels
 * @property  {Number}   width   - Width of the image in pixels
 */

OpenAjax.a11y.cache.ImageElement = function (dom_element, base_url) {

  if (!dom_element) return null;

  var node = dom_element.node;

  this.dom_element    = dom_element;
  this.cache_id       = "";
  this.document_order = 0;

  this.source    = "";
  this.href      = "";
  this.file_name = "";
  this.is_image = true;
  this.is_presentation = false;

  if (dom_element.has_role && dom_element.role != 'img') this.is_image = false;
  if (dom_element.has_role && (dom_element.role === 'presentation' || dom_element.role === 'none')) this.is_presentation = true;

//  OpenAjax.a11y.logger.debug("Image element: " + dom_element.toString() + " has: " + dom_element.has_role + " role: " + dom_element.role  + " image: " + this.is_image + " presentation: " + this.is_presentation);

  if (dom_element.tag_name == 'img') {

    if (node.src) this.source = node.src;

    var pos = this.source.lastIndexOf('/');

    var file_name = "";
    this.src_is_a_file_name = false;

    if (this.source.length && pos >= 0 ) {
      file_name = this.source.substring((pos+1)).toLowerCase();

      if ((file_name.indexOf('.png') >= 0) ||
          (file_name.indexOf('.jpg') >= 0) ||
          (file_name.indexOf('.jpeg') >= 0) ||
          (file_name.indexOf('.gif') >= 0)) this.src_is_a_file_name = true;
    }

    this.file_name = file_name;
  }

  if (dom_element.tag_name === 'area') {
    this.href  = node.href;
  }

  this.accessible_name = "";
  this.accessible_name_length = "";
  this.accessible_name_source = OpenAjax.a11y.SOURCE.NONE;
  this.accessible_name_for_comparison = "";

  this.longdesc = node.getAttribute('longdesc');

  this.longdesc_is_broken = OpenAjax.a11y.URL_RESULT.NOT_TESTED;

  if (this.longdesc) {

    this.longdesc_url = this.longdesc;

    if (this.longdesc.indexOf('https:') == -1 ) {
      this.longdesc_url = base_url + this.longdesc;
    }

    this.has_longdesc = true;
    this.longdesc_is_broken = OpenAjax.a11y.util.urlExists(this.longdesc_url);
  }
  else {
    this.has_longdesc = false;
    this.longdesc     = null;
    this.longdesc_is_broken = null;
  }

  this.accessible_description = "";
  if (dom_element.has_aria_describedby) {
    this.accessible_description = dom_element.calculated_aria_description;
  }
  else {
    if (dom_element.has_title && (this.accessible_name_source !== OpenAjax.a11y.SOURCE.TITLE)) {
      this.accessible_description = dom_element.title;
    }
    else {
      if (dom_element.has_longdesc) {
        this.accessible_description = 'content of URL: ' + dom_element.longdesc;
      }
    }
  }


  this.height   = node.offsetHeight;
  this.width    = node.offsetWidth;

  return this;
};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.ImageElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.ImageElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.ImageElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.ImageElement.prototype.getStyle = function () {

  return  this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.ImageElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.ImageElement.prototype.getAttributes = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var attributes = this.dom_element.getAttributes(unsorted);

  cache_nls.addPropertyIfDefined(attributes, this, 'title');
  cache_nls.addPropertyIfDefined(attributes, this, 'alt');
  cache_nls.addPropertyIfDefined(attributes, this, 'aria-label');
  cache_nls.addPropertyIfDefined(attributes, this, 'aria-labelledby');
  cache_nls.addPropertyIfDefined(attributes, this, 'longdesc');

  return attributes;

};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.ImageElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.ImageElement.prototype.getCacheProperties = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = [];

  cache_nls.addPropertyIfDefined(properties, this, 'accessible_name');
  cache_nls.addPropertyIfDefined(properties, this, 'accessible_desription');
  cache_nls.addPropertyIfDefined(properties, this, 'accessible_name_source');
  cache_nls.addPropertyIfDefined(properties, this, 'height');
  cache_nls.addPropertyIfDefined(properties, this, 'width');
  cache_nls.addPropertyIfDefined(properties, this, 'document_order');
  cache_nls.addPropertyIfDefined(properties, this, 'has_longdesc');
  cache_nls.addPropertyIfDefined(properties, this, 'longdesc_url');
  cache_nls.addPropertyIfDefined(properties, this, 'longdesc_is_broken');

  return properties;

};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.ImageElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.ImageElement.prototype.getCachePropertyValue = function (property) {

//  OpenAjax.a11y.logger.debug("Image property: " + property + " value= " + this[property]);

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};

/**

 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.ImageElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.ImageElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};


/**
 * @method getAltTextNLS
 *
 * @memberOf OpenAjax.a11y.cache.ImageElement
 *
 * @desc Returns an object with an NLS localized string and style properties
 *       If alt attribute is empty a empty alt text message will the returned
 *
 * @return {String | Object} Returns a String if the alt attribute has content,
 *                            but if label is empty it returns an object
 *                            with a 'label and 'style' property
 */

OpenAjax.a11y.cache.ImageElement.prototype.getAltTextNLS = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  if (this.dom_element.has_alt) {
    if (this.alt_length) {
      return this.alt;
    }
    else {
      return cache_nls.getNLSEmptyAltTextMessage();
    }
  }
  else {
    return cache_nls.getNLSMissingAltMessage();
  }

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.ImageElement
 *
 * @desc Creates a text string representation of the image element object
 *
 * @param   option     Options for identifying the features of the Images
 *                     'file'  Includes the the file name (default)
 *                     'short' Includes the short description instead of the file name
 *                     'long'  Includes the short description instead of the file name
 *
 * @return {String} Returns a text string representation of the image element object
 */

 OpenAjax.a11y.cache.ImageElement.prototype.toString = function (option) {

   function trimDescription(s) {
     var MAX_LENGTH = 100;

     if (typeof s !== 'string') return '';

     if (s.length > MAX_LENGTH) {
       s = s.substring(s, MAX_LENGTH) + "...";
     }

     return s;

   }


   if (typeof option === 'string') {
     option = option.toLowerCase();

     if (!(option === 'short' || option === 'long')) {
       option = 'file';
     }
   }

   var str = this.dom_element.tag_name;
   var de = this.dom_element;
   var cs = de.computed_style;

   if (de.has_role) {
     str += '[role=' + de.role + ']';
   }

   if (option === 'short') {

     if (de.is_presentation) {
         str += ": image is being defined as decorative";
     }
     else {
       if (this.accessible_name.length) {
         str +=  ": " + this.accessible_name;
       }
       else {
         if (this.accessible_name_source !== OpenAjax.a11y.SOURCE.NONE) {
           str += ': empty string (e.g. image is being defined as decorative)';
         }
         else {
           str += ': no short text alternative';
         }
       }
     }
   }
   else {
     if (option === 'long') {
       if (de.has_aria_describedby) {
          str +=  ': aria-describedby=\'' + trimDescription(de.calculated_aria_description) + '\'';
       }
       else {
         if (de.has_title && (this.accessible_name_source !== OpenAjax.a11y.SOURCE.TITLE)) {
           str +=  ': title=\'' + trimDescription(de.title) + '\'';
         }
         else {
           if (de.has_longdesc) {
             str += ': longdesc=\'' + de.longdesc + '\'';
           }
           else {
             str += ': alt=\'' + this.accessible_name + '\'';
           }
         }
       }
     }
     else {
       if (cs.is_visible_onscreen === OpenAjax.a11y.VISIBILITY.HIDDEN) {
         if (cs.is_visible_to_at === OpenAjax.a11y.VISIBILITY.HIDDEN) str += " (hidden) : ";
         else str += " (off screen) : ";
       }
       else {
         str += " (" + this.height + "x" + this.width + ") : ";
       }
       if (this.src_is_a_file_name) {
         str += this.file_name;
       }
       else {
         str +=  "source is not a file name";
       }
     }
   }

   return str;
};


/* ---------------------------------------------------------------- */
/*                            CanvasElement                          */
/* ---------------------------------------------------------------- */

/**
 * @constructor CanvasElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates image element object representing information related to an image or area element on a web page
 *
 * @param  {DOMelement}   dom_element   - The dom element object representing the image or area element
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the image or area element
 * @property  {String}      cache_id        - String that uniquely identifies the cache element object in the cache
 * @property  {Number}      document_order  - Ordinal position of the image or area element in the document in relationship to other image or area elements
 *
 * @property  {Boolean}     is_presentation - True if the role of the image has been changed to presentation, otherwise false
 *
 * @property  {String}      height  - Value of the height property in pixels
 * @property  {String}      width   - Value of the width property in pixels
 *
 */

OpenAjax.a11y.cache.CanvasElement = function (dom_element) {


  if (!dom_element) return null;

  var node = dom_element.node;

  this.dom_element    = dom_element;
  this.cache_id       = "";
  this.document_order = 0;

  this.is_presentation = dom_element.is_presentation;

//  OpenAjax.a11y.logger.debug("Canvas element: " + dom_element.toString() + " has: " + dom_element.has_role + " role: " + dom_element.role  + " image: " + this.is_image + " presentation: " + this.is_presentation);

  this.accessible_name = null;
  this.accessible_name_length = null;
  this.accessible_name_source = OpenAjax.a11y.SOURCE.NONE;
  this.accessible_name_for_comparison = null;

  this.height   = node.getAttribute('height');
  this.width    = node.getAttribute('width');

  return this;
};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.CanvasElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.CanvasElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.CanvasElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.CanvasElement.prototype.getStyle = function () {

  return  this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.CanvasElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.CanvasElement.prototype.getAttributes = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var attributes = this.dom_element.getAttributes(unsorted);

  cache_nls.addPropertyIfDefined(attributes, this, 'width');
  cache_nls.addPropertyIfDefined(attributes, this, 'height');
  cache_nls.addPropertyIfDefined(attributes, this, 'title');
  cache_nls.addPropertyIfDefined(attributes, this, 'aria-label');
  cache_nls.addPropertyIfDefined(attributes, this, 'aria-labelledby');

  return attributes;

};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.CanvasElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.CanvasElement.prototype.getCacheProperties = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = [];

  cache_nls.addPropertyIfDefined(properties, this, 'accessible_name');
  cache_nls.addPropertyIfDefined(properties, this, 'accessible_name_source');
  cache_nls.addPropertyIfDefined(properties, this, 'height');
  cache_nls.addPropertyIfDefined(properties, this, 'width');
  cache_nls.addPropertyIfDefined(properties, this, 'document_order');

  return properties;

};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.CanvasElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.CanvasElement.prototype.getCachePropertyValue = function (property) {

//  OpenAjax.a11y.logger.debug("Image property: " + property + " value= " + this[property]);

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};

/**

 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.CanvasElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.CanvasElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};


/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.CanvasElement
 *
 * @desc Creates a text string representation of the image element object
 *
 * @return {String} Returns a text string representation of the image element object
 */

 OpenAjax.a11y.cache.CanvasElement.prototype.toString = function () {
   var str = this.dom_element.tag_name;
   var cs = this.dom_element.computed_style;

   if (cs.is_visible_onscreen === OpenAjax.a11y.VISIBILITY.HIDDEN) {
     if (cs.is_visible_to_at === OpenAjax.a11y.VISIBILITY.HIDDEN) str += " (hidden): ";
     else str += " (off screen): ";
   }
   else {
     str += " (" + this.height + "x" + this.width + "): ";
   }

   return str;
};


/* ---------------------------------------------------------------- */
/*                            SVGElement                          */
/* ---------------------------------------------------------------- */

/**
 * @constructor SVGElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates image element object representing information related to an image or area element on a web page
 *
 * @param  {DOMelement}   dom_element   - The dom element object representing the image or area element
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the image or area element
 * @property  {String}      cache_id        - String that uniquely identifies the cache element object in the cache
 * @property  {Number}      document_order  - Ordinal position of the image or area element in the document in relationship to other image or area elements
 *
 * @property  {Boolean}     is_presentation - True if the role of the image has been changed to presentation, otherwise false
 *
 * @property  {String}      height  - Value of the height property in pixels
 * @property  {String}      width   - Value of the width property in pixels
 *
 */

OpenAjax.a11y.cache.SVGElement = function (dom_element) {


  if (!dom_element) return null;

  var node = dom_element.node;

  this.dom_element    = dom_element;
  this.cache_id       = "";
  this.document_order = 0;

  this.is_presentation = false;
  if (dom_element.has_role && (dom_element.role === 'presentation' || dom_element.role === 'none')) this.is_presentation = true;

  this.accessible_name = null;
  this.accessible_name_length = null;
  this.accessible_name_source = OpenAjax.a11y.SOURCE.NONE;
  this.accessible_name_for_comparison = null;

  this.height   = node.getAttribute('height');
  this.width    = node.getAttribute('width');

  return this;
};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.SVGElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.SVGElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.SVGElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.SVGElement.prototype.getStyle = function () {

  return  this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.SVGElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.SVGElement.prototype.getAttributes = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var attributes = this.dom_element.getAttributes(unsorted);

  cache_nls.addPropertyIfDefined(attributes, this, 'width');
  cache_nls.addPropertyIfDefined(attributes, this, 'height');
  cache_nls.addPropertyIfDefined(attributes, this, 'title');
  cache_nls.addPropertyIfDefined(attributes, this, 'aria-label');
  cache_nls.addPropertyIfDefined(attributes, this, 'aria-labelledby');

  return attributes;

};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.SVGElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.SVGElement.prototype.getCacheProperties = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = [];

  cache_nls.addPropertyIfDefined(properties, this, 'accessible_name');
  cache_nls.addPropertyIfDefined(properties, this, 'accessible_name_source');
  cache_nls.addPropertyIfDefined(properties, this, 'height');
  cache_nls.addPropertyIfDefined(properties, this, 'width');
  cache_nls.addPropertyIfDefined(properties, this, 'document_order');

  return properties;

};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.SVGElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.SVGElement.prototype.getCachePropertyValue = function (property) {

//  OpenAjax.a11y.logger.debug("Image property: " + property + " value= " + this[property]);

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};

/**

 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.SVGElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.SVGElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};


/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.SVGElement
 *
 * @desc Creates a text string representation of the image element object
 *
 * @return {String} Returns a text string representation of the image element object
 */

 OpenAjax.a11y.cache.SVGElement.prototype.toString = function () {
   var str = this.dom_element.tag_name;
   var cs = this.dom_element.computed_style;

   if (cs.is_visible_onscreen === OpenAjax.a11y.VISIBILITY.HIDDEN) {
     if (cs.is_visible_to_at === OpenAjax.a11y.VISIBILITY.HIDDEN) str += " (hidden) : ";
     else str += " (off screen) : ";
   }
   else {
     str += " (" + this.height + "x" + this.width + ") : ";
   }

   return str;
};




/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                            LanguagesCache                        */
/* ---------------------------------------------------------------- */

/**
 * @constructor LanguagesCache
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Constructor for languages cache object which contains a list of
 *    language items representing the language changes of content
 *    in the in a document. The language items also contain a list of all the
 *    dom element objects that share the same language
 *
 * @param {DOMCache}   dom_cache   - Reference to the DOMCache object
 *
 * @property {DOMCache} dom_cache  - Reference to the DOMCache object
 * @property {Boolean}  up_to_date - Boolean true if the cache has been creating using the current DOMElements, else false
 *                                   NOTE: This is a common property of all caches and is used when selectively build caches
 *                                         based on whether a rule needs the cache
 *
 * @property {String}    sort_property   - Property of language item that the list is sorted on
 * @property {Boolean}   sort_ascending  - true if list is sorted by ascending values, otherwsie false
 *
 * @property {Array}    language_items  - List of language items
 * @property {Number}   length          - Number of language items in list
 *
 * @property {ResultRuleSummary}  rule_summary_result  - Rule results associated with this cache
 */
OpenAjax.a11y.cache.LanguagesCache = function (dom_cache) {

  this.dom_cache  = dom_cache;
  this.up_to_date = false;

  this.dom_elements =[];

};

/**
 * @method addLanguageItem
 *
 * @memberOf OpenAjax.a11y.cache.LanguagesCache
 *
 * @desc Adds a DOM Element object with an language property to the langauge item list.
 *       If the abreviation item does not exist the function will create one
 *
 * @param {DOMElement}  dom_element  - dom element to add to a abbreviation list
 */

OpenAjax.a11y.cache.LanguagesCache.prototype.addLanguageItem = function (dom_element) {

   this.dom_elements.push(dom_element);

};


/**
 * @method emptyCache
 *
 * @memberOf OpenAjax.a11y.cache.LanguagesCache
 *
 * @desc Empties all the language items from the cache
 */

OpenAjax.a11y.cache.LanguagesCache.prototype.emptyCache = function () {

    this.dom_elements.length = 0;
    this.up_to_date = false;
};

/**
 * @method updateCacheItems
 *
 * @memberOf OpenAjax.a11y.cache.LanguagesCache
 *
 * @desc Updates the language cache object with information from a dom element object
 *       This is used during the creation of the cache and is used by the functions for
 *       either creating the cache all at one time or selectively
 *
 * @param {DOMElement}  dom_element  - DOM Element object to add to the language cache
 */

OpenAjax.a11y.cache.LanguagesCache.prototype.updateCacheItems = function (dom_element) {

    if (dom_element.has_lang && dom_element.lang.length) {
      this.addLanguageItem(dom_element);
    }
};

/**
 * @method traverseDOMElementsForLanguages
 *
 * @memberOf OpenAjax.a11y.cache.LanguagesCache
 *
 * @desc Traverses the DOMElements to update the language cache
 */

OpenAjax.a11y.cache.LanguagesCache.prototype.traverseDOMElementsForLanguages = function (dom_element) {

    var i;
    if (!dom_element) return;

    if (dom_element.type == Node.ELEMENT_NODE) {

        this.updateCacheItems(dom_element);

        for (i = 0; i < dom_element.child_dom_elements.length; i++) {
            this.traverseDOMElementsForLanguages(dom_element.child_dom_elements[i]);
        }
        // end loop
    }
};

/**
 * @method updateCache
 *
 * @memberOf OpenAjax.a11y.cache.LanguagesCache
 *
 * @desc Traverses the DOMElements to update the language cache
 *    This function is used to update the language cache
 *    when needed by a rule, it sets the up to date flag when done
 */

OpenAjax.a11y.cache.LanguagesCache.prototype.updateCache = function () {
    var i;
    var children = this.dom_cache.element_cache.child_dom_elements;
    var children_len = children.length;

    for (i = 0; i < children_len; i++) {
        this.traverseDOMElementsForLanguages(children[i]);
    }

    this.up_to_date = true;
};


/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.LanguagesCache
 *
 * @desc Returns a text string representation of the language cache object
 *
 * @return {String} Returns string represention the language cache object
 */

OpenAjax.a11y.cache.LanguagesCache.prototype.toString = function () {

    var i;

    var str = "\n\n Elements with Lang Attributes\n";

    var dom_elements     = this.dom_elements;
    var dom_elements_len = dom_elements.length;

    for (i = 0; i < dom_elements_len; i++) {
        str += dom_elements[i].toString();
    }
    // end loop

    return str;
};

/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                            LinkCache                             */
/* ---------------------------------------------------------------- */

/**
 * @constructor LinksCache
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates cache object representing information related to links in a web page
 *
 * @param {DOMCache}   dom_cache   - Reference to the DOMCache object
 *
 * @property {DOMCache} dom_cache  - Reference to the DOMCache object
 * @property {Boolean}  up_to_date - Boolean true if the cache has been creating using the current DOMElements, else false
 *                                   NOTE: This is a common property of all caches and is used when selectively build caches
 *                                         based on whether a rule needs the cache
 *
 * @property {Array}    area_elements  - List of area element objects in the document
 * @property {Array}    link_elements  - List of link element objects in the document
 * @property {Number}   length         - Number of link element objects in the list
 *
 * @property {String}   this.sort_property   - Link element object property the list of link objects is sorted by
 * @property {Boolean}  this.sort_ascending  - true if list is sorted in ascending order, otherwise false
 *
 * @property {Array}    links_sorted_by_href  - List of link element object sorted by href values;
 * @property {Array}    links_sorted_by_name  - List of link element object sorted by there accessible name (i.e link text);
 *
 * @property {Boolean}  sorted_by_href_ready  - True if list of link element objects sorted by href values is ready for use in rules
 * @property {Boolean}  sorted_by_name_ready  - True if list of link element objects sorted by name values is ready for use in rules
 */

OpenAjax.a11y.cache.LinksCache = function (dom_cache) {

  this.dom_cache = dom_cache;
  this.up_to_date = false;

  this.area_elements = [];
  this.link_elements = [];
  this.length = 0;

  this.links_sorted_by_href = [];
  this.links_sorted_by_name = [];

  this.sorted_by_name_ready = false;
  this.sorted_by_href_ready = false;

};

/**
 * @method getLinkElementsSortedByName
 *
 * @memberOf OpenAjax.a11y.cache.LinksCache
 *
 * @desc Returns a list of link elements sorted by accessible name property
 *
 * @return {Array}  Returns an array of LinkElement objects
 */

OpenAjax.a11y.cache.LinksCache.prototype.getLinkElementsSortedByName = function () {

  function compare(a,b) {

    return ((a.accessible_name_for_comparison > b.accessible_name_for_comparison) ||
            ((a.accessible_name_for_comparison === b.accessible_name_for_comparison) &&
             (a.href > b.href)));

  }


  if (!this.sorted_by_name_ready) {

    this.links_sorted_by_name.sort(compare);

    this.sorted_by_name_ready = true;

  }

/*
  OpenAjax.a11y.logger.debug( "Number of Links: " + this.links_sorted_by_name.length);

  for (i = 0; i < this.links_sorted_by_name.length; i++ ) {

    var l = this.links_sorted_by_name[i];

    OpenAjax.a11y.logger.debug( i + "  Name: " + l.accessible_name + "  Compare Name: " + l.accessible_name_for_comparison + " HREF: " + l.href );

  }
*/
  return this.links_sorted_by_name;

};

/**
 * @method getLinksThatShareTheSameName
 *
 * @memberOf OpenAjax.a11y.cache.LinksCache
 *
 * @desc Returns a list of links that share the same accessible name
 *       links that are hidden are ignored
 *
 * @return  {Array} Returns at array of same name objects with the following properties:<br/>
 *                  links: an array of link objects<br/>
 *                  same_names: True if all the links in the array share the same accessible name<br/>
 *                  names_count: Number of different accessible names in the links array<br/>
 */

OpenAjax.a11y.cache.LinksCache.prototype.getLinksThatShareTheSameName = function () {

  function checkForUniqueDescriptions(sns) {

    function compareDescriptions( a, b ) {
      return a.accessible_description_for_comparison < b.accessible_description_for_comparison;
    }

    var same_name = sns.links.sort(compareDescriptions);
    sns.unique_descriptions = true;

    for (var i = 1; i < same_name.length; i++) {
      var name1 = same_name[i-1];
      var name2 = same_name[i];

      sns.unique_descriptions = same_names.unique_descriptions &&
      ((name1.accessible_description_for_comparison !== name2.accessible_description_for_comparison) ||
       (name1.href === name2.href));
    }

  }



  var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

  var list_of_same_names = [];
  var same_names = null;

  var names = this.getLinkElementsSortedByName();
  var names_len = names.length;

  var i = 0;
  var j = 1;

  while (j < names_len) {

    var name1 = names[i];
    var name2 = names[j];

    if (name1.dom_element.computed_style.is_visible_to_at === VISIBILITY.HIDDEN) {
      i++;
      j++;
      continue;
    }

    if (name2.dom_element.computed_style.is_visible_to_at === VISIBILITY.HIDDEN) {
      j++;
      continue;
    }

    if (name1.accessible_name_for_comparison === name2.accessible_name_for_comparison) {

      if (same_names) {

        same_names.links.push(name2);

        if (name1.href !== name2.href) {
            same_names.same_hrefs = false;
            same_names.hrefs_count += 1;
        }

      }
      else {
        same_names = {
          links       : [name1, name2],
          same_hrefs  : name1.href === name2.href,
          hrefs_count : (name1.href === name2.href) ? 1 : 2
        };
      }
    }
    else {
      if (same_names) {
        checkForUniqueDescriptions(same_names);
        list_of_same_names.push(same_names);
        same_names = null;
      }
    }

   i = j;
   j++;
  }

  if (same_names) {
    checkForUniqueDescriptions(same_names);
    list_of_same_names.push(same_names);
  }

/*
  OpenAjax.a11y.logger.debug( "Number of same name objects in list: " + list_of_same_names.length);

  for (i = 0; i < list_of_same_names.length; i++ ) {
    var item = list_of_same_names[i];
    OpenAjax.a11y.logger.debug( i  + " NAME: " + item.links[0].accessible_name + "  Number: " + item.links.length + "  Same HREF: " + item.same_hrefs);
  }
*/
  return list_of_same_names;

};

/**
 * @method getLinkElementsSortedByHREF
 *
 * @memberOf OpenAjax.a11y.cache.LinksCache
 *
 * @desc Returns a list of link elements sorted by accessible name property
 *
 * @return {Array}  Returns an array of LinkElement objects
 */

OpenAjax.a11y.cache.LinksCache.prototype.getLinkElementsSortedByHREF = function () {

  function compare(a,b) {

    return ((a.href > b.href) ||
            ((a.href === b.href) &&
             (a.accessible_name_for_comparison > b.accessible_name_for_comparison)));

  }


  if (!this.sorted_by_href_ready) {
    this.links_sorted_by_href.sort(compare);
    this.sorted_by_href_ready = true;
  }

  return this.links_sorted_by_href;

};


/**
 * @method getLinksThatShareTheSameHREF
 *
 * @memberOf OpenAjax.a11y.cache.LinksCache
 *
 * @desc Returns a list of link elements that share the same HREF value
 *       links that are hidden are ignored
 *
 * @return  {Array} Returns at array of same href objects, with the followin properties:<br/>
 *                  links: an array of link objects<br/>
 *                  same_names: True if all the links in the array share the same accessible name<br/>
 *                  names_count: Number of different accessible names in the links array<br/>
 */

OpenAjax.a11y.cache.LinksCache.prototype.getLinksThatShareTheSameHREF = function () {

  var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

  var list_of_same_hrefs = [];
  var same_hrefs = null;

  var hrefs = this.getLinkElementsSortedByHREF();
  var hrefs_len = hrefs.length;

  var i = 0;
  var j = 1;

  while (j < hrefs_len) {

    var href1 = hrefs[i];
    var href2 = hrefs[j];

    if (href1.dom_element.computed_style.is_visible_to_at === VISIBILITY.HIDDEN) {
      i++;
      j++;
      continue;
    }

    if (href2.dom_element.computed_style.is_visible_to_at === VISIBILITY.HIDDEN) {
      j++;
      continue;
    }

    if (href1.href ===  href2.href) {

      if (same_hrefs) {

        same_hrefs.links.push(href2);

        if (href1.accessible_name_for_comparison !== href2.accessible_name_for_comparison) {
          same_hrefs.same_names = false;
          same_hrefs.names_count += 1;
        }

      }
      else {
        same_hrefs = {
          links : [href1, href2],
          same_names : href1.accessible_name_for_comparison === href2.accessible_name_for_comparison,
          names_count : (href1.accessible_name_for_comparison === href2.accessible_name_for_comparison) ? 1 : 2
        };
      }
    }
    else {
      if (same_hrefs) {
        list_of_same_hrefs.push(same_hrefs);
        same_hrefs = null;
      }
    }

   i = j;
   j++;
  }

  if (same_hrefs) list_of_same_hrefs.push(same_hrefs);

  return list_of_same_hrefs;

};


/**
 * @method addLinkElement
 *
 * @memberOf OpenAjax.a11y.cache.LinksCache
 *
 * @desc Adds a link element to the list of link elements and generates a cache id for the object.
 *       Checks if the link has a duplicate href or name in the document
 *
 * @param  {LinkElement}  link_element  - link element to add
 *
 * @return {Number} Returns the length of the list of link elements
 */

OpenAjax.a11y.cache.LinksCache.prototype.addLinkElement = function (link_element) {

  // item must exist and have the position property
  if (link_element) {
    this.links_sorted_by_name.push(link_element);
    this.links_sorted_by_href.push(link_element);

    this.length = this.length + 1;
    link_element.cache_id = "link_" + this.length;
    link_element.document_order = this.length;
    this.link_elements.push(link_element);

    if (link_element.dom_element.tag_name === 'area') {
      this.area_elements.push(link_element);
    }
  }

  return this.length;
};

/**
 * @deprecated getLinkElementByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.LinksCache
 *
 * @desc Finds the the link element object with the matching cache id
 *
 * @param  {String }  cache_id  - Cache id of link element object
 *
 * @return {LinkElement} Returns cache link element object if cache id is found, otherwise null
 */

OpenAjax.a11y.cache.LinksCache.prototype.getLinkElementByCacheId = function (cache_id) {
  return this.getItemByCacheId(cache_id);
};

/**
 * @method getItemByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.LinksCache
 *
 * @desc Finds the the link element object with the matching cache id
 *
 * @param  {String }  cache_id  - Cache id of link element object
 *
 * @return {LinkElement} Returns cache link element object if cache id is found, otherwise null
 */

OpenAjax.a11y.cache.LinksCache.prototype.getItemByCacheId = function (cache_id) {

  var i;

  var link_elements_len = this.link_elements.length;

  if (cache_id && cache_id.length) {
   for (i=0; i < link_elements_len; i++) {
     if (this.link_elements[i].cache_id == cache_id) {
       return this.link_elements[i];
     }
   } // end loop
 }

 return null;
};

/**
 * @method emptyCache
 *
 * @memberOf OpenAjax.a11y.cache.LinksCache
 *
 * @desc Resests the LinksCache object properties and empties all the lists and arrays
 */

OpenAjax.a11y.cache.LinksCache.prototype.emptyCache = function () {

  this.link_elements = [];
  this.length = 0;
  this.sort_property = 'document_order';
  this.up_to_date = false;

};

/**
 * @method updateCacheItems
 *
 * @memberOf OpenAjax.a11y.cache.LinksCache
 *
 * @desc Updates the links cache object by checking to see if a dom element
 *          should be added to the cache
 *
 * @param  {DOMElement}   dom_element   - DOMElement object to check for inclusion in links cache
 */

OpenAjax.a11y.cache.LinksCache.prototype.updateCacheItems = function (dom_element) {

  var link_element;

  if ((dom_element.tag_name === 'a'    && (dom_element.has_href || dom_element.hasClickEvents()) && !dom_element.is_widget) ||
      (dom_element.tag_name === 'area' && (dom_element.has_href || dom_element.hasClickEvents()) && !dom_element.is_widget) ||
      ((typeof dom_element.role === 'string') && (dom_element.role === 'link'))) {

        dom_element.is_interactive = true;

        link_element = new OpenAjax.a11y.cache.LinkElement(dom_element);

        this.dom_cache.getNameForLink(link_element);

        this.dom_cache.links_cache.addLinkElement(link_element);
  }

};

/**
 * @method traverseDOMElementsForLinkElements
 *
 * @memberOf OpenAjax.a11y.cache.LinksCache
 *
 * @desc Traverses dom element objects in the tree to update the links cache
 *
 * @param  {DOMElement}  dom_element - dom element object to check for inclusion in links cache
 */

OpenAjax.a11y.cache.LinksCache.prototype.traverseDOMElementsForLinkElements = function (dom_element) {

  var i;

  if (!dom_element) return;

  if (dom_element.type == Node.ELEMENT_NODE) {

    this.updateCacheItems(dom_element);

    for (i = 0; i < dom_element.child_dom_elements.length; i++) {
      this.traverseDOMElementsForLinkElements(dom_element.child_dom_elements[i]);
    } // end loop
  }

};


/**
 * @method updateCache
 *
 * @memberOf OpenAjax.a11y.cache.LinksCache
 *
 * @desc Traverses the DOMElements to update the links cache
 *       NOTE: This function is only used when the specialized caches
 *       are build as rules need them.  In this condition, if the rules
 *       dependent on the links cache are disabled, this cache would
 *       not be updated
 */

OpenAjax.a11y.cache.LinksCache.prototype.updateCache = function () {

  var i;
  var children = this.dom_cache.element_cache.child_dom_elements;
  var children_len = children.length;

  for (i=0; i < children_len; i++) {
    this.traverseDOMElementsForLinkElements(children[i]);
  }

  this.up_to_date = true;

};


/* ---------------------------------------------------------------- */
/*                            LinkElement                           */
/* ---------------------------------------------------------------- */

/**
 * @constructor LinkElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates link element object representing information related to an a or area element on a web page
 *
 * @param  {DOMElement}   dom_element   - The dom element object representing the a or area element
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the a or area element
 * @property  {String}      cache_id        - String that uniquely identifies the cache element object in the cache
 * @property  {Number}      document_order  - Ordinal position of the a or area element in the document in relationship to other a or area elements
 *
 * @property  {String}   href    - The absolute path of the href value
 * @property  {Boolean}  is_url  - true if href is a url, otherwise false (i.e. internal link or broken)
 * @property  {Boolean}  is_link - true if href is a internal or exteranl link, otherwise
 * @property  {Number}   link_type - Type of link contstant
 *
 * @property  {String}   tab_index  - value of the tabindex attribute
 * @property  {String}   name_attr  - value of the name attribute
 * @property  {String}   target     - value of the target attribute
 *
 * @property  {String}      accessible_name                - The accessible name for the link
 * @property  {String}      accessible_name_for_comparison - The accessible name for the link used for comparison
 * @property  {Number}      accessible_name_length         - Length of the accessible name used for comparison
 * @property  {Number}      accessible_name_source         - Numeric constant representing the source of the accessible name
 *                                                            - aria-labelledby
 *                                                            - aria-label
 *                                                            - child text content
 *                                                            - title
 *
 * @property  {String}      accessible_description                 - Accessible description for the link (from aria-describedby)
 * @property  {String}      accessible_description_for_comparison  - Accessible description for the link used for comparison
 *
 * @property  {Number}   height  - Height of the link in pixels
 * @property  {Number}   width   - Width of the link in pixels
 */

OpenAjax.a11y.cache.LinkElement = function (dom_element) {

  function getTypeOfLink(href, name, id) {

    if (typeof href != 'string') return OpenAjax.a11y.LINK_TYPE.OTHER;

    href = href.toLowerCase();

    if (href.length === 0) {
      if ((name && name.length) || (id && id.length))
        return OpenAjax.a11y.LINK_TYPE.TARGET;
      else
        return OpenAjax.a11y.LINK_TYPE.EMPTY;
    }

    if (href === '#') return OpenAjax.a11y.LINK_TYPE.EMPTY;

    if (href.indexOf('https://') >= 0) return OpenAjax.a11y.LINK_TYPE.HTTP;
    else
      if (href.indexOf('https://') >= 0) return OpenAjax.a11y.LINK_TYPE.HTTPS;
      else
        if (href.indexOf('ftp://') >= 0) return OpenAjax.a11y.LINK_TYPE.FTP;
        else
          if (href.indexOf('ftps://') >= 0) return OpenAjax.a11y.LINK_TYPE.FTPS;
          else
            if (href.indexOf('file://') >= 0) return OpenAjax.a11y.LINK_TYPE.FILE;
            else
              if (href.indexOf('javascript:') >= 0) return OpenAjax.a11y.LINK_TYPE.JAVASCRIPT;
              else
                if (href.indexOf('mailto:') >= 0) return OpenAjax.a11y.LINK_TYPE.MAILTO;
                else
                  if (href[0] === '#') return OpenAjax.a11y.LINK_TYPE.INTERNAL;

    return OpenAjax.a11y.LINK_TYPE.HTTP;
  }


  function testIfHrefIsURL(url) {

    if (typeof href != 'string') return false;

    if (url.indexOf('https://') >= 0) return true;
    else
      if (url.indexOf('https://') >= 0) return true;
      else
        if (url.indexOf('ftp://') >= 0) return true;
        else
          if (url.indexOf('ftps://') >= 0) return true;
          else
            if (url.indexOf('file://') >= 0) return true;

    return false;
  }

  if (!dom_element.node) return;

  var href = dom_element.node.href;

  if ((typeof dom_element.role === 'string') &&
      (dom_element.role === 'link') &&
      (href !== 'string')) href = "javascript:onclick";

  this.dom_element    = dom_element;
  this.cache_id       = "";
  this.document_order = 0;

  this.role = dom_element.role;

  this.href  = href;
  this.is_url = testIfHrefIsURL(href);

  if (this.is_url) {
    this.is_broken = OpenAjax.a11y.util.urlExists(href);
  }
  else {
    this.is_broken = OpenAjax.a11y.URL_RESULT.NOT_A_URL;
  }

  this.tab_index = dom_element.node.tabIndex;

  this.name_attribute = dom_element.node.getAttribute("name");
  this.is_target = this.name_attribute && (this.name_attribute.length > 0);

  var link_type = getTypeOfLink(href, this.name_attribute, dom_element.id);

  this.link_type = link_type;

  this.is_link = false;

  if ((link_type !== OpenAjax.a11y.LINK_TYPE.OTHER) &&
      (link_type !== OpenAjax.a11y.LINK_TYPE.TARGET) &&
      (link_type !== OpenAjax.a11y.LINK_TYPE.EMPTY)) this.is_link = true;

  this.target  = dom_element.node.getAttribute("target");

  var ano = dom_element.getTextObject();

  var cs = dom_element.computed_style;

  // If the link is an image, use the image height and width
  if (ano.height > cs.height) cs.height = ano.height;
  if (ano.width > cs.width) cs.width = ano.width;

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.LinkElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.LinkElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.LinkElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.LinkElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.LinkElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.LinkElement.prototype.getAttributes = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;
  var attributes = this.dom_element.getAttributes();

  cache_nls.addPropertyIfDefined(attributes, this, 'href');

  cache_nls.addPropertyIfDefined(attributes, this, 'tab_index');
  cache_nls.addPropertyIfDefined(attributes, this, 'name_attribute');
  cache_nls.addPropertyIfDefined(attributes, this, 'target');
  cache_nls.addPropertyIfDefined(attributes, this, 'aria-describedby');
  cache_nls.addPropertyIfDefined(attributes, this, 'aria-labelledby');
  cache_nls.addPropertyIfDefined(attributes, this, 'aria-label');
  cache_nls.addPropertyIfDefined(attributes, this, 'title');

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.LinkElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.LinkElement.prototype.getCacheProperties = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties(unsorted);

  cache_nls.addPropertyIfDefined(properties, this, 'accessible_name');
  cache_nls.addPropertyIfDefined(properties, this, 'accessible_name_for_comparison');
  cache_nls.addPropertyIfDefined(properties, this, 'accessible_name_source');
  cache_nls.addPropertyIfDefined(properties, this, 'accessible_description');
  cache_nls.addPropertyIfDefined(properties, this, 'accessible_description_for_comparison');

  cache_nls.addPropertyIfDefined(properties, this, 'is_broken');
  cache_nls.addPropertyIfDefined(properties, this, 'is_url');
  cache_nls.addPropertyIfDefined(properties, this, 'is_target');
  cache_nls.addPropertyIfDefined(properties, this, 'link_type');

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.LinkElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.LinkElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};

/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.LinkElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.LinkElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method getLinkType
 *
 * @memberOf OpenAjax.a11y.cache.LinkElement
 *
 * @desc Returns an array of style items
 *
 * @return {String} Returns a NLS string representing the type of link
 */

OpenAjax.a11y.cache.LinkElement.prototype.getLinkType = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  return cache_nls.getValueNLS('link_type', this.link_type);

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.LinkElement
 *
 * @desc Creates a text string representation of the link element object
 *
 * @param  {String} option  - Substitute string for something other than accessible name
 *
 * @return {String} Returns a text string representation of the link element object
 */

 OpenAjax.a11y.cache.LinkElement.prototype.toString = function (option) {

   var str = "no name";

   if (typeof option === 'string') str = option;
   else if (this.accessible_name_for_comparison.length) str = this.accessible_name;

   if ((this.dom_element.tag_name === 'a') || (this.dom_element.tag_name === 'area')) {
     str = this.dom_element.tag_name + ": " + str;
   }
   else {
     str = this.dom_element.tag_name + "[link]: " + str;
   }

   return str;
 };


/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                              ListInfo                            */
/* ---------------------------------------------------------------- */

/**
 * @constructor ListInfo
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a list information object for preserving the current list information
 *        when traversing the DOM
 *
 * @param {ListInfo} list_info - Current list information object
 *
 * @property {LandmarkElement | ListElement | ContainerElement}  list_element      - Parent container list or container element object
 * @property {ContainerElement}                container_element - Parent container element object
 * @property {LandmarkElement}                 parent_landmark  - Parent landmark element object
 */

OpenAjax.a11y.cache.ListInfo = function (list_info) {

  if (list_info) {
    this.list_element      = list_info.list_element;
    this.container_element = list_info.container_element;
    this.parent_landmark   = list_info.parent_landmark;
    this.article_or_section = list_info.article_or_section;
  }
  else {
    this.list_element      = null;
    this.container_element = null;
    this.parent_landmark   = null;
    this.article_or_section = false;
  }

};

/* ---------------------------------------------------------------- */
/*                            ListsCache                            */
/* ---------------------------------------------------------------- */

/**
 * @constructor ListsCache
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Constructor for lists cache object which contains a list of
 *    list items representing the list (i.e ul, ol , dl, li, dt and dd)
 *    elements defined in a document.
 *
 * @param {DOMCache}   dom_cache   - Reference to the DOMCache object
 *
 * @property {DOMCache} dom_cache  - Reference to the DOMCache object
 *
 * @property {Boolean}  up_to_date - Boolean true if the cache has been creating using the current DOMElements, else false
 *                                   NOTE: This is a common property of all caches and is used when selectively build caches
 *                                         based on whether a rule needs the cache
 *
 * @property {Array}    child_cache_elements  - Root array of the tree representation of the list elements in the document
 *
 * @property {Array}   container_elements  - List of the container element objects in the document that are not children of a container item
 * @property {Array}   listitem_elements   - List of the listitem element objects
 * @property {Number}  length              - Number of containter element objects in list
 *
 * @property {String}   sort_property   - Property of contanter element objectthe list is sorted on
 * @property {Boolean}  sort_ascending  - true if list is sorted by ascending values, otherwise false
 *
 * @property {Number}  landmark_count   - Number of containter element objects in list
 *
 * @property {ResultRuleSummary}  rule_summary_result  - Rule results associated with this cache
 */

OpenAjax.a11y.cache.ListsCache = function (dom_cache) {

  this.dom_cache = dom_cache;
  this.up_to_date = false;

  this.child_cache_elements = [];

  this.list_elements = [];
  this.container_elements = [];
  this.listitem_elements = [];

  this.landmark_count  = 0;

};

/**
 * @method addContainerElement
 *
 * @memberOf OpenAjax.a11y.cache.ListsCache
 *
 * @desc Adds a container element object to the list of container elements
 *
 * @param  {ContainerElement} container_element   - Container element object to add
 *
 * @return  {Number} Returns the number of container element objects in the list of container element objects
 */

OpenAjax.a11y.cache.ListsCache.prototype.addContainerElement = function (container_element) {

  if (container_element) {
    this.container_elements.push(container_element);
    return true;
  }

  return false;

};

/**
 * @method updateCacheItems
 *
 * @memberOf OpenAjax.a11y.cache.ListsCache
 *
 * @desc Update the ListsCache by checking to see if the current
 *       DOMElement is a list-related element and that consequently
 *       a new list element object should be added to this cache.
 *
 * @param  {DOMElement}   dom_element  - dom element object to check for inclusion in lists cache
 * @param  {ListInfo}     list_info    - Information about the current list relationships in the DOM
 *
 * @return {ListInfo}  Returns updated list information object
 */

OpenAjax.a11y.cache.ListsCache.prototype.updateCacheItems = function (dom_element, list_info) {

  var li = new OpenAjax.a11y.cache.ListInfo(list_info);

  var tag_name = dom_element.tag_name;
  var role     = dom_element.getRole();

  if (tag_name === 'ul' ||
      tag_name === 'ol' ||
      tag_name === 'dl' ||
      role === 'list' ||
      role === 'group') {

    var ce = new OpenAjax.a11y.cache.ContainerElement(dom_element, list_info);

    this.dom_cache.getNameFromARIALabel(ce);

    if (!list_info.container_element) this.addContainerElement(ce);

    if (list_info.list_element) {
      list_info.list_element.addChildElement(ce);
    }
    else {
      this.addChildElement(ce);
    }

    this.list_elements.push(ce);
    li.container_element = ce;
    li.list_element      = ce;

//    OpenAjax.a11y.logger.debug( "[ListCache][Container]: " + ce);
  }

  if (tag_name === 'li' ||
      tag_name === 'dt' ||
      tag_name === 'dd' ||
      role === 'listitem') {

    var le = new OpenAjax.a11y.cache.ListElement(dom_element, list_info);

    if (list_info.list_element) {
      list_info.list_element.addChildElement(le);
    }
    else {
      this.addChildElement(le);
    }

    this.list_elements.push(le);
    this.listitem_elements.push(le);

    li.list_element = le;
  }

  if ((dom_element.tag_name === 'a') ||
      (dom_element.getRole() === 'link')) {

    if (list_info.list_element &&
        (typeof list_info.list_element.link_count === 'number') &&
        dom_element.node.href &&
        dom_element.node.href.length) {
      list_info.list_element.link_count += 1;

//      if (list_info.container_element) OpenAjax.a11y.logger.debug( "[ListCache][updateCacheItems]: " + list_info.container_element);

    }



  }

  return li;

};

/**
 * @method traverseDOMElementsForListElements
 *
 * @memberOf OpenAjax.a11y.cache.ListsCache
 *
 * @desc Traverses the DOMElements to update the abbreviation cache
 */

OpenAjax.a11y.cache.ListsCache.prototype.traverseDOMElementsForListElements = function (dom_element, list_info) {

  var i;
  var li;

  if (!dom_element) return;

  if (dom_element.type == Node.ELEMENT_NODE) {

    li = this.updateCacheItems(dom_element, list_info);

    for (i = 0; i < dom_element.child_dom_elements.length; i++ ) {
      this.traverseDOMElementsForListElements(dom_element.child_dom_elements[i], li);
    } // end loop

  }

};

/**
 * @method updateCache
 *
 * @memberOf OpenAjax.a11y.cache.ListsCache
 *
 * @desc Traverses the DOMElements to update the list cache
 *    This function is used to update the list cache
 *    when needed by a rule, it sets the up to date flag when done
 */

OpenAjax.a11y.cache.ListsCache.prototype.updateCache = function () {

 var i;
 var children = this.dom_cache.element_cache.child_dom_elements;
 var children_len = children.length;

 var list_info = new OpenAjax.a11y.cache.ListInfo(null);

 for (i = 0; i < children_len; i++) {
  this.traverseDOMElementsForListElements(children[i], list_info);
 }

 this.up_to_date = true;
};

/**
 * @method addChildElement
 *
 * @memberOf OpenAjax.a11y.cache.ListsCache
 *
 * @desc Add a top-level list element object to the lists cache
 *
 * @param {ContainerElement | ListElement | LandmarkElement } list_element - list cache element object to add to the list cache
 *
 * @return {boolean} indicating success or failure
 */

OpenAjax.a11y.cache.ListsCache.prototype.addChildElement = function (list_element) {


  if (list_element) {
    this.child_cache_elements.push(list_element);
    return true;
  }

  return false;

};

/**
 * @deprecated getListElementByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.ListsCache
 *
 * @desc retrieve list element from lists cache based on its cache id
 *
 * @param  {String}  cache_id  -  cache id of the list cache element object to find
 *
 * @return {ListElement} Returns list cache object if cache id found, otherwise null
 */

OpenAjax.a11y.cache.ListsCache.prototype.getListElementByCacheId = function (cache_id) {
 return this.getItemByCacheId(cache_id);
};


/**
 * @method emptyCache
 *
 * @memberOf OpenAjax.a11y.cache.ListsCache
 *
 * @desc Empties all the properties of the list cache
 */

OpenAjax.a11y.cache.ListsCache.prototype.emptyCache = function () {

  this.dom_cache = null;
  this.up_to_date = false;

  this.child_elements     = [];

  this.container_elements = [];
};


/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.ListsCache
 *
 * @desc Returns a text string representation of the lists cache object
 *
 * @return {String} Returns string represention the lists cache object
 */

OpenAjax.a11y.cache.ListsCache.prototype.toString = function () {

 var str ="\n\nList Information\n";

 var list_length = this.container_elements.length;

 for (var i=0; i < list_length; i++ ) {
  str += this.container_elements[i].toString();
 } // end loop

 return str;
};

/* ---------------------------------------------------------------- */
/*                            ListElement                           */
/* ---------------------------------------------------------------- */

/**
 * @constructor ListElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Cache object to be inserted into ListsCache; corresponds to
 *       either a LI, DT, DD element in the DOM
 *
 * @param  {DOMelement}        dom_element       - The dom element object representing the input element
 * @param  {ContainerElement}  parent_container  - Reference to the container element the list element is contained in
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the list element
 * @property  {String}      cache_id        - String that uniquely identifies the cache element object in the cache
 * @property  {Number}      document_order  - Ordinal position of the list element in the document
 *
 * @property  {ContainerElement}  parent_container  - Reference to the container element the list element is contained in
 * @property  {Number}            list_type         - Type of list cache element object
 *
 * @property  {Array}   child_cache_elements  - Array of child cache list elements as part of list cache tree
 *
 * @property  {Number}  link_count    - Number of links in this list element
 */

OpenAjax.a11y.cache.ListElement = function (dom_element, list_info) {

  this.dom_element    = dom_element;
  this.cache_id       = "";
  this.document_order = 0;

  this.parent_list_element = list_info.list_element;
  this.parent_container    = list_info.container_element;
  this.parent_landmark     = list_info.parent_landmark;

  this.list_type = OpenAjax.a11y.LIST.ITEM;

  this.child_cache_elements = [];

  this.link_count = 0;

};

/**
 * @method addChildElement
 *
 * @memberOf OpenAjax.a11y.cache.ListElement
 *
 * @desc Add a list element object to the tree of list cache items
 *
 * @param {ContainerElement | ListElement | LandmarkElement } list_element - list cache element object to add to the list cache
 *
 * @return {boolean} indicating success or failure
 */

OpenAjax.a11y.cache.ListElement.prototype.addChildElement = function (list_element) {

  if (list_element) {
    this.child_cache_elements.push(list_element);
//    OpenAjax.a11y.logger.debug( "[ListElement][addChildElement] adding child element: " + list_element + " (" + this.child_cache_elements.length + ")");
//    OpenAjax.a11y.logger.debug( "[ListElement][addChildElement] " + this.toString());
    return true;
  }

  return false;

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.ListElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.ListElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.ListElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.ListElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.ListElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.ListElement.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.ListElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.ListElement.prototype.getCacheProperties = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties(unsorted);

  cache_nls.addPropertyIfDefined(properties, this, 'list_type');

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.ListElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.ListElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};

/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.ListElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.ListElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};



/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.ListElement
 *
 * @desc Returns a text string representation of the list item object
 *
 * @return {String} Returns string represention the list item object
 */

OpenAjax.a11y.cache.ListElement.prototype.toString = function () {

  var tag_name = this.dom_element.tag_name;
  var str = tag_name;
  var role = this.dom_element.getRole();

  if (role.length) str += '[role=' + role + ']: ';
  else str += ': ';

  str +=  this.dom_element.getText();

  return str;

};

/* ---------------------------------------------------------------- */
/*                           ContainerElement                       */
/* ---------------------------------------------------------------- */

/**
 * @constructor ContainerElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Cache object to be inserted into ListsCache; corresponds to
 *       either a OL, UL, DL element in the DOM
 *
 * @param  {DOMelement}  dom_element  - The dom element object representing the input element
 * @param  {ListInfo}    list_info    - Current list information about
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the container element
 * @property  {String}      cache_id        - String that uniquely identifies the cache element object in the cache
 * @property  {Number}      document_order  - Ordinal position of the container element in the document
 *
 * @property  {ContainerElement}  parent_container  - Reference to the container element the container element is contained in
 * @property  {LandmarkElement}   parent_landmark   - Reference to the landmark element the container element is contained in
 * @property  {Number}            list_type         - Type of list cache element object
 *
 * @property  {Array}   child_cache_elements  - Array of child cache list elements as part of list cache tree
 *
 * @property  {Number}  links_count           - Number list elements that are links
 * @property  {Number}  links_in_domain       - Number of links that are in the same domain of the page
 *
 * @property  {Array}  list_elements          - Array of list elements
 * @property  {Number} length                 - Number of list elements in the container
 */

OpenAjax.a11y.cache.ContainerElement = function (dom_element, list_info) {

  this.dom_element    = dom_element;

  this.parent_list_element = list_info.list_element;
  this.parent_container    = list_info.container_element;
  this.parent_landmark     = list_info.parent_landmark;

  this.list_type = OpenAjax.a11y.LIST.CONTAINER;

  this.child_cache_elements = [];

  this.link_count     = 0;
  this.link_in_domain = 0;

  this.computed_label = "";
  this.computed_label_length = 0;
  this.computed_label_source = OpenAjax.a11y.SOURCE.NONE;
  this.computed_label_for_comparison = "";
  this.accessible_name = "";

};


/**
 * @method addChildElement
 *
 * @memberOf OpenAjax.a11y.cache.ContainerElement
 *
 * @desc Add a list element object to the tree of list cache items
 *
 * @param {ContainerElement | ListElement | LandmarkElement } list_element - list cache element object to add to the list cache
 *
 * @return {boolean} indicating success or failure
 */

OpenAjax.a11y.cache.ContainerElement.prototype.addChildElement = function (list_element) {

  if (list_element) {
    this.child_cache_elements.push(list_element);
//    OpenAjax.a11y.logger.debug( "[ContainerElement][addChildElement] adding child element: " + list_element + " (" + this.child_cache_elements.length + ")");
//    OpenAjax.a11y.logger.debug( "[ContainerElement][addChildElement] " + this.toString());

    return true;
  }

  return false;

};

/**
 * @method getListItemCount
 *
 * @memberOf OpenAjax.a11y.cache.ContainerElement
 *
 * @desc Gets the number of list items including sublist list items
 *
 * @return {Number} see description
 */

OpenAjax.a11y.cache.ContainerElement.prototype.getListItemCount = function () {

  function getCount(list) {

    var max = list.length;
    var i;  // loop counter
    var ce; // loop placeholder

    //  OpenAjax.a11y.logger.debug( "[ContainerElement][isListOfLinks] Number of children: " + max);

    for (i = 0; i < max; i++) {
      ce = list[i];

      if (ce.child_cache_elements.length) {
        getCount(ce.child_cache_elements);
      }

      // ignore elements that are not 'li'
      if (ce.list_type !== OpenAjax.a11y.LIST.ITEM) continue;
      count += 1;
    }

    return count;
  }
  var count = 0;

  getCount(this.child_cache_elements);

  return count;

};

/**
 * @method getListItemCountOneLink
 *
 * @memberOf OpenAjax.a11y.cache.ContainerElement
 *
 * @desc Gets the number of list items that have one link in them including sublist list items
 *
 * @return {Number} see description
 */

OpenAjax.a11y.cache.ContainerElement.prototype.getListItemCountOneLink = function () {

  function getCount(list) {

    var max = list.length;
    var i;  // loop counter
    var ce; // loop placeholder

    //  OpenAjax.a11y.logger.debug( "[ContainerElement][isListOfLinks] Number of children: " + max);

    for (i = 0; i < max; i++) {
      ce = list[i];

      if (ce.child_cache_elements.length) {
        getCount(ce.child_cache_elements);
      }

      // ignore elements that are not 'li'
      if (ce.list_type !== OpenAjax.a11y.LIST.ITEM) continue;

      if (ce.link_count === 1) count += 1;
    }

    return count;
  }
  var count = 0;

  getCount(this.child_cache_elements);

  return count;

};

/**
 * @method getSublistCount
 *
 * @memberOf OpenAjax.a11y.cache.ContainerElement
 *
 * @desc Gets the number of sub lists
 *
 * @return {Number} see description
 */

OpenAjax.a11y.cache.ContainerElement.prototype.getSublistCount = function () {

  function getCount(list) {

    var max = list.length;
    var i;  // loop counter
    var ce; // loop placeholder

    //  OpenAjax.a11y.logger.debug( "[ContainerElement][isListOfLinks] Number of children: " + max);

    for (i = 0; i < max; i++) {
      ce = list[i];

      if (ce.child_cache_elements.length) {
        getCount(ce.child_cache_elements);
      }

      // ignore elements that are not 'li'
      if (ce.list_type !== OpenAjax.a11y.LIST.CONTAINER) continue;

      count += 1;
    }

    return count;
  }
  var count = 0;

  getCount(this.child_cache_elements);

  return count;

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.ContainerElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.ContainerElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.ContainerElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.ContainerElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.ContainerElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.ContainerElement.prototype.getAttributes = function () {

  var attributes = this.dom_element.getAttributes();

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.ContainerElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.ContainerElement.prototype.getCacheProperties = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties(unsorted);

  cache_nls.addPropertyIfDefined(properties, this, 'list_type');
  cache_nls.addPropertyIfDefined(properties, this, 'link_count');

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.ContainerElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.ContainerElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};

/**

 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.ContainerElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.ContainerElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.ContainerElement
 *
 * @desc Returns a text string representation of the container element object
 *
 * @return {String} Returns string represention the container element object
 */

OpenAjax.a11y.cache.ContainerElement.prototype.toString = function () {

  var count = this.getListItemCount();
  var tag_name = this.dom_element.tag_name;
  var role = this.dom_element.getRole();

  var str = tag_name;

  if (role.length) str += '[role=' + role + ']';

  if (this.computed_label.length) str += ': ' + this.computed_label;


  if (count === 1) str += ' (1 list item)';
  else str += ' (' + count + ' list items)';

  return str;

// return this.dom_element.tag_name + ": " + this.getListItemCount() + " list items; " + this.getListItemCountOneLink() + " list items with one link" + this.getSublistCount() + " sublists";

};



/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                      OpenAjax Media Cache                        */
/* ---------------------------------------------------------------- */

/**
 * @constructor MediaInfo
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a MediaInfo object for preserving the current media information
 *        when traversing the DOM for audio and video information
 *
 * @param {MediaInfo} media_info - Current MediaInfo object
 *
 * @property {MediaElement}   media_element  - Parent MediaElement (if any)
 */

OpenAjax.a11y.cache.MediaInfo = function (media_info) {

 if (media_info) {
  this.media_element  = media_info.media_element;
 }
 else {
  this.media_element  = null;
 }
};



/**
  * @constructor MediaCache
  *
  * @memberOf OpenAjax.a11y.cache
  *
  * @desc Creates cache object representing information related to audio, video and other media objects in a document
  *
  * @param {DOMCache}   dom_cache   - Reference to the DOMCache object
  *
  * @property {DOMCache} dom_cache  - Reference to the DOMCache object
  *
  * @property {Boolean}  up_to_date - Boolean true if the cache has been creating using the current DOMElements, else false
  *                                   NOTE: This is a common property of all caches and is used when selectively build caches
  *                                         based on whether a rule needs the cache
  *
  * @property {Object}   page_element    - Object for referencing page level media rules
  *
  * @property {Array}    media_elements  - List of media element objects in the document
  * @property {Array}    object_elements - List of object elements in the document
  * @property {Array}    audio_elements  - List of audio element in the document
  * @property {Array}    video_elements  - List of video element in the document
  * @property {Array}    embed_elements  - List of embed element in the document
  * @property {Number}   length          - Number of media element objects in the list
  *
  * @property {String}   sort_property   - Image element object property the list of media objects is sorted by
  * @property {Boolean}  sort_ascending  - true if list is sorted in ascending order, otherwise false
  *
  * @property {ResultRuleSummary}  rule_summary_result  - Rule results associated with this cache
  */

OpenAjax.a11y.cache.MediaCache = function (dom_cache) {

  this.dom_cache = dom_cache;
  this.up_to_date = false;

  this.page_element = null;

  this.media_elements = [];
  this.object_elements = [];
  this.video_elements = [];
  this.audio_elements = [];
  this.embed_elements = [];
  this.length = 0;

  this.sort_property = 'document_order';
  this.sort_ascending = false;

};

/**
 * @method addMediaElement
 *
 * @memberOf OpenAjax.a11y.cache.MediaCache
 *
 * @desc Adds a media element object to the list of media elements and generates a cache id for the object.
 *
 * @param  {MediaElement}  media_element  - media element object to add
 *
 * @return {Number} Returns the length of the list of media element objects
 */

OpenAjax.a11y.cache.MediaCache.prototype.addMediaElement = function ( media_element ) {

  // item must exist and have the position property
  if (media_element) {
    this.length = this.length + 1;
    media_element.cache_id = "media_" + this.length;
    media_element.document_order = this.length;
    this.media_elements.push( media_element );

    if (media_element.dom_element.tag_name === 'video')  this.video_elements.push(media_element);
    if (media_element.dom_element.tag_name === 'audio')  this.audio_elements.push(media_element);
    if (media_element.dom_element.tag_name === 'object') this.object_elements.push(media_element);
    if (media_element.dom_element.tag_name === 'embed')  this.embed_elements.push(media_element);

 }

 return this.length;

};

/**
 * @method getMediaElementByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.MediaCache
 *
 * @desc Finds the the media element object with the matching cache id
 *
 * @param  {String}  cache_id  - Cache id of media element object
 *
 * @return {MediaElement | null} Returns cache media element object if cache id is found, otherwise null
 */

OpenAjax.a11y.cache.MediaCache.prototype.getMediaElementByCacheId = function (cache_id) {
  return this.getItemByCacheId(cache_id);
};

/**
 * @method getItemByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.MediaCache
 *
 * @desc Finds the the media element object with the matching cache id
 *
 * @param  {String}  cache_id  - Cache id of media element object
 *
 * @return {MediaElement | null} Returns cache media element object if cache id is found, otherwise null
 */

OpenAjax.a11y.cache.MediaCache.prototype.getItemByCacheId = function (cache_id) {

  var i;
  var media_elements_len = this.media_elements.length;

  if (cache_id) {
    for (i=0; i < media_elements_len; i++) {
      if (this.media_elements[i].cache_id == cache_id) {
        return this.media_elements[i];
      }
    } // end loop
  }
  return null;
};

/**
 * @method emptyCache
 *
 * @memberOf OpenAjax.a11y.cache.MediaCache
 *
 * @desc Resests the media cache object properties and empties all the lists and arrays
 */

OpenAjax.a11y.cache.MediaCache.prototype.emptyCache = function () {

  this.page_element = null;

  this.media_elements  = [];
  this.audio_elements  = [];
  this.video_elements  = [];
  this.object_elements = [];

  this.sort_property = 'document_order';
  this.sort_ascending = false;
  this.up_to_date = false;

};

/**
 * @method updateCacheItems
 *
 * @memberOf OpenAjax.a11y.cache.MediaCache
 *
 * @desc Updates the media cache by checking to see if a dom element
 *          should be added to the cache
 *
 * @param  {DOMElement}   dom_element   - dom element object to check for inclusion in media cache
 * @param  {MediaInfo}    media_info  - Information about the current media element relationships in the DOM
 *
 */

OpenAjax.a11y.cache.MediaCache.prototype.updateCacheItems = function (dom_element, media_info) {

  var mi = new OpenAjax.a11y.cache.MediaInfo(media_info);
  var media_element;

  var tag_name = dom_element.tag_name;

  if (tag_name == 'body' && !this.page_element) {

    var pe = new OpenAjax.a11y.cache.PageElementMedia(dom_element);

    // There is only one page element for a document, even when there are frames and iframes
    this.page_element = pe;

    return mi;
  }


  if ((tag_name === 'object') ||
      (tag_name === 'applet') ||
      (tag_name === 'embed') ||
      (tag_name === 'audio') ||
      (tag_name === 'video')) {

    media_element = new OpenAjax.a11y.cache.MediaElement(dom_element);
    this.dom_cache.media_cache.addMediaElement(media_element);

    mi.media_element = media_element;

  }
  else {

    if ((dom_element.tag_name === 'param') &&
        (media_info.media_element &&
         media_info.media_element.dom_element &&
         media_info.media_element.dom_element.tag_name === 'object')) {
       media_element = new OpenAjax.a11y.cache.MediaChildElement(dom_element);
       media_info.media_element.addMediaElement(media_element);
    }

    if ((dom_element.tag_name === 'track') &&
        (media_info.media_element && media_info.media_element.dom_element &&
         ((media_info.media_element.dom_element.tag_name === 'video') ||
         (media_info.media_element.dom_element.tag_name === 'audio')))) {
       media_element = new OpenAjax.a11y.cache.MediaChildElement(dom_element);
       media_info.media_element.addMediaElement(media_element);
    }

  }

  return mi;

};

/**
 * @method traverseDOMElementsForMediaElements
 *
 * @memberOf OpenAjax.a11y.cache.MediaCache
 *
 * @desc Traverses DOMElement objects in the tree to update the media cache
 *
 * @param  {DOMElement}  dom_element - dom element object to check for inclusion in media cache
 * @param  {MediaInfo}   media_info  - information about a media elements
 */

OpenAjax.a11y.cache.MediaCache.prototype.traverseDOMElementsForMediaElements = function (dom_element, media_info) {

  var i;

  if (!dom_element) return;

  if (dom_element.type == Node.ELEMENT_NODE) {

    var mi = this.updateCacheItems(dom_element, media_info);

    for (i=0; i<dom_element.child_dom_elements.length; i++) {
      this.traverseDOMElementsForMediaElements(dom_element.child_dom_elements[i], mi);
    } // end loop
  }

};


/**
 * @method updateCache
 *
 * @memberOf OpenAjax.a11y.cache.MediaCache
 *
 * @desc Traverses the DOMElements to update the media cache
 *       NOTE: This function is only used when the specialized caches
 *       are build as rules need them.  In this condition, if the rules
 *       dependent on the media cache are disabled, this cache would
 *       not be updated
 */

OpenAjax.a11y.cache.MediaCache.prototype.updateCache = function () {
  var i;
  var children = this.dom_cache.element_cache.child_dom_elements;
  var children_len = children.length;

  var media_info = new OpenAjax.a11y.cache.MediaInfo();

  for (i=0; i < children_len; i++) {
    this.traverseDOMElementsForMediaElements(children[i], media_info);
  }

  this.up_to_date = true;
};

/**
 * @method sortMediaElements
 *
 * @memberOf OpenAjax.a11y.cache.MediaCache
 *
 * @desc Sorts media element array by a media element object property
 *
 * @param {String}   property   - Property of media element object to sort the list
 * @param {Boolean}  ascending  - true if sort in ascending order; false in descending order
 *
 * @return {Boolean}  Returns true if list was sorted, false if not
 */

OpenAjax.a11y.cache.MediaCache.prototype.sortMediaElements = function(property, ascending ) {

  var swapped = false;
  var temp = null;
  var i;

  if (this.media_elements &&
      this.media_elements.length &&
      !this.media_elements[0][property] ) {
    return false;
  } // endif

  var media_elements_len = this.media_elements.length;

  if (ascending) {
    do {
      swapped = false;
      for (i=1; i<media_elements_len; i++) {
        if (this.media_elements[i-1][property] > this.media_elements[i][property]) {
          // swap the values
          temp = this.media_elements[i-1];
          this.media_elements[i-1] = this.media_elements[i];
          this.media_elements[i] = temp;
          swapped = true;
        }
      } // end loop
    } while (swapped);
  }
  else {
    do {
      swapped = false;
      for (i = 1; i < media_elements_len; i++) {
        if (this.media_elements[i-1][property] < this.media_elements[i][property]) {
          // swap the values
          temp = this.media_elements[i-1];
          this.media_elements[i-1] = this.media_elements[i];
          this.media_elements[i] = temp;
          swapped = true;
        }
      } // end loop
    } while (swapped);
  }

  this.sort_property = property;

  return true;

};


/* ---------------------------------------------------------------- */
/*                            MediaElement                          */
/* ---------------------------------------------------------------- */

/**
 * @constructor MediaElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates media element object representing information related to an object, video, audio, embed or applet element on a web page
 *
 * @param  {DOMelement}   dom_element   - The dom element object representing the media element
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the media element
 * @property  {String}      cache_id        - String that uniquely identifies the media element object in the cache
 * @property  {Number}      document_order  - Ordinal position of the media element in the document in relationship to other media elements
 */

OpenAjax.a11y.cache.MediaElement = function (dom_element) {

  this.document_order = 0;

  this.dom_element = dom_element;

  var node = dom_element.node;

  this.child_cache_elements = [];

  this.length = 0;

  var attributes = node.attributes;

  for (var i = 0; i < attributes.length; i++) {

    var attr = attributes[i];

    switch (attr.name) {

    case 'controls':
      this.has_controls = true;
      break;

    case 'autoplay':
      this.has_autoplay = true;
      break;

    default:
      break;

    }

  }

  if (dom_element.has_type) this.type = dom_element.type;
  else this.type ="";

  this.data       = node.getAttribute('data');
  this.alt        = node.getAttribute('alt');
  this.longdesc   = node.getAttribute('longdesc');
  this.name       = node.getAttribute('name');
  this.src        = node.getAttribute('src');

  this.file_name = "";
  this.src_is_a_file_name = false;

  if (typeof node.src === 'string'  && node.src.length) {

    var pos = this.src.lastIndexOf('/');

    if (pos >= 0 ) this.file_name = this.src.substring((pos+1));
    else this.file_name = this.src;

    this.src_is_a_file_name = true;
  }

};

/**
 * @method addMediaElement
 *
 * @memberOf OpenAjax.a11y.cache.MediaElement
 *
 * @desc Adds a cache media element to the tree representation of media elements
 *
 * @param  {MediaElement } media_element   - Cache media element object to add
 */

OpenAjax.a11y.cache.MediaElement.prototype.addMediaElement = function (media_element) {

 if (media_element) {
    this.length = this.length + 1;
    media_element.cache_id = this.cache_id + "_child_" + this.length;
    media_element.document_order = this.length;
    this.child_cache_elements.push(media_element);
 }

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.MediaElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.MediaElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.MediaElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.MediaElement.prototype.getStyle = function () {

  return  this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.MediaElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.MediaElement.prototype.getAttributes = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var attributes = this.dom_element.getAttributes(unsorted);

  cache_nls.addPropertyIfDefined(attributes, this, 'name');
  cache_nls.addPropertyIfDefined(attributes, this, 'controls');
  cache_nls.addPropertyIfDefined(attributes, this, 'autoplay');
  cache_nls.addPropertyIfDefined(attributes, this, 'type');
  cache_nls.addPropertyIfDefined(attributes, this, 'src');
  cache_nls.addPropertyIfDefined(attributes, this, 'file_name');
  cache_nls.addPropertyIfDefined(attributes, this, 'data');
  cache_nls.addPropertyIfDefined(attributes, this, 'alt');
  cache_nls.addPropertyIfDefined(attributes, this, 'longdesc');
  cache_nls.addPropertyIfDefined(attributes, this, 'height');
  cache_nls.addPropertyIfDefined(attributes, this, 'width');

  return attributes;

};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.MediaElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.MediaElement.prototype.getCacheProperties = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = [];

  cache_nls.addPropertyIfDefined(properties, this, 'alt_for_comparison');
  cache_nls.addPropertyIfDefined(properties, this, 'document_order');

  return properties;

};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.MediaElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.MediaElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};


/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.MediaElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.MediaElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method getTextTracks
 *
 * @memberOf OpenAjax.a11y.cache.MediaElement
 *
 * @desc Returns an array of media child elements for audio and video elements
 *
 * @return {Array} Returns a array of media child elements
 */

OpenAjax.a11y.cache.MediaElement.prototype.getTextTracks = function () {

  var tt = [];

  for (var i = 0; i < this.child_cache_elements.length; i++) {

    var cce = this.child_cache_elements[i];

    if (cce.dom_element.tag_name === 'track') tt.push(cce);

  }

  return tt;

};

/**
 * @method hasCaptionTrack
 *
 * @memberOf OpenAjax.a11y.cache.MediaElement
 *
 * @desc Returns a boolean value on the availability of the caption track
 *
 * @return {Boolean} Returns a true if media element has a caption track, otherwise false
 */

OpenAjax.a11y.cache.MediaElement.prototype.hasCaptionTrack = function () {

  var tracks = this.getTextTracks();

  for (var i = 0; i < tracks.length; i++) {
    var track = tracks[i];
    if ((track.tag_name === 'track') &&
         (track.kind === 'captions')) return true;
  }

  return false;

};

/**
 * @method hasDescriptionTrack
 *
 * @memberOf OpenAjax.a11y.cache.MediaElement
 *
 * @desc Returns a boolean value on the availability of the audio description track
 *
 * @return {Boolean} Returns a true if media element has a audio description track, otherwise false
 */

OpenAjax.a11y.cache.MediaElement.prototype.hasDescriptionTrack = function () {

  var tracks = this.getTextTracks();

  for (var i = 0; i < tracks.length; i++) {
    var track = tracks[i];
    if ((track.tag_name === 'track') &&
        (track.kind === 'descriptions')) return true;
  }

  return false;

};

/**
 * @method hasSubtitleTrack
 *
 * @memberOf OpenAjax.a11y.cache.MediaElement
 *
 * @desc Returns a boolean value on the availability of the sub title track
 *
 * @return {Boolean} Returns a true if media element has a sub title track, otherwise false
 */

OpenAjax.a11y.cache.MediaElement.prototype.hasSubtitleTrack = function () {

  var tracks = this.getTextTracks();

  for (var i = 0; i < tracks.length; i++) {
    var track = tracks[i];
    if ((track.tag_name === 'track') &&
        (track.kind === 'subtitles')) return true;
  }

  return false;

};

/**
 * @method isTypeVideo
 *
 * @memberOf OpenAjax.a11y.cache.MediaElement
 *
 * @desc Returns a boolean value on if the type attribute is a 'video' type
 *
 * @return {Boolean} Returns a true if 'video' type, otherwise false
 */

OpenAjax.a11y.cache.MediaElement.prototype.isTypeVideo = function () {

  if ((typeof this.type === 'string') &&
      (this.type.indexOf('video') >= 0)) return true;

  return false;

};

/**
 * @method isTypeAudio
 *
 * @memberOf OpenAjax.a11y.cache.MediaElement
 *
 * @desc Returns a boolean value on if the type attribute is a 'audio' type
 *
 * @return {Boolean} Returns a true if 'audio' type, otherwise false
 */

OpenAjax.a11y.cache.MediaElement.prototype.isTypeAudio = function () {

  if ((typeof this.type === 'string') &&
      (this.type.indexOf('audio') >= 0)) return true;

  return false;

};
/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.MediaElement
 *
 * @desc Creates a text string representation of the media element object
 *
 * @return {String} Returns a text string representation of the media element object
 */

 OpenAjax.a11y.cache.MediaElement.prototype.toString = function () {
   var str = this.dom_element.tag_name;
   if (this.type.length) str += "[type=" + this.type + "]";
   if (this.src  && this.src.length)  str += "[src=" + this.src   + "]";
   if (this.data && this.data.length) str += "[data=" + this.data + "]";
   return str;
 };


/* ---------------------------------------------------------------- */
/*                            MediaChildElement                          */
/* ---------------------------------------------------------------- */

/**
 * @constructor MediaChildElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates media child element object representing possible caption and audio description information related to an object, video, audio on a web page
 *
 * @param  {DOMelement}   dom_element   - The dom element object representing the media element
 *
 * @property  {DOMElement}  dom_element     - Reference to the dom element representing the media element
 * @property  {String}      cache_id        - String that uniquely identifies the media element object in the cache
 * @property  {Number}      document_order  - Ordinal position of the media element in the document in relationship to other media elements
 */

OpenAjax.a11y.cache.MediaChildElement = function (dom_element) {

  this.document_order = 0;
  this.cache_id = "";

  this.dom_element = dom_element;
  var node = dom_element.node;

  this.tag_name     = dom_element.tag_name;
  this.name         = node.getAttribute('name');
  this.value        = node.getAttribute('value');
  this.src          = node.getAttribute('src');
  this.kind         = node.getAttribute('kind');
  this.srclang      = node.getAttribute('srclang');
  this.label        = node.getAttribute('label');
  this.default_attr = node.getAttribute('default');


};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.MediaChildElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.MediaChildElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.MediaChildElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.MediaChildElement.prototype.getStyle = function () {

  return  this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.MediaChildElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.MediaChildElement.prototype.getAttributes = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var attributes = [];

  cache_nls.addPropertyIfDefined(attributes, this, 'name');
  cache_nls.addPropertyIfDefined(attributes, this, 'value');
  cache_nls.addPropertyIfDefined(attributes, this, 'src');
  cache_nls.addPropertyIfDefined(attributes, this, 'kind');
  cache_nls.addPropertyIfDefined(attributes, this, 'srclang');
  cache_nls.addPropertyIfDefined(attributes, this, 'label');
  cache_nls.addPropertyIfDefined(attributes, this, 'default_attr');

  return attributes;

};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.MediaChildElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.MediaChildElement.prototype.getCacheProperties = function () {

  var properties = [];

  return properties;

};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.MediaChildElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.MediaChildElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};


/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.MediaChildElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.MediaChildElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.MediaChildElement
 *
 * @desc Creates a text string representation of the media element object
 *
 * @return {String} Returns a text string representation of the media element object
 */

 OpenAjax.a11y.cache.MediaChildElement.prototype.toString = function () {

   if ((this.tag_name === 'track') &&
       (typeof this.kind === 'string') &&
       this.kind.length) return this.dom_element.tag_name + ": " + this.kind;

   return this.dom_element.tag_name;

 };

/* ---------------------------------------------------------------- */
/*                       PageElementHeadingsLandmarks                               */
/* ---------------------------------------------------------------- */

/**
 * @constructor PageElementHeadingsLandmarks
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a body element object used to hold information about a title element
 *
 * @param  {DOMelement}   dom_element      - The dom element object representing the heading element
 *
 * @property  {DOMElement}   dom_element      - Reference to the dom element representing the optgroup element
 * @property  {String}       cache_id         - String that uniquely identifies the cache element object in the cache
 * @property  {Number}       document_order   - Ordinal position of the title and main cache items in the document to other title and main cache items
 *
 * @property  {Array}  child_cache_elements  - List of child cache title element, main landmarks and h1 heading element objects as part of cache title and main elements tree
 *
 * @property  {Number}   type  -  Constant representing the body element
 *
 */

OpenAjax.a11y.cache.PageElementMedia = function (dom_element) {

  this.dom_element     = dom_element;
  this.cache_id        = "page_media";
  this.document_order  = 0;
  this.is_page_element = true;

  this.child_cache_elements = []; // this is always empty for the body element

};


/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.PageElementHeadingsLandmarks
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.PageElementMedia.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.PageElementMedia
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.PageElementMedia.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.PageElementMedia
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.PageElementMedia.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.PageElementMedia
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.PageElementMedia.prototype.getCacheProperties = function (unsorted) {

  var properties = this.dom_element.getCacheProperties(unsorted);

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.PageElementMedia
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.PageElementMedia.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};



/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.PageElementMedia
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.PageElementMedia.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.PageElementMedia
 *
 * @desc Returns a text string representation of the page media element
 *
 * @return {String} Returns string represention the title element object
 */

OpenAjax.a11y.cache.PageElementMedia.prototype.toString = function () {

  return "page (media)";
};
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/**
 * @constructor DOMElementComputedStyle
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Create a dom element computed style object is used to add style properties to dom element cache objects
 *
 * @param  {DOMElement}  dom_element     - dom element node to add computed style information to
 * @param  {DOMElement}  parent_element  - parent dom element node for computing inherited properties
 *
 * @property  {String}  display      - Computed value of the CSS 'display' property
 * @property  {String}  visibility   - Computed value of the CSS 'visibility' property
 * @property  {Boolean} aria_hidden  - aria-hidden property
 *
 * @property  {Number}  is_visible_onscreen   - Constant representing the graphical visibility of the element (i.e is it visible to people with sight)
 * @property  {Number}  is_visible_to_at      - Constant representing the assistive technology visibility of the element (i.e is it visible to people using a screen reader)
 *
 * @property  {String}  color                 - Computed value of the CSS 'color' property
 * @property  {String}  color_hex             - Computed value of the CSS 'color' property in hexidecimal format
 * @property  {String}  opacity               - Computed value of the CSS 'opacity' property
 * @property  {String}  background_color      - Computed value of the CSS 'background-color' property
 * @property  {String}  background_color_hex  - Computed value of the CSS 'background-color' property in hexidecimal format
 * @property  {String}  background_image      - Computed value of the CSS 'background-image' property
 * @property  {String}  background_repeat     - Computed value of the CSS 'background-repeat' property
 * @property  {String}  background_position   - Computed value of the CSS 'background-position' property
 *
 * @property  {String}  font_family  - Computed value of the CSS 'font-family' property
 * @property  {String}  font_size    - Computed value of the CSS 'font-size' property
 * @property  {String}  font_weight  - Computed value of the CSS 'font-weight' property
 *
 * @property  {String}  position  - Computed value of the CSS 'position' property
 * @property  {String}  left      - Computed value of the CSS 'left' property
 * @property  {String}  top       - Computed value of the CSS 'top' property
 * @property  {String}  width     - Computed value of the width of the rendered element in pixels
 * @property  {String}  height    - Computed value of the height of the rendered element in pixels
 *
 * @property  {String}  pseudo_before   - Computed value content in the :before pseudo
 * @property  {String}  pseudo_after    - Computed value content in the :after pseudo
 */

OpenAjax.a11y.cache.DOMElementComputedStyle = function (dom_element, parent_element) {

  function normalizeBackgroundImage(value, parent_element) {

    var v = value;

    if ((value.toLowerCase() === 'inherit') ||
        (value.toLowerCase() === 'none') ||
        (value === '')) {

      if (parent_element) {
        v = parent_element.computed_style.background_image;
      }
      else {
        v = 'none';
      }
    }

    return v;

  } // end function

  function  normalizeFontSize(value, parent_element) {
    if (value.toLowerCase() == 'inherit') {
      if (parent_element) {
        return parent_element.computed_style.font_size;
      }
      else {
        return 12;
      }
    }
    else {
      return value;
    }
  } // end function

  function  normalizeFontWeight(value, parent_element) {
    if (isNaN(value) ) {
      switch (value.toLowerCase()) {
      case 'bold':
        return 700;

      case 'normal':
        return 400;

      case 'inherit':
        if (parent_element) {
          return parent_element.computed_style.font_weight;
        }
        else {
          return 400;
        }

      case 'bolder':
        return 700;

      default:
        return 400;
      }
    }
    else {
      return parseInt(value,10);
    }
  } // end function


  function  normalizePositionTop(value, parent_element) {
    if (value.toLowerCase() == 'inherit') {
      if (parent_element) {
        return parent_element.computed_style.top;
      }
      else {
        return 0;
      }
    }
    else {
      return parseInt(value,10);
    }
  } // end function

  function  normalizePositionLeft(value, parent_element) {
    if (value.toLowerCase() == 'inherit') {
      if (parent_element) {
        return parent_element.computed_style.left;
      }
      else {
        return 0;
      }
    }
    else {
      return parseInt(value,10);
    }
  } // end function

  this.display  = "";
  this.visibility = "";
  this.aria_hidden = false;

  this.is_visible_onscreen = OpenAjax.a11y.VISIBILITY.UNKNOWN;
  this.is_visible_to_at = OpenAjax.a11y.VISIBILITY.UNKNOWN;

  this.color   = "";

  this.background_color = "";
  this.background_image = "";
  this.background_repeat = "";
  this.background_position = "";

  this.outline_style = "";
  this.outline_color = "";
  this.outline_width = "";

  this.font_family = "";
  this.font_size  = "";
  this.font_weight = "";
  this.position  = "";
  this.left    = "";
  this.top     = "";
  this.heigth  = "";
  this.width   = "";
  this.area   = "";

  this.psuedo_focus = "";
  this.psuedo_before = "";
  this.psuedo_after  = "";

  // check to see if getComputedStyle is defined for the engine
  if (!window.getComputedStyle) return;

//  OpenAjax.a11y.logger.debug("Element: " + dom_element );

  try {
    var style = window.getComputedStyle(dom_element.node, null);

    this.display    = style.getPropertyValue("display");
    this.visibility = style.getPropertyValue("visibility");

    this.color               = style.getPropertyValue("color");
    this.opacity             = style.getPropertyValue("opacity");

    this.background_color    = style.getPropertyValue("background-color");
    this.background_image    = normalizeBackgroundImage(style.getPropertyValue("background-image"), parent_element);
    this.background_repeat   = style.getPropertyValue("background-repeat");
    this.background_position = style.getPropertyValue("background-position");

    this.outline_style    = style.getPropertyValue("outline-style");
    this.outline_color    = style.getPropertyValue("outline-color");
    this.outline_width    = style.getPropertyValue("outline-width");

    this.font_family = style.getPropertyValue("font-family");
    this.font_size   = normalizeFontSize(style.getPropertyValue("font-size"), parent_element);
    this.font_weight = normalizeFontWeight(style.getPropertyValue("font-weight"), parent_element);

    this.position = style.getPropertyValue("position");
  }
  catch (e) {
    return;
  }

  // :before and :after pseudo elements

  if (style) {
    var before = window.getComputedStyle(dom_element.node, "::before");
    this.pseudo_before = before.getPropertyValue("content");

    var after = window.getComputedStyle(dom_element.node, "::after");
    this.pseudo_after  = after.getPropertyValue("content");

/*
    var focus = window.getComputedStyle(dom_element.node, "::focus");
    this.focus = focus;

    var pv = focus.getPropertyValue("color");
    if (pv && pv.length) this.focus  += "color :" + pv + "; ";

    pv = focus.getPropertyValue("background-color");
    if (pv && pv.length) this.focus  += "background-color :" + pv + "; ";

    pv = focus.getPropertyValue("background-image");
    if (pv && pv.length) this.focus  += "background-image :" + pv + "; ";


    pv = focus.getPropertyValue("border-style");
    if (pv && pv.length) this.focus  += "border-style :" + pv + "; ";

    pv = focus.getPropertyValue("border-width");
    if (pv && pv.length) this.focus  += "border-width :" + pv + "; ";

    pv = focus.getPropertyValue("border-color");
    if (pv && pv.length) this.focus  += "border-color :" + pv + "; ";


    pv = focus.getPropertyValue("outline-style");
    if (pv && pv.length) this.focus  += "outline-style :" + pv + "; ";

    pv = focus.getPropertyValue("outline-width");
    if (pv && pv.length) this.focus  += "outline-width :" + pv + "; ";

    pv = focus.getPropertyValue("outline-color");
    if (pv && pv.length) this.focus  += "outline-color :" + pv + "; ";
*/

  }

  // test if getBoundingClientRect is supported

  if (dom_element.node.getBoundingClientRect) {
    var client_rect = dom_element.node.getBoundingClientRect();
    this.client_rect = client_rect;
    if (client_rect) {
      this.top     = client_rect.top;
      this.left    = client_rect.left;
      this.height  =  Math.round(client_rect.height);
      this.width   =  Math.round(client_rect.width);
      this.area    = Math.round(this.height * this.width);
    }
    else {
      this.top  = normalizePositionTop(style.getPropertyValue("top"), parent_element);
      this.left = normalizePositionLeft(style.getPropertyValue("left"), parent_element);
    }
  }
  else {
    this.top     = normalizePositionTop(style.getPropertyValue("top"), parent_element);
    this.left    = normalizePositionLeft(style.getPropertyValue("left"), parent_element);
  }

  if ((this.background_color.indexOf("0, 0, 0, 0") > 0) ||
      (this.background_color == 'transparent') ||
      (this.background_color == 'inherit')) {

    if (parent_element && parent_element.computed_style) {
      this.background_color   = parent_element.computed_style.background_color;
      this.background_color_hex = parent_element.computed_style.background_color_hex;
    }
    else {
      // This is an edge case test typcially for body elements and frames
      this.background_color = 'rgb(255,255,255)';
      this.background_color_hex = 'ffffff';
    }
  }
  else {
    this.background_color_hex = OpenAjax.a11y.util.RGBToHEX(this.background_color);
  }

  if (parent_element &&
      parent_element.computed_style ) {

    var parent_style = parent_element.computed_style;

    // We do have parent_element so use its information if needed
    if ((this.display === 'inherit') ||
        (parent_style.display == 'none'))  {
      this.display = 'none';
    }

    if ((this.visibility === 'inherit') ||
        (parent_style.visibility === 'hidden')) {
      this.visibility = parent_style.visibility;
    }

    if (this.color == 'inherit') {
      this.color = parent_style.color;
      this.color_hex = parent_style.color_hex;
    }
    else {
      this.color_hex = OpenAjax.a11y.util.RGBToHEX(style.getPropertyValue("color"));
    }

    if (this.font_family === 'inherit') {
      this.font_family = parent_style.font_family;
    }

    if (this.position === 'inherit') {
      this.position = parent_style.position;
    }
  }

  // Calcuate visibility of node content in graphical renderings and to assistive technologies

  if (this.visibility &&
      this.visibility.length &&
      this.display &&
      this.display.length ) {

    if ((this.visibility === 'hidden') ||
        (this.display === 'none')) {

      if (dom_element.tag_name !== 'area') {
        this.is_visible_onscreen = OpenAjax.a11y.VISIBILITY.HIDDEN;
        this.is_visible_to_at    = OpenAjax.a11y.VISIBILITY.HIDDEN;
      }
      else {
        this.is_visible_onscreen = OpenAjax.a11y.VISIBILITY.VISIBLE;
        this.is_visible_to_at    = OpenAjax.a11y.VISIBILITY.VISIBLE;
      }

    }
    else {
      if ((parseInt(this.top, 10) < 0) ||
          (parseInt(this.left, 10) < 0) ||
          (parseInt(this.height, 10) < 4) ||
          (parseInt(this.width, 10) < 4)) {
        this.is_visible_onscreen = OpenAjax.a11y.VISIBILITY.HIDDEN;
      }
      else {
        this.is_visible_onscreen = OpenAjax.a11y.VISIBILITY.VISIBLE;
      }

      if (((typeof dom_element.aria_hidden === 'string') &&
          (dom_element.aria_hidden === "true")) ||
          (parent_style && parent_style.aria_hidden)) {
        this.aria_hidden = true;
        this.is_visible_to_at = OpenAjax.a11y.VISIBILITY.HIDDEN;
      }
      else {
        this.is_visible_to_at = OpenAjax.a11y.VISIBILITY.VISIBLE;
      }
    }
  }

  this.is_large_font = (parseInt(this.font_size,10) >= 18) || ((parseInt(this.font_size,10) >= 14) && (parseInt(this.font_weight,10) >= 300));

};

/**
 * @method calculateColorContrast
 *
 * @memberOf OpenAjax.a11y.cache.DOMElementComputedStyle
 *
 * @desc Calculates a color contrast raio (CCR) value for the element style object
 *
 * @return {Number}  Returns a number representing the color contrast ratio (CCR)
 */

OpenAjax.a11y.cache.DOMElementComputedStyle.prototype.calculateColorContrastRatio = function () {

 if( this.color_hex &&
   (this.color_hex.length == 6) &&
    this.background_color_hex &&
   (this.background_color_hex.length == 6)) {
  var L1 = this.getLuminance(this.color_hex);
  var L2 = this.getLuminance(this.background_color_hex);
  this.color_contrast_ratio = Math.round((Math.max(L1, L2) + 0.05)/(Math.min(L1, L2) + 0.05)*10)/10;
 }
 else {
  this.color_contrast_ratio = null;
 }

 return this.color_contrast_ratio;

};


/**
 * @method getLuminance
 *
 * @memberOf OpenAjax.a11y.cache.DOMElementComputedStyle
 *
 * @desc Get the luminance value of a hex incoded color
 *
 * @param {String}  color  - Hex representation of a CSS color value
 *
 * @return {Number}  Returns a number representing the limnance value
 */

OpenAjax.a11y.cache.DOMElementComputedStyle.prototype.getLuminance = function (color) {

 // OpenAjax.a11y.logger.debug("  " + color );

 // Get decimal values
 var R8bit = parseInt(color.substring(0,2),16);
 var G8bit = parseInt(color.substring(2,4),16);
 var B8bit = parseInt(color.substring(4,6),16);

 // Get sRGB values
 var RsRGB = R8bit/255;
 var GsRGB = G8bit/255;
 var BsRGB = B8bit/255;
  // Calculate luminance
 var R = (RsRGB <= 0.03928) ? RsRGB/12.92 : Math.pow(((RsRGB + 0.055)/1.055), 2.4);
 var G = (GsRGB <= 0.03928) ? GsRGB/12.92 : Math.pow(((GsRGB + 0.055)/1.055), 2.4);
 var B = (BsRGB <= 0.03928) ? BsRGB/12.92 : Math.pow(((BsRGB + 0.055)/1.055), 2.4);

 return (0.2126 * R + 0.7152 * G + 0.0722 * B);

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.DOMElementComputedStyle
 *
 * @desc Creates a text string representation of the computed style object
 *
 * @return {String} Returns a text string representation of the computed style object
 */

OpenAjax.a11y.cache.DOMElementComputedStyle.prototype.toString = function () {
  return "Computed style " + this.color_hex + " " + this.background_color_hex + " " + this.color_contrast_ratio;
};
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                            TableInfo                             */
/* ---------------------------------------------------------------- */

/**
 * @constructor TableInfo
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a TableInfo object for preserving the current table information
 *        when traversing the DOM for table information
 *
 * @property {Object}               parent_element     - Parent table cache Object (if any)
 * @property {TableElement}         table_element      - Parent TableElement (if any)
 * @property {TBodyElement}         table_body_element - Parent TBodyElement (if any)
 * @property {TableRowElement}      table_row_element  - Parent TableRowElement (if any)
 *
 * @param {TableInfo} table_info - Current ControlInfo object
 */

 OpenAjax.a11y.cache.TableInfo = function (table_info) {

   if (table_info) {
     this.parent_element      = table_info.parent_element;
     this.table_element       = table_info.table_element;
     this.table_body_element  = table_info.table_body_element;
     this.table_row_element   = table_info.table_row_element;
   }
   else {
     this.parent_element      = null;
     this.table_element       = null;
     this.table_body_element  = null;
     this.table_row_element   = null;
   }
 };

/* ---------------------------------------------------------------- */
/*                          TablesCache Object                      */
/* ---------------------------------------------------------------- */

/**
 * @constructor TablesCache
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Create a table cache object to hold information about tables in a web page
 *
 * @param {DOMCache}   dom_cache   - Reference to the DOMCache object
 *
 * @property {DOMCache}  dom_cache   - Reference to the DOMCache object
 * @property {Boolean}   up_to_date  - true if the cache has been creating using the current DOMElements, else false
 *                                       NOTE: This is a common property of all caches and is used when selectively build caches
 *                                             based on whether a rule needs the cache
 *
 * @property {Array}    child_cache_elements - Root array of the tree representation of the table elements in the document
 *
 * @property {Array}    table_elements - Array of all the TableElement objects in the cache
 * @property {Number}   length         - Running length of the table_elements array for use in calculating cache_id values
 *
 * @property {Array}    rule_results   - Root array of the tree representation of the table elements in the document
 *
 * @property {ResultRuleSummary}  rule_summary_result  - Rule results associated with this cache
 */
OpenAjax.a11y.cache.TablesCache = function (dom_cache) {

  // Private properties
  this.dom_cache = dom_cache;
  this.up_to_date = false;

  // Public properties
  this.child_cache_elements = [];

  this.table_elements = [];
  this.length         = 0;

  this.page_element  = null;


};

/**
 * @method addTableElement
 *
 * @memberOf OpenAjax.a11y.cache.TablesCache
 *
 * @desc Adds a table element object to the list of tables and generates a cache_id for the table element object
 *
 * @param {TableElement}  table_element   - TableElement object to add to the cache
 *
 * @return {Number} Returns the number of table element objects in the list
 *
 */
 OpenAjax.a11y.cache.TablesCache.prototype.addTableElement = function (table_element) {

   // item must exist and have the position property
   if (table_element) {
     this.length = this.length + 1;
     table_element.document_order = this.length;
     table_element.cache_id = "table_" + this.length;
     this.table_elements.push( table_element );
   }

   return this.length;

 };

/**
 * @method addChild
 *
 * @memberOf OpenAjax.a11y.cache.TablesCache
 *
 * @desc Adds a cache table element to the tree representation of the table in the table cache
 *
 * @param  {TableElement | CaptionElement | THeadElement | TBodyElement | TableRowElement | TableCellElement }  table_element  - Cache table element object to add to root of tree of table elements
 */

 OpenAjax.a11y.cache.TablesCache.prototype.addChild = function (table_element) {
   if (table_element) {
     this.child_cache_elements.push(table_element);
   }
 };

/**
 * @method addRuleResult
 *
 * @memberOf OpenAjax.a11y.cache.TablesCache
 *
 * @desc Add a RuleResult reference to the table cache
 *
 * @param {RuleResult}  rule_result - Rule result to associate with the table cache
 */
 OpenAjax.a11y.cache.TablesCache.prototype.addRuleResult = function (rule_result) {

   if (rule_result) {
     this.rule_results.push(rule_result);
   }
 };

/**
 * @deprecated getTableElementByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.TablesCache
 *
 * @desc Finds the the table cache element object with the matching cache id
 *
 * @param  {String}  cache_id  - Cache id of table cache element object
 *
 * @return {TableElement | CaptionElement | THeadElement | TBodyElement | TableRowElement | TableCellElement | null} Returns cache table element object if cache id is found, otherwise null
 */
 OpenAjax.a11y.cache.TablesCache.prototype.getTableElementByCacheId = function (cache_id) {
   return this.getItemByCacheId(cache_id);
 };

/**
 * @method getItemByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.TablesCache
 *
 * @desc Finds the the table cache element object with the matching cache id
 *
 * @param  {String}  cache_id  - Cache id of table cache element object
 *
 * @return {TableElement | CaptionElement | THeadElement | TBodyElement | TableRowElement | TableCellElement | null} Returns cache table element object if cache id is found, otherwise null
 */
 OpenAjax.a11y.cache.TablesCache.prototype.getItemByCacheId = function (cache_id) {

   var i;
   var te;
   var table_elements_len = this.table_elements.length;
   var id_info = cache_id.split('_');
   var table_id = "table_" + id_info[1];

   for (i = 0; i < table_elements_len; i++) {
     te = this.table_elements[i];

     if (te.cache_id == cache_id) {
       return te;
     }
     else {
       if (te.cache_id == table_id) {
         return te.getTableElementByCacheId(cache_id);
       }
     }
   }

   return null;
 };

/**
 * @method getRuleResultByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.TablesCache
 *
 * @desc Finds the the rule result object with the matching cache id
 *
 * @param  {String}  cache_id  - Cache id of table cache element object
 *
 * @return {ResultRule | null} Returns cache rule result object if cache id is found, otherwise null
 */
 OpenAjax.a11y.cache.TablesCache.prototype.getRuleResultByCacheId = function (cache_id) {

   var i;
   var rr;
   var rule_results     = this.evaluation_results.rule_results;
   var rule_results_len = rule_results.length;

   for (i = 0; i < rule_results_len; i++) {
     rr = rule_results[i];
     if (rr.cache_id == cache_id) return rr;
   } // end loop

   return null;
 };
/**
 * @method getRuleResultByRuleId
 *
 * @memberOf OpenAjax.a11y.cache.TablesCache
 *
 * @desc Gets the rule result object with the matching rule id
 *
 * @param {String} rule_id - rule id of table element
 *
 * @return {RuleResult | null}}  Returns rule result object if rule id is found, otherwise null
 */

 OpenAjax.a11y.cache.TablesCache.prototype.getRuleResultByRuleId = function (rule_id) {

  var i;
  var rr;
  var rule_results_len = this.rule_results.length;

  for (i = 0; i < rule_results_len; i++) {
    rr = this.rule_results[i];

    if (rr.rule.rule_id == rule_id) {
      return rr;
    }
  }

  return null;
};


/**
 * @method updateCacheItems
 *
 * @memberOf OpenAjax.a11y.cache.TablesCache
 *
 * @desc Updates the tables cache object by checking to see if a dom element object
 *          should be added to the table cache objects
 *
 * @param  {DOMElement}  dom_element  - DOMElement object to check for inclusion in tables cache
 * @param  {TableInfo}   table_info   - Information about the current table relationships in the DOM
 */

 OpenAjax.a11y.cache.TablesCache.prototype.updateCacheItems = function (dom_element, table_info) {

   var te;
   var tce;
   var ce;
   var tbe;
   var the;
   var tre;

   var ti = new OpenAjax.a11y.cache.TableInfo(table_info);

   switch (dom_element.tag_name) {

     case 'table':
       te = new OpenAjax.a11y.cache.TableElement(this.dom_cache, dom_element, table_info);
       this.addTableElement(te);

       if (table_info.parent_element) {
         table_info.parent_element.addChild(te);
       }
       else {
         this.addChild(te);
       }

       ti.parent_element = te;
       ti.table_element  = te;
       ti.table_body_element  = null;
       ti.table_row_element  = null;

       this.dom_cache.getAccessibleNameDescriptionForTable(te);

       break;

     case 'caption':
       ce = new OpenAjax.a11y.cache.CaptionElement(dom_element, table_info);

       te = table_info.table_element;

       if (te) {
         table_info.table_element.addTableElement(ce);
         if (table_info.parent_element) {
           table_info.parent_element.addChild(ce);
         }

         this.dom_cache.getAccessibleNameDescriptionForTable(te, ce);

       }

       break;

     case 'thead':
       the = new OpenAjax.a11y.cache.THeadElement(dom_element, table_info);

       if (table_info.table_element) {
         table_info.table_element.addTableElement(the);
         if (table_info.parent_element) {
           table_info.parent_element.addChild(the);
         }
       }

       ti.parent_element     = the;
       ti.table_body_element = the;
       ti.table_row_element  = null;

       break;

     case 'tbody':
       tbe = new OpenAjax.a11y.cache.TBodyElement(dom_element, table_info);

       if (table_info.table_element) {
         table_info.table_element.addTableElement(tbe);

         if (table_info.parent_element) {
           table_info.parent_element.addChild(tbe);
         }
       }

       ti.parent_element = tbe;
       ti.table_body_element = tbe;
       ti.table_row_element  = null;

       break;

     case 'tr':
       tre = new OpenAjax.a11y.cache.TableRowElement(dom_element, table_info);

       if (table_info.table_element) {
         table_info.table_element.addTableElement(tre);

         if (table_info.parent_element) {
           table_info.parent_element.addChild(tre);
         }

         if (table_info.table_body_element) {
           table_info.table_body_element.row_count++;
         }
       }

       ti.parent_element     = tre;
       ti.table_row_element  = tre;

       break;


     case 'td':
     case 'th':
       tce = new OpenAjax.a11y.cache.TableCellElement(dom_element, table_info);

       if (table_info.table_element) {
         table_info.table_element.addTableElement(tce);

         if (table_info.parent_element) {
           table_info.parent_element.addChild(tce);
         }
       }

       ti.parent_element      = tce;

       break;

     case 'body':
       if (!this.page_element) {
         this.page_element = new OpenAjax.a11y.cache.PageElementLayout(dom_element);
       }
       break;

     default:
       break;

   } // end switch

   return ti;
 };

/**
 * @method traverseDOMElementsForTableElements
 *
 * @memberOf OpenAjax.a11y.cache.TablesCache
 *
 * @desc Traverses the DOMElements to update table elements
 *
 * @param {TableElement}      dom_element  - DOMElement object to check fo inclusion in tables cache
 * @param {TableInformation}  table_info   - Information needed for identifying the parent/child relationships of nested tables
 */

 OpenAjax.a11y.cache.TablesCache.prototype.traverseDOMElementsForTableElements = function (dom_element, table_info) {

   var i;
   var ti;

   if (!dom_element) return;

     if (dom_element.type == Node.ELEMENT_NODE) {

       ti = this.updateCacheItems(dom_element, table_info);

       for (i=0; i<dom_element.child_dom_elements.length; i++ ) {
         this.traverseDOMElementsForTableElements(dom_element.child_dom_elements[i], ti);
       } // end loop
     }
 };

/**
 * @method updateCache
 *
 * @memberOf OpenAjax.a11y.cache.TablesCache
 *
 * @desc Traverses the DOMElements to update the tables cache
 *       NOTE: This function is only used when the specialized caches
 *       are build as rules need them.  In this condition, if the rules
 *       dependent on the controls cache are disabled, this cache would
 *       not be updated
 */

 OpenAjax.a11y.cache.TablesCache.prototype.updateCache = function () {

   var i;
   var children = this.dom_cache.element_cache.child_dom_elements;
   var children_len = children.length;

   var table_info = new OpenAjax.a11y.cache.TableInfo(null);


   for (i=0; i < children_len; i++) {
     this.traverseDOMElementsForTableElements(children[i], table_info);
   }

   this.up_to_date = true;
 };

/* ---------------------------------------------------------------- */
/*                       TableElement Object                        */
/* ---------------------------------------------------------------- */

/**
 * @constructs TableElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates table element object used to hold data about a table
 *
 * @param  {DOMCache} dom_cache - Reference to the current dom cache for use of
 *                                dom cache methods to find references
 *
 * @param  {DOMElement}        dom_element         - dom_element object provides information about current dom node
 * @param  {TableCellElement}  table_cell_element  - table_cell_element object provides information about the table
 *                                                   cell the table may be a child of in the dom
 *
 * @property  {DOMCache}    dom_cache    - DOMCache reference for reference DOMCache methods for calculating headers
 * @property  {DOMElement}  dom_element  - DOMElement associated with the form element
 * @property  {String}      cache_id     - String that uniquely identifies the cache element object in the cache
 * @property  {Number}      document_order  - Ordinal position of the table element in the document in relationship to other table elements
 *
 * @property  {Array}       child_cache_elements  - Array of cache table elements as part of table elements relationship tree
 * @property  {Array}       table_elements        - List of all table element objects in this table element object
 * @property  {Number}      length                - Number of table element objects
 *
 * @property  {String}  accessible_name                - The caption for the table
 * @property  {String}  accessible_name_for_comparison - The caption for the table used for comparison
 * @property  {Number}  accessible_name_length         - Length of the caption used for comparison
 * @property  {Number}  accessible_name_source         - Numeric constant representing the source of the caption
 *
 * @property  {String}  accessible_description                 - Summary of the table
 * @property  {String}  accessible_description_for_comparison  - Summary of table used for comparison
 * @property  {Number}  accessible_description_source          - Numeric constant representing the source of thesummary
 *
 * @property  {Number}  max_row     - Number of rows in a table
 * @property  {Number}  max_column  - Number of columns in a table
 * @property  {Number}  cell_count  - Number of cells (i.e. th and td elements) in a table
 *
 * @property  {Number}  row     - Used as the current row counter when traversing a table dom elements
 * @property  {Number}  column  - Used as the current column counter when traversing a table dom elements
 *
 * @property  {Array}   cells     - A two dimensional array representing the table row and columns
 * @property  {Array}   cell_ids  - List of table cell objects who have an id attribute defined
 *
 * @property  {Number}   table_role             - Constant identifying the role of the table: layout, data or unknown role
 * @property  {Boolean}  is_complex_data_table  - True if the table is identified as a complex data table
 *
 * @return {TableElement}
 */
 OpenAjax.a11y.cache.TableElement = function (dom_cache, dom_element, table_info) {

   if( !dom_element ) return null;

   this.table_type = OpenAjax.a11y.TABLE.TABLE_ELEMENT;

   this.dom_cache      = dom_cache;
   this.dom_element    = dom_element;
   this.cache_id       = "";
   this.document_order = 0;

   this.child_cache_elements = [];

   this.table_elements = [];
   this.length = 0;

   this.max_row = 0;
   this.max_column = 0;
   this.cell_count = 0;

   this.cell_count = 0;

   this.cell_ids = [];

   this.row      = -1;
   this.column   = 0;

   this.cells    = [];
   this.cells[0]  = [];
   this.cells[0][0] = null;

   this.accessible_name                = "";
   this.accessible_name_for_comparison = "";
   this.accessible_name_length         = "";
   this.accessible_name_source         = OpenAjax.a11y.SOURCE.NONE;

   this.accessible_description                = "";
   this.accessible_description_for_comparison = "";
   this.accessible_description_source         = OpenAjax.a11y.DESCRIPTION_SOURCE.NONE;

   if (dom_element.role &&
       (dom_element.role === 'presentation' || dom_element.role === 'none')) {
      this.table_role = OpenAjax.a11y.TABLE_ROLE.LAYOUT;
   } else {
      this.table_role = OpenAjax.a11y.TABLE_ROLE.UNKNOWN;
   }

   this.is_complex_data_table = false;

   this.nesting_level        = 0;
   this.layout_nesting_level = 0;
   this.layout_table_in_data_table = false;
   this.data_table_in_data_table = false;

   this.parent_table_element = table_info.table_element;

   if (table_info.table_element) {

     this.nesting_level = table_info.table_element.nesting_level + 1;

     if (table_info.table_element.table_role >= OpenAjax.a11y.TABLE_ROLE.DATA) {
       this.layout_in_data_table = true;
     }
     else {
       this.layout_nesting_level = table_info.table_element.layout_nesting_level + 1;
     }

   }

   return this;
 };

/**
 * @method setIsDataTable
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc  Set is a data table property, if not already set
 */

OpenAjax.a11y.cache.TableElement.prototype.setIsDataTable = function () {

  // if role=presentation this is a layout table
  if (this.dom_element.has_role  &&
      (this.dom_element.role === 'presentation' || this.dom_element.role === 'none')) {

    this.setIsLayoutTable();
    return;
  }

  if(this.table_role >= OpenAjax.a11y.TABLE_ROLE.DATA) return;

  if (this.is_complex_data_table) this.table_role = OpenAjax.a11y.TABLE_ROLE.COMPLEX;
  else this.table_role = OpenAjax.a11y.TABLE_ROLE.DATA;

  if (this.parent_table_element) {

    if (this.parent_table_element.table_role >= OpenAjax.a11y.TABLE_ROLE.DATA) {
      this.layout_table_in_data_table = false;
      this.data_table_in_data_table = true;
    }

    this.layout_nesting_level = this.parent_table_element.layout_nesting_level + 1;

  }

};

/**
 * @method setIsLayoutTable
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc  Set is a data table property, if not already set
 */

OpenAjax.a11y.cache.TableElement.prototype.setIsLayoutTable = function () {

  this.table_role = OpenAjax.a11y.TABLE_ROLE.LAYOUT;

  if (this.parent_table_element) {

    if (this.parent_table_element.table_role >= OpenAjax.a11y.TABLE_ROLE.DATA) {
      this.layout_table_in_data_table = true;
      this.data_table_in_data_table = false;
    }

    this.layout_nesting_level = this.parent_table_element.layout_nesting_level + 1;

  }

};


/**
 * @method getTableElementByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc  Retrieve table cache element from the tree of table cache elements
 *
 * @param  {String}  cache_id  -  cache_id of a table cache element
 *
 * @return  {CaptionElement | TheadElement | TBodyElement | TableRowElement | TableCellElement | null}  Returns table cache element if cahce id is found, otherwise null
 */
OpenAjax.a11y.cache.TableElement.prototype.getTableElementByCacheId = function (cache_id) {
  return this.getItemByCacheId(cache_id);
};

/**
 * @method getItemByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc  Retrieve table cache element from the tree of table cache elements
 *
 * @param  {String}  cache_id  -  cache_id of a table cache element
 *
 * @return  {CaptionElement | TheadElement | TBodyElement | TableRowElement | TableCellElement | null}  Returns table cache element if cahce id is found, otherwise null
 */

OpenAjax.a11y.cache.TableElement.prototype.getItemByCacheId = function (cache_id) {

   function traverseTableElements(table_elements) {
     var table_elements_len = table_elements.length;
     var to;
     var i;
     var ro;

     for (i = 0; i < table_elements_len; i++) {
       to = table_elements[i];

       if (to.cache_id == cache_id) {
         return to;
       }
       else {
         if (to.child_cache_elements && to.child_cache_elements.length) {
           ro = traverseTableElements(to.child_cache_elements);
           if (ro) return ro;
         }
       }
     } // end loop

     return null;
   }

   return traverseTableElements(this.child_cache_elements);

 };


/**
 * @method addTableElement
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc    Adds a table cache element object to table_elements array and generates a cache id value for the table element object
 *
 * @param  {CaptionElement | TableTHeadElement | TableTBodyElement | TableRowElement | TableCellElement} table_element  - table cache element to add
 *
 * @return  {Number}  Returns the length the list of table elements
 *
 */
OpenAjax.a11y.cache.TableElement.prototype.addTableElement = function (table_element) {

   this.length = this.length + 1;
   table_element.document_order = this.length;
   table_element.cache_id = this.cache_id + "_te_" + this.length;

   this.table_elements.push(table_element);

   switch (table_element.table_type) {

   case OpenAjax.a11y.TABLE.CAPTION_ELEMENT:
     this.setIsDataTable();
     break;

   case OpenAjax.a11y.TABLE.THEAD_ELEMENT:
     this.setIsDataTable();
     break;

   case OpenAjax.a11y.TABLE.TBODY_ELEMENT:
     break;

   case OpenAjax.a11y.TABLE.TR_ELEMENT:
     this.nextRow();
     break;

   case OpenAjax.a11y.TABLE.TH_ELEMENT:
     this.setIsDataTable();

     if ((table_element.number_of_header_ids > 1) ||
         (table_element.row_span             > 1) ||
         (table_element.column_span          > 1)) {
       this.is_complex_data_table = true;
       this.table_role = OpenAjax.a11y.TABLE_ROLE.COMPLEX;
     }

     this.addTableCellElement(table_element);
     break;

   case OpenAjax.a11y.TABLE.TD_ELEMENT:

//   OpenAjax.a11y.logger.debug("  Data Table Assumption: " + OpenAjax.a11y.DATA_TABLE_ASSUMPTION);

     if (this.table_role >= OpenAjax.a11y.TABLE_ROLE.DATA) {
       if ((table_element.number_of_header_ids > 1) ||
           (table_element.row_span             > 1) ||
           (table_element.column_span          > 1)) {
         this.setIsDataTable();
         this.is_complex_data_table = true;
         this.table_role = OpenAjax.a11y.TABLE_ROLE.COMPLEX;
       }
     }

     this.addTableCellElement(table_element);
     break;

   default:
     break;


   } // end switch

   return this.length;

 };

/**
 * @method addChild
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc Adds a cache table element to the root tree representation of the tree cache
 *
 * @param  {TableElement | CaptionElement | THeadElement | TBodyElement | TableRowElement | TableCellElement }  table_element  - Cache table element object to add to root of tree of table elements
 */

OpenAjax.a11y.cache.TableElement.prototype.addChild = function (table_element) {

 if (table_element) {
  this.child_cache_elements.push(table_element);
 }

};

/**
 * @method nextRow
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc Updates the current table cell counters and array to start a new row in the table
 */
 OpenAjax.a11y.cache.TableElement.prototype.nextRow = function () {

//  OpenAjax.a11y.logger.debug("Row: " + this.row);

   if ((this.table_role !== OpenAjax.a11y.TABLE_ROLE.COMPLEX) &&
       (this.max_column > 2)) {
     this.multipleTHInRow(this.row);
   }

   this.row = this.row + 1;
   this.max_row = this.row + 1; // 1 based index

   // see if there is already a row created
   if (!this.cells[this.row]) {
     // If row does not exist create it
     this.cells[this.row] = [];
     this.cells[this.row][0] = null;
   }

   if ((this.table_role !== OpenAjax.a11y.TABLE_ROLE.COMPLEX) &&
       (this.max_row > 2)) {
     this.multipleTHInColumn();
   }
 };

/**
 * @method multipleTHInRow
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc Tests to see if there are multiple table header cells in a row and sets complex data table flag if there are
 *
 * @param {Number} row - Number of the row to test for headers
 */
OpenAjax.a11y.cache.TableElement.prototype.multipleTHInRow = function(row) {

//  OpenAjax.a11y.logger.debug(" CELLS: " + (!this.cells[row]) + "  ROW LENGTH: " + this.cells[row]);

  if (!this.cells[row]) return;

  var i = 0;
  var th_count = 0;
  var td_count = 0;

  var cell;

  while (this.cells[row][i]) {
    cell = this.cells[row][i];
    if (cell) {
      if (cell.has_content) {
        if (cell.table_type == OpenAjax.a11y.TABLE.TH_ELEMENT) {
          th_count++;
        }
        else {
          td_count++;
        }
      }
    }
    i += 1;
  }

//  OpenAjax.a11y.logger.debug(" TH Count: " + th_count + "  TD count: " + td_count);

  if ((th_count > 1) && (td_count > 0)) {
    this.is_complex_data_table = true;
    this.table_role = OpenAjax.a11y.TABLE_ROLE.COMPLEX;
  }
};

/**
 * @method multipleTHInColumn
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc Tests to see if there are multiple table header cells in a column and sets complex data table flag if there are
 *
 * @param {Number} column - Number of the column to test for headers
 */
 OpenAjax.a11y.cache.TableElement.prototype.multipleTHInColumn = function() {

   var th_count;
   var td_count;

   var cell;

   var c = 0;
   var r = 0;

   while (this.cells[0][c] &&
          (this.table_role !== OpenAjax.a11y.TABLE_ROLE.COMPLEX)) {

     th_count = 0;
     td_count = 0;
     r = 0;

     while (this.cells[r][c]  &&
            (this.table_role !== OpenAjax.a11y.TABLE_ROLE.COMPLEX)) {

       cell = this.cells[r][c];

       if (cell.has_content) {
         if (cell.table_type == OpenAjax.a11y.TABLE.TH_ELEMENT) {
           th_count++;
         }
         else {
           td_count++;
         }
       }

       if (th_count > 1 && td_count > 1) {
         this.is_complex_data_table = true;
         this.table_role = OpenAjax.a11y.TABLE_ROLE.COMPLEX;
         return;
       }

       r += 1;
     }

     c += 1;
   }
 };

/**
 * @method addTableCellElement
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc Adds a TableCellElement to the current row
 *
 * @param {TableCellElement}  table_cell_element  -  The table cell element object to add in to the current row and column of a table
 */
 OpenAjax.a11y.cache.TableElement.prototype.addTableCellElement = function (table_cell_element) {

   var i;
   var j;
   var r;
   var c;

   this.column = 0;

   if (table_cell_element.id &&
       table_cell_element.id.length) {
     this.cell_ids.push(table_cell_element.id);
   }

   // find the next available spot in cells array, this needs to be calculated due to row and column spanning
   while ((this.cells[this.row][this.column] !== undefined) &&
          (this.cells[this.row][this.column] !== null)) {
     this.column++;
   } // end loop

   r = this.row;
   c = this.column;

   table_cell_element.row    = r;
   table_cell_element.column = c;

   for (i=0; i<table_cell_element.row_span; i++) {

     for (j=0; j<table_cell_element.column_span; j++) {
       this.cells[r][c] = table_cell_element;
       c += 1;
     }
     r += 1;

     // see if there is already a row created
     if (!this.cells[r]) {
       // If row does not exist create it
       this.cells[r] = [];
       this.cells[r][0] = null;
     }
   }
   this.setTableCellHeader(this.row, this.column, table_cell_element);

   if (c > this.max_column) this.max_column = c;

   this.cell_count++;

 };

/**
 * @method sortCellIds
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc Sorts the cell ids array for this table based on the id values
 */
 OpenAjax.a11y.cache.TableElement.prototype.sortCellIds = function () {

   var swapped = false;
   var temp = null;
   var i;

   var cell_ids_len = this.cell_ids.length;

   do{
     swapped = false;

     for (i = 1; i < cell_ids_len; i++ ) {

       if (this.cell_ids[i-1] > this.cell_ids[i]) {

         // swap the values
         temp = this.cell_ids[i-1];
         this.cell_ids[i-1] = this.cell_ids[i];
         this.cell_ids[i] = temp;
         swapped = true;
       }
     } // end loop
   } while (swapped);
 };

/**
 * @method setTableCellHeader
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc Sets header content property of the table cell element object
 *
 * @param {Number}            row                 - Current row position of the table cell element object
 * @param {Number}            column              - Current column position of the table cell element object
 * @param {TableCellElement}  table_cell_element  - Table cell element object to create header content property
 */
 OpenAjax.a11y.cache.TableElement.prototype.setTableCellHeader = function (row, column, table_cell_element) {

   var tag_name;
   var scope;
   var string_array = [];
   var cell, r, c;

   var normalizeSpace = OpenAjax.a11y.util.normalizeSpace;

   tag_name = table_cell_element.dom_element.tag_name;
   scope  = table_cell_element.dom_element.scope;

   table_cell_element.header_source =  OpenAjax.a11y.HEADER_SOURCE.NONE;

   if (table_cell_element.headers) {
     var hc = this.dom_cache.element_with_id_cache.getTextFromIds(table_cell_element.headers);
     table_cell_element.header_content = normalizeSpace(hc);
     if (table_cell_element.header_content.length) table_cell_element.header_source =  OpenAjax.a11y.HEADER_SOURCE.HEADERS_ATTRIBUTE;
   }
   else {
     // if a table cell is used as a header in the table and has no header attribute set its header to an empty string
     if (table_cell_element.table_type === OpenAjax.a11y.TABLE.TH_ELEMENT) {
       table_cell_element.header_content = "";
     }
     else {

       // find TH or TD with scope=column in the same column
       for (r=(row-1); r>=0; r--) {
         cell = this.cells[r][column];

         if (cell) {
           tag_name = cell.dom_element.tag_name;
           scope  = cell.scope;

           if (tag_name == "th" || scope == "col") {
             if (!cell.cell_text) cell.cell_text = normalizeSpace(cell.dom_element.getText());
             string_array.push(cell.cell_text);
           }
         }
       }

       // find TH or TD with scope=row in the same row
       for (c=(column-1); c>=0; c--) {
         cell = this.cells[row][c];

         if (cell) {
           tag_name = cell.dom_element.tag_name;
           scope  = cell.scope;

           if (tag_name == "th" || scope == "row") {
             if (!cell.cell_text) cell.cell_text = normalizeSpace(cell.dom_element.getText());
             string_array.push(cell.cell_text);
           }
         }
       }
       table_cell_element.header_content = normalizeSpace(string_array.join(' '));

       if (table_cell_element.header_content.length) table_cell_element.header_source =  OpenAjax.a11y.HEADER_SOURCE.ROW_OR_COLUMN_HEADERS;
     }
   }
 };

/**
 * @method findFirstRowWithContent
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc Finds the first row of the table which has text content in at least one cell.
 *       This is used to skip rows that are used for stylistic puposes, since they usually
 *       do not have any text content other than spaces in them.
 *
 * @return {Number}  Returns number of first row with content
 *
 */
 OpenAjax.a11y.cache.TableElement.prototype.findFirstRowWithContent = function() {

   var r;
   var c;
   var max_row = this.max_row;
   var max_col;
   var text;
   var cell;

   for (r = 0; r < max_row; r++) {
     max_col = this.cells[r].length;

     for (c = 0; c < max_col; c++) {
       cell = this.cells[r][c];

       if (!cell || !cell.dom_element) continue;

       text = cell.dom_element.getText();

       if (text) text = OpenAjax.a11y.util.normalizeSpace(text);

       if (cell.table_type == OpenAjax.a11y.TABLE.TH_ELEMENT ||
           text.length) {
         return r;
       }
     }
   }
   return -1;
 };

/**
 * @method findFirstColumnWithContent
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc Finds the first column of the table which has text content in at least one cell.
 *       This is used to skip columns that are used for stylistic puposes, since they usually
 *       do not have any text content other than spaces in them.
 *
 * @return {Number}  Returns number of first column with content
 *
 */
 OpenAjax.a11y.cache.TableElement.prototype.findFirstColumnWithContent = function() {

   var r;
   var c;
   var max_col = this.max_column;
   var max_row = this.max_row;
   var text;
   var cell;

   for (c = 0; c < max_col; c++) {

     for (r = 0; r < max_row; r++) {

       cell = this.cells[r][c];

       if (!cell || !cell.dom_element) continue;

       text = cell.dom_element.getText();

       if (text) text = OpenAjax.a11y.util.normalizeSpace(text);

       if (cell.table_type == OpenAjax.a11y.TABLE.TH_ELEMENT ||
           text.length) {
         return c;
       }
     }
   }
   return -1;
 };


/**
 * @method headerCellsInFirstRow
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc Calculates the number of non-empty cells in the first row with content and
 *       how many of the non-empty cells are header cells
 *
 * @return {Object} Returns an object with two properties 'total' and 'th_count'
 */
 OpenAjax.a11y.cache.TableElement.prototype.headerCellsInFirstRow = function () {

   // ro is the Return Object
   var ro = {};
   ro.total = 0;
   ro.th_count = 0;

   var c;
   var max_col;
   var cell;
   var text;

   var r = this.findFirstRowWithContent();

   if (r < 0) return ro;

   if (this.cells[r]) {

     max_col = this.cells[r].length;

     for (c = 0; c < max_col;) {
       cell = this.cells[r][c];

       if (cell.table_type == OpenAjax.a11y.TABLE.TH_ELEMENT) {
         ro.total++;
         ro.th_count++;
       }
       else {
         text = cell.dom_element.getText();

         if (text) text = OpenAjax.a11y.util.normalizeSpace(text);

         if (text.length) {
           ro.total++;
         }
       }
       c += cell.column_span;
     }
   }
   return ro;
 };

/**
 * @method headerCellsInFirstColumn
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc Calculates the number of non-empty cells in the first column with content and
 *       how many of the non-empty cells are header cells
 *
 * @return {Object} Returns an object with two properties 'total' and 'th_count'
 */
 OpenAjax.a11y.cache.TableElement.prototype.headerCellsInFirstColumn = function () {

   // ro is the Return Object
   var ro = {};
   ro.total = 0;
   ro.th_count = 0;

   var r;
   var c;
   var text;
   var cell;
   var max_row;

   c = this.findFirstColumnWithContent();

   if (c < 0) return ro;

   max_row = this.max_row;

   for (r = 0; r < max_row;) {
     cell = this.cells[r][c];

     if (!cell) break;

     if (cell.table_type == OpenAjax.a11y.TABLE.TH_ELEMENT) {
       ro.total++;
       ro.th_count++;
     }
     else {
       text = cell.dom_element.getText();

       if (text) text = OpenAjax.a11y.util.normalizeSpace(text);

       if (text.length) {
         ro.total++;
       }
     }
     r += cell.row_span;
   }
   return ro;
 };

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.TableElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.TableElement.prototype.getAttributes = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var attributes = this.dom_element.getAttributes(unsorted);

  attributes.push(cache_nls.getLabelAndValueNLS('summary', this.accessible_description));
  attributes.push(cache_nls.getLabelAndValueNLS('role', this.dom_element.role));

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event information
 */

OpenAjax.a11y.cache.TableElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};


/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style items
 */

OpenAjax.a11y.cache.TableElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @return {Array} Returns a array of cache properties
 */

OpenAjax.a11y.cache.TableElement.prototype.getCacheProperties = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties();

  properties.push(cache_nls.getLabelAndValueNLS('table_role',             this.table_role));
  properties.push(cache_nls.getLabelAndValueNLS('is_complex_data_table',  this.is_complex_data_table));
  properties.push(cache_nls.getLabelAndValueNLS('caption',                this.accessible_name));
  properties.push(cache_nls.getLabelAndValueNLS('caption_for_comparison', this.accessible_name_for_comparison));
  properties.push(cache_nls.getLabelAndValueNLS('caption_source',         this.accessible_name_source));
  properties.push(cache_nls.getLabelAndValueNLS('summary',                this.accessible_description));
  properties.push(cache_nls.getLabelAndValueNLS('summary_source',         this.accessible_description_source));
  properties.push(cache_nls.getLabelAndValueNLS('max_row',                this.max_row));
  properties.push(cache_nls.getLabelAndValueNLS('max_column',             this.max_column));
  properties.push(cache_nls.getLabelAndValueNLS('cell_count',             this.cell_count));
  properties.push(cache_nls.getLabelAndValueNLS('nesting_level',          this.nesting_level));

  this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.TableElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};


/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.TableElement
 *
 * @desc Creates a text string representation of the table element object
 *
 * @return {String} Returns a text string representation of the table
 */
 OpenAjax.a11y.cache.TableElement.prototype.toString = function () {
   var str = this.max_column + "x" + this.max_row + " ";

   if (this.table_role >= OpenAjax.a11y.TABLE_ROLE.DATA) {

     if (this.table_role === OpenAjax.a11y.TABLE_ROLE.DATA) {
       str += "Data Table: ";
     }
     else {
       str += "Complex Data Table: ";
     }

     if (this.accessible_name && this.accessible_name.length) str += this.accessible_name;
     else  str += "no name";

   }
   else {
     if (this.table_role === OpenAjax.a11y.TABLE_ROLE.LAYOUT) str += "Layout Table ";
     else str += "Table: unknown role on page";
   }

   return str;

 };


/* ---------------------------------------------------------------- */
/*                         CaptionElement Object                    */
/* ---------------------------------------------------------------- */

/**
 * @constructor CaptionElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a caption element object which contains
 *       information obout a caption element in a table
 *
 * @param  {DOMElement}  dom_element  - Reference to the dom element object associated with caption element
 * @param  {TableInfo}   table_info   - Information about the current table relationships in the DOM
 *
 * @property  {DOMElement}  dom_element  - Reference to the dom element object associated with caption element
 * @property  {String}      cache_id     - String that uniquely identifies the cache element object in the cache
 *
 * @property  {TableElement}  parent_table_element  - Reference to the table element object that contatins the caption element
 *
 * @property  {Number}  type                 - Constant indicating the type of table cache element object
 *
 * @property  {String}  name                 - The text content of the caption element
 * @property  {String}  name_for_comparison  - The text content used for comparisons with other text content (i.e. lowercase, space normalized and trimmed)
 */

OpenAjax.a11y.cache.CaptionElement = function (dom_element, table_info) {

  this.dom_element = dom_element;

  var name = dom_element.getText();
  this.accessible_name   = name;
  this.accessible_name_source = OpenAjax.a11y.SOURCE.TEXT_CONTENT;

  name = OpenAjax.a11y.util.normalizeSpace(name);
  this.accessible_name_for_comparison = name;
  this.accessible_name_length         = name.length;

  this.table_type = OpenAjax.a11y.TABLE.CAPTION_ELEMENT;

  this.parent_table_element = table_info.table_element;

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.CaptionElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.CaptionElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.CaptionElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.CaptionElement.prototype.getAttributes = function () {

  var attributes = this.dom_element.getAttributes();

  return attributes;
};

/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.CaptionElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event information
 */

OpenAjax.a11y.cache.CaptionElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.CaptionElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style items
 */

OpenAjax.a11y.cache.CaptionElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.CaptionElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @return {Array} Returns a array of cache properties
 */

OpenAjax.a11y.cache.CaptionElement.prototype.getCacheProperties = function () {

  var properties = this.dom_element.getCacheProperties();

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.CaptionElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.CaptionElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};


/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.CaptionElement
 *
 * @desc Creates a text string representation of the caption element object
 *
 * @return {String} Returns a text string representation of the caption element object
 */

 OpenAjax.a11y.cache.CaptionElement.prototype.toString = function () {
   return "caption: " + this.name;
 };

/* ---------------------------------------------------------------- */
/*                         THeadElement Object                      */
/* ---------------------------------------------------------------- */

/**
 * @constructor THeadElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a thead element object which contains
 *       information obout a thead element in a table
 *
 * @param  {DOMElement}  dom_element  - Reference to the dom element object associated with thead element
 * @param  {TableInfo}   table_info   - Information about the current table relationships in the DOM
 *
 * @property  {DOMElement}  dom_element  - Reference to the dom element object associated with thead element
 * @property  {String}      cache_id     - String that uniquely identifies the cache element object in the cache
 *
 * @property  {Array}         child_cache_elements  - Array of table cache elements for the tree representation of the table
 * @property  {TableElement}  parent_table_element  - Reference to the table element object that contatins the thead element
 *
 * @property  {Number}  type       - Constant indicating the type of table cache element object
 *
 * @property  {Number}  row_count  - Number of table rows contained in the childresn of the thead element
 */

OpenAjax.a11y.cache.THeadElement = function (dom_element, table_info) {

  this.dom_element = dom_element;
  this.cache_id    = "";

  this.child_cache_elements = [];
  this.parent_table_element = table_info.table_element;

  this.table_type = OpenAjax.a11y.TABLE.THEAD_ELEMENT;

  this.row_count = 0;

};

/**
 * @method addChild
 *
 * @memberOf OpenAjax.a11y.cache.THeadElement
 *
 * @desc Adds a cache table element to the tree representation of the table in the cache
 *
 * @param  {TableElement | CaptionElement | THeadElement | TBodyElement | TableRowElement | TableCellElement }  table_element  - Cache table element object to add to root of tree of table elements
 */

OpenAjax.a11y.cache.THeadElement.prototype.addChild = function (child_object) {

  if (child_object) {
    this.child_cache_elements.push(child_object);
  }

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.THeadElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.THeadElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.THeadElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.THeadElement.prototype.getAttributes = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var attributes = this.dom_element.getAttributes();

  attributes.push(cache_nls.getLabelAndValueNLS('role', this.dom_element.role));

  return attributes;
};



/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.THeadElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style items
 */

OpenAjax.a11y.cache.THeadElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.THeadElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @return {Array} Returns a array of cache properties
 */

OpenAjax.a11y.cache.THeadElement.prototype.getCacheProperties = function () {

  var properties = this.dom_element.getCacheProperties();

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.THeadElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.THeadElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};


/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.THeadElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event information
 */

OpenAjax.a11y.cache.THeadElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.THeadElement
 *
 * @desc Creates a text string representation of the thead element object
 *
 * @return {String} Returns a text string representation of the thead element object
 */
 OpenAjax.a11y.cache.THeadElement.prototype.toString = function () {
   var str = "thead: " + this.row_count + " rows";

   if (this.row_count === 1 ) str =  "thead: " + this.row_count + " row";

   return str;
 };


/* ---------------------------------------------------------------- */
/*                         TBodyElement Object                      */
/* ---------------------------------------------------------------- */

/**
 * @constructor TBodyElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a tbody element object which contains
 *       information obout a tbody element in a table
 *
 * @param  {DOMElement}  dom_element  - Reference to the dom element object associated with tbody element
 * @param  {TableInfo}   table_info   - Information about the current table relationships in the DOM
 *
 * @property  {DOMElement}  dom_element  - Reference to the dom element object associated with tbody element
 * @property  {String}      cache_id     - String that uniquely identifies the cache element object in the cache
 *
 * @property  {Array}         child_cache_elements  - Array of table cache elements for the tree representation of the table
 * @property  {TableElement}  parent_table_element  - Reference to the table element object that contatins the tbody element
 *
 * @property  {Number}  type                 - Constant indicating the type of table cache element object
 *
 * @property  {Number}  row_count            - Number of table rows contained in the childresn of the tbody element
 */

OpenAjax.a11y.cache.TBodyElement = function (dom_element, table_info) {

  this.dom_element          = dom_element;
  this.child_cache_elements = [];
  this.parent_table_element = table_info.table_element;

  this.table_type = OpenAjax.a11y.TABLE.TBODY_ELEMENT;

  this.row_count = 0;

};

/**
 * @method addChild
 *
 * @memberOf OpenAjax.a11y.cache.TBodyElement
 *
 * @desc Adds a cache table element to the tree representation of the table in the cache
 *
 * @param  {TableElement | CaptionElement | THeadElement | TBodyElement | TableRowElement | TableCellElement }  table_element  - Cache table element object to add to root of tree of table elements
 */

OpenAjax.a11y.cache.TBodyElement.prototype.addChild = function (child_object) {

 if (child_object) {
  this.child_cache_elements.push(child_object);
 }

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.TBodyElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.TBodyElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.TBodyElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.TBodyElement.prototype.getAttributes = function () {
  var cache_nls = OpenAjax.a11y.nls.Cache;

  var attributes = this.dom_element.getAttributes();

  attributes.push(cache_nls.getLabelAndValueNLS('role', this.dom_element.role));

  return attributes;
};


/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.TBodyElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style items
 */

OpenAjax.a11y.cache.TBodyElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.TBodyElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @return {Array} Returns a array of cache properties
 */

OpenAjax.a11y.cache.TBodyElement.prototype.getCacheProperties = function () {

  var properties = this.dom_element.getCacheProperties();

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.TBodyElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.TBodyElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};


/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.TBodyElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event information
 */

OpenAjax.a11y.cache.TBodyElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.TBodyElement
 *
 * @desc Creates a text string representation of the tbody element object
 *
 * @return {String} Returns a text string representation of the tbody element object
 */
 OpenAjax.a11y.cache.TBodyElement.prototype.toString = function () {
   var str = "tbody: " + this.row_count + " rows";

   if (this.row_count === 1 ) str =  "tbody: " + this.row_count + " row";

   return str;
 };


/* ---------------------------------------------------------------- */
/*                       TableRowElement Object                     */
/* ---------------------------------------------------------------- */

/**
 * @constructor TableRowElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a table row element object which contains
 *       information obout a tr element in a table
 *
 * @param  {DOMElement}  dom_element  - Reference to the dom element object associated with tr element
 * @param  {TableInfo}   table_info   - Information about the current table relationships in the DOM
 *
 * @property  {DOMElement}  dom_element  - Reference to the dom element object associated with tr element
 * @property  {String}      cache_id     - String that uniquely identifies the cache element object in the cache
 *
 * @property  {Array}         child_cache_elements  - Array of table cache elements for the tree representation of the table
 * @property  {TableElement}  parent_table_element  - Reference to the table element object that contatins the tr element
 *
 * @property  {Number}  type               - Constant indicating the type of table cache element object
 * @property  {String}  cache_id           - String that uniquely identifies the cache element in the DOMCache
 *
 * @property  {Number}  header_cell_count  - Number of header cells in the row
 * @property  {Number}  data_cell_count    - Number of data cells in the row
 */

OpenAjax.a11y.cache.TableRowElement = function (dom_element, table_info) {

  this.dom_element  = dom_element;
  this.cache_id     = "";

  this.child_cache_elements = [];
  this.parent_table_element = table_info.table_element;

  this.table_type = OpenAjax.a11y.TABLE.TR_ELEMENT;

  this.header_cell_count = 0;
  this.data_cell_count   = 0;

  var te = table_info.table_element;
  var de = dom_element;

  if (te && (te.table_role !== OpenAjax.a11y.TABLE_ROLE.LAYOUT)) {
    de.element_aria_info = OpenAjax.a11y.ariaInHTML.elementInfo['tr[table]'];
    de.implicit_role = de.element_aria_info.defaultRole;
  }


};

/**
 * @method addChild
 *
 * @memberOf OpenAjax.a11y.cache.TableRowElement
 *
 * @desc Adds a cache table element to the tree representation of the table in the table cache
 *
 * @param  {TableElement | CaptionElement | THeadElement | TBodyElement | TableRowElement | TableCellElement }  table_element  - Cache table element object to add to root of tree of table elements
 */

OpenAjax.a11y.cache.TableRowElement.prototype.addChild = function (child_object) {

 if (child_object) {
  this.child_cache_elements.push(child_object);
 }

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.TableRowElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.TableRowElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.TableRowElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.TableRowElement.prototype.getAttributes = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var attributes = this.dom_element.getAttributes();

  attributes.push(cache_nls.getLabelAndValueNLS('role', this.dom_element.role));

  return attributes;
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.TableRowElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style items
 */

OpenAjax.a11y.cache.TableRowElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.TableRowElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @return {Array} Returns a array of cache properties
 */

OpenAjax.a11y.cache.TableRowElement.prototype.getCacheProperties = function () {

  return this.dom_element.getCacheProperties();

};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.TableRowElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.TableRowElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};

/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.TableRowElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event information
 */

OpenAjax.a11y.cache.TableRowElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.TableRowElement
 *
 * @desc Creates a text string representation of the tr element object
 *
 * @return {String} Returns a text string representation of the tr element object
 */
 OpenAjax.a11y.cache.TableRowElement.prototype.toString = function () {

   var str =  "tr: ";

   if (this.header_cell_count && this.data_cell_count) {
     if (this.header_cell_count === 1) str += " 1 header cell and ";
     else str += this.header_cell_count + " header cells and ";

     if (this.data_cell_count === 1) str += " 1 data cell";
     else str += this.data_cell_count + " data cells";
   }
   else {
     if (this.header_cell_count) {
       if (this.header_cell_count === 1) str += " 1 header cell";
       else str += this.header_cell_count + " header cells";
     }
     else {
       if (this.data_cell_count) {
         if (this.data_cell_count === 1) str += " 1 data cell";
         else str += this.data_cell_count + " data cells";
       }
       else {
         str += " no table cells ";
       }
     }
   }

   return str;
 };


/* ---------------------------------------------------------------- */
/*                            TableCellElement                      */
/* ---------------------------------------------------------------- */

/**
 * @constructor TableCellElement
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Create a table cell element object which contains
 *       information obout a td or th element in a table
 *
 * @param  {DOMElement}  dom_element  - Reference to the dom element object associated with td or th element
 * @param  {TableInfo}   table_info   - Information about the current table relationships in the DOM
 *
 * @property  {DOMElement}  dom_element  - Reference to the dom element object associated with td or th element
 * @property  {String}      cache_id     - String that uniquely identifies the cache element object in the cache
 *
 * @property  {Array}            child_cache_elements  - Array of table cache elements for the tree representation of the table
 * @property  {TableElement}     parent_table_element  - Reference to the table element object that contatins the td or th element
 * @property  {TableRowElement}  parent_row_element    - Reference to the table element object that contatins the td or th element
 *
 * @property  {Number}  type               - Constant indicating the type of table cache element object
 *
 * @property  {String}  text_content          - Text content of the element including descendent element content
 * @property  {String}  scope                 - Value of the scope attribute
 * @property  {String}  headers               - Value of the headers attribute
 * @property  {Array}   headers_array         - Array of id values in the headers attribute
 * @property  {String}  header_content        - Text content of calculated headers
 * @property  {Number}  header_source         - How header content was calculated
 * @property  {Number}  number_of_header_ids  - Number of ids in the headers attribute
 *
 * @property  {Boolean} has_spans          - Value of the rowspan attribute
 * @property  {Number}  row_span           - Value of the rowspan attribute (Note: converted to Number)
 * @property  {Number}  column_span        - Value of the colspan attribute (Note: converted to Number)
 */

OpenAjax.a11y.cache.TableCellElement = function (dom_element, table_info) {

  var is_th;

  this.dom_element  = dom_element;
  this.cache_id     = "";

  this.parent_table_element = table_info.table_element;
  this.parent_row_element   = table_info.table_row_element;

  this.child_cache_elements = [];

  var text_content = dom_element.getText();
  this.text_content = text_content;
  if (typeof this.text_content === 'string') this.text_content_for_comparison = OpenAjax.a11y.util.normalizeSpace(text_content.toLowerCase());
  else this.text_content_for_comparison = "";

  this.has_content = false;

  if (this.text_content_for_comparison.length) this.has_content = true;

  this.table_type = OpenAjax.a11y.TABLE.TD_ELEMENT;

  is_th = dom_element.tag_name == 'th';
  this.scope = dom_element.node.getAttribute('scope');

  if (is_th) {
    this.table_type = OpenAjax.a11y.TABLE.TH_ELEMENT;
  }
  else {
    if (this.scope) {
      this.scope = this.scope.toLowerCase();

      if (this.scope == 'row' || this.scope == 'col') {
       this.table_type = OpenAjax.a11y.TABLE.TH_ELEMENT;
      }
    }
  }

  var te = table_info.table_element;
  var de = this.dom_element;

  if (te && (te.table_role !== OpenAjax.a11y.TABLE_ROLE.LAYOUT)) {
    if (is_th) {
      if (te.dom_element.role && ('grid'.indexOf(te.dom_element.role) >= 0)) {
        de.element_aria_info = OpenAjax.a11y.ariaInHTML.elementInfo['th[gridcell]'];
      } else {
        de.element_aria_info = OpenAjax.a11y.ariaInHTML.elementInfo['th[cell]'];
      }
    } else {
      if (te.dom_element.role && ('grid'.indexOf(te.dom_element.role) >= 0)) {
        de.element_aria_info = OpenAjax.a11y.ariaInHTML.elementInfo['td[gridcell]'];
      } else {
        de.element_aria_info = OpenAjax.a11y.ariaInHTML.elementInfo['td[cell]'];
      }
    }
    de.implicit_role = de.element_aria_info.defaultRole;
  }

  if (table_info.table_row_element) {
    if (this.table_type === OpenAjax.a11y.TABLE.TD_ELEMENT) {
      table_info.table_row_element.data_cell_count++;
    }
    else{
      table_info.table_row_element.header_cell_count++;
    }
  }

  this.headers = dom_element.node.getAttribute('headers');

  this.number_of_header_ids = 0;

  if (this.headers && this.headers.length > 0) {
    this.headers_array = this.headers.split(" ");

    this.number_of_header_ids = this.headers_array.length;
  }

  this.row_span   = dom_element.node.getAttribute('rowspan');

  if (typeof this.row_span === 'string') {
    this.has_spans = true;
    this.row_span   = parseInt(this.row_span,10);
  }
  else {
    this.row_span   = 1;
  }

  this.column_span   = dom_element.node.getAttribute('colspan');

  if (typeof this.column_span === 'string') {
    this.has_spans = true;
    this.column_span   = parseInt(this.column_span,10);
  } else {
    this.column_span   = 1;
  }

};


/**
 * @method addChild
 *
 * @memberOf OpenAjax.a11y.cache.TableCellElement
 *
 * @desc Adds a cache table element to the tree representation of the table in the cache
 *
 * @param  {TableElement | CaptionElement | THeadElement | TBodyElement | TableRowElement | TableCellElement }  table_element  - Cache table element object to add to root of tree of table elements
 */

OpenAjax.a11y.cache.TableCellElement.prototype.addChild = function (table_element) {

 if (table_element) {
  this.child_cache_elements.push(table_element);
 }

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.TableCellElement
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.TableCellElement.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.TableCellElement
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style items
 */

OpenAjax.a11y.cache.TableCellElement.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};


/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.TableCellElement
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.TableCellElement.prototype.getAttributes = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;
  var attributes = this.dom_element.getAttributes();

  cache_nls.addPropertyIfDefined(attributes, this, 'tag_name');
  cache_nls.addPropertyIfDefined(attributes, this, 'row_span');
  cache_nls.addPropertyIfDefined(attributes, this, 'column_span');
  cache_nls.addPropertyIfDefined(attributes, this, 'headers');
  cache_nls.addPropertyIfDefined(attributes, this, 'scope');
  cache_nls.addPropertyIfDefined(attributes, this, 'role');

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.TableCellElement
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @return {Array} Returns a array of cache properties
 */

OpenAjax.a11y.cache.TableCellElement.prototype.getCacheProperties = function () {

  var cache_nls = OpenAjax.a11y.nls.Cache;

  var properties = this.dom_element.getCacheProperties();

  cache_nls.addPropertyIfDefined(properties, this, 'table_type');
  cache_nls.addPropertyIfDefined(properties, this, 'header_content');
  cache_nls.addPropertyIfDefined(properties, this, 'header_source');
  cache_nls.addPropertyIfDefined(properties, this, 'text_content');

  this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.TableCellElement
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.TableCellElement.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};


/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.TableCellElement
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event information
 */

OpenAjax.a11y.cache.TableCellElement.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.TableCellElement
 *
 * @desc Creates a text string representation of the table cell element object
 *
 * @return {String} Returns a text string representation of the table cell element object
 */
OpenAjax.a11y.cache.TableCellElement.prototype.toString = function () {
  var text = this.dom_element.getText();
  var tag_name = this.dom_element.tag_name;

  if (this.parent_table_element.table_role >= OpenAjax.a11y.TABLE_ROLE.DATA) {

    if (text.length) {
      return tag_name + ": " + text;
    }
    else {
      return tag_name + ": empty cell";
    }
  }
  else {
    var str = tag_name + "(for layout) contains: ";

    var count = this.dom_element.getElementCount();

    if (count === 1) str += "1 element and ";
    else str += count + " elements and ";

    count = text.length;

    if (count === 1) str += "1 character";
    else str += count + " characters";

    return str;
  }
};

/* ---------------------------------------------------------------- */
/*                       PageElementLayout                               */
/* ---------------------------------------------------------------- */

/**
 * @constructor PageElementLayout
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a body element object used to hold information about a title element
 *
 * @param  {DOMelement}   dom_element      - The dom element object representing the heading element
 * @param  {MainElement}  parent_landmark  - This is always null since this is the root element
 *
 * @property  {DOMElement}   dom_element      - Reference to the dom element representing the optgroup element
 * @property  {String}       cache_id         - String that uniquely identifies the cache element object in the cache
 * @property  {Number}       document_order   - Ordinal position of the title and main cache items in the document to other title and main cache items
 *
 * @property  {Array}  child_cache_elements  - List of child cache title element, main landmarks and h1 heading element objects as part of cache title and main elements tree
 *
 * @property  {Boolean}  is_page_element  -  Boolean indicating the element is a page element
 *
 */

OpenAjax.a11y.cache.PageElementLayout = function (dom_element) {

  this.dom_element     = dom_element;
  this.cache_id        = "page_layout";
  this.document_order  = 0;
  this.is_page_element = true;

  this.child_cache_elements = []; // this is always empty for the body element

};

/**
 * @method addChildMainElement
 *
 * @memberOf OpenAjax.a11y.cache.PageElementLayout
 *
 * @desc Adds a main landmark  object to the tree of title and main elements
 *
 * @param {MainElement}  main_element  -  Main landmark element object to add
 */

OpenAjax.a11y.cache.PageElementLayout.prototype.addChildMainElement = function (main_element) {

  if (main_element) {
    this.child_cache_elements.push(main_element);
  }

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.PageElementLayout
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.PageElementLayout.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.PageElementLayout
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.PageElementLayout.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.PageElementLayout
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.PageElementLayout.prototype.getAttributes = function (unsorted) {

  var cache_nls = OpenAjax.a11y.nls.Cache;
  var attributes = this.dom_element.getAttributes();

  cache_nls.addPropertyIfDefined(attributes, this, 'role');

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.PageElementLayout
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.PageElementLayout.prototype.getCacheProperties = function (unsorted) {

  var properties = this.dom_element.getCacheProperties(unsorted);

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.PageElementLayout
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.PageElementLayout.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};



/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.PageElementLayout
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.PageElementLayout.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.PageElementLayout
 *
 * @desc Returns a text string representation of the title element
 *
 * @return {String} Returns string represention the title element object
 */

OpenAjax.a11y.cache.PageElementLayout.prototype.toString = function () {
  return "page";
};
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                            TextCache                            */
/* ---------------------------------------------------------------- */

/**
 * @constructor TextCache
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates cache object representing information related to text nodes in a document
 *
 * @param {DOMCache}   dom_cache   - Reference to the DOMCache object
 *
 * @property {DOMCache} dom_cache  - Reference to the DOMCache object
 *
 * @property {Boolean}  up_to_date - Boolean true if the cache has been creating using the current DOMElements, else false
 *                                   NOTE: This is a common property of all caches and is used when selectively build caches
 *                                         based on whether a rule needs the cache
 *
 * @property {Array}    text_nodes     - List of text nodes in the document
 * @property {Number}   length         - Number of image element objects in the list
 */

OpenAjax.a11y.cache.TextCache = function (dom_cache) {

  this.dom_cache = dom_cache;
  this.up_to_date = false;

  this.text_nodes = [];
  this.length = 0;

};

/**
 * @method addTextNode
 *
 * @memberOf OpenAjax.a11y.cache.TextCache
 *
 * @desc Adds a text node to the list of image elements and generates a cache id for the object.
 *
 * @param  {DOMText}  text_node  - text_node object to add
 *
 * @return {Number} Returns the length of the list of image element objects
 */

OpenAjax.a11y.cache.TextCache.prototype.addTextNode = function (text_node) {


  // item must exist and have the position property
  if (text_node) {

    var pe = text_node.parent_element;

    if (pe.tag_name !== 'script' && pe.tag_name !== 'style' &&  pe.tag_name !== 'object') {
      this.length = this.length + 1;
      text_node.document_order = this.length;
      this.text_nodes.push(text_node);
    }
  }

  return this.length;

};


/**
 * @deprecated getTextNodeByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.TextCache
 *
 * @desc Finds the the text node object with the matching cache id
 *
 * @param  {String}  cache_id  - Cache id of image element object
 *
 * @return {DOMText | null} Returns cache text node object if cache id is found, otherwise null
 */

OpenAjax.a11y.cache.TextCache.prototype.getTextNodeByCacheId = function (cache_id) {
  return this.getItemByCacheId(cache_id);
};

/**
 * @method getItemByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.TextCache
 *
 * @desc Finds the the text node object with the matching cache id
 *
 * @param  {String}  cache_id  - Cache id of text node object
 *
 * @return {ImageElement | null} Returns cache text node object if cache id is found, otherwise null
 */

OpenAjax.a11y.cache.TextCache.prototype.getItemByCacheId = function (cache_id) {

  var i;
  var text_nodes_len = this.text_nodes.length;

  if (cache_id && cache_id.length) {
    for (i=0; i < text_nodes_len; i++) {
      if (this.text_nodes[i].cache_id == cache_id) {
        return this.text_nodes[i];
      }
    } // end loop
  }

 return null;
};


/**
 * @method emptyCache
 *
 * @memberOf OpenAjax.a11y.cache.TextCache
 *
 * @desc Resests the TextCache object properties and empties all the lists and arrays
 */

OpenAjax.a11y.cache.TextCache.prototype.emptyCache = function () {

  this.text_nodes.length = 0;
  this.up_to_date = false;

};

/**
 * @method updateCacheItems
 *
 * @memberOf OpenAjax.a11y.cache.TextCache
 *
 * @desc Updates the images cache object by checking to see if a dom element
 *          should be added to the cache
 *
 * @param  {DOMElement}   dom_element   - dom element object to check for inclusion in images cache
 */

OpenAjax.a11y.cache.TextCache.prototype.updateCacheItems = function (dom_element) {

  if (dom_element.type === Node.TEXT_NODE) {

//    OpenAjax.a11y.logger.debug("  ADDED TEXT: " + dom_element.text );

    this.addTextNode(dom_element);

  }

};

/**
 * @method traverseDOMElementsForTextNodes
 *
 * @memberOf OpenAjax.a11y.cache.TextCache
 *
 * @desc Traverses DOM Element objects in the tree to update the text cache
 *
 * @param  {DOMElement}  dom_element - dom element object to check for inclusion in images cache
 */

OpenAjax.a11y.cache.TextCache.prototype.traverseDOMElementsForTextNodes = function (dom_element) {

  if (!dom_element) return;

  if (dom_element.type == Node.ELEMENT_NODE) {

    for (var i = 0; i < dom_element.child_dom_elements.length; i++ ) {
      this.traverseDOMElementsForTextNodes(dom_element.child_dom_elements[i]);
    } // end loop
  }
  else {
     this.updateCacheItems(dom_element);
  }

};

/**
 * @method updateCache
 *
 * @memberOf OpenAjax.a11y.cache.TextCache
 *
 * @desc Traverses the DOMElements to update the text cache
 *       NOTE: This function is only used when the specialized caches
 *       are build as rules need them.  In this condition, if the rules
 *       dependent on the links cache are disabled, this cache would
 *       not be updated
 */

OpenAjax.a11y.cache.TextCache.prototype.updateCache = function () {
  var i;
  var children = this.dom_cache.element_cache.child_dom_elements;
  var children_len = children.length;

  for (i=0; i < children_len; i++) {
    this.traverseDOMElementsForTextNodes(children[i]);
  }

  this.up_to_date = true;
};

/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                            KeyboardFocus                             */
/* ---------------------------------------------------------------- */

/**
 * @constructor KeyboardFocus
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates cache object representing information related to links in a web page
 *
 * @param {DOMCache}   dom_cache   - Reference to the DOMCache object
 *
 * @property {DOMCache} dom_cache  - Reference to the DOMCache object
 * @property {Boolean}  up_to_date - Boolean true if the cache has been creating using the current DOMElements, else false
 *                                   NOTE: This is a common property of all caches and is used when selectively build caches
 *                                         based on whether a rule needs the cache
 *
 * @property {Object}   page_elements         - Cache element representing the page level results
 * @property {Array}    interactive_elements  - List of interactive element objects in the document
 */

OpenAjax.a11y.cache.KeyboardFocusCache = function (dom_cache) {

  this.dom_cache = dom_cache;
  this.up_to_date = false;
  this.page_element = null;
  this.interactive_elements = [];

};



/**
 * @method createKeyboardFocusCache
 *
 * @memberOf OpenAjax.a11y.cache.KeyboardFocusCache
 *
 * @desc Populates the keyboard focus cache from the link, controls and media caches
 */

OpenAjax.a11y.cache.KeyboardFocusCache.prototype.createKeyboardFocusCache = function () {

//  OpenAjax.a11y.logger.debug("[Keyboard Focus Cache]  Page Element: " + this.dom_cache.element_cache.getPageElement());

  this.page_element = new OpenAjax.a11y.cache.PageElementKeyboardFocus(this.dom_cache.element_cache.getPageElement());

  this.interactive_elements = this.dom_cache.links_cache.link_elements;
  this.interactive_elements = this.interactive_elements.concat(this.dom_cache.controls_cache.control_elements);
  this.interactive_elements = this.interactive_elements.concat(this.dom_cache.media_cache.object_elements);

};


/**
 * @method getItemByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.KeyboardFocusCache
 *
 * @desc Finds the the link element object with the matching cache id
 *
 * @param  {String }  cache_id  - Cache id of link element object
 *
 * @return {LinkElement} Returns cache link element object if cache id is found, otherwise null
 */

OpenAjax.a11y.cache.KeyboardFocusCache.prototype.getItemByCacheId = function (cache_id) {

  var i;

  var link_elements_len = this.link_elements.length;

  if (cache_id && cache_id.length) {
   for (i=0; i < link_elements_len; i++) {
     if (this.link_elements[i].cache_id == cache_id) {
       return this.link_elements[i];
     }
   } // end loop
 }

 return null;
};

/**
 * @method emptyCache
 *
 * @memberOf OpenAjax.a11y.cache.KeyboardFocusCache
 *
 * @desc Resests the KeyboardFocus object properties and empties all the lists and arrays
 */

OpenAjax.a11y.cache.KeyboardFocusCache.prototype.emptyCache = function () {

  this.interactive_elements = [];
  this.length = 0;
  this.up_to_date = false;

};


/* ---------------------------------------------------------------- */
/*                       PageElementKeyboardFocus                   */
/* ---------------------------------------------------------------- */

/**
 * @constructor PageElementKeyboardFocus
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a body element object used to hold information about a title element
 *
 * @param  {DOMelement}   dom_element      - The dom element object representing the page element
 */

OpenAjax.a11y.cache.PageElementKeyboardFocus = function (dom_element) {

  this.dom_element     = dom_element;

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.PageElementKeyboardFocus
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.PageElementKeyboardFocus.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.PageElementKeyboardFocus
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.PageElementKeyboardFocus.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.PageElementKeyboardFocus
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.PageElementKeyboardFocus.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.PageElementKeyboardFocus
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.PageElementKeyboardFocus.prototype.getCacheProperties = function (unsorted) {

  var properties = this.dom_element.getCacheProperties(unsorted);

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.PageElementKeyboardFocus
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.PageElementKeyboardFocus.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};



/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.PageElementKeyboardFocus
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.PageElementKeyboardFocus.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.PageElementKeyboardFocus
 *
 * @desc Returns a text string representation of the title element
 *
 * @return {String} Returns string represention the title element object
 */

OpenAjax.a11y.cache.PageElementKeyboardFocus.prototype.toString = function () {
  return "page";
};


/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                            TimingFlashing                             */
/* ---------------------------------------------------------------- */

/**
 * @constructor TimingFlashing
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates cache object representing information related to links in a web page
 *
 * @param {DOMCache}   dom_cache   - Reference to the DOMCache object
 *
 * @property {DOMCache} dom_cache  - Reference to the DOMCache object
 * @property {Boolean}  up_to_date - Boolean true if the cache has been creating using the current DOMElements, else false
 *                                   NOTE: This is a common property of all caches and is used when selectively build caches
 *                                         based on whether a rule needs the cache
 *
 * @property {Object}   page_elements             - Cache element representing the page level results
 * @property {Array}    timing_elements  - List of element objects related to moving, flashing, scrolling and auto updating content
 */

OpenAjax.a11y.cache.TimingFlashingCache = function (dom_cache) {

  this.dom_cache = dom_cache;
  this.up_to_date = false;
  this.page_element = null;
  this.timing_elements = [];

};



/**
 * @method createTimingFlashingCache
 *
 * @memberOf OpenAjax.a11y.cache.TimingFlashingCache
 *
 * @desc Populates the keyboard focus cache from the link, controls and media caches
 */

OpenAjax.a11y.cache.TimingFlashingCache.prototype.createTimingFlashingCache = function () {

//  OpenAjax.a11y.logger.debug("[Timing Cache] Page Element: " + this.dom_cache.element_cache.getPageElement());

  this.page_element = new OpenAjax.a11y.cache.PageElementTimingFlashing(this.dom_cache.element_cache.getPageElement());

  this.timing_elements = this.dom_cache.images_cache.image_elements;
  this.timing_elements = this.timing_elements.concat(this.dom_cache.images_cache.canvas_elements);
  this.timing_elements = this.timing_elements.concat(this.dom_cache.images_cache.svg_elements);
  this.timing_elements = this.timing_elements.concat(this.dom_cache.media_cache.media_elements);

};


/**
 * @method getItemByCacheId
 *
 * @memberOf OpenAjax.a11y.cache.TimingFlashingCache
 *
 * @desc Finds the the link element object with the matching cache id
 *
 * @param  {String }  cache_id  - Cache id of link element object
 *
 * @return {LinkElement} Returns cache link element object if cache id is found, otherwise null
 */

OpenAjax.a11y.cache.TimingFlashingCache.prototype.getItemByCacheId = function (cache_id) {

  var i;

  var link_elements_len = this.link_elements.length;

  if (cache_id && cache_id.length) {
   for (i=0; i < link_elements_len; i++) {
     if (this.link_elements[i].cache_id == cache_id) {
       return this.link_elements[i];
     }
   } // end loop
 }

 return null;
};

/**
 * @method emptyCache
 *
 * @memberOf OpenAjax.a11y.cache.TimingFlashingCache
 *
 * @desc Resests the TimingFlashing object properties and empties all the lists and arrays
 */

OpenAjax.a11y.cache.TimingFlashingCache.prototype.emptyCache = function () {

  this.interactive_elements = [];
  this.length = 0;
  this.up_to_date = false;

};


/* ---------------------------------------------------------------- */
/*                       PageElementTimingFlashing                   */
/* ---------------------------------------------------------------- */

/**
 * @constructor PageElementTimingFlashing
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @desc Creates a body element object used to hold information about a title element
 *
 * @param  {DOMelement}   dom_element      - The dom element object representing the page element
 */

OpenAjax.a11y.cache.PageElementTimingFlashing = function (dom_element) {

  this.dom_element     = dom_element;

};

/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.cache.PageElementTimingFlashing
 *
 * @desc Returns an array of node results in severity order
 *
 * @return {Array} Returns a array of node results
 */

OpenAjax.a11y.cache.PageElementTimingFlashing.prototype.getElementResults = function () {
  return this.dom_element.getElementResults();
};

/**
 * @method getStyle
 *
 * @memberOf OpenAjax.a11y.cache.PageElementTimingFlashing
 *
 * @desc Returns an array of style items
 *
 * @return {Array} Returns a array of style display objects
 */

OpenAjax.a11y.cache.PageElementTimingFlashing.prototype.getStyle = function () {

  return this.dom_element.getStyle();

};

/**
 * @method getAttributes
 *
 * @memberOf OpenAjax.a11y.cache.PageElementTimingFlashing
 *
 * @desc Returns an array of attributes for the element, sorted in alphabetical order
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of attribute display object
 */

OpenAjax.a11y.cache.PageElementTimingFlashing.prototype.getAttributes = function (unsorted) {

  var attributes = this.dom_element.getAttributes();

  if (!unsorted) this.dom_element.sortItems(attributes);

  return attributes;
};

/**
 * @method getCacheProperties
 *
 * @memberOf OpenAjax.a11y.cache.PageElementTimingFlashing
 *
 * @desc Returns an array of cache properties sorted by property name
 *
 * @param {Boolean}  unsorted  - If defined and true the results will NOT be sorted alphabetically
 *
 * @return {Array} Returns a array of cache property display object
 */

OpenAjax.a11y.cache.PageElementTimingFlashing.prototype.getCacheProperties = function (unsorted) {

  var properties = this.dom_element.getCacheProperties(unsorted);

  if (!unsorted) this.dom_element.sortItems(properties);

  return properties;
};

/**
 * @method getCachePropertyValue
 *
 * @memberOf OpenAjax.a11y.cache.PageElementTimingFlashing
 *
 * @desc Returns the value of a property
 *
 * @param {String}  property  - The property to retreive the value
 *
 * @return {String | Number} Returns the value of the property
 */

OpenAjax.a11y.cache.PageElementTimingFlashing.prototype.getCachePropertyValue = function (property) {

  if (typeof this[property] == 'undefined') {
    return this.dom_element.getCachePropertyValue(property);
  }

  return this[property];
};



/**
 * @method getEvents
 *
 * @memberOf OpenAjax.a11y.cache.PageElementTimingFlashing
 *
 * @desc Returns an array of events for the element, sorted in alphabetical order
 *
 * @return {Array} Returns a array of event item display objects
 */

OpenAjax.a11y.cache.PageElementTimingFlashing.prototype.getEvents = function () {

  return this.dom_element.getEvents();

};

/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.cache.PageElementTimingFlashing
 *
 * @desc Returns a text string representation of the title element
 *
 * @return {String} Returns string represention the title element object
 */

OpenAjax.a11y.cache.PageElementTimingFlashing.prototype.toString = function () {
  return "page";
};


  /*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                       ElementInformation                         */
/* ---------------------------------------------------------------- */

/**
 * @constructor ElementInformation
 *
 * @memberOf OpenAjax.a11y.cache
 *
 * @param  {Object}  dom_cache  -  DOMCache object used for evaluation
 *
 */

/**
 * @private
 * @constructor Internal Properties
 *
 */

OpenAjax.a11y.cache.ElementInformation = function () {

  // General page element counts and fram usage

  this.all_element_count    = 0;
  this.all_hidden_count     = 0;
  this.all_offscreen_count  = 0;

  this.frame_count      = 0;
  this.iframe_count     = 0;

  // Image counts

  this.all_images_count = 0;
  this.img_count        = 0;
  this.canvas_count     = 0;
  this.svg_count        = 0;
  this.figure_count     = 0;
  this.figcaption_count = 0;
  this.alt_attribute_count      = 0;
  this.longdesc_attribute_count = 0;

  // heading level counts

  this.all_headings_count = 0;
  this.h1_count           = 0;
  this.h2_count           = 0;
  this.h3_count           = 0;
  this.h4_count           = 0;
  this.h5_count           = 0;
  this.h6_count           = 0;

  // HTML5 Section Element counts

  this.all_sections_count = 0;
  this.address_count      = 0;
  this.article_count      = 0;
  this.aside_count        = 0;
  this.details_count      = 0;
  this.dialog_count       = 0;
  this.header_count       = 0;
  this.footer_count       = 0;
  this.main_count         = 0;
  this.nav_count          = 0;
  this.section_count      = 0;
  this.summary_count      = 0;

  // List element counts

  this.all_lists_count = 0;
  this.ul_count        = 0;
  this.ol_count        = 0;
  this.li_count        = 0;

  this.dl_count       = 0;
  this.dt_count       = 0;
  this.dd_count       = 0;

  this.all_links_count  = 0;
  this.a_count          = 0;
  this.area_count       = 0;

  // Table element counts

  this.all_tables_count  = 0;
  this.table_count       = 0;
  this.th_count          = 0;
  this.td_count          = 0;
  this.caption_count     = 0;
  this.summary_attribute_count    = 0;
  this.scope_attribute_count      = 0;
  this.headers_attribute_count    = 0;

  // Form control counts

  this.all_forms_count      = 0;
  this.input_button_count   = 0;
  this.input_checkbox_count = 0;
  this.input_color_count    = 0;
  this.input_date_count     = 0;
  this.input_datetime_count = 0;
  this.input_email_count    = 0;
  this.input_file_count     = 0;
  this.input_image_count    = 0;
  this.input_month_count    = 0;
  this.input_number_count   = 0;
  this.input_password_count = 0;
  this.input_radio_count    = 0;
  this.input_range_count    = 0;
  this.input_reset_count    = 0;
  this.input_search_count   = 0;
  this.input_submit_count   = 0;
  this.input_text_count     = 0;
  this.input_tel_count      = 0;
  this.input_time_count     = 0;
  this.input_url_count      = 0;
  this.input_week_count     = 0;

  this.autofocus_attribute_count   = 0;
  this.placeholder_attribute_count = 0;
  this.pattern_attribute_count     = 0;
  this.required_attribute_count    = 0;

  this.output_count    = 0;
  this.progress_count  = 0;
  this.meter_count     = 0;

  this.label_count     = 0;
  this.fieldset_count  = 0;
  this.legend_count    = 0;
  this.title_attribute_count    = 0;

  // media counts

  this.button_count      = 0;
  this.select_count      = 0;
  this.textarea_count    = 0;

  this.all_media_count  = 0;
  this.audio_count      = 0;
  this.embed_count      = 0;
  this.object_count     = 0;
  this.video_count      = 0;
  this.track_count      = 0;
  this.source_count     = 0;

  // ARIA Landmark counts

  this.all_landmarks_count      = 0;

  this.role_application_count   = 0;
  this.role_banner_count        = 0;
  this.role_complementary_count = 0;
  this.role_contentinfo_count   = 0;
  this.role_form_count          = 0;
  this.role_main_count          = 0;
  this.role_navigation_count    = 0;
  this.role_region_count        = 0;
  this.role_search_count        = 0;

  // ARIA Structure counts

  this.all_structures_count    = 0;

  this.role_article_count      = 0;
  this.role_directory_count    = 0;
  this.role_document_count     = 0;
  this.role_heading_count      = 0;
  this.role_math_count         = 0;
  this.role_note_count         = 0;
  this.role_presentation_count = 0;

  // ARIA Widget counts

  this.all_widgets_count   = 0;

  this.role_button_count   = 0;
  this.role_link_count     = 0;

  this.aria_describedby_count = 0;
  this.aria_describedat_count = 0;

  this.aria_labelledby_count  = 0;
  this.aria_label_count       = 0;

  this.aria_owns_count       = 0;
  this.aria_activedescendant_count = 0;
  this.aria_flowto_count     = 0;
  this.aria_controls_count   = 0;
  this.aria_hidden_count     = 0;

  // ARIA Live Region counts

  this.all_lives_count    = 0;

  this.aria_live_count    = 0;
  this.role_alert_count   = 0;
  this.role_log_count     = 0;
  this.role_status_count  = 0;

  // Event counts

  this.all_events_count      = 0;

  this.load_event_count      = 0;

  this.blur_event_count      = 0;
  this.focus_event_count     = 0;

  this.change_event_count    = 0;

  this.drag_events_count     = 0;

  this.click_event_count        = 0;
  this.double_click_event_count = 0;

  this.keyboard_events_count  = 0;
  this.mouse_events_count     = 0;
  this.touch_events_count     = 0;
  this.pointer_events_count   = 0;


};

/**
 * @method countElement
 *
 * @memberOf OpenAjax.a11y.cache.ElementInformation
 *
 * @desc Counts elements of interest
 *
 * @param  {Object}  dom_element  - DOM element object
 */

OpenAjax.a11y.cache.ElementInformation.prototype.countElement = function (dom_element) {

  var tag_name = dom_element.tag_name;
  var node = dom_element.node;
  var cs   = dom_element.computed_style;

  this.all_element_count++;

  if (cs.is_visible_onscreen === OpenAjax.a11y.VISIBILITY.HIDDEN) {
    this.all_hidden_count++;
    if (cs.is_visible_to_at === OpenAjax.a11y.VISIBILITY.VISIBLE) {
      this.all_offscreen_count++;
    }
  }

  switch (tag_name) {

  case 'frame':
    this.frame_count++;
    break;

  case 'iframe':
    this.iframe_count++;
    break;

  case 'img':
    this.img_count++;
    this.all_images_count++;

    if (dom_element.has_alt)      this.alt_attribute_count++;
    if (dom_element.has_longdesc) this.longdesc_attribute_count++;

    break;

  case 'canvas':
    this.canvas_count++;
    this.all_images_count++;
    break;

  case 'svg':
    this.svg_count++;
    this.all_images_count++;
    break;

  case 'figure':
    this.figure_count++;
    this.all_images_count++;
    break;

  case 'figcaption':
    this.figcaption_count++;
    this.all_images_count++;
    break;

  case 'h1':
    this.h1_count++;
    this.all_headings_count++;
    break;

  case 'h2':
    this.h2_count++;
    this.all_headings_count++;
    break;

  case 'h3':
    this.h3_count++;
    this.all_headings_count++;
    break;

  case 'h4':
    this.h4_count++;
    this.all_headings_count++;
    break;

  case 'h5':
    this.h5_count++;
    this.all_headings_count++;
    break;

  case 'h6':
    this.h6_count++;
    this.all_headings_count++;
    break;

  case 'header':
    this.header_count++;
    this.all_sections_count++;
    break;

  case 'footer':
    this.footer_count++;
    this.all_sections_count++;
    break;

  case 'section':
    this.section_count++;
    this.all_sections_count++;
    break;

  case 'address':
    this.address_count++;
    this.all_sections_count++;
    break;

  case 'article':
    this.article_count++;
    this.all_sections_count++;
    break;

  case 'aside':
    this.aside_count++;
    this.all_sections_count++;
    break;

  case 'details':
    this.details_count++;
    this.all_sections_count++;
    break;

  case 'dialog':
    this.dialog_count++;
    this.all_sections_count++;
    break;

  case 'summary':
    this.summary_count++;
    this.all_sections_count++;
    break;

  case 'main':
    this.main_count++;
    this.all_sections_count++;
    break;

  case 'nav':
    this.nav_count++;
    this.all_sections_count++;
    break;

  case 'ul':
    this.ul_count++;
    this.all_lists_count++;
    break;

  case 'ol':
    this.ol_count++;
    this.all_lists_count++;
    break;

  case 'li':
    this.li_count ++;
    this.all_lists_count++;
    break;

  case 'dl':
    this.dl_count++;
    this.all_lists_count++;
    break;

  case 'dt':
    this.dt_count++;
    this.all_lists_count++;
    break;

  case 'dd':
    this.dd_count++;
    this.all_lists_count++;
    break;

  case 'a':
    this.a_count  ++;
    this.all_links_count++;
    break;

  case 'area':
    this.area_count       = 0;
    this.all_links_count++;
    break;

  case 'table':
    this.table_count++;
    this.all_tables_count++;

    if (dom_element.has_summary) this.summary_attribute_count++;

    break;

  case 'th':
  case 'td':
    if (tag_name == 'th') this.th_count ++;
    else this.td_count ++;

    this.all_tables_count++;

    if (dom_element.has_scope)   this.scope_attribute_count++;
    if (dom_element.has_headers) this.headers_attribute_count++;

    break;

  case 'caption':
    this.caption_count++;
    this.all_tables_count++;
    break;

  case 'input':

    var type = dom_element.node.getAttribute('type');

    if (dom_element.has_autofocus)   this.autofocus_attribute_count++;
    if (dom_element.has_required)    this.required_attribute_count++;
    if (dom_element.has_pattern)     this.pattern_attribute_count++;
    if (dom_element.has_placeholder) this.placeholder_attribute_count++;
    if (dom_element.has_title)       this.title_attribute_count++;

    switch (type) {

    case 'checkbox':
      this.input_checkbox_count++;
      this.all_forms_count++;
      break;

    case 'radio':
      this.input_radio_count++;
      this.all_forms_count++;
      break;

    case 'button':
      this.input_button_count++;
      this.all_forms_count++;
      break;

    case 'color':
      this.input_color_count++;
      this.all_forms_count++;
      break;

    case 'date':
      this.input_date_count++;
      this.all_forms_count++;
      break;

    case 'datetime':
      this.input_datetime_count++;
      this.all_forms_count++;
      break;

    case 'email':
      this.input_email_count++;
      this.all_forms_count++;
      break;

    case 'file':
      this.input_file_count++;
      this.all_forms_count++;
      break;

    case 'image':
      this.input_image_count++;
      this.all_forms_count++;
      break;

    case 'month':
      this.input_month_count++;
      this.all_forms_count++;
      break;

    case 'number':
      this.input_number_count++;
      this.all_forms_count++;
      break;

    case 'password':
      this.input_password_count++;
      this.all_forms_count++;
      break;

    case 'range':
      this.input_range_count++;
      this.all_forms_count++;
      if (node.required) this.required_attribute_count++;
      break;

    case 'reset':
      this.input_reset_count++;
      this.all_forms_count++;
      break;

    case 'search':
      this.input_search_count++;
      this.all_forms_count++;
      break;

    case 'submit':
      this.input_submit_count++;
      this.all_forms_count++;
      break;

    case 'tel':
      this.input_tel_count++;
      this.all_forms_count++;
      break;

    case 'text':
      this.input_text_count++;
      this.all_forms_count++;
      break;

    case 'time':
      this.input_time_count++;
      this.all_forms_count++;
      break;

    case 'url':
      this.input_url_count++;
      this.all_forms_count++;
      break;

    case 'week':
      this.input_week_count ++;
      this.all_forms_count++;
      break;

    default:
      break;
   }
   break;

  case 'output':
    this.output_count++;
    this.all_forms_count++;
    if (dom_element.has_title)   this.title_attribute_count++;
    break;

  case 'progress':
    this.progress_count++;
    this.all_forms_count++;
    if (dom_element.has_title)   this.title_attribute_count++;
    break;

  case 'meter':
    this.meter_count++;
    this.all_forms_count++;
    if (dom_element.has_title)   this.title_attribute_count++;
    break;

  case 'label':
    this.label_count++;
    this.all_forms_count++;
    break;

  case 'fieldset':
    this.fieldset_count++;
    this.all_forms_count++;
    break;

  case 'legend':
    this.legend_count++;
    this.all_forms_count++;
    break;

  case 'button':
    this.button_count++;
    this.all_forms_count++;
    if (dom_element.has_title)   this.title_attribute_count++;
    break;

  case 'select':
    this.select_count++;
    this.all_forms_count++;
    if (dom_element.has_autofocus)   this.autofocus_attribute_count++;
    if (dom_element.has_required)    this.required_attribute_count++;
    if (dom_element.has_pattern)     this.pattern_attribute_count++;
    if (dom_element.has_placeholder) this.placeholder_attribute_count++;
    if (dom_element.has_title)       this.title_attribute_count++;
    break;

  case 'textarea':
    this.textarea_count++;
    this.all_forms_count++;
    if (dom_element.has_autofocus)   this.autofocus_attribute_count++;
    if (dom_element.has_required)    this.required_attribute_count++;
    if (dom_element.has_pattern)     this.pattern_attribute_count++;
    if (dom_element.has_placeholder) this.placeholder_attribute_count++;
    if (dom_element.has_title)       this.title_attribute_count++;

    break;

  // Media elements

  case 'audio':
    this.audio_count++;
    this.all_media_count++;
    break;

  case 'embed':
    this.embed_count++;
    this.all_media_count++;
    break;

  case 'object':
    this.object_count++;
    this.all_media_count++;
    break;

  case 'video':
    this.video_count++;
    this.all_media_count++;
    break;

  case 'track':
    this.track_count++;
    this.all_media_count++;
    break;

  case 'source':
    this.source_count++;
    this.all_media_count++;
    break;

  default:
    break;

  }


  if (dom_element.has_role) {

    var role = dom_element.role;

    switch (role) {

      // Landmark roles

      case 'application':
        this.role_banner_count++;
        this.all_landmarks_count++;
        break;

      case 'banner':
        this.role_banner_count++;
        this.all_landmarks_count++;
        break;

      case 'complementary':
        this.role_complementary_count++;
        this.all_landmarks_count++;
        break;

      case 'contentinfo':
        this.role_contentinfo_count++;
        this.all_landmarks_count++;
        break;

      case 'form':
        this.role_form_count++;
        this.all_landmarks_count++;
        break;

      case 'main':
        this.role_main_count++;
        this.all_landmarks_count++;
        break;

      case 'navigation':
        this.role_navigation_count++;
        this.all_landmarks_count++;
        break;

      case 'region':
        this.role_region_count++;
        this.all_landmarks_count++;
        break;

      case 'search':
        this.role_search_count++;
        this.all_landmarks_count++;
        break;

      // Structure roles

      case 'article':
        this.role_article_count++;
        this.all_structures_count++;
        break;

      case 'directory':
        this.role_directory_count++;
        this.all_structures_count++;
        break;

      case 'document':
        this.role_document_count++;
        this.all_structures_count++;
        break;

      case 'heading':
        this.role_heading_count++;
        this.all_structures_count++;
        break;

      case 'math':
        this.role_math_count++;
        this.all_structures_count++;
        break;

      case 'note':
        this.role_note_count++;
        this.all_structures_count++;
        break;

      case 'none':
      case 'presentation':
        this.role_presentation_count++;
        this.all_structures_count++;
        break;

      // Live region roles

      case 'alert':
        this.role_alert_count++;
        this.all_lives_count++;
        break;

      case 'log':
        this.role_log_count++;
        this.all_lives_count++;
        break;

      case 'status':
        this.role_status_count++;
        this.all_lives_count++;
        break;

      // Widget roles

      case 'button':
        this.role_button_count++;
        this.all_widgets_count++;
        break;

      case 'link':
        this.role_link_count++;
        this.all_widgets_count++;
        break;

      default:
        this.all_widgets_count++;
        break;
    }

  }

  // Check for ARIA attribute related content

  if (dom_element.has_aria_describedby) this.aria_describedby_count++;
  if (dom_element.has_aria_describedat) this.aria_describedat_count++;

  if (dom_element.has_aria_labelledby) this.aria_labelledby_count++;
  if (dom_element.has_aria_label)      this.aria_label_count++;

  if (dom_element.has_aria_owns)             this.aria_owns_count++;
  if (dom_element.has_aria_activedescendant) this.aria_activedescendant_count++;
  if (dom_element.has_aria_flowto)           this.aria_flowto_count++;
  if (dom_element.has_aria_controls)         this.aria_controls_count++;
  if (dom_element.has_aria_hidden)           this.aria_hidden_count++;

  if (dom_element.has_aria_live) {
    this.aria_live_count++;
    this.all_lives_count++;
  }

  // Check for events

  var events = dom_element.events;

  if (events.has_blur)  {
    this.blur_event_count++;
    this.all_events_count++;
  }

  if (events.has_change)  {
    this.change_event_count++;
    this.all_events_count++;
  }

  if (events.has_click)  {
    this.click_event_count++;
    this.all_events_count++;
  }

  if (events.has_double_click)  {
    this.double_click_event_count++;
    this.all_events_count++;
  }

  if (events.has_focus)  {
    this.focus_event_count++;
    this.all_events_count++;
  }

  if (events.has_load)  {
    this.load_event_count++;
    this.all_events_count++;
  }

  if (events.has_key_down ||
      events.has_key_press||
      events.has_key_up) {
    this.keyboard_events_count++;
    this.all_events_count++;
  }

  if (events.has_mouse_down  ||
      events.has_mouse_up    ||
      events.has_mouse_move  ||
      events.has_mouse_out   ||
      events.has_mouse_over  ||
      events.has_mouse_enter ||
      events.has_mouse_leave) {
    this.mouse_events_count++;
    this.all_events_count++;
  }

  if (events.has_drag ||
      events.has_drag_end||
      events.has_drag_enter ||
      events.has_drag_leave ||
      events.has_drag_over ||
      events.has_drag_start ||
      events.has_drop) {
    this.drag_events_count++;
    this.all_events_count++;
  }

  if (events.has_pointer_up ||
      events.has_pointer_cancel ||
      events.has_pointer_move ||
      events.has_pointer_over ||
      events.has_pointer_out ||
      events.has_pointer_enter ||
      events.has_pointer_leave) {
    this.pointer_events_count++;
    this.all_events_count++;
  }

  if (events.has_touch_start ||
      events.has_touch_end ||
      events.has_touch_leave ||
      events.has_touch_move ||
      events.has_touch_cancel ) {
    this.touch_events_count++;
    this.all_events_count++;
  }

};

/**
 * @method toJSON
 *
 * @memberOf OpenAjax.a11y.cache.ElementInformation
 *
 * @desc Creates a string representing the element information on a web page in a JSON format
 *
 * @param  {Boolean}  add_comma  - if true add comma to end of JSON object
 * @param  {String}   prefix     - Optional string of prefix characters (e.g. typically spaces)
 *
 * @return {String} Returns a string in JSON format
 */

OpenAjax.a11y.cache.ElementInformation.prototype.toJSON = function (add_comma, prefix) {

  if (typeof add_comma !== 'boolean') add_comma = false;
  if (typeof prefix    !== 'string')  prefix = "";

  var json = "";

  json += prefix + "\"markup_information\": {\n";

  json += prefix + "  \"summary\": {\n";
  json += prefix + "    \"all_element_count\"    : " + this.all_element_count   + ",\n";
  json += prefix + "    \"all_hidden_count\"     : " + this.all_hidden_count    + ",\n";
  json += prefix + "    \"all_offscreen_count\"  : " + this.all_offscreen_count + ",\n\n";

  json += prefix + "    \"frame_count\"          : " + this.frame_count  + ",\n";
  json += prefix + "    \"iframe_count\"         : " + this.iframe_count + "\n";
  json += prefix + "  },\n";

  json += prefix + "  \"images\": {\n";
  json += prefix + "    \"all_images_count\"     : " + this.all_images_count + ",\n\n";

  json += prefix + "    \"img_count\"            : " + this.img_count        + ",\n";
  json += prefix + "    \"canvas_count\"         : " + this.canvas_count     + ",\n";
  json += prefix + "    \"svg_count\"            : " + this.canvas_count     + ",\n";
  json += prefix + "    \"figure_count\"         : " + this.figure_count     + ",\n";
  json += prefix + "    \"figcaption_count\"     : " + this.figcaption_count + ",\n\n";

  json += prefix + "    \"alt_attribute_count\"      : " + this.alt_attribute_count      + ",\n";
  json += prefix + "    \"longdesc_attribute_count\" : " + this.longdesc_attribute_count + "\n";
  json += prefix + "  },\n";

  json += prefix + "  \"headings\": {\n";
  json += prefix + "    \"all_headings_count\"   : " + this.all_headings_count + ",\n\n";

  json += prefix + "    \"h1_count\"             : " + this.h1_count + ",\n";
  json += prefix + "    \"h2_count\"             : " + this.h2_count + ",\n";
  json += prefix + "    \"h3_count\"             : " + this.h3_count + ",\n";
  json += prefix + "    \"h4_count\"             : " + this.h4_count + ",\n";
  json += prefix + "    \"h5_count\"             : " + this.h5_count + ",\n";
  json += prefix + "    \"h6_count\"             : " + this.h6_count + "\n";
  json += prefix + "  },\n";

  json += prefix + "  \"sections\": {\n";
  json += prefix + "    \"all_sections_count\"   : " + this.all_sections_count + ",\n\n";

  json += prefix + "    \"address_count\"        : " + this.address_count + ",\n";
  json += prefix + "    \"article_count\"        : " + this.article_count + ",\n";
  json += prefix + "    \"aside_count\"          : " + this.aside_count   + ",\n";
  json += prefix + "    \"details_count\"        : " + this.details_count + ",\n";
  json += prefix + "    \"dialog_count\"         : " + this.dialog_count  + ",\n";
  json += prefix + "    \"footer_count\"         : " + this.footer_count  + ",\n";
  json += prefix + "    \"header_count\"         : " + this.header_count  + ",\n";
  json += prefix + "    \"main_count\"           : " + this.main_count    + ",\n";
  json += prefix + "    \"nav_count\"            : " + this.nav_count     + ",\n";
  json += prefix + "    \"section_count\"        : " + this.section_count + ",\n";
  json += prefix + "    \"summary_count\"        : " + this.summary_count + "\n";
  json += prefix + "  },\n";

  json += prefix + "  \"lists\": {\n";
  json += prefix + "    \"all_lists_count\"      : " + this.all_lists_count + ",\n\n";

  json += prefix + "    \"ul_count\"             : " + this.ul_count + ",\n";
  json += prefix + "    \"ol_count\"             : " + this.ol_count + ",\n";
  json += prefix + "    \"li_count\"             : " + this.li_count + ",\n\n";

  json += prefix + "    \"dl_count\"             : " + this.dl_count + ",\n";
  json += prefix + "    \"dt_count\"             : " + this.dt_count + ",\n";
  json += prefix + "    \"dd_count\"             : " + this.dd_count + "\n";
  json += prefix + "  },\n";

  json += prefix + "  \"links\": {\n";
  json += prefix + "    \"all_links_count\"      : " + this.all_links_count + ",\n\n";

  json += prefix + "    \"a_count\"              : " + this.a_count    + ",\n";
  json += prefix + "    \"area_count\"           : " + this.area_count + "\n";
  json += prefix + "  },\n";

  json += prefix + "  \"tables\": {\n";
  json += prefix + "    \"all_tables_count\"        : " + this.all_tables_count        + ",\n\n";

  json += prefix + "    \"table_count\"             : " + this.table_count             + ",\n";
  json += prefix + "    \"th_count\"                : " + this.th_count                + ",\n";
  json += prefix + "    \"td_count\"                : " + this.td_count                + ",\n";
  json += prefix + "    \"caption_count\"           : " + this.caption_count           + ",\n";
  json += prefix + "    \"summary_attribute_count\" : " + this.summary_attribute_count + ",\n";
  json += prefix + "    \"scope_attribute_count\"   : " + this.scope_attribute_count   + ",\n";
  json += prefix + "    \"headers_attribute_count\" : " + this.headers_attribute_count + "\n";
  json += prefix + "  },\n";

  json += prefix + "  \"forms\": {\n";
  json += prefix + "    \"all_forms_count\"      : " + this.all_forms_count      + ",\n\n";

  json += prefix + "    \"input_button_count\"   : " + this.input_button_count   + ",\n";
  json += prefix + "    \"input_checkbox_count\" : " + this.input_checkbox_count + ",\n";
  json += prefix + "    \"input_color_count\"    : " + this.input_color_count    + ",\n";
  json += prefix + "    \"input_date_count\"     : " + this.input_date_count     + ",\n";
  json += prefix + "    \"input_datetime_count\" : " + this.input_datetime_count + ",\n";
  json += prefix + "    \"input_email_count\"    : " + this.input_email_count    + ",\n";
  json += prefix + "    \"input_file_count\"     : " + this.input_file_count     + ",\n";
  json += prefix + "    \"input_image_count\"    : " + this.input_image_count    + ",\n";
  json += prefix + "    \"input_month_count\"    : " + this.input_month_count    + ",\n";
  json += prefix + "    \"input_number_count\"   : " + this.input_number_count   + ",\n";
  json += prefix + "    \"input_password_count\" : " + this.input_password_count + ",\n";
  json += prefix + "    \"input_radio_count\"    : " + this.input_radio_count    + ",\n";
  json += prefix + "    \"input_range_count\"    : " + this.input_range_count    + ",\n";
  json += prefix + "    \"input_reset_count\"    : " + this.input_reset_count    + ",\n";
  json += prefix + "    \"input_search_count\"   : " + this.input_search_count   + ",\n";
  json += prefix + "    \"input_submit_count\"   : " + this.input_submit_count   + ",\n";
  json += prefix + "    \"input_tel_count\"      : " + this.input_tel_count      + ",\n";
  json += prefix + "    \"input_text_count\"     : " + this.input_text_count     + ",\n";
  json += prefix + "    \"input_time_count\"     : " + this.input_time_count     + ",\n";
  json += prefix + "    \"input_url_count\"      : " + this.input_url_count      + ",\n";
  json += prefix + "    \"input_week_count\"     : " + this.input_week_count     + ",\n\n";

  json += prefix + "    \"autofocus_attribute_count\"   : " + this.autofocus_attribute_count   + ",\n";
  json += prefix + "    \"placeholder_attribute_count\" : " + this.placeholder_attribute_count + ",\n";
  json += prefix + "    \"pattern_attribute_count\"     : " + this.pattern_attribute_count     + ",\n";
  json += prefix + "    \"required_attribute_count\"    : " + this.required_attribute_count    + ",\n\n";

  json += prefix + "    \"output_count\"         : " + this.output_count   + ",\n";
  json += prefix + "    \"progress_count\"       : " + this.progress_count + ",\n";
  json += prefix + "    \"meter_count\"          : " + this.meter_count    + ",\n\n";

  json += prefix + "    \"fieldset_count\"        : " + this.fieldset_count        + ",\n";
  json += prefix + "    \"label_count\"           : " + this.label_count           + ",\n";
  json += prefix + "    \"legend_count\"          : " + this.legend_count          + ",\n";
  json += prefix + "    \"title_attribute_count\" : " + this.title_attribute_count + ",\n\n";

  json += prefix + "    \"button_count\"         : " + this.button_count   + ",\n";
  json += prefix + "    \"select_count\"         : " + this.select_count   + ",\n";
  json += prefix + "    \"textarea_count\"       : " + this.textarea_count + "\n";
  json += prefix + "  },\n";

  json += prefix + "  \"media\": {\n";
  json += prefix + "    \"all_media_count\"      : " + this.all_media_count + ",\n\n";
  json += prefix + "    \"audio_count\"          : " + this.audio_count     + ",\n";
  json += prefix + "    \"embed_count\"          : " + this.embed_count     + ",\n";
  json += prefix + "    \"object_count\"         : " + this.object_count    + ",\n";
  json += prefix + "    \"video_count\"          : " + this.video_count     + ",\n";
  json += prefix + "    \"source_count\"         : " + this.source_count    + ",\n";
  json += prefix + "    \"track_count\"          : " + this.track_count     + "\n";
  json += prefix + "  },\n";

  json += prefix + "  \"landmarks\": {\n";
  json += prefix + "    \"all_landmarks_count\"       : " + this.all_landmarks_count      + ",\n\n";
  json += prefix + "    \"role_application_count\"    : " + this.role_application_count   + ",\n";
  json += prefix + "    \"role_banner_count\"         : " + this.role_banner_count        + ",\n";
  json += prefix + "    \"role_complementary_count\"  : " + this.role_complementary_count + ",\n";
  json += prefix + "    \"role_contentinfo_count\"    : " + this.role_contentinfo_count   + ",\n";
  json += prefix + "    \"role_form_count\"           : " + this.role_form_count          + ",\n";
  json += prefix + "    \"role_main_count\"           : " + this.role_main_count          + ",\n";
  json += prefix + "    \"role_navigation_count\"     : " + this.role_navigation_count    + ",\n";
  json += prefix + "    \"role_region_count\"         : " + this.role_region_count        + ",\n";
  json += prefix + "    \"role_search_count\"         : " + this.role_search_count        + "\n";
  json += prefix + "  },\n";

  json += prefix + "  \"structures\": {\n";
  json += prefix + "    \"all_structures_count\"      : " + this.all_structures_count    + ",\n\n";
  json += prefix + "    \"role_article_count\"        : " + this.role_article_count      + ",\n";
  json += prefix + "    \"role_directory_count\"      : " + this.role_directory_count    + ",\n";
  json += prefix + "    \"role_document_count\"       : " + this.role_document_count     + ",\n";
  json += prefix + "    \"role_heading_count\"        : " + this.role_heading_count      + ",\n";
  json += prefix + "    \"role_math_count\"           : " + this.role_math_count         + ",\n";
  json += prefix + "    \"role_note_count\"           : " + this.role_note_count         + ",\n";
  json += prefix + "    \"role_presentation_count\"   : " + this.role_presentation_count + "\n";
  json += prefix + "  },\n";

  json += prefix + "  \"widgets\": {\n";
  json += prefix + "    \"all_widgets_count\"           : " + this.all_widgets_count + ",\n\n";
  json += prefix + "    \"role_button_count\"           : " + this.role_button_count + ",\n";
  json += prefix + "    \"role_link_count\"             : " + this.role_link_count + ",\n";
  json += prefix + "    \"aria_describedby_count\"      : " + this.aria_describedby_count + ",\n";
  json += prefix + "    \"aria_describedat_count\"      : " + this.aria_describedat_count + ",\n";
  json += prefix + "    \"aria_labelledby_count\"       : " + this.aria_labelledby_count + ",\n";
  json += prefix + "    \"aria_label_count\"            : " + this.aria_label_count + ",\n";
  json += prefix + "    \"aria_owns_count\"             : " + this.aria_owns_count + ",\n";
  json += prefix + "    \"aria_activedescendant_count\" : " + this.aria_activedescendant_count + ",\n";
  json += prefix + "    \"aria_flowto_count\"           : " + this.aria_flowto_count + ",\n";
  json += prefix + "    \"aria_controls_count\"         : " + this.aria_controls_count + ",\n";
  json += prefix + "    \"aria_hidden_count\"           : " + this.aria_hidden_count + "\n";
  json += prefix + "  },\n";

  json += prefix + "  \"lives\": {\n";
  json += prefix + "    \"all_lives_count\"       : " + this.all_lives_count   + ",\n\n";
  json += prefix + "    \"aria_live_count\"       : " + this.aria_live_count   + ",\n";
  json += prefix + "    \"role_alert_count\"      : " + this.role_alert_count  + ",\n";
  json += prefix + "    \"role_log_count\"        : " + this.role_log_count    + ",\n";
  json += prefix + "    \"role_status_count\"     : " + this.role_status_count + "\n";
  json += prefix + "  },\n";

  json += prefix + "  \"events\": {\n";
  json += prefix + "    \"all_events_count\"         : " + this.all_events_count         + ",\n\n";
  json += prefix + "    \"blur_event_count\"         : " + this.blur_event_count         + ",\n";
  json += prefix + "    \"focus_event_count\"        : " + this.focus_event_count        + ",\n";
  json += prefix + "    \"change_event_count\"       : " + this.change_event_count       + ",\n";
  json += prefix + "    \"click_event_count\"        : " + this.click_event_count        + ",\n";
  json += prefix + "    \"double_click_event_count\" : " + this.double_click_event_count + ",\n";
  json += prefix + "    \"drag_events_count\"        : " + this.drag_events_count        + ",\n";
  json += prefix + "    \"keyboard_events_count\"    : " + this.keyboard_events_count    + ",\n";
  json += prefix + "    \"load_event_count\"         : " + this.load_event_count         + ",\n";
  json += prefix + "    \"mouse_events_count\"       : " + this.mouse_events_count       + ",\n";
  json += prefix + "    \"pointer_events_count\"     : " + this.pointer_events_count     + ",\n";
  json += prefix + "    \"touch_events_count\"       : " + this.touch_events_count       + "\n";
  json += prefix + "  }\n";

  if (add_comma) json += prefix + "},\n";
  else json += prefix + "}\n";

  return json;

};
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/**
 * @namespace OpenAjax.a11y.info
 */

OpenAjax.a11y.info = OpenAjax.a11y.info || {};

/* ---------------------------------------------------------------- */
/*                             InformationalLinkInfo                */
/* ---------------------------------------------------------------- */

 /**
 * @constructor InformationalLinkInfo
 *
 * @memberOf OpenAjax.a11y.info
 *
 * @desc Constructor for an object that contains a title, url and description
 *       of some item of information associated with a rule or rule set
 *
 * @param  {Number}  rt - Constant indicating the type of information
 * @param  {String}  t  - String to be used as a title
 * @param  {String}  u  - A url to more information on the item
 *
 * @property  {String}  title        - Text describing the reference, the text
 *                                     can be used as the text of a link
 * @property  {String}  url          - A url to more information on the item, if no
 *                                     this property will be an empty string
 * @property  {String}  reference_type  - A number that identifies the type of information<br/>
 *                                        OpenAjax.a11y.REFERENCES.UNKNOWN<br/>
 *                                        OpenAjax.a11y.REFERENCES.SPECIFICATION<br/>
 *                                        OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE<br/>
 *                                        OpenAjax.a11y.REFERENCES.TECHNIQUE<br/>
 *                                        OpenAjax.a11y.REFERENCES.EXAMPLE<br/>
 *                                        OpenAjax.a11y.REFERENCES.MANUAL_CHECK<br/>
 *                                        OpenAjax.a11y.REFERENCES.AUTHORING_TOOL<br/>
 *                                        OpenAjax.a11y.REFERENCES.OTHER<br/>
 */

OpenAjax.a11y.info.InformationalLinkInfo = function (rt, t, u) {

  var reference_type = OpenAjax.a11y.REFERENCES.UNKNOWN;
  var title = "";
  var url   = "";

  if (typeof c === 'number') reference_type = rt;
  if (typeof t === 'string') title          = OpenAjax.a11y.util.transformElementMarkup(t);
  if (typeof u === 'string') url            = u;

  return {
     get reference_type  () { return reference_type; },
     get title           () { return title; },
     get url             () { return url;   },

     toString : function () { return title; }
  };

};



/* ---------------------------------------------------------------- */
/*                                RulesetInfo                       */
/* ---------------------------------------------------------------- */

/**
 * @constructor RulesetInfo
 *
 * @memberOf OpenAjax.a11y.info
 *
 * @desc Constructor for an object that contains a title, url and description
 *       for a group of rule results
 *
 * @param  {String}  i1   - ID of the ruleset
 * @param  {String}  i2   - Version of ruleset
 * @param  {String}  i3   - Date last updated
 *
 * @param  {String}  a1   - Author of ruleset
 * @param  {String}  a2  - Link to more information about the ruleset
 *
 * @param  {String}  d1    - A title that can be used as the text of a link
 * @param  {String}  d2    - An abbreviation
 * @param  {String}  d3   - A description that can be used as a tooltip
 * @param  {String}  d4    - A longer description of the item
 *
 * @param  {Number}  r1   - Number of required rules
 * @param  {Number}  r2   - Number of recommended rules
 *
 *
 * @property  {String}  title                 - A title for the ruleset
 * @property  {String}  description           - A detailed description of the ruleset
 * @property  {String}  abbrev                - A abbreviation of the ruleset title
 * @property  {String}  tooltip               - A short description of the ruleset
 * @property  {String}  author_name           - Name of the author of the ruleset
 * @property  {String}  author_url            - URL to more information about the author of the ruleset
 * @property  {String}  date                  - Date the ruleset was last updated
 * @property  {String}  url                   - URL to more information about the ruleset
 * @property  {Number}  num_rules_required    - Number of required rules in the ruleset
 * @property  {Number}  num_rules_recommended - Number of recommended rules in the ruleset
 * @property  {Number}  num_rules_total       - Total number rules in the ruleset
 */

OpenAjax.a11y.info.RulesetInfo = function (i1, i2, i3, a1, a2, d1, d2, d3, d4, d5, r1, r2) {

//  OpenAjax.a11y.logger.debug("[RulesetInfo] Constructor");

  var id       = i1;
  var version  = i2;
  var date     = i3;

  var author     = a1;
  var author_url = a2;

  var title           = OpenAjax.a11y.util.transformElementMarkup(d1);
  var abbrev          = d2;
  var tooltip         = OpenAjax.a11y.util.transformElementMarkup(d3);
  var description     = OpenAjax.a11y.util.transformElementMarkup(d4);
  var description_url = d5;

  var rules_required    = r1;
  var rules_recommended = r2;

  return {
     get title        () { return title;        },
     get description  () { return description;  },
     get tooltip      () { return tooltip;      },
     get abbrev       () { return abbrev;       },

     get author_name  () { return author;       },
     get author_url   () { return author_url;   },

     get date  () { return date;                },
     get url   () { return description_url;     },

     get num_rules_required    () { return rules_required;    },
     get num_rules_recommended () { return rules_recommended; },
     get num_rules_total       () { return rules_recommended + rules_required; },

     /* other APIs for consideration */

     get version           () { return version;    },

     toJSON : function(prefix) {

       var json = "";

       json += prefix + "  \"ruleset_id\"              : \"" + id      + "\",\n";
       json += prefix + "  \"ruleset_version\"         : \"" + version + "\",\n";
       json += prefix + "  \"ruleset_updated\"         : \"" + date    + "\",\n";

       json += prefix + "  \"ruleset_author_name\"     : " + JSON.stringify(author)      + ",\n";
       json += prefix + "  \"ruleset_author_url\"      : \"" + author_url                + "\",\n";

       json += prefix + "  \"ruleset_title\"           : " + JSON.stringify(title)       + ",\n";
       json += prefix + "  \"ruleset_abbrev\"          : " + JSON.stringify(abbrev)      + ",\n";
       json += prefix + "  \"ruleset_tooltip\"         : " + JSON.stringify(tooltip)     + ",\n";
       json += prefix + "  \"ruleset_description\"     : " + JSON.stringify(description) + ",\n";
       json += prefix + "  \"ruleset_description_url\" : \"" + description_url   + "\",\n";

       json += prefix + "  \"ruleset_required_rules\"    : " + rules_required    + ",\n";
       json += prefix + "  \"ruleset_recommended_rules\" : " + rules_recommended + ",\n";

       return json;
     },

     toString : function   () { return title;    }
  };

};


/* ---------------------------------------------------------------- */
/*                    SuccessCriterionInfo                */
/* ---------------------------------------------------------------- */

 /**
 * @constructor SuccessCriterionInfo
 *
 * @memberOf OpenAjax.a11y.info
 *
 * @desc Constructor for an object that contains information about a WCAG20
 *       Principle, Guideline or Success Criterion
 *
 * @param  {String}  id - ID in the format "P.G.SC" for the WCAG 2.0 item to get information
 *
 * @property  {String}  title        - The title of the success criterion
 * @property  {String}  description  - A longer description of the success criterion
 *
 * @property  {Number}  level        - Number representing WCAG 2.0 level (i.e. A, AA or AAA)<br/>
 *                                     OpenAjax.a11y.WCAG20_LEVEL.A<br/>
 *                                     OpenAjax.a11y.WCAG20_LEVEL.AA<br/>
 *                                     OpenAjax.a11y.WCAG20_LEVEL.AAA<br/>
 * @property  {String}  level_nls    - NLS WCAG 2.0 level (i.e. "A", "AA" or "AAA")
 *
 * @property  {String}  url_spec         - A url to success criterion in WCAG 2.0 specification
 * @property  {String}  url_how_to_meet  - URL to the WCAG 2.0 techniques and failure
 *                                         conditions to meet or violate the requirements
 * @property  {String}  url_understand   - URL to more information on the requirements
 *                                         of the success criteria
 */

OpenAjax.a11y.info.SuccessCriterionInfo = function (sc_id) {

  var id     = sc_id;
  var title  = "";
  var desc   = "";

  var level      = 0;
  var level_nls  = "";

  var url_spec       = "";
  var url_meet       = "";
  var url_understand = "";

  var wcag20_nls = OpenAjax.a11y.nls.WCAG20.getNLS();

  var sc = wcag20_nls.getNLSItemById(sc_id);

//  OpenAjax.a11y.logger.debug("[SuccessCriterionInfo] success criterion: " + sc + " (" + sc_id + ")");

  if (sc) {
    level      = sc.level;
    level_nls  = wcag20_nls.levels[sc.level];

    title      = sc.title;
    desc       = sc.description;

    url_spec        = sc.url_spec;
    url_meet        = sc.url_meet;
    url_understand  = sc.url_understand;

  }

  return {
     get id              () { return id;     },
     get title           () { return title;     },
     get description     () { return desc;      },

     get level           () { return level;     },
     get level_nls       () { return level_nls; },

     get url_spec        () { return url_spec;       },
     get url_how_to_meet () { return url_meet;       },
     get url_understand  () { return url_understand; },

     toString : function() { return title; }
  };

};


/* ---------------------------------------------------------------- */
/*                    RuleCategoryInfo                              */
/* ---------------------------------------------------------------- */

 /**
 * @constructor RuleCategoryInfo
 *
 * @memberOf OpenAjax.a11y.info
 *
 * @desc Constructor for an object that contains information about a Rule Category
 *
 * @param  {Number}  rc_id  - id of the rule category
 *
 * @property  {String}  title        - A title of the rule category
 * @property  {String}  url          - A url to more information on the rule category
 * @property  {String}  description  - A longer description of the rule category
 */

OpenAjax.a11y.info.RuleCategoryInfo = function (rc_id) {

  var title   = "";
  var url     = "";
  var desc    = "";

  var rc_nls = OpenAjax.a11y.nls.RuleCategories.getNLS().getRuleCategory(rc_id);

//  OpenAjax.a11y.logger.debug("[RuleCategoryInfo] rule category: " + rc_nls);

  if (rc_nls) {
    title = rc_nls.title;
    desc  = rc_nls.description;
    url   = rc_nls.url_spec;

  }

  return {
     get title       () { return title; },
     get url         () { return url;   },
     get description () { return desc;  },

     toString : function() { return title; }
  };

};

/* ---------------------------------------------------------------- */
/*                    GuidelineInfo                              */
/* ---------------------------------------------------------------- */

 /**
 * @constructor GuidelineInfo
 *
 * @memberOf OpenAjax.a11y.info
 *
 * @desc Constructor for an object that contains information about a WCAG 2.0 Guideline
 *
 * @param  {String}  g_id - id of the guideline
 *
 * @property  {String}  title        - A title of the guideline
 * @property  {String}  url          - A url to more information on the guideline
 * @property  {String}  description  - A longer description of the guideline
 */

OpenAjax.a11y.info.GuidelineInfo = function (g_id) {

  var id          = g_id;
  var title       = "";
  var url         = "";
  var description = "";

  var wcag20_nls = OpenAjax.a11y.nls.WCAG20.getNLS();

  var g = wcag20_nls.getNLSItemById(g_id);

//  OpenAjax.a11y.logger.debug("[GuidelineInfo] guideline: " + g + " (" + g_id + ")");

  if (g) {
    title        = g.title;
    description  = g.description;
    url          = g.url_spec;

  }

  return {
     get id          () { return id;          },
     get title       () { return title;       },
     get url         () { return url;         },
     get description () { return description; },

     toString : function() { return title; }
  };

};



/* ---------------------------------------------------------------- */
/*                    RuleGroupInfo                              */
/* ---------------------------------------------------------------- */

 /**
 * @constructor RuleGroupInfo
 *
 * @memberOf OpenAjax.a11y.info
 *
 * @desc Constructor for an object that contains information about a Rule Group
 *       The evaluation library suports groups based on Rule Categories
 *       and WCAG 2.0 Guidelines
 *
 * @param  {String}  t   - A title describes the rule group
 * @param  {String}  u   - A url to more information on the rule group
 * @param  {String}  d   - A longer description of the group
 * @param  {Number}  req - Number of required rules in the group
 * @param  {Number}  rec - Number of recommended rules in the group
 *
 * @property  {String}  title                 - A title for the group of rules
 * @property  {String}  url                   - A url to more information on the group
 * @property  {String}  description           - A longer description of the group
 * @property  {Number}  num_rules_required    - Number of required rules in the group
 * @property  {Number}  num_rules_recommended - Number of recommended rules in the group
 * @property  {Number}  num_rules_total       - Total number of rules in the group
 */

OpenAjax.a11y.info.RuleGroupInfo = function (t, u, d, req, rec) {

  var title             = t;
  var url               = u;
  var description       = d;

  var rules_required    = req;
  var rules_recommended = rec;

  return {
     get title                 () { return title;       },
     get url                   () { return url;         },
     get description           () { return description; },
     get num_rules_required    () { return rules_required;    },
     get num_rules_recommended () { return rules_recommended; },
     get num_rules_total       () { return rules_recommended + rules_required; },

     incRequiredRuleCount : function() {
       rules_required += 1;
     },

     incRecommendedRuleCount : function() {
       rules_recommended += 1;
     },


     toString : function() { return title; }
  };

};
/* ---------------------------------------------------------------- */
/*                             ElementSummary                       */
/* ---------------------------------------------------------------- */

 /**
 * @constructor ElementSummary
 *
 * @memberOf OpenAjax.a11y.info
 *
 * @desc Constructor for an object that contains information about the total
 *       number of elements and specific element types on a web page
 *
 * @param  {Object}  dom_cache    - Cache of the document object model of the web page
 * @param  {Number}  option       - 0: All elements<br/>
 *                                  1: AT visible elements<br/>
 *                                  2: Hidden elements<br/>
 *
 * @property  {Number}  total       - Total number of elements
 * @property  {Number}  audio       - Number of audio elements
 * @property  {Number}  controls    - Number of form controls
 * @property  {Number}  headings    - Number of heading elements (h1-h6)
 * @property  {Number}  iframes     - Number of iframes
 * @property  {Number}  images      - Number of images (img)
 * @property  {Number}  landmarks   - Number of landmarks
 * @property  {Number}  links       - Number of links (i.e. a and area)
 * @property  {Number}  lists       - Number of lists (i.e. ul, ol and dl)
 * @property  {Number}  listitems   - Number of listitems (i.e. il, dt and dd)
 * @property  {Number}  other       - Number of elements not in one of the
 *                                    other counts
 * @property  {Number}  tables      - Number of table elements
 * @property  {Number}  table_cells - Number of table cells
 * @property  {Number}  objects     - Number of object, embed or applet elements
 * @property  {Number}  video       - Number of video elements
 * @property  {Number}  widgets     - Number of ARIA identified widgets
 */

OpenAjax.a11y.info.ElementSummary = function (dom_cache, option) {

  function getCount(list) {

    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var count = 0;

    if (option === 0) {
      return list.length;
    }
    else {

      var list_len = list.length;

      for (var i = 0; i < list_len; i++) {
        var de = list[i].dom_element;
        if (!de) de = list[i];
        if (!de) continue;

        var cs = de.computed_style;

        if (cs) {
          if ((cs.is_visible_to_at === VISIBILITY.VISIBLE) &&
              (option === 1)) count++;
          else if ((cs.is_visible_to_at === VISIBILITY.HIDDEN) &&
              (option === 2)) count++;
        }
      }
    }

    return count;
  }

  var total       = 0;

  var audio       = 0;
  var controls    = 0;
  var events      = 0;
  var headings    = 0;
  var iframes     = 0;
  var images      = 0;
  var landmarks   = 0;
  var links       = 0;
  var lists       = 0;
  var listitems   = 0;
  var tables      = 0;
  var objects     = 0;
  var video       = 0;
  var widgets     = 0;

  if (dom_cache) {

    if (typeof option !== 'number') option = 0;

    audio   = getCount(dom_cache.media_cache.audio_elements);
    video   = getCount(dom_cache.media_cache.video_elements);
    objects = getCount(dom_cache.media_cache.object_elements);

    controls  = getCount(dom_cache.controls_cache.control_elements);
    widgets   = getCount(dom_cache.controls_cache.widget_elements);
    events    = getCount(dom_cache.controls_cache.elements_with_events);

    headings  = getCount(dom_cache.headings_landmarks_cache.heading_elements);
    landmarks = getCount(dom_cache.headings_landmarks_cache.landmark_elements);

    iframes   = getCount(dom_cache.headings_landmarks_cache.iframe_elements);

    images    = getCount(dom_cache.images_cache.image_elements);

    links     = getCount(dom_cache.links_cache.link_elements);

    lists     = getCount(dom_cache.lists_cache.container_elements);
    listitems = getCount(dom_cache.lists_cache.listitem_elements);

    tables    = getCount(dom_cache.tables_cache.table_elements);

    total     = getCount(dom_cache.element_cache.dom_elements);

  }

  return {
     get audio         () { return audio;       },
     get elements_with_events ()  { return events;  },
     get SITE_NAVIGATION () { return controls;    },
     get headings      () { return headings;    },
     get iframes       () { return iframes;     },
     get images        () { return images;      },
     get landmarks     () { return landmarks;   },
     get links         () { return links;       },
     get lists         () { return lists;       },
     get listitems     () { return listitems;   },
     get objects       () { return objects;     },
     get tables        () { return tables;      },
     get total         () { return total;       },
     get video         () { return video;       },
     get widgets       () { return widgets;     }
  };

};

/* ---------------------------------------------------------------- */
/*                             PageInfo                   */
/* ---------------------------------------------------------------- */

 /**
 * @constructor PageInfo
 *
 * @memberOf OpenAjax.a11y.info
 *
 * @desc Constructor for an object that contains a title, url and description
 *       for a group of rule results
 *
 * @param  {Object}  dom_cache    - Cache of the document object model of the web page
 *
 * @property  {String}  title        - A short description that can be used as
 *                                     a title or the text of a link
 * @property  {String}  url          - A url to more information on the item
 *
 * @property  {ElementSummary}  elements         - Summary information about all
 *                                                 the elements on the web page
 *
 * @property  {ElementSummary}  visible_elements - Summary information about the
 *                                                 elements visible to assistive
 *                                                 technology on the web page
 *
 * @property  {ElementSummary}  hidden_elements - Summary information about the
 *                                                 elements hidden from assistive
 *                                                 technology on the web page
 */

OpenAjax.a11y.info.PageInfo = function (dom_cache) {

  var title   = dom_cache.title;
  var url     = dom_cache.url;
  var lang    = "";

  var elements = new OpenAjax.a11y.info.ElementSummary(dom_cache, 0);
  var visible  = new OpenAjax.a11y.info.ElementSummary(dom_cache, 1);
  var hidden   = new OpenAjax.a11y.info.ElementSummary(dom_cache, 2);

  return {
     get title             () { return title;    },
     get url               () { return url;      },
     get language          () { return lang;     },
     get elements          () { return elements;  },
     get visible_elements  () { return visible;  },
     get hidden_elements   () { return hidden;   },
     toString : function   () { return title;    }
  };

};




/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                             ElementResultSummary                        */
/* ---------------------------------------------------------------- */

 /**
 * @constructor ElementResultsSummary
 *
 * @memberOf OpenAjax.a11y.info
 *
 * @desc Constructor for an object that contains summary of element results for rule
 *       result, cache item result, rule result group result or evaluation result
 *       objects
 *
 * @property  {Number}  passed        - Number of element results that passed the
 *                                      rule (value >= 0)
 * @property  {Number}  page          - Number of element results that contribute to
 *                                      a page level manual check
 * @property  {Number}  violations    - Number of element results that failed the
 *                                      rule as a violation (value >= 0)
 * @property  {Number}  warnings      - Number of element results that failed the
 *                                      rule as a warning (value >= 0)
 * @property  {Number}  manual_checks - Number of element results that require a
 *                                      manual check (value >= 0)
 * @property  {Number}  hidden        - Number of element results that are hidden
 *                                      (value >= 0)
 */

OpenAjax.a11y.info.ElementResultsSummary = function () {

  // Element result counts
  var p   = 0;  // Pass result (p)
  var v   = 0;  // Fail result (f)
  var w   = 0;  // Fail result (f)
  var mc  = 0;
  var h   = 0;


  return {

     get violations()     { return v;   },
     get warnings()       { return w;   },
     get manual_checks()  { return mc;  },
     get passed()         { return p;   },
     get hidden()         { return h;   },

    /**
     * @method hasResults
     *
     * @memberOf OpenAjax.a11y.ElementResultSummary
     *
     * @desc True if at least one element results is a violation, warning, manual check
     *       or passed, otherwise false (e.g no element results or all hidden)
     *
     * @return {Boolean} see description
     */

    hasResults : function() {

      if (v | w | mc | p) return true;

      return false;
    },

    /**
     * @method addViolations
     * @private
     *
     * @memberOf OpenAjax.a11y.ElementResultSummary
     *
     * @desc Adds violation element results to the summary calculation
     *
     * @param  {Number}  n  - Number of element results that passed
     */

    addViolations : function(n) {
      if (n > 0) {
        v += n;
      }
    },

    /**
     * @method addWarnings
     *
     * @memberOf OpenAjax.a11y.ElementResultSummary
     *
     * @desc Adds warning element results to the summary calculation
     *
     * @param  {Number}  n  - Number of element results that passed
     */

    addWarnings : function(n) {
      if (n > 0) {
        w += n;
      }
    },


    /**
     * @method addManualChecks
     *
     * @memberOf OpenAjax.a11y.ElementResultSummary
     *
     * @desc Adds manual check element results to the summary calculation
     *
     * @param  {Number}  n  - Number of element results that passed
     */

    addManualChecks : function(n) {
      if ( n > 0) {
        mc += n;
      }
    },

    /**
     * @method addPassed
     *
     * @memberOf OpenAjax.a11y.ElementResultSummary
     *
     * @desc Adds passed element results to the summary calculation
     *
     * @param  {Number}  n  - Number of element results that passed
     */

     addPassed : function(n) {
       if (n > 0) {
         p   += n;
       }
     },

    /**
     * @method addHidden
     * @private
     *
     * @memberOf OpenAjax.a11y.ElementResultSummary
     *
     * @desc Adds hidden element results to the summary calculation
     *
     * @param  {Number}  n  -  Number of element results that are hidden
     */

    addHidden : function(n) {
      if (n > 0) {
        h += n;
      }
    },

    /*
     * @method toString
     *
     * @memberOf OpenAjax.a11y.ElementResultSummary
     *
     * @desc output information about the summary
     *
     * @return  {String}  Information about element summary
     */

    toString : function() {
      return "V: " + v + " W: " + w + " MC: " + mc + " P: " + p + " H: " + h;
    }
  };
};


/* ---------------------------------------------------------------- */
/*                             RuleResultsSummary                        */
/* ---------------------------------------------------------------- */

 /**
 * @constructor RuleResultsSummary
 *
 * @memberOf OpenAjax.a11y.info
 *
 * @desc Constructor for an object that contains summary of rule results for a
 *       set of rule result objects or a cache item result
 *
 * @property  {Number}  violations      - Number of rule results with at
 *                                        least one violation
 * @property  {Number}  warnings        - Number of rule results with at
 *                                        least one warning
 * @property  {Number}  failures        - Number of rule results with at
 *                                        least one violation or warning
 * @property  {Number}  manual_checks   - Number of rule results with at
 *                                        least one manual check
 * @property  {Number}  passed          - Number of rule results that all
 *                                        element results pass
 * @property  {Number}  not_applicable  - Number of rule results with no
 *                                        element results
 */

OpenAjax.a11y.info.RuleResultsSummary = function () {

  var v   = 0;  // Number of rule results with are violations
  var w   = 0;  // Number of rule results with are warnings
  var mc  = 0;  // Number of rule results with are manual checks
  var p   = 0;  // Number of rule results with are passed
  var na  = 0;  // Number of rule results with are not applicable
  var hmc = 0;  // True if any of the rule results includes at least one element
                // result that is a manual check

  var t   =  0;  // total number of rule results with results
  var sum =  0;  // summ of the implementation scores for all rule results
  var is  = -1;  // implementation score for group
  var iv  = OpenAjax.a11y.IMPLEMENTATION_VALUE.UNDEFINED; // implementation value for the group

  return {
     get violations()     { return v;  },
     get warnings()       { return w;  },
     get manual_checks()  { return mc; },
     get passed()         { return p;  },
     get not_applicable() { return na;  },

     get implementation_score() { return is;  },
     get implementation_value() { return iv;  },

    /**
     * @method addRuleResult
     *
     * @memberOf OpenAjax.a11y.RuleResultsSummary
     * @private
     *
     * @desc Adds rule result to the summary calculation
     *
     * @param  {RuleResult}  rule_result  - Rule result object to add to summary
     */

     addRuleResult : function(rule_result) {

       var IMPLEMENTATION_VALUE = OpenAjax.a11y.IMPLEMENTATION_VALUE;
       var RULE_RESULT_VALUE    = OpenAjax.a11y.RULE_RESULT_VALUE;

       var rrv = rule_result.getResultValue();

       if (rrv === RULE_RESULT_VALUE.VIOLATION        ) v  += 1;
       else if (rrv === RULE_RESULT_VALUE.WARNING     ) w  += 1;
       else if (rrv === RULE_RESULT_VALUE.MANUAL_CHECK) mc += 1;
       else if (rrv === RULE_RESULT_VALUE.PASS        ) p  += 1;
       else  na += 1;

       hmc = hmc || (rule_result.getElementResultsSummary().manual_checks > 0);

       var rris = rule_result.getImplementationScore();

       if (rris >= 0) {
         t += 1;
         sum = sum + rris;
         is = Math.round(sum/t);
         if ((is === 100) && ((v+w) > 0)) is = 99;
       }

       if (hmc) iv = IMPLEMENTATION_VALUE.MANUAL_CHECKS_ONLY;
       else iv = IMPLEMENTATION_VALUE.NOT_APPLICABLE;

       if (is === 100) {
         if (hmc) iv = IMPLEMENTATION_VALUE.COMPLETE_WITH_MANUAL_CHECKS;
         else iv = IMPLEMENTATION_VALUE.COMPLETE;
       } else if (is > 95) iv = IMPLEMENTATION_VALUE.ALMOST_COMPLETE;
       else if (is > 50)   iv = IMPLEMENTATION_VALUE.PARTIAL_IMPLEMENTATION;
       else if (is >= 0)   iv = IMPLEMENTATION_VALUE.NOT_IMPLEMENTED;

     },

    /**
     * @method hasResults
     *
     * @memberOf OpenAjax.a11y.ElementResultSummary
     *
     * @desc True if at least one element results is a violation, warning, manual check
     *       or passed, otherwise false (e.g no element results or all hidden)
     *
     * @return {Boolean} see description
     */

    hasResults : function() {

      if (v | w | mc | p | na) return true;

      return false;
    },

    /**
     * @method toString
     *
     * @memberOf OpenAjax.a11y.RuleResultsSummary
     *
     * @desc output information about the summary
     *
     * @return  {String}  Information about rule summary
     */

    toString : function() {
      return "V: " + v + " W: " + w + " MC: " + mc + " P: " + p + " NA: " + na;
    }

  };
};

/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                       EvaluationResult                           */
/* ---------------------------------------------------------------- */

/**
 * @constructor EvaluationResult
 *
 * @memberOf OpenAjax.a11y
 *
 * @param  {Object}  dom        -  DOM of the web page being evaluated
 * @param  {String}  title      -  Title of the web page being evaluated
 * @param  {String}  url        -  URL of the web page being evaluated
 * @param  {Object}  ruleset    -  Ruleset object used to generate
 * @param  {Object}  dom_cache  -  DOMCache object used for evaluation
 */

/**
 * @private
 * @constructor Internal Properties
 *
 * @property  {Object}  ruleset            - Ruleset object used to generate
 *                                           the evaluation
 *
 * @property {Object} dom    - Reference to browser document object model
 *                             (DOM) that holds the document to be analyzed
 * @property {String} title  - The title of the document evaluated
 * @property {String} url    - The url of the document evaluated
 * @property {String} date   - Date of the evaluation
 * @property {String} time   - Time of day the document was evaluated
 *
 * @property {Object} dom_cache  - Reference to DOMCache object
 *
 * @property {Array}  rule_results  - Array of rule result objects
 *
 * @example
 *

 * var url   = window.location.href;
 * var title = window.title;
 * var doc   = window.document;
 *
 * var rs = OpenAjax.a11y.RulesetManager.getRuleset('WCAG20_TRANS');

 * var evaluator_factory = OpenAjax.a11y.EvaluatorFactory.newInstance();
 * evaluator_factory.setParameter('ruleset', rs);
 * evaluator_factory.setFeature('eventProcessing', 'firefox');
 *
 * var evaluator = evaluator_factory.newEvaluator();
 *
 * var evaluation = evaluator.evaluate(url, title, doc);
 *
 */

OpenAjax.a11y.EvaluationResult = function (dom, title, url, ruleset, dom_cache) {

  this.ruleset = ruleset;

  this.title = title;
  this.url   = url;

  this.date = OpenAjax.a11y.util.getFormattedDate();

  this.dom       = dom;
  this.dom_cache = dom_cache;

  this.rule_results = [];

  this.page_information =  new OpenAjax.a11y.info.PageInfo(dom_cache);

};

/**
 * @method getDOM
 *
 * @memberOf OpenAjax.a11y.EvaluationResult
 *
 * @desc Get the document object evaluated
 *
 * @return {Object}  Document object
 */

OpenAjax.a11y.EvaluationResult.prototype.getDOM = function () {
  return this.dom;
};


/**
 * @method getRuleset
 *
 * @memberOf OpenAjax.a11y.EvaluationResult
 *
 * @desc Return ruleset of information
 *
 * @return {RulesetInfo}  RulesetInfo object
 */

OpenAjax.a11y.EvaluationResult.prototype.getRuleset = function () {
  return this.ruleset;
};

/**
 * @method getPageInfo
 * @private
 *
 * @memberOf OpenAjax.a11y.EvaluationResult
 *
 * @desc Return information on the web page evaluated
 *
 * @return {PageInfo}  PageInfo object
 */

OpenAjax.a11y.EvaluationResult.prototype.getPageInfo = function () {
  return this.page_information;
};


/**
 * @method getTitle
 *
 * @memberOf OpenAjax.a11y.EvaluationResult
 *
 * @desc Get the title of the evaluated document
 *
 * @return {String}  String representing the title
 */

OpenAjax.a11y.EvaluationResult.prototype.getTitle = function () {
  return this.title;
};

/**
 * @method getURL
 *
 * @memberOf OpenAjax.a11y.EvaluationResult
 *
 * @desc Get the url of the evaluated document
 *
 * @return {String}  String representing the title
 */

OpenAjax.a11y.EvaluationResult.prototype.getURL = function () {
  return this.url;
};

/**
 * @method getDate
 *
 * @memberOf OpenAjax.a11y.EvaluationResult
 *
 * @desc Get the date the document
 *
 * @return {String}  String representing the title
 */

OpenAjax.a11y.EvaluationResult.prototype.getDate = function () {
  return this.date;
};

 /**
 * @method addRuleResult
 * @private
 *
 * @memberOf OpenAjax.a11y.EvaluationResult
 *
 * @desc Adds a rule result to the evaluation result
 *
 * @param {RuleResult}  rule_result  - Rule result object to add
 */
OpenAjax.a11y.EvaluationResult.prototype.addRuleResult = function (rule_result) {

  if (rule_result) {
    this.rule_results.push(rule_result);
  }

};


 /**
 * @method getRuleResult
 *
 * @memberOf OpenAjax.a11y.EvaluationResult
 *
 * @desc Gets rule result object with the associated id
 *
 * @param {String}  rule_id  - id of the rule associated with the rule result
 *
 * @return {RuleResult} Returns the ResultResult object
 */
OpenAjax.a11y.EvaluationResult.prototype.getRuleResult = function (rule_id) {

  for (var i = 0; i < this.rule_results.length; i++ ) {

    var rr = this.rule_results[i];

    if (rr.getRule().getId() === rule_id) return rr;
  }

  return null;

};



/**
 * @method getRuleResultsAll
 *
 * @memberOf OpenAjax.a11y.EvaluationResult
 *
 * @desc Returns an object containing a set of all rule results
 *
* @param {Number}  group_filter -  Number of bit mask for which rule groups to include
 *
 * @return {RuleGroupResult}  see description
 */

OpenAjax.a11y.EvaluationResult.prototype.getRuleResultsAll = function (group_filter) {

  if (typeof group_filter !== 'number') group_filter = OpenAjax.a11y.RULE_GROUP.GROUP123;

  var rgr = new OpenAjax.a11y.RuleGroupResult(this, "All Rule Results", "", "");

  for (var i = 0; i < this.rule_results.length; i++) {
     var rr = this.rule_results[i];
     var r = rr.getRule();

     if (r.getGroup() & group_filter) {
       rgr.addRuleResult(rr);
     }
  }

  return rgr;

};

/**
 * @method getRuleResultsByGuideline
 *
 * @memberOf OpenAjax.a11y.EvaluationResult
 *
 * @desc Returns an object containing the rule results associated with a WCAG 2.0 Guideline
 *
 * @param {Number}  guideline_id  -  Number representing the guideline id
 * @param {Number}  group_filter -  Number of bit mask for which rule groups to include
 *
 * @return {RuleGroupResult}  see description
 */

OpenAjax.a11y.EvaluationResult.prototype.getRuleResultsByGuideline = function (guideline_id, group_filter) {

  if (typeof group_filter !== 'number') group_filter = OpenAjax.a11y.RULE_GROUP.GROUP123;

  var gl_info = OpenAjax.a11y.info.GuidelineInfo(guideline_id);

  var rgr = new OpenAjax.a11y.RuleGroupResult(this, gl_info.title, gl_info.url, gl_info.description);

  for (var i = 0; i < this.rule_results.length; i++) {

     var rr = this.rule_results[i];
     var r = rr.getRule();

//     OpenAjax.a11y.logger.debug("[EvaluationResult][getRuleResultsByGuideline] Compare: " + r.getGuideline() + " " + guideline_id + " " + (r.getGuideline() & guideline_id));

     if ((r.getGuideline() & guideline_id)&&
         (r.getGroup()     & group_filter)) {
       rgr.addRuleResult(rr);
     }

  }

  return rgr;

};


/**
 * @method getRuleResultsByCategory
 *
 * @memberOf OpenAjax.a11y.EvaluationResult
 *
 * @desc Returns an object containing the rule results for the rules in a rule category
 *
 * @param {Number}  category_id  -  Number of the rule category
 * @param {Number}  group_filter -  Number of bit mask for which rule groups to include
 *
 * @return {RuleGroupResult}  see description
 */

OpenAjax.a11y.EvaluationResult.prototype.getRuleResultsByCategory = function (category_id, group_filter) {

  if (typeof group_filter !== 'number') group_filter = OpenAjax.a11y.RULE_GROUP.GROUP123;

  var rc_info = OpenAjax.a11y.info.RuleCategoryInfo(category_id);

  var rgr = new OpenAjax.a11y.RuleGroupResult(this, rc_info.title, rc_info.url, rc_info.description);

  for (var i = 0; i < this.rule_results.length; i++) {

     var rr = this.rule_results[i];
     var r = rr.getRule();

     if ((r.getCategory() & category_id) &&
         (r.getGroup()    & group_filter)) {
       rgr.addRuleResult(rr);
     }
  }

  return rgr;

};

/**
 * @method toJSON
 *
 * @memberOf OpenAjax.a11y.EvaluationResult
 *
 * @desc Creates a string representing the evaluation results in a JSON format
 *
 * @param  {Boolean}  include_element_results  -  Optional param, if true then element
 *                                                results are included in the JSON file
 *
 * @return {String} Returns a string in JSON format
 */

OpenAjax.a11y.EvaluationResult.prototype.toJSON = function (include_element_results) {

  if (typeof include_element_results !== 'boolean') include_element_results = false;

  var cleanForUTF8  = OpenAjax.a11y.util.cleanForUTF8;

  var ruleset = this.getRuleset();

  var ruleset_info = ruleset.getRulesetInfo();

  var json = "{\n";

  json += "  \"eval_url\"                  : " + JSON.stringify(cleanForUTF8(this.url))   + ",\n";
  json += "  \"eval_url_encoded\"          : " + JSON.stringify(encodeURI(this.url))      + ",\n";
  json += "  \"eval_title\"                : " + JSON.stringify(cleanForUTF8(this.title)) + ",\n";

  json += "  \"ruleset_id\"                : " + JSON.stringify(ruleset.getId())         + ",\n";
  json += "  \"ruleset_title\"             : " + JSON.stringify(ruleset_info.title)      + ",\n";
  json += "  \"ruleset_abbrev\"            : " + JSON.stringify(ruleset_info.abbrev)     + ",\n";
  json += "  \"ruleset_version\"           : " + JSON.stringify(ruleset_info.version)    + ",\n";

  json += this.dom_cache.element_information.toJSON(true, "  ");
//  json += this.dom_cache.aria_information.toJSON(true, "  ");
//  json += this.dom_cache.event_information.toJSON(true, "  ");

  var rule_group       = this.getRuleResultsAll();
  var rule_results     = rule_group.getRuleResultsArray();
  var rule_results_len = rule_results.length;

  json += "  \"rule_results\": [\n";

  for (var i = 0; i < rule_results_len; i++) {

    json += rule_results[i].toJSON("    ", include_element_results);

    if (i < (rule_results_len-1))  json += ",\n";
    else json += "\n";

  }

  json += "                ]\n";

  json += "}\n";

  json = unescape(encodeURIComponent(json));

  return json;

};
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                             RuleResult                           */
/* ---------------------------------------------------------------- */

 /**
 * @constructor RuleResult
 *
 * @memberOf OpenAjax.a11y
 *
 * @desc Constructor for an object that contains a the results of
 *          the evaluation of a ruleset rule
 *
 * @param  {RuleMapping}  rule_mapping  - RuleMapping object
 */

/**
 * @private
 * @constructor Internal Properties
 *
 * @property  {String}  message  -  String message of rule implementation and correction
 *
 * @property  {Array}  element_results_passed          - Array of all the element results
 *                                                       that passed
 * @property  {Array}  elements_results_violations     - Array of all the element results
 *                                                       that resulted in violations
 * @property  {Array}  elements_results_warnings       - Array of all the element results
 *                                                       that resulted in warnings
 * @property  {Array}  elements_results_manual_checks  - Array of all the element results
 *                                                       that require manual evaluations
 * @property  {Array}  elements_results_hidden         - Array of all the element results
 *                                                       that are hidden
 *
 * @property  {ElementResultsSummary} element_results_summary  - Summary of the node results for
 *                                               the rule result
 */

OpenAjax.a11y.RuleResult = function (rule_mapping) {

  this.rule = rule_mapping.rule;

  this.element_results_passed         = [];
  this.element_results_violations     = [];
  this.element_results_warnings       = [];
  this.element_results_manual_checks  = [];
  this.element_results_hidden         = [];

  this.element_results_summary = new OpenAjax.a11y.info.ElementResultsSummary();

  this.rule_required       = rule_mapping.required;

  this.rule_result_messages = [];

  this.implementation_score = -1;
  this.implementation_value = OpenAjax.a11y.IMPLEMENTATION_VALUE.UNDEFINED;
  this.implementation_nls   = "";
};

 /**
 * @method hasElementResults
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc True if at least one element result is a violation, warning, manual check or pass,
 *       otherwise false if no element results or all element results are hidden
 *
 * @return {Boolean} see description
 */

OpenAjax.a11y.RuleResult.prototype.hasElemetResults = function () {

   var ers = this.element_results_summary;

   if (ers.violations || ers.warnings || ers.manual_checks || ers.passed) return true;

   return false;

};


 /**
 * @method hasHiddenElementResults
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc True if at least one element result is a hidden,
 *       otherwise false if no element results or all element results are hidden
 *
 * @return {Boolean} see description
 */

OpenAjax.a11y.RuleResult.prototype.hasHiddenElementResults = function () {

   return (this.element_results_summary.hidden > 0);

};

 /**
 * @method getImplementationScore
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Returns a number between 0 - 100 indicating the level of
 *       implementation the violations, warnings and passed element results
 *
 * @return {Number} see description
 */

OpenAjax.a11y.RuleResult.prototype.getImplementationScore = function () {

  if (this.implementation_score < 0) {
    var ers = this.getElementResultsSummary();

//    var f = ers.violations + ers.warnings + ers.manual_checks;
    var f = ers.violations + ers.warnings;
    var p = ers.passed;
    var t = f + p;

    if (t) {
      var score = Math.round((100*p)/t);
      if ((score === 100) && (f > 0)) score = 99;
      this.implementation_score = score;
    }

//    OpenAjax.a11y.logger.debug("CALC OF IS   f: " + f + " p: " + p + " t: " + t + " (" + ers.toString() + ")");
  }

// OpenAjax.a11y.logger.debug("Implementation Score: " + this.implementation_score + " (" + this.getRule().getRuleId() + ")");

  return this.implementation_score;

};

 /**
 * @method getImplementationValue
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Return a numerical constant indicating the level of implementation:<br/>
 *         OpenAjax.a11y.IMPLEMENTATION_VALUE.UNDEFINED    <br/>
 *         OpenAjax.a11y.IMPLEMENTATION_VALUE.NOT_APPLICABLE<br/>
 *         OpenAjax.a11y.IMPLEMENTATION_VALUE.NOT_IMPLEMENTED<br/>
 *         OpenAjax.a11y.IMPLEMENTATION_VALUE.PARTIAL_IMPLEMENTATION<br/>
 *         OpenAjax.a11y.IMPLEMENTATION_VALUE.ALMOST_COMPLETE<br/>
 *         OpenAjax.a11y.IMPLEMENTATION_VALUE.COMPLETE<br/>
 *         OpenAjax.a11y.IMPLEMENTATION_VALUE.COMPLETE_WITH_MANUAL_CHECKS<br/>
 *         OpenAjax.a11y.IMPLEMENTATION_VALUE.MANUAL_CHECKS_ONLY<br/>
 *
 * @return {Number} see description
 */

OpenAjax.a11y.RuleResult.prototype.getImplementationValue = function () {

  var IMPLEMENTATION_VALUE = OpenAjax.a11y.IMPLEMENTATION_VALUE;

  if (this.implementation_value === IMPLEMENTATION_VALUE.UNDEFINED) {

    var ers = this.getElementResultsSummary();

    var is  = this.getImplementationScore();

    var iv = IMPLEMENTATION_VALUE.NOT_APPLICABLE;
    if (ers.manual_checks > 0) iv = IMPLEMENTATION_VALUE.MANUAL_CHECKS_ONLY;

    if (is === 100) {

      if (ers.manual_checks > 0) iv = IMPLEMENTATION_VALUE.COMPLETE_WITH_MANUAL_CHECKS;
      else iv = IMPLEMENTATION_VALUE.COMPLETE;

    } else {
      if (is > 95) iv = IMPLEMENTATION_VALUE.ALMOST_COMPLETE;
      else if (is > 50) iv = IMPLEMENTATION_VALUE.PARTIAL_IMPLEMENTATION;
      else if (is >= 0) iv = IMPLEMENTATION_VALUE.NOT_IMPLEMENTED;
    }
    this.implementation_value = iv;
  }

  return this.implementation_value;

};

 /**
 * @method getImplementationValueNLS
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Returns a string indicating the level of implementation: <br/>
 *         "Undefined"    <br/>
 *         "Not applicable"<br/>
 *         "Not implemented"<br/>
 *         "Partial implementation""<br/>
 *         "Almost complete"<br/>
 *         "Complete"<br/>
 *         "Complete with manual checks"<br/>
 *         "Manual checks only"<br/>
 *
 * @return {String} see description
 */

OpenAjax.a11y.RuleResult.prototype.getImplementationValueNLS = function () {

  var IMPLEMENTATION_VALUE = OpenAjax.a11y.IMPLEMENTATION_VALUE;

  if (this.implementation_nls === "") {
    var iv = this.getImplementationValue();
    var nls = "Undefined";

    if (iv === IMPLEMENTATION_VALUE.NOT_APPLICABLE)                   nls = "Not Applicable";
    else if (iv === IMPLEMENTATION_VALUE.NOT_IMPLEMENTED)             nls = "Not Implemented";
    else if (iv === IMPLEMENTATION_VALUE.PARTIAL_IMPLEMENTATION)      nls = "Partial Implementation";
    else if (iv === IMPLEMENTATION_VALUE.ALMOST_COMPLETE)             nls = "Almost Complete";
    else if (iv === IMPLEMENTATION_VALUE.COMPLETE)                    nls = "Complete";
    else if (iv === IMPLEMENTATION_VALUE.COMPLETE_WITH_MANUAL_CHECKS) nls = "Complete with Manual Checks";
    else if (iv === IMPLEMENTATION_VALUE.MANUAL_CHECKS_ONLY)          nls = "Manual Checks Only";

    this.implementation_nls = nls;
  }

  return this.implementation_nls;

};

 /**
 * @method getElementResultsSummary
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Gets numerical summary information about the element results
 *
 * @return {ElementResultSummary} Returns the ElementResultsSummary object
 */
OpenAjax.a11y.RuleResult.prototype.getElementResultsSummary = function () {

  return this.element_results_summary;

};



 /**
 * @method getResultValue
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Gets the rule result value based on element results:<br/>
 *         OpenAjax.a11y.RULE_RESULT_VALUE.VIOLATION<br/>
 *         OpenAjax.a11y.RULE_RESULT_VALUE.WARNING<br/>
 *         OpenAjax.a11y.RULE_RESULT_VALUE.MANUAL_CHECK<br/>
 *         OpenAjax.a11y.RULE_RESULT_VALUE.PASSED<br/>
 *         OpenAjax.a11y.RULE_RESULT_VALUE.NOT_APPLICABLE <br/>
 *
 * @return {RULE_RESULT_VALUE} Returns a rule result value constant
 */
OpenAjax.a11y.RuleResult.prototype.getResultValue = function () {

  var RULE_RESULT_VALUE    = OpenAjax.a11y.RULE_RESULT_VALUE;

  var ers = this.getElementResultsSummary();

  if (ers.violations) return RULE_RESULT_VALUE.VIOLATION;
  else if (ers.warnings) return RULE_RESULT_VALUE.WARNING;
  else if (ers.manual_checks) return RULE_RESULT_VALUE.MANUAL_CHECK;
  else if (ers.passed) return RULE_RESULT_VALUE.PASS;

  return RULE_RESULT_VALUE.NOT_APPLICABLE;

};


 /**
 * @method getResultValueNLS
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Gets a string representation of the rule result value: <br/>
 *         'V'<br/>
 *         'W'<br/>
 *         'MC'<br/>
 *         'P'<br/>
 *         'n/a'<br/>
 *
 * @return {String} Returns a string representing the rule result value
 */
OpenAjax.a11y.RuleResult.prototype.getResultValueNLS = function () {

  var ers = this.getElementResultsSummary();

  if (ers.violations)         return 'V';
  else if (ers.warnings)      return 'W';
  else if (ers.manual_checks) return 'MC';
  else if (ers.passed)        return 'P';

  return 'N/A';

};
 /**
 * @method getMessage
 * @private
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Generates a localized rule result message
 *
 * @param {String}  id      -  Id of the rule result message string
 * @param {String}  prefix  -  Prefix message for the string
 *
 * @return {String} Strings with rule result message
 */
OpenAjax.a11y.RuleResult.prototype.getMessage = function (id, prefix) {

  if (typeof prefix !== 'string') prefix = "";

  var rule = this.getRule();

  var rule_nls   = rule.getNLS();
  var common_nls = rule.getCommonNLS();
  var rule_id    = rule.getId();

//  OpenAjax.a11y.logger.debug("[RuleResult]    rule nls: " +  rule_nls['ID']);
//  OpenAjax.a11y.logger.debug("[RuleResult]     rule id: " +  rule_id);
//  OpenAjax.a11y.logger.debug("[RuleResult]  message id: " +  id);
//  OpenAjax.a11y.logger.debug("[RuleResult]   messages : " +  typeof rule_nls['RULE_RESULT_MESSAGES']);

  var message = rule_nls['RULE_RESULT_MESSAGES'][id];

  if (id === 'ACTION_NONE') {
    message = common_nls.ACTION_NONE;
    return message;
  }

  if (id === 'NOT_APPLICABLE') {
    message = common_nls.NOT_APPLICABLE;
    return message;
  }

  if (typeof message !== 'string' || (message.length === 0)) {
    message = "Message is missing for rule id: " + rule_id + " and mesage id: " + id;
  }
  else {
    message = prefix + message;
  }

  var type = "";

  if (message.indexOf("%RULE_TYPE") >= 0) {

    if (this.rule_mapping.required) type = common_nls.message_severities.MUST;
    else type = common_nls.message_severities.SHOULD;

    message = message.replaceAll("%RULE_TYPE", type);
  }

  var rs = this.getElementResultsSummary();

  // Replace tokens with rule values

  var replaceAll = OpenAjax.a11y.util.replaceAll;

  var failures = rs.violations + rs.warnings;
  var total    = rs.violations + rs.warnings + rs.passed;

  message = replaceAll(message, "%N_F",  failures.toString());

  message = replaceAll(message, "%N_P",  rs.passed.toString());

  message = replaceAll(message, "%N_T",  (total + rs.manual_checks).toString());

  message = replaceAll(message, "%N_MC", rs.manual_checks.toString());

  message = replaceAll(message, "%N_H",  rs.hidden.toString());

  message = OpenAjax.a11y.util.transformElementMarkup(message);

  return message;

};


 /**
 * @method getResultMessagesArray
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Generates a localized rule result messages
 *
 * @return {Array} An array of strings with rule result messages
 *                 (typically only one string in the array)
 */

OpenAjax.a11y.RuleResult.prototype.getResultMessagesArray = function () {

  // If the messages already exist, just return them
  if (this.rule_result_messages.length) return this.rule_result_messages;

  var ers = this.element_results_summary;

  var messages = [];
  var m = "";

  var failures = ers.violations + ers.warnings;

  if (!failures && !ers.manual_checks) {

   if (ers.passed === 0) messages.push(this.getMessage('NOT_APPLICABLE'));
   else messages.push(this.getMessage('ACTION_NONE'));

  }
  else {

    if (failures > 0) {
      if (this.rule_required)  m = "V: ";
      else m = "W: ";

      if (failures === 1) m += this.getMessage('FAIL_S');
      else m += this.getMessage('FAIL_P');
      messages.push(m);
    }

    if (ers.manual_checks > 0) {
      if (ers.manual_checks === 1) m = "MC: " + this.getMessage('MANUAL_CHECK_S');
      else m = "MC: " + this.getMessage('MANUAL_CHECK_P');
      messages.push(m);
    }

  }

  if (ers.hidden > 0) {
    if (ers.hidden === 1) m = "H: " + this.getMessage('HIDDEN_S');
    else m = "H: " + this.getMessage('HIDDEN_P');
    messages.push(m);
  }

  this.messages = messages;

  return messages;

};

 /**
 * @method getResultMessage
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Generates a localized rule result messages
 *
 * @return {String} Returns a single string with all result messages
 */

OpenAjax.a11y.RuleResult.prototype.getResultMessage = function () {

  var messages = this.getResultMessagesArray();
  var last = messages.length - 1;
  var m = "";

  for (var i = 0; i < messages.length; i++ ) {
    m += messages[i];
    if (i < last) m += "; ";
  }

  return m;

};

 /**
 * @method getPrimaryLabel
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Gets a string identifying the primary attribute or property
 *
 * @return {String} see description
 */

OpenAjax.a11y.RuleResult.prototype.getPrimaryLabel = function () {

  var r = this.getRule();
  var pp = r.getTargetResourcePrimaryProperty();

  var label = "";

  if ((typeof pp === 'string') && pp.length) {
    label = OpenAjax.a11y.nls.Cache.getLabelNLS(pp).label;
  }

  return label;

};


/**
 * @method getElementResultsArray
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Returns an array of element results in severity order
 *
 * @return {Array} Returns a array of element results
 */

OpenAjax.a11y.RuleResult.prototype.getElementResultsArray = function () {

  function addElementResults(items) {
    var i;
    var len = items.length;

    for (i = 0; i < len; i++) {
      element_results.push(items[i]);
    }
  }

  var element_results = [];

  addElementResults(this.element_results_passed);
  addElementResults(this.element_results_violations);
  addElementResults(this.element_results_warnings);
  addElementResults(this.element_results_manual_checks);
  addElementResults(this.element_results_hidden);

  return element_results;

};


/**
 * @method addResult
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Adds a result of an evaluation of rule on a node in the dom
 *
 * @param  {Number}  test_result         - Number representing if a node passed, failed, manual check or other test result
 * @param  {Object}  cache_item          - Reference to cache item associated with the test
 * @param  {String}  message_id          - Reference to the message string in the NLS file
 * @param  {Array}   message_arguements  - Array of values used in the message string
 * @param  {String}  element_identifier  - String identifying the element (Optional)
 */

OpenAjax.a11y.RuleResult.prototype.addResult = function (test_result, cache_item, message_id, message_arguments, element_identifier) {

  var ELEMENT_RESULT_VALUE    = OpenAjax.a11y.ELEMENT_RESULT_VALUE;
  var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

  if (!cache_item) return;

  var dom_element_item = null;

  if (cache_item.dom_element) {
    dom_element_item = cache_item.dom_element;
  }
  else {
    dom_element_item = cache_item;
  }

  dom_element_item.has_rule_results = true;

  var element_result_value = ELEMENT_RESULT_VALUE.NONE;

  switch (test_result) {

  case TEST_RESULT.PASS:
    element_result_value = ELEMENT_RESULT_VALUE.PASS;
    break;

  case TEST_RESULT.FAIL:
    if (this.rule_required) element_result_value = ELEMENT_RESULT_VALUE.VIOLATION;
    else element_result_value = ELEMENT_RESULT_VALUE.WARNING;
    break;

  case TEST_RESULT.MANUAL_CHECK:
    element_result_value = ELEMENT_RESULT_VALUE.MANUAL_CHECK;
    break;

  case TEST_RESULT.HIDDEN:
    element_result_value = ELEMENT_RESULT_VALUE.HIDDEN;
    break;

  default:

    break;
  }

  var element_result = new OpenAjax.a11y.ElementResult(this, element_result_value, cache_item, message_id, message_arguments, element_identifier);

//  OpenAjax.a11y.logger.debug("  ADD RESULT - text result: " + test_result + " cache item: " + cache_item + "  msg ID: " + message_id + " args: " + message_arguments);

  switch (element_result_value) {

  case ELEMENT_RESULT_VALUE.HIDDEN:
    this.element_results_hidden.push(element_result);
    if (dom_element_item)  dom_element_item.rules_hidden.push(element_result);
    this.element_results_summary.addHidden(1);
    break;

  case ELEMENT_RESULT_VALUE.PASS:
    this.element_results_passed.push(element_result);
    if (dom_element_item) dom_element_item.rules_passed.push(element_result);
    this.element_results_summary.addPassed(1);
    break;

  case ELEMENT_RESULT_VALUE.VIOLATION:
    this.element_results_violations.push(element_result);
    if (dom_element_item) dom_element_item.rules_violations.push(element_result);
    this.element_results_summary.addViolations(1);
    break;

  case ELEMENT_RESULT_VALUE.WARNING:
    this.element_results_warnings.push(element_result);
    if (dom_element_item) dom_element_item.rules_warnings.push(element_result);
    this.element_results_summary.addWarnings(1);
    break;

  case ELEMENT_RESULT_VALUE.MANUAL_CHECK:
    this.element_results_manual_checks.push(element_result);
    if (dom_element_item) dom_element_item.rules_manual_checks.push(element_result);
    this.element_results_summary.addManualChecks(1);
    break;

  default:
    break;
  } // end switch

};

/**
 * @method isRuleRequired
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Tests whether the rule is a required or recommended rule in this ruleset
 *
 * @return {Boolean}  True if rule is a required rule, false if a recommended rule
 */

OpenAjax.a11y.RuleResult.prototype.isRuleRequired = function () {

  return this.rule_required;

};

/**
 * @method isRuleRequiredNLS
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Returns 'Yes' or "No' depending on whether the rule is required or recommended rule
 *
 * @return {String} Returns "Yes" if required, otherwise "No"
 */

OpenAjax.a11y.RuleResult.prototype.isRuleRequiredNLS = function () {

  return OpenAjax.a11y.nls.Cache.getYesNoNLS(this.isRuleRequired());

};

/**
 * @method getRule
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Get information about the rule
 *
 * @return {Rule} Rule Object
 */

OpenAjax.a11y.RuleResult.prototype.getRule = function () {

  return this.rule;

};


/**
 * @method getRuleDefinition
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Gets the definition of the rule
 *
 * @return {String} Localized string of the rule definition based on being
 *                  required or recommended
 */
OpenAjax.a11y.RuleResult.prototype.getRuleDefinition = function () {

  return this.getRule().getDefinition(this.rule_required);

};

/**
 * @method getRuleSummary
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Gets the summary of the rule
 *
 * @return {String} Localized string of the rule summary based on being
 *                  required or recommended
 */

OpenAjax.a11y.RuleResult.prototype.getRuleSummary = function () {

  return this.getRule().getSummary(this.rule_required);

};



/**
 * @method getWCAG20Level
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Get the string representation of the the WCAG 2.0 Success Criterion Level
 *       based on the primary id of the rule
 *
 * @return  {String}  String representing the WCAG 2.0 success criterion level
 *                    (i.e. A, AA or AAA)
 */

OpenAjax.a11y.RuleResult.prototype.getWCAG20Level = function () {

  return this.getRule().getWCAG20Level();

};

/**
 * @method getWCAG20LevelNLS
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Get the string representation of the the WCAG 2.0 Success Criterion Level
 *       based on the primary id of the rule
 *
 * @return  {String}  String representing the WCAG 2.0 success criterion level
 *                    (i.e. A, AA or AAA)
 */

OpenAjax.a11y.RuleResult.prototype.getWCAG20LevelNLS = function () {

  return this.getRule().getWCAG20Level();

};

/**
 * @method getRuleScope
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Get the rule scope constant of the rule
 *
 * @return {Number} rule scope constant
 */

OpenAjax.a11y.RuleResult.prototype.getRuleScope = function () {

  return this.getRule().getScope();

};

/**
 * @method getRuleScopeNLS
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Get a localized string of the rule scope (i.e. 'element' or 'page')
 *
 * @return {String} Localized string of the rule scope
 */

OpenAjax.a11y.RuleResult.prototype.getRuleScopeNLS = function () {

  return this.getRule().getScopeNLS();

};




/**
 * @method toJSON
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Returns a JSON representation of the cache item
 *
 * @param {String}  prefix  -  A prefix string typically spaces
 * @param {Boolean} flag    -  if true include node result details
 *
 * @return  {String}  String representing the cache item result object
 */

OpenAjax.a11y.RuleResult.prototype.toJSON = function(prefix, flag) {

  if (typeof flag !== 'boolean') flag = false;

  var next_prefix = "";
  var next_prefix_2 = "";

  if (typeof prefix !== 'string' || prefix.length === 0) prefix = "";
  else {
    next_prefix = prefix + "  ";
    next_prefix_2 = next_prefix + "  ";
  }

  var i;
  var json = "";
  var rule = this.getRule();
  var ers  = this.getElementResultsSummary();

  json += prefix + "{ \"rule_id\"               : \"" + rule.getId()                            + "\",\n";
  json += prefix + "  \"rule_summary\"          :   " + JSON.stringify(this.getRuleSummary())   + ",\n";
  json += prefix + "  \"success_criteria_nls\"  : \"" + rule.getPrimarySuccessCriterion().title + "\",\n";
  json += prefix + "  \"success_criteria_code\" : \"" + rule.getPrimarySuccessCriterion().id    + "\",\n";
  json += prefix + "  \"guideline_nls\"         : \"" + rule.getGuidelineInfo().title           + "\",\n";
  json += prefix + "  \"guideline_code\"        : \"" + rule.getGuidelineInfo().id              + "\",\n";
  json += prefix + "  \"rule_category_nls\"     : \"" + rule.getCategoryInfo().title            + "\",\n";
  json += prefix + "  \"rule_category_code\"    : "   + rule.getCategory()                      + ",\n";
  json += prefix + "  \"rule_scope_code_nls\"   : \"" + rule.getScopeNLS()                      + "\",\n";
  json += prefix + "  \"rule_scope_code\"       : "   + rule.getScope()                         + ",\n";
  json += prefix + "  \"rule_group_code_nls\"   : \"" + rule.getGroupNLS()                      + "\",\n";
  json += prefix + "  \"rule_group_code\"       : "   + rule.getGroup()                         + ",\n";
  json += prefix + "  \"result_message\"        :   " + JSON.stringify(this.getResultMessage()) + ",\n";
  json += prefix + "  \"result_value_nls\"      : \"" + this.getResultValueNLS()                + "\",\n";
  json += prefix + "  \"result_value\"          : "   + this.getResultValue()                   + ",\n";

  json += prefix + "  \"rule_required\"         : "   + this.isRuleRequired()          + ",\n";
  json += prefix + "  \"has_hidden\"            : "   + this.hasHiddenElementResults() + ",\n";

  json += prefix + "  \"implementation_score\"  : "   + this.getImplementationScore() + ",\n";
  json += prefix + "  \"implementation_value\"  : "   + this.getImplementationValue() + ",\n";
  json += prefix + "  \"implementation_nls\"    : \"" + this.getImplementationValueNLS()   + "\",\n";

  json += prefix + "  \"elements_passed\"       : "   + ers.passed                     + ",\n";
  json += prefix + "  \"elements_violation\"    : "   + ers.violations                 + ",\n";
  json += prefix + "  \"elements_warning\"      : "   + ers.warnings                   + ",\n";
  json += prefix + "  \"elements_failure\"      : "   + (ers.violations+ers.warnings)  + ",\n";
  json += prefix + "  \"elements_manual_check\" : "   + ers.manual_checks              + ",\n";
  json += prefix + "  \"elements_hidden\"       : "   + ers.hidden;

  if (flag) {
    json += ",\n";

    var element_results     = this.getElementResultsArray();
    var element_results_len = element_results.length;
    var comma_count         = element_results_len - 1;

    json += prefix + "  \"element_results\" : [\n";
    for (i = 0; i < element_results_len; i++) {
      json += element_results[i].toJSON(next_prefix_2);
      if (i < comma_count) json += ",\n";
      else json += "\n";
    }
    json += prefix + "  ]\n";
  }
  else {
    json += "\n";
  }

  json += prefix + "}";

  return json;

};



/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.RuleResult
 *
 * @desc Creates a text string representation of the rule result object
 *
 * @return {String} Returns a text string representation of the rule result object
 */

OpenAjax.a11y.RuleResult.prototype.toString = function () {

 return this.getRuleDefinition() + " (" + this.element_results_summary + ")";

};

/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                      ElementInfo                                   */
/* ---------------------------------------------------------------- */

/**
 * @constructor ElementInfo
 *
 * @memberOf OpenAjax.a11y.info
 *
 * @desc Constructor for an object that contains element information
 *       typically attribute values or calculated property values important
 *       to understand the accessibility of the element
 *
 * @property  {String}  name        - The title for the group of rules
 * @property  {String}  value       - URL to more information about the group
 *                                     (e.g. WCAG 2.0 requirement)
 * @property  {String}  description  - Short description of the group
 */

OpenAjax.a11y.info.ElementInfo = function (name, value, desc) {

  var n  = name;
  var v  = value;
  var d  = desc;

  return {

     get name()          { return n;  },
     get value()         { return v;  },
     get description()   { return d;  },


    toString : function() {
      return "Name: " + n + " Value: " + v;
    }

  };
};


/* ---------------------------------------------------------------- */
/*                             ElementResult                           */
/* ---------------------------------------------------------------- */

/**
 * @constructor ElementResult
 *
 * @memberOf OpenAjax.a11y
 *
 * @desc Constructor for an object that contains a the results of
 *          the evaluation of a rule on a element
 *
 * @param  {ResultRule}   rule_result         - reference to the rule result object
 * @param  {Number}       result_value        - Constant representing result value of the evaluation result
 * @param  {Object}       cache_item          - Object reference to element information used by this rule result
 * @param  {String}       message_id          - String reference to the message string in the NLS file
 * @param  {Array}        message_arguments   - Array  array of values used in the message string
 * @param  {Array}        props               - Array of properties that are defined in the validation function (NOTE: typically undefined)
 * @param  {String}       elem_identifier     - String identifying the element (Optional)
 */

/**
 * @private
 * @constructor Internal Properties
 *
 * @property  {RuleResult} rule_result         - reference to the rule result object
 * @property  {Number}     result_value        - Constant representing result value of the evaluation result
 * @property  {DOMElement} cache_item          - Object reference to cache item associated with the test
 * @property  {String}     message_id          - String reference to the message string in the NLS file
 * @property  {Array}      message_arguments   - Array  array of values used in the message string
 */

OpenAjax.a11y.ElementResult = function (rule_result, result_value, cache_item, message_id, message_arguments, elem_identifier) {

  this.rule_result = rule_result;

  this.result_value  = result_value;
  this.result_message       = "";
  this.position = 0;

  this.html_attrs = {};
  this.aria_attrs = {};

  this.nameSource = ['not defined', 'none', 'label[for]', 'label', 'title attribute', 'value attribute', 'alt attribute', 'type attribute', 'text content', 'aria-lablledby', 'aria-label', 'caption element', 'summary attribute'];
  this.descSource = ['not defined', 'none', 'title attribute', 'aria-describedby', 'summary attribute'];
  this.visibility = ['not defined', 'unkown', 'hidden', 'visible'];

//  OpenAjax.a11y.logger.debug("Rule: " + elem_identifier + " (" + (typeof elem_identifier) + ")");

  if (typeof elem_identifier === 'string') {
    this.element_identifier = elem_identifier;
  } else {
    this.element_identifier = cache_item.toString();
  }

  this.primary_element_info = false;
  this.secondary_element_info_array = [];

  this.related_elements = [];

  this.message_id        = message_id;
  this.message_arguments = message_arguments;

//  OpenAjax.a11y.logger.debug("Rule: " + this.getRuleId() + "Prop: " + typeof props);

  this.cache_item    = cache_item;
  this.dom_element = cache_item;

  if (cache_item.dom_element) {
    this.dom_element = cache_item.dom_element;
  } else {
    if (cache_item.type === Node.TEXT_NODE) {
      this.dom_element = cache_item.parent_element;
    }
  }
  this.dom_node = cache_item.node;
};


 /**
 * @method getTagName
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Gets tag name for the element results
 *
 * @return {String} tag name of the element
 */
OpenAjax.a11y.ElementResult.prototype.getTagName = function () {
   var tag_name = this.dom_element.tag_name;

   if (!tag_name && (this.dom_node.type === Node.TEXT_NODE)) {
      tag_name = this.dom_node.parentNode.tagName;
   }

   if (!tag_name && (this.dom_node.type === Node.ELEMENT_NODE)) {
      tag_name = this.dom_node.tagName;
   }

   if ((tag_name === 'input') ||
       (tag_name === 'button')) {
      var type = this.dom_element.node.type;
      if (type) {
        tag_name += '[type=' + type + ']';
      }
   }

   if (tag_name === 'body') {
    tag_name = 'page';
   }

   return tag_name;
};

 /**
 * @method getRole
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Gets role attribute for the element results
 *
 * @return {String} Role attribute of the element
 */
OpenAjax.a11y.ElementResult.prototype.getRole = function () {
  var role = '';
  if (this.dom_element.has_role) {
   role = this.dom_element.role;
  }
  return role;
};

 /**
 * @method getRule
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Gets the rule object that this element result is associated with.
 *       Provides access to rule information if needed
 *
 * @return {Object} see description
 */
OpenAjax.a11y.ElementResult.prototype.getRule = function () {
   return this.getRuleResult().getRule();
};

 /**
 * @method checkForAttribute
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Tests to see if the DOM element has
 *       a specific property defined
 *       if it is defined add it to the object
 *
 * @param {Object} Collection of attributes
 * @param {String} Test attribute
 */
OpenAjax.a11y.ElementResult.prototype.checkForAttribute = function (attrs, attr, attr_name) {
  if (typeof attr_name !== 'string') {
    attr_name = attr;
  }
  if (attr_name.indexOf('aria_') >= 0) {
    attr_name = attr_name.replace('_', '-');
  }
  if (this.dom_element['has_' + attr]) {
    attrs[attr_name] = this.dom_element[attr];
  }
};

 /**
 * @method getHTMLAttributes
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Gets common HTML attributes related to elements
 *       some elements have special props like alt
 *
 * @return {Object} see description
 */
OpenAjax.a11y.ElementResult.prototype.getHTMLAttributes = function () {
  if (this.dom_element.html_attrs) {
    return this.dom_element.html_attrs;
  }
  return {};
};

 /**
 * @method getAriaAttributes
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Gets common HTML attributes related to elements
 *       some elements have special props like alt
 *
 * @return {Object} see description
 */
OpenAjax.a11y.ElementResult.prototype.getAriaAttributes = function () {
  if (this.dom_element.aria_attrs) {
    return this.dom_element.aria_attrs;
  }
  return {};
};

 /**
 * @method getAccessibleNameInfo
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Gets accessible name and description information
 *
 * @return {Object}
 */
OpenAjax.a11y.ElementResult.prototype.getAccessibleNameInfo = function () {
  var info = {}, dp = false;

  // If the results are dom_element object, they do not have names, like for CCR rule
  info.name_possible = this.dom_element !== this.cache_item;

  if (this.dom_element) {
    if (this.dom_element.role) {
      dp = OpenAjax.a11y.aria.designPatterns[this.dom_element.role];
    } else {
      if (this.dom_element.implicit_role) {
        dp = OpenAjax.a11y.aria.designPatterns[this.dom_element.implicit_role];
      }
    }
  }

  if (dp) {
    info.name_required   = dp.nameRequired;
    info.name_prohibited = dp.nameProhibited;
  }

  if (this.cache_item.accessible_name) {
    info.name = this.cache_item.accessible_name;
    if (this.cache_item.accessible_name_source) {
      info.name_source = this.nameSource[this.cache_item.accessible_name_source];
    } else {
      if (this.cache_item.computed_label_source) {
        info.name_source = this.nameSource[this.cache_item.computed_label_source];
      }
    }
  } else {
    if (this.cache_item.computed_label) {
      info.name = this.cache_item.computed_label;
      info.name_source = this.nameSource[this.cache_item.computed_label_source];
    } else {
      // This option is for heading cache items
      if (this.cache_item.name) {
        info.name = this.cache_item.name;
        info.name_source = this.nameSource[OpenAjax.a11y.SOURCE.TEXT_CONTENT];
      }
    }
  }

  if (!info.name) {
    info.name = '';
    info.name_source = ''
  }

  if (this.cache_item.accessible_description) {
    info.desc = this.cache_item.accessible_discription;
    info.desc_source = this.descSource*=(this.cache_item.accessible_discription_source);
  }

  return info;
};


 /**
 * @method getColorContrastInfo
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Gets color contrast information for an element result
 *
 * @return {Object}
 */
OpenAjax.a11y.ElementResult.prototype.getColorContrastInfo = function () {
  var info = {};
  var cs;
  var rule = this.rule_result.getRule();

  if (rule && (rule.getId() === 'COLOR_1') &&
      this.dom_element) {
    cs = this.dom_element.computed_style;
    if (cs) {
      info.color_contrast_ratio  = cs.color_contrast_ratio;
      info.color                 = cs.color;
      info.color_hex             = '#' + cs.color_hex;
      info.background_color      = cs.background_color;
      info.background_color_hex  = '#' + cs.background_color_hex;
      info.font_family           = cs.font_family;
      info.font_size             = cs.font_size;
      info.font_weight           = cs.font_weight;
      info.large_font            = cs.is_large_font ? 'Yes' : 'no';
      info.background_image      = cs.background_image;
      info.background_repeat     = cs.background_repeat;
      info.background_position   = cs.background_position;
    }
  }
  return info;
};

 /**
 * @method getVisibilityInfo
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Gets visibility information for an element result
 *
 * @return {Object}
 */
OpenAjax.a11y.ElementResult.prototype.getVisibilityInfo = function () {
  var info = {};
  var cs;
  if (this.dom_element) {
    cs = this.dom_element.computed_style;
    if (cs) {
      info.graphical_rendering  = this.visibility[cs.is_visible_onscreen];
      info.assistive_technology = this.visibility[cs.is_visible_to_at];
    }
  }
  return info;
};

 /**
 * @method getRuleResult
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Gets the rule result that this element result is associated with.
 *       Provides access to rule and ruleset information if needed
 *
 * @return {Object} see description
 */
OpenAjax.a11y.ElementResult.prototype.getRuleResult = function () {
   return this.rule_result;
};

 /**
 * @method getElementIdentifier
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Gets a string identifying the element, typically element and//or a key attribute
 *       or property value
 *
 * @return {String} see description
 */
OpenAjax.a11y.ElementResult.prototype.getElementIdentifier = function () {
   return this.element_identifier;
};


 /**
 * @method getResultValue
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Returns an numerical constant representing the element result:<br/>
 *         OpenAjax.a11y.ELEMENT_RESULT_VALUE.VIOLATION<br/>
 *         OpenAjax.a11y.ELEMENT_RESULT_VALUE.WARNING<br/>
 *         OpenAjax.a11y.ELEMENT_RESULT_VALUE.MANUAL_CHECK<br/>
 *         OpenAjax.a11y.ELEMENT_RESULT_VALUE.PASS<br/>
 *         OpenAjax.a11y.ELEMENT_RESULT_VALUE.HIDDEN  <br/>
 *
 * @return {Number} see description
 */
OpenAjax.a11y.ElementResult.prototype.getResultValue = function () {
   return this.result_value;
};

/**
 * @method getResultValueNLS
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Gets a string representation of the rule result value: <br/>
 *         'V'<br/>
 *         'W'<br/>
 *         'MC'<br/>
 *         'P'<br/>
 *         'H'<br/> *
 * @return {String} see description
 */

OpenAjax.a11y.ElementResult.prototype.getResultValueNLS = function () {
  return OpenAjax.a11y.nls.Cache.getElementResultValueNLS(this.result_value);
};



 /**
 * @method getResultMessage
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Returns an localized element result message
 *
 * @return {String} String with element result message
 */
OpenAjax.a11y.ElementResult.prototype.getResultMessage = function () {

  if (this.result_message.length === 0) {
    this.result_message = this.computeMessage();
  }
  return this.result_message;
};

 /**
 * @method computeMessage
 * @private
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Returns an localized element result message
 *
 * @return {String} String with element result message
 */
OpenAjax.a11y.ElementResult.prototype.computeMessage = function () {

  var rule       = this.getRuleResult().getRule();
  var rule_nls   = rule.getNLS();
  var common_nls = rule.getCommonNLS();

  var NODE_RESULT_VALUE = OpenAjax.a11y.NODE_RESULT_VALUE;

  var message;

  // If no message id return the empty string
  if (this.message_id.length === 0) return "";


//  OpenAjax.a11y.logger.debug("Rule: " + rule_id);

  var str = rule_nls['NODE_RESULT_MESSAGES'][this.message_id];

  if (!str) return common_nls.missing_message + this.message_id;

//    OpenAjax.a11y.logger.debug("Rule: " + rule_id + " Message: " + str);

  var vstr; // i.e. %1, %2 ....
  var message_arguments_len = this.message_arguments.length;

  // check to see if message has result value dependence

  vstr = "%s";

  if (str.indexOf(vstr) >= 0) {

    switch (this.result_value) {
    case NODE_RESULT_VALUE.VIOLATION:
      message = common_nls.message_severities.MUST;
      break;

    case NODE_RESULT_VALUE.WARNING:
      message = common_nls.message_severities.SHOULD;
      break;

    case NODE_RESULT_VALUE.MANUAL_CHECK:
      message = common_nls.message_severities.MAY;
      break;

    default:
      message = "";
      break;
    }

    str = str.replace(vstr, message);
  }

  // Replace

  for (var i = 0; i < message_arguments_len; i++) {
    vstr = "%" + (i+1);
    message = this.message_arguments[i];

    if (typeof message === 'string') {
      message = OpenAjax.a11y.util.normalizeSpace(message);
    }
    else {
      if (typeof message === 'number') {
        message = message.toString();
      }
      else {
        message = "";
      }
    }
    str = str.replace(vstr, message);
  } // end loop

  return OpenAjax.a11y.util.transformElementMarkup(str);

};

/**
 * @method getElementIndentifier
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Return a string describing the element
 *
 * @return {String} see description
 */

OpenAjax.a11y.ElementResult.prototype.getElementIndentifier = function () {
  this.element_indentifier;
};

/**
 * @method getElementInfoPrimary
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Get information on the primary property or attribute associated with element
 *
 * @return {ElementInfo} see description
 */

OpenAjax.a11y.ElementResult.prototype.getElementInfoPrimary = function () {

  if (!this.primary_element_info) {

    var prop = this.getRuleResult().getRule().getTargetResourcePrimaryProperty();

//    OpenAjax.a11y.logger.debug("[ElementResult] prop: " + prop + " (" + prop.length + ")");

    if (prop.length > 0) {

      var cache_nls = OpenAjax.a11y.nls.Cache;
      var value    = this.cache_item.getCachePropertyValue(prop);
      var nls_item = cache_nls.getLabelAndValueNLS(prop, value);

      this.primary_element_info = new OpenAjax.a11y.info.ElementInfo(nls_item.label, nls_item.value, nls_item.description);
    }
    else {
      this.primary_element_info = new OpenAjax.a11y.info.ElementInfo("", "", "");
    }
  }

  return this.primary_element_info;

};


/**
 * @method getElementInfoSecondaryArray
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Get the DOM cache values for the properties associated with a rule
 *
 * @return {Array} Array of ElementInfo objects
 */

OpenAjax.a11y.ElementResult.prototype.getElementInfoSecondaryArray = function () {

  var prop_list = this.getRuleResult().getRule().getTargetResourceSecondaryProperties();

  if ((this.secondary_element_info_array.length === 0) && (prop_list.length > 1)) {

    var cache_nls = OpenAjax.a11y.nls.Cache;

    for (var i = 0; i < prop_list.length; i++) {
      var prop_item = prop_list[i];
      var value    = this.cache_item.getCachePropertyValue(prop_item);
      var nls_item = cache_nls.getLabelAndValueNLS(prop_item, value);
      var ei = new OpenAjax.a11y.info.ElementInfo(nls_item.label, nls_item.value, nls_item.description);
      this.secondary_element_info_array.push(ei);
    }
  }

  return this.secondary_element_info_array;

};



/**
 * @method getOrdinalPosition
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Returns a the ordinal position of the element in a list of element results
 *
 * @return {Number} Returns a number indicating the position in a list of element results
 */

OpenAjax.a11y.ElementResult.prototype.getOrdinalPosition = function () {

  var position = 0;

  if (this.cache_item) {
    if(this.cache_item.dom_element) position = this.cache_item.dom_element.document_order;
    else position = this.cache_item.document_order;
  }

  return position;

};


/**
 * @method getDOMElement
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Gets live dom node reference of the element
 *
 * @param {DOMElement} see description
 */

OpenAjax.a11y.ElementResult.prototype.getDOMElement = function () {

  // Get DOMElement object: If cacheItem does not have dom_element property
  // referencing an object, then cacheItem is itself a DOMElement.
  var dom_element = (this.cache_item.dom_element) ?
                    this.cache_item.dom_element : this.cache_item;

  // If DOMElement type is TEXT_NODE then use its parent element, since
  // that is where its computed style and tag name would come from.
  if (dom_element.type === Node.TEXT_NODE) dom_element = dom_element.parent_element;

  return dom_element;

};

/**
 * @method getAccessibleName
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Gets accessible name of cache item if it exists or its text content
 *
 * @returns {Array} Array of
 */

OpenAjax.a11y.ElementResult.prototype.getAccessibleName = function () {

  function getSource(source) {
    var SOURCE = OpenAjax.a11y.SOURCE;

    switch(source) {
      case SOURCE.ALT_ATTRIBUTE:
        return "alt attribute";

      case SOURCE.ARIA_LABELLEDBY:
        return "aria-labelledby attribute";

      case SOURCE.ARIA_LABEL:
        return "aria-label attribute";

      case SOURCE.LABEL_REFERENCE:
        return "label reference";

      case SOURCE.LABEL_ENCAPSULATION:
        return "label encapsulation";

      case SOURCE.TABLE_CAPTION:
        return "caption element";

      case SOURCE.TABLE_SUMMARY:
        return "summary attribute";

      case SOURCE.TEXT_CONTENT:
        return "text content";

      case SOURCE.TITLE_ATTRIBUTE:
        return "title attribute";

      case SOURCE.VALUE_ATTRIBUTE:
        return "value attribute";

      default:
        break;
    }

    return "none";

  }

  var de = this.getDOMElement();

  if (this.cache_item.accessible_name) {
    if (this.cache_item.accessible_name_source) {
      return [getSource(this.cache_item.accessible_name_source), this.cache_item.accessible_name, ''];
    }
    else {
      return [getSource(this.cache_item.computed_label_source), this.cache_item.accessible_name, ''];
    }
  }
  else {
    if (this.cache_item.computed_label) {

      return [getSource(this.cache_item.computed_label_source), this.cache_item.computed_label, ''];
    }
    else {

      var text_content = de.getText();
      if (text_content.length > 50) {
        text_content = text_content.substring(0,50) + "...";
      }

      switch(de.tag_name) {

        case 'body':
          return ['none', '', ''];

        case 'img':
        case 'audio':
        case 'video':
        case 'object':
        case 'iframe':
          if (de.has_alt) {
            return ['alt attribute', de.alt, de.src];
          }
          else {
            if (de.has_title) {
              return ['title attribute', de.title, de.src];
            }
          }
          return ['none', '', de.src];

        case 'a':
        case 'area':
          if (text_content) {
            return ['text content', text_content, de.href];
          }
          else {
            if (de.has_title) {
              return ['title attribute', de.title, de.href];
            }
          }
          return ['none', '', de.href];

        default:
          if (text_content) {
            return ['text content', text_content, ''];
          }
          else {
            if (de.has_title) {
              return ['title attribute', de.title, ''];
            }
          }
          break;
      }
    }
  }

  return ['none', '', ''];

};


/**
 * @method getRelatedElementsArray
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Returns the xpath of the associated element
 *
 * @return {String} information about the node result
 */

OpenAjax.a11y.ElementResult.prototype.getRelatedElementsArray = function () {

  return [];

};


/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Gets a list of related elements by hoe they are related
 *
 * @return {Array} Array of RelatedElements objects
 */

OpenAjax.a11y.ElementResult.prototype.toString = function () {

  return this.related_elements;

};


/**
 * @method toJSON
 *
 * @memberOf OpenAjax.a11y.ElementResult
 *
 * @desc Creates JSON object descibing the properties of the node result
 *
 * @param {String} prefix  -  A prefix string typically spaces
 *
 * @return String information about the node result
 */

OpenAjax.a11y.ElementResult.prototype.toJSON = function (prefix) {

  var json = "";

  var de = this.cache_item;
  if (de.dom_element) de = de.dom_element;

  var class_name = "";
  var id = "";

  if (de.class_name && de.class_name.length) class_name = de.class_name;
  if (de.id && de.id.length) id = de.id;

  json += prefix + "{ \"result_value\"       : \"" + this.getResultValue()       + "\",\n";
  json += prefix + "  \"result_value_nls\"   : \"" + this.getResultValueNLS()    + "\",\n";
  json += prefix + "  \"element_identifier\" : " + JSON.stringify(this.getElementIdentifier()) + ",\n";
  json += prefix + "  \"ordinal_position\"   : " + this.getOrdinalPosition()     + ",\n";
  json += prefix + "  \"message\"            : " + JSON.stringify(this.getResultMessage()) + ",\n";
  json += prefix + "  \"class\"              : " + JSON.stringify(class_name) + ",\n";
  json += prefix + "  \"id\"                 : " + JSON.stringify(id) + "\n";
  json += prefix + "}";

  return json;
};

/* ---------------------------------------------------------------- */
/*                      RelatedElementInfo                                   */
/* ---------------------------------------------------------------- */

/**
 * @constructor RelatedElementInfo
 *
 * @memberOf OpenAjax.a11y.info
 *
 * @desc Constructor for an object that contains related element information
 *       typically elements used in creating accessible names, descriptions,
 *       data table headers, aria-owns, aria-controls.....
 *
 * @property  {String}  identifier    - String identifying the element
 * @property  {String}  node          - Live DOM node of the element
 */

OpenAjax.a11y.info.RelatedElementInfo = function (identifier, node) {

  var i  = identifier;
  var n  = node;

  return {

     get element_identifier() { return i;  },
     get dom_node()           { return n;  },


    toString : function() {
      return "Element: " + i;
    }

  };
};

/* ---------------------------------------------------------------- */
/*                             RelatedElements                           */
/* ---------------------------------------------------------------- */

/**
 * @constructor RelatedElements
 *
 * @memberOf OpenAjax.a11y
 *
 * @desc Constructor for an object that contains related element information
 *       The title describes the relationship
 *
 * @param  {String}   title  - The title describing the relationship
 *                             (e.g. 'Accessible Name', 'Accessible description', ..)
 */

/**
 * @private
 * @constructor Internal Properties
 *
 * @property  {String}   title                   - The title describing the relationship
 * @property  {Array}    related_elements_info   - Array of RelatedElementInfo objects
 */

OpenAjax.a11y.RelatedElements = function (title) {

  this.title = title;

  this.related_elements_info = [];

};

/**
 * @method title
 *
 * @memberOf OpenAjax.a11y.RelatedElements
 *
 * @desc Gets a string representing the title of the relationship
 *
 * @return {String} see description
 */

OpenAjax.a11y.RelatedElements.prototype.title = function () {
  return this.title;
};

/**
 * @method getRelatedElementsArray
 *
 * @memberOf OpenAjax.a11y.RelatedElements
 *
 * @desc Gets a list of RelatedElementInfo objects
 *
 * @return {Array} see description
 */

OpenAjax.a11y.RelatedElements.prototype.getRelatedElementsArray = function () {
  return this.related_elements_info;
};


/**
 * @method toString
 *
 * @memberOf OpenAjax.a11y.RelatedElements
 *
 * @desc Gets a string representing the relationship
 *
 * @return {Array} Array of RelatedElements objects
 */

OpenAjax.a11y.RelatedElements.prototype.toString = function () {
  return this.title + "(" + this.related_elements_info.length + " related elements)";
};
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                      FilteredCacheItemResults                    */
/* ---------------------------------------------------------------- */

/**
 * @constructor FilteredCacheItemResults
 *
 * @memberOf OpenAjax.a11y
 *
 * @desc Constructs a data structure of cache items associated with a rule category
 *       The cache items returned can be filtered by the tpe of evaluation result
 *
 * @param  {Object}  evaluation_result  - Evaluation result object containing the evaluation results
 *
 * @param  {String}  title     - Title for the group
 * @param  {String}  url       - URL to more information on the group
 * @param  {String}  desc      - Description of the group
 */

/**
 * @private
 * @constructor Internal Properties
 *
 * @property  {Boolean} is_tree       - At least one of the CacheItemResults contains child items
 * @propert   {Object}  ruleset       - Ruleset object containing the evaluation results
 * @property  {Object}  dom_cache     - dom cache to use in generating filtered results
 *
 * @property  {Number}  element_type  - Element type(s) included in this cache list;
 * @property  {Number}  filter        - Node result filter used on the list
 *
 * @property  {Array}   cache_item_results        - list of top level cache item results
 *
 * @property  {Boolean}  has_elements  - True if group contains at least one element
 *
 * @property  {Boolean}  summary_result     - Summary of the node results for
 *                                            the rule
 */

 OpenAjax.a11y.FilteredCacheItemResults = function(eval_results, title, url, desc) {

  this.title = "";
  this.url = "";
  this.desc = "";

  if (typeof title === 'string') this.title = title;
  if (typeof url   === 'string') this.url = url;
  if (typeof desc  === 'string') this.desc = desc;

  this.is_tree = false;
  this.evaluation_results = eval_results;
  this.dom_cache = eval_results.dom_cache;

  this.element_type = OpenAjax.a11y.ELEMENT_TYPE.UNDEFINED;
  this.filter       = OpenAjax.a11y.RESULT_FILTER.ALL;

  this.has_elements = false;

  this.node_result_summary = new OpenAjax.a11y.ElementResultSummary();

  this.rule_results_summary = new OpenAjax.a11y.RuleResultsSummary();

  this.cache_item_results = [];

};

/**
 * @method getTitle
 *
 * @memberOf OpenAjax.a11y.FilteredCacheItemResults
 *
 * @desc Returns the title of the group
 *
 * @return  {String} String representing the title of the group
 */

OpenAjax.a11y.FilteredCacheItemResults.prototype.getTitle = function() {

  return this.title;
};

/**
 * @method getURL
 *
 * @memberOf OpenAjax.a11y.FilteredCacheItemResults
 *
 * @desc Returns the url of the group, can be empty
 *
 * @return  {String} String of the url to more information about a group
 */

OpenAjax.a11y.FilteredCacheItemResults.prototype.getURL = function() {

  return this.url;
};

/**
 * @method getDescription
 *
 * @memberOf OpenAjax.a11y.FilteredCacheItemResults
 *
 * @desc Returns the description of the group, can be empty
 *
 * @return  {String} String describing the group of rules
 */

OpenAjax.a11y.FilteredCacheItemResults.prototype.getDescription = function() {

  return this.desc;
};

/**
 * @method isTree
 *
 * @memberOf OpenAjax.a11y.FilteredCacheItemResults
 *
 * @desc Tests if the cache items has a tree structure (otherwise simple list)
 *
 * @return  {Boolean}  true if cache items are organized as a tree, otherwise false
 */

OpenAjax.a11y.FilteredCacheItemResults.prototype.isTree = function() {

  return this.is_tree;
};


 /**
 * @method getElementResultSummary
 *
 * @memberOf OpenAjax.a11y.FilteredCacheItemResults
 *
 * @desc Gets numerical summary information about the node results
 *
 * @return {ElementResultSummary} Returns the ElementResultSummary object
 */

OpenAjax.a11y.FilteredCacheItemResults.prototype.getElementResultSummary = function () {

  return this.node_result_summary;

};

 /**
 * @method getRuleResultsSummary
 *
 * @memberOf OpenAjax.a11y.FilteredCacheItemResults
 *
 * @desc Gets numerical summary information about the rule results
 *
 * @return {RuleResultsSummary} Returns the rule result summary object
 */
OpenAjax.a11y.FilteredCacheItemResults.prototype.getRuleResultsSummary = function () {

  return this.rule_results_summary;

};




/**
 * @method hasResults
 *
 * @memberOf OpenAjax.a11y.FilteredCacheItemResults
 *
 * @desc Tests if any of the rules in this group applied to the content in the page
 *
 * @return {Boolean} True if any of the rule have results, otherwise false
 */

OpenAjax.a11y.FilteredCacheItemResults.prototype.hasResults = function () {

   return this.node_result_summary.hasResults();

};

/**
 * @method hasElements
 *
 * @memberOf OpenAjax.a11y.FilteredCacheItemResults
 *
 * @desc Tests if any of their are any elements of this type
 *
 * @return {Boolean} True if the group contains at least one element, otherwise false
 */

OpenAjax.a11y.FilteredCacheItemResults.prototype.hasElements = function () {

   return this.has_elements;

};

/**
 * @method updateSummary
 *
 * @memberOf OpenAjax.a11y.FilteredCacheItemResults
 *
 * @desc Updated summary result counts with cache item results
 *
 * @param  {Array}   cache_item_result  - Cache item result to add to summary information
 */

OpenAjax.a11y.FilteredCacheItemResults.prototype.updateSummary = function(cache_item_result) {

  this.node_result_summary.addElementResultSummary(cache_item_result.getElementResultSummary());

};

/**
 * @method getCacheItemResults
 *
 * @memberOf OpenAjax.a11y.FilteredCacheItemResults
 *
 * @desc Constructs a data structure of cache items associated with a rule category
 *       The cache items returned can be filtered by the tpe of evaluation result
 *
 * @param  {Number}  element_type             - Number representing the element types to be included
 * @param  {Number}  filter        (optional) - Number representing the evaluation results filter (default all results)
 */

 OpenAjax.a11y.FilteredCacheItemResults.prototype.getCacheItemResults = function(element_type, filter) {

//  OpenAjax.a11y.logger.debug("FILTER: " + filter );

  var ELEMENT_TYPE = OpenAjax.a11y.ELEMENT_TYPE;

  this.element_type  = element_type;

  if (typeof filter !== 'number') filter = OpenAjax.a11y.RESULT_FILTER.ALL;

  this.filter = filter;

  this.cache_item_results = [];

  var ci_result = null;

  switch (element_type) {

  case ELEMENT_TYPE.ALL:
    this.title = "All Elements";
    this.filterCacheItemsByElementResultsFromTree(this.dom_cache.element_cache.child_dom_elements, filter, true);
    break;

  case ELEMENT_TYPE.AUDIO_VIDEO:
    this.title = "Audio and Video Elements";
    this.filterCacheItemsByElementResultsFromTree(this.dom_cache.media_cache.media_elements, filter);
    break;

  case ELEMENT_TYPE.FORMS:
    this.title = "Form Elements";
    this.filterCacheItemsByElementResultsFromTree(this.dom_cache.controls_cache.child_cache_elements, filter);
    break;

  case ELEMENT_TYPE.HEADINGS_LANDMARKS:
    this.title = "Heading and Landmark Elements";
    var cache =  this.dom_cache.headings_landmarks_cache;

    if (cache.title_element) {
      ci_result = new OpenAjax.a11y.CacheItemResult(cache.title_element, filter, 1);
      if (ci_result) this.cache_item_results.push(ci_result);
    }

    if (cache.page_element)  {
      ci_result = new OpenAjax.a11y.CacheItemResult(cache.page_element, filter, 2);
      if (ci_result) this.cache_item_results.push(ci_result);
    }

    this.filterCacheItemsByElementResultsFromTree(cache.child_cache_elements, filter, 2);

    break;

  case ELEMENT_TYPE.IMAGES:
    this.title = "Image Elements";
    this.filterCacheItemsByElementResultsFromList(this.dom_cache.images_cache.image_elements, filter);
    break;

  case ELEMENT_TYPE.LINKS:
    this.title = "Link Elements";
    this.filterCacheItemsByElementResultsFromList(this.dom_cache.links_cache.link_elements, filter);
    break;

  case ELEMENT_TYPE.LAYOUT_TABLES:

    if (this.dom_cache.tables_cache.page_element)  {
      ci_result = new OpenAjax.a11y.CacheItemResult(this.dom_cache.tables_cache.page_element, filter, 1);
      if (ci_result) this.cache_item_results.push(ci_result);
    }

    this.title = "Table Elements";
    this.filterCacheItemsByElementResultsFromTree(this.dom_cache.tables_cache.child_cache_elements, filter, 1);
    break;

  case ELEMENT_TYPE.TEXT:
    this.title = "Elements with Text Content";
    this.filterCacheItemsByElementResultsFromList(this.dom_cache.text_cache.text_nodes, filter);
    break;

  case ELEMENT_TYPE.WIDGETS:
    this.title = "Widget Elements";
    this.filterCacheItemsByElementResultsFromTree(this.dom_cache.controls_cache.child_cache_elements, filter);
    break;

  default:
    break;

  }

};

/**
 * @method filterCacheItemsByElementResultsFromList
 *
 * @memberOf OpenAjax.a11y.FilteredCacheItemResults
 *
 * @desc Returns a lists of cache item results by filtered node results based on
 *       the filter.  Does not traverse the children of the cache items
 *
 * @param  {Array}   cache_items  - List of cache element items
 * @param  {Number}  filter       - Number representing the types of results
 *                                  to include in the array
 * @param  {Number}  start        - Start for the ordinal position
 */

OpenAjax.a11y.FilteredCacheItemResults.prototype.filterCacheItemsByElementResultsFromList = function(cache_items, filter, start) {

  if (typeof start !== 'number') start = 0;

  var index = start + 1;

  this.is_tree = false;

  var cache_items_len = cache_items.length;

  for (var i = 0; i < cache_items_len; i++) {

    var ci = cache_items[i];

    var ci_result = new OpenAjax.a11y.CacheItemResult(ci, filter, index);

    index++;

    this.updateSummary(ci_result);

    if (ci_result) this.cache_item_results.push(ci_result);

  }

};


/**
 * @method filterCacheItemsByElementResultsFromTree
 *
 * @memberOf OpenAjax.a11y.FilteredCacheItemResults
 *
 * @desc Returns an nested lists of cache item results by node results based on the filter
 *
 * @param  {Array}    cache_items  - Array of cache element items
 * @param  {Number}   filter       - Number representing the types of results
 *                                   to include in the array
 * @param  {Boolean}  as_list      - Optional parameter to force result to be a list
 * @param  {Number}   start        - Start for the ordinal position
 *
 * @return {Number}  Number of cache items that were not included due to filter settings
 */

OpenAjax.a11y.FilteredCacheItemResults.prototype.filterCacheItemsByElementResultsFromTree = function(cache_items, filter, as_list, start) {

   function traverseCacheItems(cache_item_result, cache_item) {

    var ci_result = new OpenAjax.a11y.CacheItemResult(cache_item, filter, index);

    index++;

    filtered_cache_item_results.updateSummary(ci_result);

    if (cache_item_result && !as_list) {
      cache_item_result.addChildCacheItemResult(ci_result);
      is_tree = true;
    } else {
      cache_item_results.push(ci_result);
    }

    var child_cache_elements     = [];
    var child_cache_elements_len = 0;

    if (cache_item.child_cache_elements) child_cache_elements = cache_item.child_cache_elements;
    else if (cache_item.child_dom_elements) child_cache_elements = cache_item.child_dom_elements;

    child_cache_elements_len = child_cache_elements.length;

//    OpenAjax.a11y.logger.debug("CI Result: " + ci_result + "   flag: " + OpenAjax.a11y.FilteredCacheItemResults.add_flag + "   children: " + child_cache_elements_len);

    for (var i = 0; i < child_cache_elements_len; i++) {

      var cces = child_cache_elements[i];
      traverseCacheItems(ci_result, cces);

    }

  }

  var is_tree = false;

  var filtered_cache_item_results = this;

  if (typeof as_list !== 'boolean') as_list = false;

  if (typeof start !== 'number') start = 0;

  var index = start + 1;

  var cache_item_results = [];

  var cache_items_len = cache_items.length;

  for (var i = 0; i < cache_items_len; i++) {
    var ci = cache_items[i];
    traverseCacheItems(null, ci);
  }

  this.is_tree = is_tree;
  this.cache_item_results = cache_item_results;

  OpenAjax.a11y.logger.debug("IS TREE: " + this.is_tree);

};


/**
 * @method toJSON
 *
 * @memberOf OpenAjax.a11y.FilteredCacheItemResults
 *
 * @desc Returns an JSON representation of the filtered cache item results
 *
 * @param {String} prefix  -  A prefix string typically spaces
 *
 * @return  {String}  JSON string representing the report data
 */

OpenAjax.a11y.FilteredCacheItemResults.prototype.toJSON = function(prefix, element_type_title) {

  var next_prefix = "";

  if (typeof prefix !== 'string' || prefix.length === 0) prefix = "";
  else next_prefix = prefix + "    ";

  if (typeof  element_type_title !== 'string' ||  element_type_title.length === 0)  element_type_title = "no element title";

  var json = "";

  var ruleset_title   = this.evaluation_results.getRulesetTitle();
  var ruleset_version = this.evaluation_results.getRulesetVersion();
  var ruleset_id      = this.evaluation_results.getRulesetId();

  var eval_title = this.evaluation_results.getTitle();
  var eval_url   = this.evaluation_results.getURL();
  var date       = this.evaluation_results.getDate().split(':');
  var eval_time  = date[1] + ":" + date[2];
  var eval_date  = date[0];

  if (typeof eval_title != 'string' && eval_title.length === 0) eval_title = "no evaluation title";

  json += "{";

  json += prefix + "  \"element_type_title\" : " + JSON.stringify(element_type_title) + ",";

  json += prefix + "  \"ruleset_title\"      : " + JSON.stringify(ruleset_title)      + ",";
  json += prefix + "  \"ruleset_version\"    : " + JSON.stringify(ruleset_version)    + ",";
  json += prefix + "  \"ruleset_id\"         : \"" + ruleset_id + "\",";

  json += prefix + "  \"eval_title\"    : " + JSON.stringify(eval_title) + ",";
  json += prefix + "  \"eval_url\"      : " + JSON.stringify(eval_url)   + ",";
  json += prefix + "  \"eval_date\"     : " + JSON.stringify(eval_date)  + ",";
  json += prefix + "  \"eval_time\"     : " + JSON.stringify(eval_time)  + ",";


  if (this.is_tree) json += prefix + "  \"is_tree\" : true,";
  else json += prefix + "  \"is_tree\" : false,";

  json += prefix + "  \"results\" : [";

  var ci_results = this.cache_item_results;
  var ci_results_len = ci_results.length;
  var ci_results_last = ci_results_len - 1;

//  OpenAjax.a11y.logger.debug("  Number of cache results: " + ci_results.length);

  for (var i = 0; i < ci_results_len; i++) {

//    OpenAjax.a11y.logger.debug("  " + i + ": " + ci_results[i].cache_item.cache_id);

    json += ci_results[i].toJSON(next_prefix);

    if (i !== ci_results_last) json += ",";
  }
  json += prefix + "  ]";

  json += prefix + "}";

  return json;

};

/**
 * @method toHTML
 *
 * @memberOf OpenAjax.a11y.FilteredCacheItemResults
 *
 * @desc Returns an HTML representation of the filtered cache item results
 *
 * @param  {String}  title  -   Title of the report
 *
 * @return  {String}  String representing the HTML for the report
 */

OpenAjax.a11y.FilteredCacheItemResults.prototype.toHTML = function(title) {

  var evaluation_results = this.evaluation_results;

  var wcag20_nls  = OpenAjax.a11y.nls.WCAG20.getNLS();

  var html = "";

  html += "<!DOCTYPE html>\n";
  html += "<html xml:lang='en' lang='en'>\n";
  html += "  <head>\n";
  html += "    <title>" + title + "</title>\n";
  html += "    <meta charset='ISO-8859-1' />\n";
  html += OpenAjax.a11y.report_css;
  html += "    <script type='text/javascript'>\n";
  html += "      var OAA_REPORT = {};\n";
  html += "      OAA_REPORT.element_type_data = " + this.toJSON("\n      ", title) + ";\n\n";
  html += "      OAA_REPORT.ruleset = " + evaluation_results.toJSON("\n      ", evaluation_results.getRulesetTitle()) + ";\n\n";
  html += "      OAA_REPORT.wcag20  = " + wcag20_nls.toJSON("\n      ") + ";\n\n";
  html += "    </script>\n";
  html += OpenAjax.a11y.report_element_type_view_js;
  html += "  </head>\n";
  html += OpenAjax.a11y.report_element_type_view_body;
  html += "</html>\n";

  return html;
};

/**
 * @method toCSV
 *
 * @memberOf OpenAjax.a11y.FilteredCacheItemResults
 *
 * @desc Returns an CSV representation of the filtered cache item results
 *
 * @param  {String}  title  -   Title of the report
 *
 * @return  {String}  String representing the CSV for the report
 */

OpenAjax.a11y.FilteredCacheItemResults.prototype.toCSV = function(title) {

  var eval_title = this.evaluation_result.title;
  var eval_url   = this.evaluation_result.url;
  var date       = this.evaluation_result.date.split(':');
  var eval_time  = date[1] + ":" + date[2];
  var eval_date  = date[0];

  if (eval_title.length > 30) eval_title = eval_title.slice(0,27) + "...";

  var csv = title + "\n\n";

  csv += "\"OAA ID\"";
  csv += ",\"Element Description\"";
  csv += ",\"Element id attribute\"";
  csv += ",\"Element class attribute\"";
  csv += ",\"Parent Landmark\"";
  csv += ",\"Rule ID\"";
  csv += ",\"Type\"";
  csv += ",\"WCAG 2.0 Success Criterion\"";
  csv += ",\"WCAG 2.0 Level\"";
  csv += ",\"Severity\"";
  csv += ",\"Evaluation Result Message\"";
  csv += ",\"Evaluation Date\"";
  csv += ",\"Evaluation Time\"";
  csv += "\"URL Evaluated\"";
  csv += ",\"Title of URL Evaluated\"";
  csv += "\n";

  var result_items     = this.cache_item_results;
  var result_items_len = result_items.length;

  for (var i = 0; i < result_items_len; i++) {

     var result_item      = result_items[i];
     var node_results     = result_item.node_results;
     var node_results_len = node_results.length;

     for (var j = 0; j < node_results_len; j++) {

       var node_result = node_results[j];

       var dom_element = result_item.cache_item;

       if (result_item.cache_item.dom_element) dom_element = result_item.cache_item.dom_element;
       else dom_element = result_item.cache_item;

       var cache_item = node_result.getCacheItem();

       csv += "\"" + cache_item.cache_id;
       csv += "\",\"" + OpenAjax.a11y.util.escapeForJSON(cache_item.toString());
       csv += "\",\"" + dom_element.getId();
       csv += "\",\"" + dom_element.getClassName();
       csv += "\",\"" + dom_element.getParentLandmark();
       csv += "\",\"" + node_result.getRuleIdNLS() + ": " + OpenAjax.a11y.util.escapeForJSON(node_result.getRuleSummary());
       csv += "\",\"" + node_result.getRuleType();
       csv += "\",\"" + node_result.getPrimarySuccessCriterion();
       csv += "\",\"" + node_result.getWCAG20Level();
       csv += "\",\"" + node_result.getResultValue().label;
       csv += "\",\"" + OpenAjax.a11y.util.escapeForJSON(node_result.getResultMessage());
       csv += "\",\"" + eval_date;
       csv += "\",\"" + eval_time;
       csv += "\",\"" + OpenAjax.a11y.util.escapeForJSON(eval_title);
       csv += "\",\"" + eval_url;
       csv += "\"\n";

    }
  }

  return csv;
};


/* ---------------------------------------------------------------- */
/*                           CacheItemResult                        */
/* ---------------------------------------------------------------- */

/**
 * @constructor CacheItemResult
 *
 * @memberOf OpenAjax.a11y
 *
 * @desc Represents one of the cache items in a cache items filter result object
 *
 * @param  {CacheItem}  cache_item  - cache item to be included in filtered results
 * @param  {Number}     filter      - Number representing the types of results
 *                                    to include in the array
 * @param  {Number}     pos         - Position in a list
 */

/**
 * @private
 * @constructor Internal Properties
 *
 * @property {Object}  cache_item  - Cache item object
 *
 * @property {Number}  ordinal_position      - Position in a list
 *
 * @property {Array}   filtered_node_results - Filtered node results of the cache item
 *
 * @property  {SummaryResult}  summary_result - Summary of the node results for
 *                                            the cache item
 *
 * @property {Number}  number_of_node_results_filtered  - Number of node results that
 *                                            have been filtered from the list
 *
 * @property {Array}   children  - Array of cache item result objects  (if there
 *                                 are parent/child relationships, like headings
 *                                 and landmarks)
 */

 OpenAjax.a11y.CacheItemResult = function(cache_item, filter, pos) {

  function addElementResultsWebsite(node_results) {

    var node_results_len = node_results.length;
    var count = 0;

    for (var i = 0; i < node_results_len; i++) {
      var node_result = node_results[i];
      if (node_result.isScopeWebsite()) {
        filtered_node_results.push(node_result);
        count++;
      }
    }

    return count;
  }

  function addElementResultsPage(node_results) {

    var node_results_len = node_results.length;
    var count = 0;

    for (var i = 0; i < node_results_len; i++) {
      var node_result = node_results[i];
      if (node_result.isScopePage()) {
        filtered_node_results.push(node_result);
        count++;
      }
    }

    return count;
  }

  function addElementResultsElement(node_results) {

    var node_results_len = node_results.length;
    var count = 0;

    for (var i = 0; i < node_results_len; i++) {
      var node_result = node_results[i];
      if (node_result.isScopeElement()) {
        filtered_node_results.push(node_result);
        count++;
      }
    }

    return count;
  }

  function addElementResults(node_results) {

    var node_results_len = node_results.length;

    for (var i = 0; i < node_results_len; i++) filtered_node_results.push(node_results[i]);

    return node_results_len;
  }


  this.cache_item = cache_item;

  this.filtered_node_results     = [];

  this.number_of_node_results_filtered = 0;

  this.is_tree = false;

  this.ordinal_position = pos;

  var rs = new OpenAjax.a11y.ElementResultSummary();

  this.children = [];

  var RESULT_FILTER = OpenAjax.a11y.RESULT_FILTER;

  var filtered_node_results = this.filtered_node_results;

  var de = cache_item;
  if (typeof cache_item.dom_element  != 'undefined') de = cache_item.dom_element;

  if (RESULT_FILTER.VIOLATION            & filter) rs.addViolations(addElementResults(de.rules_violations));
  if (RESULT_FILTER.WEBSITE_MANUAL_CHECK & filter) rs.addManualChecks(addElementResultsWebsite(de.rules_manual_checks));
  if (RESULT_FILTER.PAGE_MANUAL_CHECK    & filter) rs.addManualChecks(addElementResultsPage(de.rules_manual_checks));
  if (RESULT_FILTER.ELEMENT_MANUAL_CHECK & filter) rs.addManualChecks(addElementResultsElement(de.rules_manual_checks));
  if (RESULT_FILTER.WARNING              & filter) rs.addWarnings(addElementResults(de.rules_warnings));
  if (RESULT_FILTER.PASS                 & filter) rs.addPassed(addElementResults(de.rules_passed));
  if (RESULT_FILTER.HIDDEN               & filter) rs.addHidden(addElementResults(de.rules_hidden));

  this.number_of_node_results_filtered  = (de.rules_passed.length        - rs.passed);
  this.number_of_node_results_filtered += (de.rules_violations.length    - rs.violations);
  this.number_of_node_results_filtered += (de.rules_warnings.length      - rs.warnings);
  this.number_of_node_results_filtered += (de.rules_manual_checks.length - rs.manual_checks);
  this.number_of_node_results_filtered += (de.rules_hidden.length        - rs.hidden);

  this.node_result_summary = rs;


};

/**
 * @method addChildCacheItemResult
 *
 * @memberOf OpenAjax.a11y.CacheItemResult
 *
 * @desc Adds a cache item result to the children list of a cache item result object
 *
 * @param  {Object}  cache_item  - cache item to be included in filtered results
 */

OpenAjax.a11y.CacheItemResult.prototype.addChildCacheItemResult = function(cache_item) {

  if (cache_item) {
    this.children.push(cache_item);
    this.is_tree = true;
  }

};


/**
 * @method isTree
 *
 * @memberOf OpenAjax.a11y.CacheItemResult
 *
 * @desc Tests if the cache items has a tree structure (otherwise simple list)
 *
 * @return  {Boolean}  true if cache items are organized as a tree, otherwise false
 */

OpenAjax.a11y.CacheItemResult.prototype.isTree = function() {

  return this.is_tree;
};

/**
 * @method agetCacheItem
 *
 * @memberOf OpenAjax.a11y.CacheItemResult
 *
 * @desc Get cache item object
 *
 * @return  {Object}  Cache item object
 */

OpenAjax.a11y.CacheItemResult.prototype.getCacheItem = function() {

  return this.cache_item;

};


/**
 * @method getElementResultSummary
 *
 * @memberOf OpenAjax.a11y.CacheItemResult
 *
 * @desc Gets numerical summary information about the cache item results
 *
 * @return {ResultSummary} Returns the ResultSummary object
 *
 */

OpenAjax.a11y.CacheItemResult.prototype.getElementResultSummary = function () {

  return this.node_result_summary;

};

/**
 * @method hasResults
 *
 * @memberOf OpenAjax.a11y.CacheItemResult
 *
 * @desc Tests if node has any rule results
 *
 * @param  {Boolean}  True if there are rule results, otherwise false
 */

OpenAjax.a11y.CacheItemResult.prototype.hasResults = function() {

  return this.node_result_summary.hasResults();

};

/**
 * @method getHighestResultValueConstant
 *
 * @memberOf OpenAjax.a11y.CacheItemResult
 *
 * @desc Gets highest result value for the node results for this cache item
 *
 * @return {Number} Number representing the highest result value
 */

OpenAjax.a11y.CacheItemResult.prototype.getHighestResultValueConstant = function () {

  var RESULT_VALUE =  OpenAjax.a11y.RESULT_VALUE;

  var rs = this.getElementResultSummary();

  if (rs.violations)    return RESULT_VALUE.VIOLATION;
  if (rs.warnings)      return RESULT_VALUE.WARNING;
  if (rs.manual_checks) return RESULT_VALUE.MANUAL_CHECK;
  if (rs.passed)        return RESULT_VALUE.PASS;
//  if (rs.hidden)        return RESULT_VALUE.HIDDEN;

  return RESULT_VALUE.NONE;

};


/**
 * @method getElementResults
 *
 * @memberOf OpenAjax.a11y.CacheItemResult
 *
 * @desc Gets an array of node results for the cache item
 *
 * @param  {Array}  Array of node results
 */

OpenAjax.a11y.CacheItemResult.prototype.getElementResults = function() {

  return this.filtered_node_results;

};

/**
 * @method getOrdinalPosition
 *
 * @memberOf OpenAjax.a11y.CacheItemResult
 *
 * @desc Gets ordinal position of the cache item in the DOM, 1 based
 *
 * @param  {Number}  Number representing the ordinal position
 */

OpenAjax.a11y.CacheItemResult.prototype.getOrdinalPosition = function() {

  return this.ordinal_position;

};


/**
 * @method toJSON
 *
 * @memberOf OpenAjax.a11y.CacheItemResult
 *
 * @desc Returns a JSON representation of the cache item
 *
 * @param {String} prefix  -  A prefix string typically spaces
 *
 * @return  {String}  String representing the cache item result object
 */

OpenAjax.a11y.CacheItemResult.prototype.toJSON = function(prefix) {

  var next_prefix = "";
  var next_prefix_2 = "";

  if (typeof prefix !== 'string' || prefix.length === 0) prefix = "";
  else {
    next_prefix = prefix + "  ";
    next_prefix_2 = next_prefix + "  ";
  }

  var i;
  var json = "";

  var rs = this.getElementResultSummary();

  json += prefix + "{ \"cache_item\"    : \"" + OpenAjax.a11y.util.escapeForJSON(this.cache_item.toString()) + "\",";
  json += prefix + "  \"cache_id\"      : \"" + this.cache_item.cache_id + "\",";
  json += prefix + "  \"violations\"    : "  + rs.violations    + ",";
  json += prefix + "  \"manual_checks\" : "  + rs.manual_checks + ",";
  json += prefix + "  \"warnings\"      : "  + rs.warnings      + ",";
  json += prefix + "  \"passed\"        : "  + rs.passed        + ",";
  json += prefix + "  \"hidden\"        : "  + rs.hidden        + ",";
  json += prefix + "  \"total\"         : "  + rs.total         + ",";

  json += prefix + "  \"filtered\"      : "  + this.number_of_node_results_filtered  + ",";

  if (this.filtered_node_results.length > 0) {
    json += prefix + "  \"node_results\" : [";

    var n_results      = this.filtered_node_results;
    var n_results_len  = n_results.length;
    var n_results_last = n_results_len - 1;

    for (i = 0; i < n_results_len; i++) {
      json += n_results[i].toJSON(next_prefix);
      if (i !== n_results_last) json += ",";
    }
    json += prefix + "  ],";
  }
  else {
    json += prefix + "  \"node_results\" : [],";
  }

  if (this.children.length > 0) {
    json += prefix + "  \"children\" : [";

    var children      = this.children;
    var children_len  = children.length;
    var children_last = children_len - 1;

    for (i = 0; i < children_len; i++) {
      json += children[i].toJSON(next_prefix_2);
      if (i !== children_last) json += ',';
    }
    json += prefix + "  ]";
  }
  else {
    json += prefix + "  \"children\" : []";
  }

  json += prefix + "}";

  return json;

};
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                      RuleGroupResult                             */
/* ---------------------------------------------------------------- */


/**
 * @constructor RuleGroupResult
 *
 * @memberOf OpenAjax.a11y
 *
 * @desc Constructs a data structure of cache items associated with a rule category
 *       Node results can be filtered when a rule result is added to the group
 *
 * @param  {Object}  evaluation_result  - ruleset and evaluation results used to generate
 *                              the filtered results
 * @param  {String}  group_id  - id used to identify this grouping of rules and filtering rules
 *
 * @param  {String}  title     - Title for the group
 * @param  {String}  url       - URL to more information on the group
 * @param  {String}  desc      - Description of the group
 *
 * @property  {Object}  rule_group_information - Information on rules in the group
 * @property  {Array}   rule_results           - List of rule result objects in the group
 *
 * @property  {EvaluationResult} evaluation_result - ruleset and evaluation results
 *                                                   used to generate the filtered
 *                                                   results
 *
 * @property  {RuleResultsSummary}  rule_results_summary  - Summary of the rule results for
 *                                                           the group
 */


OpenAjax.a11y.RuleGroupResult = function(eval_result, title, url, desc) {

  if (typeof title !== 'string') title = "no title";
  if (typeof url   !== 'string') url   = "";
  if (typeof desc  !== 'string') desc  = "";

  this.rule_group_information = new OpenAjax.a11y.info.RuleGroupInfo(title, url, desc, 0, 0);

  this.evaluation_result = eval_result;

  this.rule_results = [];

  this.rule_results_summary = new OpenAjax.a11y.info.RuleResultsSummary();

  this.implementation_nls = "";

};


/**
 * @method getEvaluationResult
 *
 * @memberOf OpenAjax.a11y.RuleGroupResult
 *
 * @desc Returns the evaluation result the rule group result is a part of
 *
 * @return {EvaluationResult}  see description
 */

OpenAjax.a11y.RuleGroupResult.prototype.getEvaluationResult = function () {
  return this.evaluation_result;
};

/**
 * @method getImplementationScore
 *
 * @memberOf OpenAjax.a11y.RuleGroupResult
 *
 * @desc Return a numerical value between (0-100) indicated
 *
 * @return {Number}  see description
 */

OpenAjax.a11y.RuleGroupResult.prototype.getImplementationScore = function () {
  return this.rule_results_summary.implementation_score;
};


/**
 * @method getImplementationValue
 *
 * @memberOf OpenAjax.a11y.RuleGroupResult
 *
 * @desc Return a numerical constant indicating the level of implementation:<br/>
 *         OpenAjax.a11y.IMPLEMENTATION_VALUE.UNDEFINED    <br/>
 *         OpenAjax.a11y.IMPLEMENTATION_VALUE.NOT_APPLICABLE<br/>
 *         OpenAjax.a11y.IMPLEMENTATION_VALUE.NOT_IMPLEMENTED<br/>
 *         OpenAjax.a11y.IMPLEMENTATION_VALUE.PARTIAL_IMPLEMENTATION<br/>
 *         OpenAjax.a11y.IMPLEMENTATION_VALUE.ALMOST_COMPLETE<br/>
 *         OpenAjax.a11y.IMPLEMENTATION_VALUE.COMPLETE<br/>
 *         OpenAjax.a11y.IMPLEMENTATION_VALUE.COMPLETE_WITH_MANUAL_CHECKS<br/>
 *         OpenAjax.a11y.IMPLEMENTATION_VALUE.MANUAL_CHECKS_ONLY<br/>
 *
 * @return {Number}  see description
 */

OpenAjax.a11y.RuleGroupResult.prototype.getImplementationValue = function () {
  return this.rule_results_summary.implementation_value;
};

 /**
 * @method getImplementationValueNLS
 *
 * @memberOf OpenAjax.a11y.RuleGroupResult
 *
 * @desc Returns a string indicating the level of implementation: <br/>
 *         "Undefined"    <br/>
 *         "Not applicable"<br/>
 *         "Not implemented"<br/>
 *         "Partial implementation""<br/>
 *         "Almost complete"<br/>
 *         "Complete"<br/>
 *         "Complete with manual checks"<br/>
 *         "Manual checks only"<br/>
 *
 * @return {String} see description
 */

OpenAjax.a11y.RuleGroupResult.prototype.getImplementationValueNLS = function () {

  var IMPLEMENTATION_VALUE = OpenAjax.a11y.IMPLEMENTATION_VALUE;

  if (this.implementation_nls === "") {
    var iv = this.getImplementationValue();
    var nls = "Undefined";

    if (iv === IMPLEMENTATION_VALUE.NOT_APPLICABLE) nls = "Not Applicable";
    else if (iv === IMPLEMENTATION_VALUE.NOT_IMPLEMENTED) nls = "Not Implemented";
    else if (iv === IMPLEMENTATION_VALUE.PARTIAL_IMPLEMENTATION) nls = "Partial Implementation";
    else if (iv === IMPLEMENTATION_VALUE.ALMOST_COMPLETE) nls = "Almost Complete";
    else if (iv === IMPLEMENTATION_VALUE.COMPLETE) nls = "Complete";
    else if (iv === IMPLEMENTATION_VALUE.COMPLETE_WITH_MANUAL_CHECKS) nls = "Complete with Manual Checks";
    else if (iv === IMPLEMENTATION_VALUE.MANUAL_CHECKS_ONLY) nls = "Manual Checks Only";

    this.implementation_nls = nls;
  }

  return this.implementation_nls;

};

/**
 * @method getRuleResultsArray
 *
 * @memberOf OpenAjax.a11y.RuleGroupResult
 *
 * @desc Return a list of rule results associated with the group
 *
 * @return {Array}  see description
 */

OpenAjax.a11y.RuleGroupResult.prototype.getRuleResultsArray = function () {
  return this.rule_results;
};



/**
 * @method getRuleResultsSummary
 *
 * @memberOf OpenAjax.a11y.RuleGroupResult
 *
 * @desc Gets numerical summary information about the rule results
 *
 * @return {RuleResultsSummary} Returns the rule result summary object
 */

OpenAjax.a11y.RuleGroupResult.prototype.getRuleResultsSummary = function () {

  return this.rule_results_summary;

};

/**
 * @method getRuleGroupInfo
 *
 * @memberOf OpenAjax.a11y.RuleGroupResult
 *
 * @desc Return information on the group of rules
 *
 * @return {RuleGroupInfo}  RuleGroupInfo object
 */

OpenAjax.a11y.RuleGroupResult.prototype.getRuleGroupInfo = function () {
  return this.rule_group_information;
};


/**
 * @method hasRuleResults
 *
 * @memberOf OpenAjax.a11y.RuleGroupResult
 *
 * @desc Tests if any of the rules in this group applied to the content in the page
 *       Basically is there at least one rule result that was a violation, warning,
 *       manual check or pass
 *
 * @return {Boolean} True if any of the rule have results, otherwise false
 */

OpenAjax.a11y.RuleGroupResult.prototype.hasRuleResults = function () {

   return this.rule_results_summary.hasResults();

};

/**
 * @method hasRules
 *
 * @memberOf OpenAjax.a11y.RuleGroupResult
 *
 * @desc Tests if their are any rule results in this group
 *
 * @return {Boolean} True if the group contains at least one rule, otherwise false
 */

OpenAjax.a11y.RuleGroupResult.prototype.hasRules = function () {

   return this.rule_results.length > 0;

};


/**
 * @method addRuleResult
 * @private
 *
 * @memberOf OpenAjax.a11y.RuleGroupResult
 *
 * @desc Adds a rule result to the grouping aggregation of results if the group id has a match in the group
 *
 * @param  {RuleResult}  rule_result   - Filtered rule result object to aggregate
 */

OpenAjax.a11y.RuleGroupResult.prototype.addRuleResult = function(rule_result) {

  this.rule_results.push(rule_result);
  this.rule_results_summary.addRuleResult(rule_result);

  if (rule_result.isRuleRequired()) this.getRuleGroupInfo().incRequiredRuleCount();
  else this.getRuleGroupInfo().incRecommendedRuleCount();

};


/**
 * @method toJSON
 *
 * @memberOf OpenAjax.a11y.RuleGroupResult
 *
 * @desc Returns an JSON representation of the rule category results
 *
 * @param {String}  prefix           -  A prefix string typically spaces
 * @param {Boolean} flag (optional)  -  True (default) to include filtered element results, false to not include
 *
 * @return  {String}  JSON string representing the report data
 */

OpenAjax.a11y.RuleGroupResult.prototype.toJSON = function(prefix, flag) {

  if (typeof prefix !== 'string') prefix = '';
  if (typeof flag   !== 'boolean') flag = true;

  var cleanForUTF8  = OpenAjax.a11y.util.cleanForUTF8;

  var rule_group_info = this.getRuleGroupInfo();
  var ruleset         = this.evaluation_result.getRuleset();
  var ruleset_info    = ruleset.getRulesetInfo();

  var eval_title = this.evaluation_result.title;
  var eval_url   = this.evaluation_result.url;
  var date       = this.evaluation_result.date.split(':');
  var eval_time  = date[1] + ":" + date[2];
  var eval_date  = date[0];

  var json = "";

  json += prefix + "{";

  json += prefix + "  \"eval_url\"                  : " + JSON.stringify(cleanForUTF8(eval_url))   + ",\n";
  json += prefix + "  \"eval_url_encoded\"          : " + JSON.stringify(encodeURI(eval_url))      + ",\n";
  json += prefix + "  \"eval_title\"                : " + JSON.stringify(cleanForUTF8(eval_title)) + ",\n";

  json += prefix + "  \"ruleset_id\"                : " + JSON.stringify(ruleset.getId())         + ",\n";
  json += prefix + "  \"ruleset_title\"             : " + JSON.stringify(ruleset_info.title)      + ",\n";
  json += prefix + "  \"ruleset_abbrev\"            : " + JSON.stringify(ruleset_info.abbrev)     + ",\n";
  json += prefix + "  \"ruleset_version\"           : " + JSON.stringify(ruleset_info.version)    + ",\n";

  json += prefix + "  \"group_title\"   : " + JSON.stringify(rule_group_info.title) + ",\n";
  json += prefix + "  \"group_url\"     : " + JSON.stringify(rule_group_info.url)   + ",\n";

  json += prefix + "  \"rule_results\" : [\n";

  var rule_results     = this.rule_results;
  var rule_results_len = rule_results.length;
  var comma_len   = rule_results_len - 1;

  for (var i = 0; i < rule_results_len; i++) {
    json += rule_results[i].toJSON(prefix + "  ", flag);
    if (i < comma_len) json += ",";
  }

  json += prefix + "  ]\n";

  json += "}";

  return json;

};




/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                            Properties NLS                        */
/* ---------------------------------------------------------------- */

/**
 * @constructor Cache
 *
 * @memberOf OpenAjax.a11y.nls
 *
 * @desc Constructs a DOMCache Object
 *
 * @property {String}  nls       - NLS cache items for properties
 */

OpenAjax.a11y.nls.Cache = function() {

  var cache_nls = {};

  return {
    /**
     * @method addCacheNLSFromJSON()
     *
     * @memberOf OpenAjax.a11y.nls.Cache
     *
     * @desc Constructs a DOMCache Object
     *
     * @param  {locale}  locale         - Language code
     * @param  {Object}  cache_nls_data - NLS cache items for properties
     */

    addCacheNLSFromJSON : function(locale, cache_nls_data) {
      cache_nls[locale] = cache_nls_data;
    },

    /**
     * @method getCacheNLS
     *
     * @memberOf OpenAjax.a11y.nls.Cache
     *
     * @desc Returns the current cache nls object
     *
     * @param  {String}  loc  -  String representing the language
     */

    getCacheNLS : function(loc) {
      var locale = "en-us";
      if ((typeof loc === 'string') && loc.length) locale = loc;
      cache_nls[locale];
    },

    /**
     * @method getElementResultValueNLS
     *
     * @memberOf OpenAjax.a11y.nls.Cache
     *
     * @desc Gets a label for the element result value
     *
     * @param  {Number}  result_value  -  The constant representing the element result value
     * @param  {String}  loc  -  String representing the language
     *
     * @return {String} see description
     */

    getElementResultValueNLS : function(result_value, loc) {
      var locale = "en-us";
      if ((typeof loc === 'string') && loc.length) locale = loc;
      return cache_nls[locale].element_result_nls[result_value];
    },

    /**
     * @method getRuleResultValueNLS
     *
     * @memberOf OpenAjax.a11y.nls.Cache
     *
     * @desc Gets a label for the rule result value
     *
     * @param  {Number}  result_value  -  The constant representing the rule result value
     * @param  {String}  loc  -  String representing the language
     *
     * @return {String} see description
     */

    getRuleResultValueNLS : function(result_value, loc) {
      var locale = "en-us";
      if ((typeof loc === 'string') && loc.length) locale = loc;
      return cache_nls[locale].rule_result_nls[result_value];
    },


    /**
     * @method getLabelAndValueNLS
     *
     * @memberOf OpenAjax.a11y.nls.Cache
     *
     * @desc Returns the label, human readable value and description of a cache property
     *
     * @param  {String}           property  - The object property
     * @param  {String | Number}  value     - Current value of a property
     * @param  {String}            loc      -  String representing the language
     *
     * @return {Object} Returns object with three properties 'label', 'value' and 'description'
     */

    getLabelAndValueNLS : function (property, value, loc) {
      var locale = "en-us";
      if ((typeof loc === 'string') && loc.length) locale = loc;

      var info = {};  // return object

      info.label       = property;
      info.value       = value;
      info.description = "no description";

      var locale_nls = cache_nls[locale];

      if (locale_nls) {

        var cp = locale_nls.resource_properties[property];

        // if null return default
        if (!cp) return info;

        if (typeof cp.label === 'string')       info.label       = cp.label;
        if (typeof cp.description === 'string') info.description = cp.description;

        switch(typeof value) {

        case 'string':

          if (value !== "") info.value = value;
          else info.value = "no " + info.label + " defined";
          break;


        case 'object':

          if (value) info.value = value.toString();
          else info.value = "no " + info.label + " defined";
          break;

        case 'boolean':
          if (value)
            info.value = locale_nls.boolean_values.true_value;
          else
            info.value = locale_nls.boolean_values.false_value;
          break;

        case 'number':
          if (cp.values && cp.values[value])
            info.value = cp.values[value].toString();
          else
            info.value = String(value);

          break;

        default:
          break;
        }
      }

      return info;
    },

    /**
     * @method getLabelNLS
     *
     * @memberOf OpenAjax.a11y.nls.Cache
     *
     * @desc Returns the label and description of a cache property
     *
     * @param  {String}  property  - The object property
     * @param  {String}  loc       -  String representing the language
     *
     * @return {Object} Returns object with two properties 'label' and 'description'
     */

    getLabelNLS : function (property, loc) {
      var locale = "en-us";
      if ((typeof loc === 'string') && loc.length) locale = loc;

      var info = {};  // return object

      info.label       = property;
      info.description = "";

      var locale_nls = cache_nls[locale];

      if (locale_nls) {

        var cp = locale_nls.resource_properties[property];

        // if null return default
        if (!cp) return info;

        if (cp.label)       info.label       = cp.label;
        if (cp.description) info.description = cp.description;

      }

      return info;
    },

    /**
     * @method getValueNLS
     *
     * @memberOf OpenAjax.a11y.nls.Cache
     *
     * @desc Returns the value of a cache property
     *
     * @param  {String}           property  - The object property
     * @param  {String | Number}  value     - Current value of a property
     * @param  {String}  loc                -  String representing the language
     *
     * @return {String} Returns string with the localized value of a property
     */

    getValueNLS : function (property, value, loc) {
      var locale = "en-us";
      if ((typeof loc === 'string') && loc.length) locale = loc;

      var str = "";  // return object

      var locale_nls = cache_nls[locale];

      if (locale_nls) {

        var cp = locale_nls.resource_properties[property];

        // if null return default
        if (!cp) return value;

        switch(typeof value) {

        case 'boolean':

          if (value)
            str = locale_nls.boolean_values.true_value;
          else
            str = locale_nls.boolean_values.false_value;
          break;

        case 'number':

//          OpenAjax.a11y.logger.debug("Number property: " + property);

          if (cp.values)
            str = cp.values[value].toString();
          else
            str = String(value);

          break;

        default:
          break;
        }
      }

      return str;
    },

    /**
     * @method getYesNoNLS
     *
     * @memberOf OpenAjax.a11y.nls.Cache
     *
     * @desc Get a localized "Yes" or "No" string
     *
     * @param {Boolean}  value  - A boolean value to get  string
     * @param {String}   loc    - String representing the language
     *
     * @return {String} Returns 'Yes" if true, otherwise 'No'
     */

    getYesNoNLS : function (value, loc) {
      var locale = "en-us";
      if ((typeof loc === 'string') && loc.length) locale = loc;

      var locale_nls = cache_nls[locale];

      if (typeof value !== 'boolean') return locale_nls.not_boolean_value;

      if (value) return locale_nls.yes_no_values.yes_value;

      return locale_nls.yes_no_values.no_value;
    },

    /**
     * @method getBooleanNLS
     *
     * @memberOf OpenAjax.a11y.nls.Cache
     *
     * @desc Get a localized "Yes" or "No" string
     *
     * @param {Boolean}  value  - A boolean value to get  string
     * @param {String}   loc    - String representing the language
     *
     * @return {String} Returns 'Yes" if true, otherwise 'No'
     */

    getBooleanNLS : function (value, loc) {
      var locale = "en-us";
      if ((typeof loc === 'string') && loc.length) locale = loc;

      var locale_nls = cache_nls[locale];

      if (typeof value !== 'boolean') return locale_nls.not_boolean_value;

      if (value) return locale_nls.boolean_values.true_value;

      return locale_nls.boolean_values.false_value;
    },


    /**
     * @method getNLSMissingLabelMessage
     *
     * @memberOf OpenAjax.a11y.nls.Cache
     *
     * @desc Returns the missing form control label message and style
     *
     * @param {String}   loc    - String representing the language
     *
     * @return {String} Returns an object with a 'label' and 'style' property
     */

    getNLSMissingLabelMessage : function (loc) {
      var locale = "en-us";
      if ((typeof loc === 'string') && loc.length) locale = loc;

      var label_style;  // return object

      var locale_nls = cache_nls[locale];

      if (locale_nls) {

        label_style = locale_nls.missing_label;

        // if null return default
        if (!label_style) return "";

      }
      return label_style;
    },

    /**
     * @method getNLSEmptyAltTextMessage
     *
     * @memberOf OpenAjax.a11y.nls.Cache
     *
     * @desc Returns the empty alt text message message and style
     *
     * @param {String}   loc    - String representing the language
     *
     * @return {String} Returns an object with a 'label' and 'style' property
     */

    getNLSEmptyAltTextMessage : function (loc) {
      var locale = "en-us";
      if ((typeof loc === 'string') && loc.length) locale = loc;

      var label_style;  // return object

      var locale_nls = cache_nls[locale];

      if (locale_nls) {

        label_style = locale_nls.empty_alt_text;

        // if null return default
        if (!label_style) return "";

      }
      return label_style;
    },

    /**
     * @method getNLSMissingAltMessage
     *
     * @memberOf OpenAjax.a11y.nls.Cache
     *
     * @desc Returns an NLS localized 'missing alt attribute' message
     *
     * @param {String}   loc    - String representing the language
     *
     * @return {String} Returns an object with a 'label' and 'style' property
     */

    getNLSMissingAltMessage : function (loc) {
      var locale = "en-us";
      if ((typeof loc === 'string') && loc.length) locale = loc;

      var label_style;  // return object

      var locale_nls = cache_nls[locale];

      if (locale_nls) {

        label_style = locale_nls.missing_alt;

        // if null return default
        if (!label_style) return "";
      }
      return label_style;
    },


    /**
     * @method addPropertyIfDefined
     *
     * @memberOf OpenAjax.a11y.nls.Cache
     *
     * @desc Adds an item to a list of properties
     *
     * @param  {Array}   list      - List of properties
     * @param  {Object}  item      - Cache item
     * @param  {String}  property  - Property of cache
     * @param  {String}  loc       - String representing the language
     */

    addPropertyIfDefined : function (list, item, property, loc) {
      var locale = "en-us";
      if ((typeof loc === 'string') && loc.length) locale = loc;

      if ((typeof item[property] !== 'undefined')) {
        list.push(this.getLabelAndValueNLS(property, item[property], locale));
      } // endif

    },


    /**
     * @method addPropertyIfUnefined
     *
     * @memberOf OpenAjax.a11y.nls.Cache
     *
     * @desc Adds an item to a list of properties if it is not defined
     * @param  {Array}   list      - List of properties
     * @param  {Object}  item      - Cache item
     * @param  {String}  property  - Property of cache
     * @param  {String}  loc       - String representing the language
     */

    addPropertyIfUndefined : function (list, item, property, loc) {
      var locale = "en-us";
      if ((typeof loc === 'string') && loc.length) locale = loc;

      //  OpenAjax.a11y.logger.debug("Undefined '" + item + "': " + item[property]);

      if ((typeof item[property] === 'undefined') ||
          !item[property] ||
          (item[property] === "")) {
        list.push(this.getLabelAndValueNLS(property, 'undefined', locale));
      } // endif
    },

    /**
     * @method addInvalidAttribute
     *
     * @memberOf OpenAjax.a11y.nls.Cache
     *
     * @desc Adds information about an invalid attribute to a list
     *
     * @param  {Array}   list      - List of properties
     * @param  {String}  attribute - Attribute of an element represented in the cache
     * @param  {String}  loc       - String representing the language
     */

    addInvalidAttribute : function (list, attribute, loc) {
      var locale = "en-us";
      if ((typeof loc === 'string') && loc.length) locale = loc;

      var locale_nls = cache_nls[locale];
      var o = {};

      o.label = locale_nls.invalid_attribute.label;
      o.value = attribute;
      o.style = locale_nls.invalid_attribute.style;

      list.push(o);
    },


    /**
     * @method toJSON
     *
     * @memberOf OpenAjax.a11y.nls.Cache
     *
     * @desc Returns an nls JSON representation of rule category and rule scope information
     *
     * @param {String} prefix  -  A prefix string typically spaces
     *
     * @return {String}  JSON formatted string
     */

    toJSON : function(prefix) {

      var locale_nls = cache_nls[OpenAjax.a11y.locale];

      var json = "";

      json += prefix + "\"rule_scope\": [";

      for (var i = 0; i < locale_nls.rule_scope.length; i++) {

        var rs = locale_nls.rule_scope[i];

        json += prefix + "  {\n";
        json += prefix + "    \"id\"          : \"" + rs['id']    + "\",\n";
        json += prefix + "    \"title\"       : \"" + rs['title'] + "\",\n";
        json += prefix + "    \"url\"         : \"" + rs['url']   + "\",\n";
        json += prefix + "    \"description\" : \"" + rs['desc']  + "\"\n";

        if ( (i + 1) === locale_nls.rule_scope.length) json += prefix + "  }\n";
        else json += prefix + "  },\n";

      }

      json += prefix + "]";

      return json;
    }
  };
}();
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';


/* ---------------------------------------------------------------- */
/*                       Rule Categories                            */
/* ---------------------------------------------------------------- */

/**
 * @constructor RuleCategories
 *
 * @memberOf OpenAjax.a11y.nls
 *
 * @desc Rule Category information with properties with localized NLS values
 *
 * @property  {Array}   nls - Associative array of rule category information
 */

OpenAjax.a11y.nls.RuleCategories = function() {

  var rcs_nls = {};

  return {

    /**
     * @method addNLS
     *
     * @memberOf OpenAjax.a11y.nls.RuleCategories
     *
     * @desc Adds a localized version of Rule Category Information
     *
     * @param  {string}  loc       - Language code of WCAG 2.0
     * @param  {Object}  nls_info  - Localized WCAG 2.0 object
     */

    addNLS : function (loc, nls_info) {

//      OpenAjax.a11y.logger.info("[RuleCategories] Adding NLS: " + loc);

      rcs_nls[loc] = new OpenAjax.a11y.nls.RuleCategoriesNLS(loc, nls_info.abbreviation, nls_info.title, nls_info.url, nls_info.rule_categories);


    },

    /**
     * @method getNLS
     *
     * @memberOf OpenAjax.a11y.nls.RuleCategories
     *
     * @desc Returns an RuleCateogryInfo object for the requested rule category and language
     *
     * @param {Number}  rc   -  Constant representing the rule category
     * @param {String}  loc  -  String representing the language of the results
     */

    getNLS : function(loc) {

      var locale = "en-us";

      if ((typeof loc === 'string') && loc.length) locale = loc;

      return rcs_nls[locale];

    }
  };
}();


/* ---------------------------------------------------------------- */
/*                       RuleCategoryNLS                            */
/* ---------------------------------------------------------------- */

/**
 * @constructor RuleCategoriesNLS
 *
 * @memberOf OpenAjax.a11y.nls
 *
 * @desc WCAG 2.0 information with properties with localized NLS values
 *
 * @param  {String}  locale - Language code
 * @param  {String}  abbrev - Localized abbreviation of Rule Categories
 * @param  {String}  title  - Localized title of  Rule Categories
 * @param  {String}  url    - URL to the translation of  Rule Categories
 * @param  {Object}  rcs    - Array of objects defining the  Rule Categories
 *
 * @property  {String}  locale - Language code
 * @property  {String}  abbrev - Localized abbreviation of WCAG 2.0 guidelines
 * @property  {String}  title  - Localized title of WCAG 2.0 guidelines
 * @property  {String}  url    - URL to the translation of WCAG 2.0
 *
 * @property  {Object}  rule_categories -Array of object defining the rule categories
 */

OpenAjax.a11y.nls.RuleCategoriesNLS = function(locale, abbrev, title, url, rcs) {

  this.locale = locale;
  this.abbrev = abbrev;
  this.title  = title;
  this.url    = url;
  this.rule_categories = [];

  for (var i = 0; i < rcs.length; i++) {

//    OpenAjax.a11y.logger.debug("[RuleCategoriesNLS] Adding rule category " + rcs[i].title + " for " + locale);

    var rc_nls = new OpenAjax.a11y.nls.RuleCategoryNLS(rcs[i]);

    this.rule_categories.push(rc_nls);

  }

};

/**
 * @method getRuleCategory
 *
 * @memberOf OpenAjax.a11y.nls.RuleCategoriesNLS
 *
 * @desc Returns an object with a localized version of rule category information
 *
 * @param {String}  id  -  id for the rule category item to get NLS information
 *
 * @return {Object}  Rule Category NLS object
 */

OpenAjax.a11y.nls.RuleCategoriesNLS.prototype.getRuleCategory = function(id) {

  for (var i = 0; i < this.rule_categories.length; i++) {

    var rc = this.rule_categories[i];

    if (rc.id === id) return rc;

  } // end loop

  return null;
};



/**
 * @method toJSON
 *
 * @memberOf OpenAjax.a11y.nls.RuleCategoriesNLS
 *
 * @desc Returns an nls JSON representation of wcag 2.0 information
 *
 * @param {String} prefix  -  A prefix string typically spaces
 *
 * @return {String}  JSON formatted string
 */

OpenAjax.a11y.nls.RuleCategoriesNLS.prototype.toJSON = function(prefix) {

  var next_prefix = "";

  if (typeof prefix !== 'string' || prefix.length === 0) prefix = "";
  else next_prefix = prefix + "  ";

  var len = this.rule_categories.length;

  var json = "";

  json += "{";

  for (var i = 0; i < len; i++) {

    json += this.rule_categories[i].toJSON(next_prefix);

    if ((i+1) !== len) json += ",";
  }

  json += prefix + "}";

  return json;
};

/* ---------------------------------------------------------------- */
/*                       RuleCategoryNLS                            */
/* ---------------------------------------------------------------- */

/**
 * @constructor RuleCategoryNLS
 *
 * @memberOf OpenAjax.a11y.nls
 *
 * @desc Rule Category information with properties with localized NLS values
 *
 * @param  {Object}  info          - Rule category information
 *
 * @property  {Number}  id            - id of the rule category item
 * @property  {String}  title         - Title of the rule category item
 * @property  {String}  description   - Description of rule category item
 * @property  {String}  url           - URL to information on the rule category item
 */

OpenAjax.a11y.nls.RuleCategoryNLS = function(info) {

  this.id           = info.id;         // Number
  this.title        = info.title;
  this.description  = info.description;
  this.url          = info.url;

};

/**
 * @method toJSON
 *
 * @memberOf OpenAjax.a11y.nls.RuleCategoryNLS
 *
 * @desc Returns an nls JSON representation of rule category information
 *
 * @param {String} prefix  -  A prefix string typically spaces
 *
 * @return {String}  JSON formatted string
 */

OpenAjax.a11y.nls.RuleCategoryNLS.prototype.toJSON = function(prefix) {

  if (typeof prefix !== 'string' || prefix.length === 0) prefix = "";

  var json = "";

  json += prefix + "\"" + this.id + "\" : {";

  json += prefix + "  \"id\"           : "   + this.id.toString() + ",";
  json += prefix + "  \"title\"        : " + JSON.stringify(this.title)       + ",";
  json += prefix + "  \"description\"  : " + JSON.stringify(this.description) + ",";
  json += prefix + "  \"url\"          : " + JSON.stringify(this.url)         + "";

  json += prefix + "}";

  return json;
};

/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';
var wcag20_nls = wcag20_nls || {};

/* ---------------------------------------------------------------- */
/*                       WCAG20                                     */
/* ---------------------------------------------------------------- */

/**
 * @constructor WCAG20
 *
 * @memberOf OpenAjax.a11y.nls
 *
 * @desc WCAG 2.0 information with properties with localized NLS values
 *
 * @property  {Array}   nls - Associative array of WCAG 2.0 information
 */

OpenAjax.a11y.nls.WCAG20 = function() {

  var wcag10_nls = {};

  return {
    /**
     * @method addNLS
     *
     * @memberOf OpenAjax.a11y.nls.WCAG20
     *
     * @desc Adds a localized version of WCAG 2.0 requirements to the cache
     *
     * @param  {string}  locale  - Language code of WCAG 2.0
     * @param  {Object}  nls     - Localized WCAG 2.0 object
     */

    addNLS : function (locale, nls) {

//      OpenAjax.a11y.logger.info("[WCAG20 NLS] Adding WCAG 2.0 NLS for locale: " + locale);

      var  p,  p_id,  np;  /* WCAG 2.0 Principle */
      var  g,  g_id,  ng;  /* WCAG 2.0 Guideline */
      var sc, sc_id, nsc;  /* WCAG 2.0 Success Criterion */

      // Validate the WCAG 2.0 NLS properties
      if (!nls.abbreviation) OpenAjax.a11y.logger.error("Missing abbreviation property for WCAG 2.0 with locale: " + locale);
      if (!nls.title)  OpenAjax.a11y.logger.error("Missing title property for WCAG 2.0 with locale: "              + locale);
      if (!nls.url)    OpenAjax.a11y.logger.error("Missing url property for WCAG 2.0 with locale: "                + locale);
      if (!nls.levels) OpenAjax.a11y.logger.error("Missing levels property for WCAG 2.0 with locale: "             + locale);
      if (!nls.evaluation_levels) OpenAjax.a11y.logger.error("Missing evaluation_levels property for locale: "     + locale);
      if (!nls.all_guidelines) OpenAjax.a11y.logger.error("Missing all guideline property for locale: "     + locale);

      var wcag20 = new OpenAjax.a11y.nls.WCAG20NLS(locale, nls.abbreviation, nls.title, nls.url, nls.levels, nls.evaluation_levels, nls.all_guidelines);

     //  OpenAjax.a11y.logger.debug("WCAG 2.0 " + nls.title + " for " + locale);

      if (!nls.principles) {

        OpenAjax.a11y.logger.debug("[WCAG20 NLS] Missing principles object or not at an object for WCAG 2.0 with locale: " + locale);
        return;

      } else {

        for (p_id in nls.principles) {

          p = nls.principles[p_id];

          //  OpenAjax.a11y.logger.debug("Principle " + p.title + " " + p.id);

          np = new OpenAjax.a11y.nls.WCAG20NLSPrinciple(p_id, p);

          for (g_id in p.guidelines) {

            g = p.guidelines[g_id];

            // OpenAjax.a11y.logger.debug("  Guideline " + g.title + " " + g.id);

            ng = new OpenAjax.a11y.nls.WCAG20NLSGuideline(np, g_id, g);

            for (sc_id in g.success_criteria) {

              sc = g.success_criteria[sc_id];

              nsc = new OpenAjax.a11y.nls.WCAG20NLSSuccessCriterion(np, ng, sc_id, sc);

              //  OpenAjax.a11y.logger.debug("    Success Criteria " + nsc.sc_id + " (" + sc_id + "): " + sc.title);

              ng.success_criteria.push(nsc);

            } // end loop

            np.guidelines.push(ng);

          } // end loop

          wcag20.principles.push(np);

        } // end loop
      }

      wcag10_nls[locale] = wcag20;

    },

    /**
     * @method getNLS
     *
     * @memberOf OpenAjax.a11y.nls.WCAG20
     *
     * @desc Returns an object with a localized version of WCAG 2.0 requirements
     *
     * @param  {String}  locale  - Country code for the language
     */

    getNLS : function(locale) {

      if ((typeof locale === 'string') && (locale.length > 0)) {
        return wcag10_nls[locale];
      }
      return wcag10_nls['en-us'];

    }
  };
}();


/* ---------------------------------------------------------------- */
/*                       WCAG20NLS                                     */
/* ---------------------------------------------------------------- */

/**
 * @constructor WCAG20NLS
 *
 * @memberOf OpenAjax.a11y.nls
 *
 * @desc WCAG 2.0 information with properties with localized NLS values
 *
 * @param  {String}  locale - Language code
 * @param  {String}  abbrev - Localized abbreviation of WCAG 2.0 guidelines
 * @param  {String}  title  - Localized title of WCAG 2.0 guidelines
 * @param  {String}  url    - URL to the translation of WCAG 2.0
 * @param  {Object}  levels - WCAG 2.0 levels for success criteria
 *
 * @property  {String}  locale - Language code
 * @property  {String}  abbrev - Localized abbreviation of WCAG 2.0 guidelines
 * @property  {String}  title  - Localized title of WCAG 2.0 guidelines
 * @property  {String}  url    - URL to the translation of WCAG 2.0
 * @property  {Object}  levels - WCAG 2.0 levels for success criteria
 *
 * @property  {Array}   principles - Array of WCAG 2.0 principle objects associated with the principle
 */

OpenAjax.a11y.nls.WCAG20NLS = function(locale, abbrev, title, url, levels, evaluation_levels, all_gl) {

  this.locale = locale;
  this.abbrev = abbrev;
  this.title  = title;
  this.url    = url;
  this.levels = levels;
  this.evaluation_levels = evaluation_levels;
  this.all_guidelines = all_gl;

  this.principles = [];

};


/**
 * @method getNLSItemById
 *
 * @memberOf OpenAjax.a11y.nls.WCAG20NLS
 *
 * @desc Returns an object with a localized version of WCAG 2.0 requirements
 *
 * @param {String}  id  -  id for the wcag item to get NLS information
 *
 * @return {WCAG20Info}  return WCAG 2.0 information object
 */

OpenAjax.a11y.nls.WCAG20NLS.prototype.getNLSItemById = function(id) {

  if (id === OpenAjax.a11y.WCAG20_GUIDELINE.ALL) return this.all_guidelines;

  for (var i = 0; i < this.principles.length; i++) {

     var p = this.principles[i];

//     OpenAjax.a11y.logger.debug("P Compare: " + p.principle_id + " " + id );

     if ((p.id === id) || (p.principle_id === id)) return p;

     for (var j = 0; j < p.guidelines.length; j++) {

       var g = p.guidelines[j];

//       OpenAjax.a11y.logger.debug("  G Compare: " + g.id + " " + id + " " + (g.id === id));

       if ((g.id === id) || (g.guideline_id === id)) return g;

       for (var k = 0; k < g.success_criteria.length; k++ ) {

         var sc = g.success_criteria[k];

//         OpenAjax.a11y.logger.debug("  SC Compare: " + sc.success_criteria_id + " " + id );

         if ((sc.id === id) || (sc.sc_id === id)) return sc;

       } // end loop

     } // end loop

  } // end loop

  return null;
};


/**
 * @method getSuccessCriteriaLevel
 *
 * @memberOf OpenAjax.a11y.nls.WCAG20NLS
 *
 * @desc Returns the success criteria
 *
 * @param {String}  sc_id  -  String representing the success criteria id
 *
 * @return {Number}  Number representing the WCAG 2.0 success level
 */

OpenAjax.a11y.nls.WCAG20NLS.prototype.getSuccessCriteriaLevel = function (sc_id) {

  var principles = this.principles;

  for (var i = 0; i < principles.length; i++) {

    var p = wcag20_nls.principles[i];

    for (var j = 0; j < p.guidelines.length; j++) {

      var g = p.guidelines[i];

      for (var k = 0; k < g.success_criteria.length; k++) {

        var sc = g.success_criteria[i];

        if ((sc.id === sc_id) || (sc.sc_id === sc_id)) return sc.level;

      }
    }
  }

  return OpenAjax.a11y.WCAG20_LEVEL.UNKNOWN;

};



/**
 * @method getWCAG20LevelNLS
 *
 * @memberOf OpenAjax.a11y.nls.WCAG20NLS
 *
 * @desc Returns an NLS localized version of WCAG 2.0 success criterion level
 *
 * @param {String}  see descriptions
 */

OpenAjax.a11y.nls.WCAG20NLS.prototype.getWCAG20LevelNLS = function (level) {

  var level_nls = this.levels[level];

  OpenAjax.a11y.logger.debug("[WCAG20NLS]  level NLS: " + level_nls + " (" + level + ") ");

  if (typeof this.levels[level] !== 'string') return "Undefined";

  return this.levels[level];

};


/**
 * @method getEvaluationLevelsNLS
 *
 * @memberOf OpenAjax.a11y.nls.WCAG20NLS
 *
 * @desc Returns an NLS localized version of WCAG 2.0 success criterion levels
 *
 * @param {Number}  levels  -  Numerical constant defined in OAA cache representing the evaluation levels
 *
 * @return {String} String representing the evaluation levels (i.e A, A and AA, A, AA and AAA)
 */

OpenAjax.a11y.nls.WCAG20NLS.prototype.getEvaluationLevelsNLS = function (levels) {

  return this.evaluation_levels[levels];

};

/**
 * @method toJSON
 *
 * @memberOf OpenAjax.a11y.nls.WCAG20NLS
 *
 * @desc Returns an nls JSON representation of wcag 2.0 information
 *
 * @param {String} prefix  -  A prefix string typically spaces
 *
 * @return {String}  JSON formatted string
 */

OpenAjax.a11y.nls.WCAG20NLS.prototype.toJSON = function(prefix) {

  var next_prefix = "";

  if (typeof prefix !== 'string' || prefix.length === 0) prefix = "";
  else next_prefix = prefix + "  ";

  var json = "";

  json += "{";

  for (var i = 0; i < this.principles.length; i++) json += this.principles[i].toJSON(next_prefix);

  json += prefix + "}";

  return json;
};

/* ---------------------------------------------------------------- */
/*                       WCAG20NLSPrinciple                           */
/* ---------------------------------------------------------------- */

/**
 * @constructor WCAG20NLSPrinciple
 *
 * @memberOf OpenAjax.a11y.nls
 *
 * @desc WCAg 2.0 Principle information with properties with localized NLS values
 *
 * @param  {Object}  principle_id  - Principle id
 * @param  {Object}  info          - Principle information
 *
 * @property  {String}  principle_id  - Principle id
 * @property  {String}  title         - Title of the principle
 * @property  {String}  description   - Description of principle
 * @property  {String}  url_spec      - URL to information on the requirement
 *
 * @property  {Array}   guidelines - Array of WCAG 2.0 guideline objects associated with the principle
 */

OpenAjax.a11y.nls.WCAG20NLSPrinciple = function(principle_id, info) {

  this.principle_id = principle_id;    // Text string
  this.id           = info.id;         // Number
  this.title        = info.title;
  this.description  = info.description;
  this.url_spec     = info.url_spec;

  this.guidelines = [];

};

/**
 * @method toJSON
 *
 * @memberOf OpenAjax.a11y.nls.WCAG20NLSPrinciple
 *
 * @desc Returns an nls JSON representation of wcag 2.0 principle information
 *
 * @param {String} prefix  -  A prefix string typically spaces
 *
 * @return {String}  JSON formatted string
 */

OpenAjax.a11y.nls.WCAG20NLSPrinciple.prototype.toJSON = function(prefix) {

  if (typeof prefix !== 'string' || prefix.length === 0) prefix = "";

  var json = "";

  json += prefix + "\"" + this.principle_id + "\" : {";

  json += prefix + "  \"id\"             : " + this.id + ",";
  json += prefix + "  \"type\"           : \"p\",";
  json += prefix + "  \"title\"          : " + JSON.stringify(this.title) + ",";
  json += prefix + "  \"description\"    : " + JSON.stringify(this.description) + ",";
  json += prefix + "  \"url\"            : " + JSON.stringify(this.url_spec) + "";

  json += prefix + "},";

  for (var i = 0; i < this.guidelines.length; i++) json += this.guidelines[i].toJSON(prefix);

  return json;
};


/* ---------------------------------------------------------------- */
/*                       WCAG20NLSGuideline                           */
/* ---------------------------------------------------------------- */

/**
 * @constructor WCAG20NLSGuideline
 *
 * @memberOf OpenAjax.a11y.nls
 *
 * @desc WCAg 2.0 Guideline information with properties with localized NLS values
 *
 * @param  {WCAG20NLSPrinciple}  principle     - Principle object reference
 * @param  {String}              guideline_id  - Guideline ID
 * @param  {Object}              info          - Guideline information object
 *
 * @property  {WCAG20NLSPrinciple}  principle  - Principle object reference
 *
 * @property  {String}  guideline_id  - Guideline id
 * @property  {String}  title         - Title of the guideline
 * @property  {String}  description   - Description of the guideline
 * @property  {String}  url_spec      - URL to information on the guideline requirement
 *
 * @property  {Array}   success_criteria  - Array of WCAG 2.0 success criteria objects associated with the principle
 */

OpenAjax.a11y.nls.WCAG20NLSGuideline = function(principle, guideline_id, info) {

  this.principle     = principle;

  this.guideline_id  = guideline_id;
  this.id            = info.id;         // Number

  this.title         = info.title;
  this.description   = info.description;
  this.url_spec      = info.url_spec;

  this.success_criteria = [];

};

/**
 * @method toJSON
 *
 * @memberOf OpenAjax.a11y.nls.WCAG20NLSGuideline
 *
 * @desc Returns an nls JSON representation of wcag 2.0 guideline information
 *
 * @param {String} prefix  -  A prefix string typically spaces
 *
 * @return {String}  JSON formatted string
 */

OpenAjax.a11y.nls.WCAG20NLSGuideline.prototype.toJSON = function(prefix) {

  if (typeof prefix !== 'string' || prefix.length === 0) prefix = "";

  var json = "";

  json += prefix + "\"" + this.guideline_id + "\" : {";

  json += prefix + "  \"id\"             : " + this.id + ",";
  json += prefix + "  \"type\"           : \"g\",";
  json += prefix + "  \"title\"          : " + JSON.stringify(this.title) + ",";
  json += prefix + "  \"description\"    : " + JSON.stringify(this.description) + ",";
  json += prefix + "  \"url\"            : " + JSON.stringify(this.url_spec);

  json += prefix + "},";

  for (var i = 0; i < this.success_criteria.length; i++) json += this.success_criteria[i].toJSON(prefix);

  return json;
};



/* ---------------------------------------------------------------- */
/*                       WCAG20NLSSuccessCriterion                    */
/* ---------------------------------------------------------------- */

/**
 * @constructor WCAG20NLSSuccessCriterion
 *
 * @memberOf OpenAjax.a11y.nls
 *
 * @desc  WCAG 2.0 Success Criteria information with properties with localized NLS values
 *
 * @param  {WCAG20NLSPrinciple}  principle  - Principle object reference
 * @param  {WCAG20NLSGuideline}  guideline  - Guideline object reference
 * @param  {String}              sc_id      - Success criterion ID
 * @param  {Object}              info       - Success criterion information object
 *
 * @property  {WCAG20NLSPrinciple}  principle  - Principle object reference
 * @property  {WCAG20NLSGuideline}  guideline  - Guideline object reference
 *
 * @property  {String}  sc_id          - Success criterion ID
 * @property  {String}  title          - Title of the success criterion
 * @property  {String}  level          - Level of importance of a success criterion
 * @property  {String}  url_spec       - URL to information on the success criteria requirement
 * @property  {String}  url_meet       - URL to information on how to meet the success criteria requirements
 * @property  {String}  url_understand - URL to information on how to understand the success criteria requirements
 * @property  {Array}   resources      - Other information related to the success criterion
 */

OpenAjax.a11y.nls.WCAG20NLSSuccessCriterion = function(principle, guideline, sc_id, info) {

  this.principle  = principle;
  this.guideline  = guideline;

  this.sc_id        = sc_id;      // String
  this.id           = info.id;    // Number

  this.level          = info.level;
  this.title          = info.title;
  this.description    = info.description;
  this.url_spec       = info.url_spec;
  this.url_meet       = info.url_meet;
  this.url_understand = info.url_understand;

  this.resources = [];

};

/**
 * @method toJSON
 *
 * @memberOf OpenAjax.a11y.nls.WCAG20NLSSuccessCriterion
 *
 * @desc Returns an nls JSON representation of wcag 2.0 success criterion information
 *
 * @param {String} prefix  -  A prefix string typically spaces
 *
 * @return {String}  JSON formatted string
 */

OpenAjax.a11y.nls.WCAG20NLSSuccessCriterion.prototype.toJSON = function(prefix) {

  function getNLSLevel(level) {

    if (level === OpenAjax.a11y.WCAG20_LEVEL.A) return "A";
    if (level === OpenAjax.a11y.WCAG20_LEVEL.AA) return "AA";
    if (level === OpenAjax.a11y.WCAG20_LEVEL.AAA) return "AAA";

    return "unknown";
  }

  if (typeof prefix !== 'string' || prefix.length === 0) prefix = "";

  var json = "";

  json += prefix + "\"" + this.sc_id + "\" : {";

  json += prefix + "  \"id\"             : " + this.id + ",";
  json += prefix + "  \"type\"           : \"sc\",";
  json += prefix + "  \"level\"          : \"" + getNLSLevel(this.level) + "\",";
  json += prefix + "  \"title\"          : " + JSON.stringify(this.title) + ",";
  json += prefix + "  \"description\"    : " + JSON.stringify(this.description) + ",";
  json += prefix + "  \"url\"            : \"" + this.url_spec + "\",";
  json += prefix + "  \"url_meet\"       : \"" + this.url_meet + "\",";
  json += prefix + "  \"url_understand\" : \"" + this.url_understand + "\"";

  if (this.sc_id === '4.1.3') json += prefix + "}";
  else json += prefix + "},";

  return json;
};

/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* ---------------------------------------------------------------- */
/*                      Logger APIs                                 */
/* ---------------------------------------------------------------- */

/**
 * @object logger
 *
 * @memberOf OpenAjax.a11y
 *
 * @desc logger object supports sending messages to the console
 *       This default logger object does nothing other than enumerate
 *       the minimal interface that must be implemented for logging
 *       Use the setLogger function to replace the default object with an
 *       object that supports logging in your development environment
 *       The replacement object may have additional methods defined by
 *       the host for controlling logging, but the OpenAjax Evaluation
 *       library will only use these 4 methods.
 */

OpenAjax.a11y.logger = OpenAjax.a11y.logger || {
  debug: function (message) {console.log('[DEBUG]: ' + message)},
  info:  function (message) {console.log('[ INFO]: ' + message)},
  warn:  function (message) {console.log('[ WARN]: ' + message)},
  error: function (message) {console.log('[ERROR]: ' + message)}
};

OpenAjax.a11y.setLogger = function (logger) {
   OpenAjax.a11y.logger = logger;
};

/* ---------------------------------------------------------------- */
/*                   OpenAjax High Level APIs                       */
/* ---------------------------------------------------------------- */

// basic info about version of ruleset and rules
OpenAjax.a11y.name = "OpenAjax Alliance Accessibility Tools Task Force";
OpenAjax.a11y.baseUri = "https://www.openajax.org/member/wiki/Accessibility";



/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                             Rule                                 */
/* ---------------------------------------------------------------- */

/**
 * @constructor Rule
 *
 * @memberOf OpenAjax.a11y
 *
 * @desc Creates and validates a rule used to evaluate an accessibility feature
 *       of a document
 *
 * @param {Object}    rule_item          - Object containing rule information
 * @param {Object}    rules_nls          - NLS information for rules
 * @param {String}    locale             - String representing the language
 */

/**
 * @private
 * @constructor Internal Properties
 *
 * @property {Object}    cache_nls           - Cache messages NLS reference for the current language
 * @property {Object}    wcag20_nls          - WCAG 2.0 message NLS reference for the current language
 * @property {Object}    rules_nls           - Rule message NLS reference for the current language
 *
 * @property {String}    rule_id             - Unique id of the rule
 * @property {String}    rule_scope_id       - Defines the scope of the rule:
 *                                             page or element
 * @property {Number}    rule_category       - Rule category
 * @property {Number}    rule_group          - Group category
 * @property {String}    wcag_primary_id     - Id of the primary WCAG 2.0
 *                                             success criterion
 * @property {Array}     wcag_related_ids    - Array of ids of related WCAG 2.0
 *                                             success criteria
 * @property {String}    primary_property    - Primary property used in the evaluation
 *                                             of the rule
 * @property {Array}     resource_properties - What properties of a cache or dom
 *                                             element the rules uses in the evaluation
 * @property {Array}     target_objects      - The html objects the rule evaluates
 *                                             (NOTE: this is informative information)
 * @property {String}    language            - The lanaguage code or codes (space
 *                                             separated) if the rule is language
 *                                             specfic, default is empty string
 * @property {function}  validate            - Function for evaluting the rule
 *                                             requirements using the DOM cache
 *
 */

OpenAjax.a11y.Rule = function (rule_item, rules_nls, locale) {


  this.locale     = "en-us";
  this.rule_nls   = {};
  this.common_nls = {};
  this.guideline_info = {};
  this.rule_category_info = {};
  this.wcag_guideline_id = 0;

  if ((typeof locale === 'string') && locale.length) this.locale = locale;

  var indexes      = rule_item.wcag_primary_id.split('.');
  var gl_id = indexes[0] + "." + indexes[1];
  this.wcag_guideline_code = gl_id;


  if (rules_nls &&
      rules_nls[this.locale] &&
      rules_nls[this.locale].rules[rule_item.rule_id]) {

    this.common_nls  = rules_nls[this.locale];
    this.rule_nls    = rules_nls[this.locale].rules[rule_item.rule_id];
    this.wcag20_nls  = OpenAjax.a11y.nls.WCAG20.getNLS(this.locale);

    this.rule_category_info = OpenAjax.a11y.info.RuleCategoryInfo(rule_item.rule_category);
    this.guideline_info     = OpenAjax.a11y.info.GuidelineInfo(gl_id);

    switch(gl_id) {
    case '1.1':
      this.wcag_guideline_id = OpenAjax.a11y.WCAG20_GUIDELINE.G_1_1;
      break;

    case '1.2':
      this.wcag_guideline_id = OpenAjax.a11y.WCAG20_GUIDELINE.G_1_2;
      break;

    case '1.3':
      this.wcag_guideline_id = OpenAjax.a11y.WCAG20_GUIDELINE.G_1_3;
      break;

    case '1.4':
      this.wcag_guideline_id = OpenAjax.a11y.WCAG20_GUIDELINE.G_1_4;
      break;

    case '2.1':
      this.wcag_guideline_id = OpenAjax.a11y.WCAG20_GUIDELINE.G_2_1;
      break;

    case '2.2':
      this.wcag_guideline_id = OpenAjax.a11y.WCAG20_GUIDELINE.G_2_2;
      break;

    case '2.3':
      this.wcag_guideline_id = OpenAjax.a11y.WCAG20_GUIDELINE.G_2_3;
      break;

    case '2.4':
      this.wcag_guideline_id = OpenAjax.a11y.WCAG20_GUIDELINE.G_2_4;
      break;

    case '3.1':
      this.wcag_guideline_id = OpenAjax.a11y.WCAG20_GUIDELINE.G_3_1;
      break;

    case '3.2':
      this.wcag_guideline_id = OpenAjax.a11y.WCAG20_GUIDELINE.G_3_2;
      break;

    case '3.3':
      this.wcag_guideline_id = OpenAjax.a11y.WCAG20_GUIDELINE.G_3_3;
      break;

    case '4.1':
      this.wcag_guideline_id = OpenAjax.a11y.WCAG20_GUIDELINE.G_4_1;
      break;

    default:
      this.wcag_guideline_id = 0;
      break;
    }
  }

  this.rule_id             = rule_item.rule_id;
  this.rule_scope_id       = rule_item.rule_scope;
  this.rule_category_id    = rule_item.rule_category;
  this.rule_group_id       = rule_item.rule_group;
  this.wcag_primary_id     = rule_item.wcag_primary_id;
  this.wcag_related_ids    = rule_item.wcag_related_ids;
  this.last_updated        = rule_item.last_updated;
  this.target_resources    = rule_item.target_resources;
  this.primary_property    = rule_item.primary_property;
  this.resource_properties = rule_item.resource_properties;
  this.language_dependency = rule_item.language_dependency;
  this.validate            = rule_item.validate;


};

/**
 * @method setLocale
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Set the NLS information for rule messages
 *
 */

OpenAjax.a11y.Rule.prototype.setLocale = function (rule_nls, locale) {

  if ((typeof locale === 'string') && locale.length) this.locale = locale;

  if (rule_nls &&
      rule_nls[this.locale] &&
      rule_nls[this.locale].rules[this.rule_id]) {

    this.common_nls = rule_nls[this.locale];
    this.rule_nls   = rule_nls[this.locale].rules[this.rule_id];
    this.wcag20_nls = OpenAjax.a11y.nls.WCAG20.getNLS(this.locale);
  }

};

/**
 * @method getId
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Get the programmatic id that uniquely identifies the rule
 *
 * @return {String} The rule id
 */

OpenAjax.a11y.Rule.prototype.getId = function () {

  return this.rule_id;

};


/**
 * @method getNLS
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Returns a NLS reference for the rule
 *
 * @return {Object} see description
 */

OpenAjax.a11y.Rule.prototype.getNLS = function () {

  return this.rule_nls;

};

/**
 * @method getCommonNLS
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Returns a NLS reference for common nls information
 *
 * @return {Object} see description
 */

OpenAjax.a11y.Rule.prototype.getCommonNLS = function () {

  return this.common_nls;

};


/**
 * @method getIdNLS
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Get a localized human readable id for uniquely identifying the rule
 *
 * @return {String} Localized string of the rule id
 */

OpenAjax.a11y.Rule.prototype.getIdNLS = function () {

  return this.rule_nls['ID'];

};

/**
 * @method getGuideline
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Get number of the associated guideline
 *
 * @return  {String}  see description
 */

OpenAjax.a11y.Rule.prototype.getGuideline = function () {

   return this.wcag_guideline_id;

};



/**
 * @method getGuidelineInfo
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Get information about the WCAG 2.0 Guideline associated with the rule
 *
 * @return  {GuidelineInfo}  see description
 */

OpenAjax.a11y.Rule.prototype.getGuidelineInfo = function () {

   return this.guideline_info;

};

/**
 * @method getCategory
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Get a numerical constant representing the rule category
 *
 * @return {Number}  see description
 */

OpenAjax.a11y.Rule.prototype.getCategory = function () {

  return this.rule_category_id;

};

/**
 * @method getCategoryInfo
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Get a localized title, url and description of the rule category
 *
 * @return {RuleCategoryInfoItem}  Returns a InformationalLinkInfo object
 */

OpenAjax.a11y.Rule.prototype.getCategoryInfo = function () {

  return this.rule_category_info;

};


/**
 * @method getGroup
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc  Get a numerical constant representing the rule group
 *
 * @return {Number}  see description
 */

OpenAjax.a11y.Rule.prototype.getGroup = function () {

  return this.rule_group_id;

};

/**
 * @method getGroupNLS
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc  Get a string representing the rule group
 *
 * @return {String}  see description
 */

OpenAjax.a11y.Rule.prototype.getGroupNLS = function () {

  var RULE_GROUP = OpenAjax.a11y.RULE_GROUP;

  switch (this.rule_group_id) {

  case RULE_GROUP.GROUP1:
    return "Group 1";

  case RULE_GROUP.GROUP2:
    return "Group 2";

  case RULE_GROUP.GROUP3:
    return "Group 3";

  default:
    break;

  }

  return "Undefined";

};

/**
 * @method getScope
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Get the rule scope constant of the rule
 *
 * @return {Number} rule scope constant
 */

OpenAjax.a11y.Rule.prototype.getScope = function () {

  return this.rule_scope_id;

};


/**
 * @method getScopeNLS
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Get a localized string of the rule scope (i.e. 'element' or 'page')
 *
 * @return {String} Localized string of the rule scope
 */

OpenAjax.a11y.Rule.prototype.getScopeNLS = function () {

  if (this.rule_scope_id) return this.common_nls.rule_scope[this.rule_scope_id];

  return this.common_nls.rule_scope[OpenAjax.a11y.RULE_SCOPE.UNKNOWN];

};



/**
 * @method getDefinition
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Gets the definition of the rule
 *
 * @param {Boolean}  required  - True if rule is required
 *
 * @return {String} Localized string of the rule definition based on being
 *                  required or recommended
 */
OpenAjax.a11y.Rule.prototype.getDefinition = function (required) {


//  OpenAjax.a11y.logger.debug("  Rule ID: " + this.rule_id);


  var str = this.rule_nls['DEFINITION'];

  var message;

  var vstr;

  if (str) {

    vstr = "%s";

    if (str.indexOf(vstr) >= 0) {

     if (typeof required === 'boolean') {

      if (required) message = this.common_nls.message_severities.MUST;
      else message = this.common_nls.message_severities.SHOULD;

     }
     else {
       // If no rule type is defined assume "must"
        message = this.common_nls.message_severities.MUST + "/" + this.common_nls.message_severities.SHOULD;
     }

     str = str.replace(vstr, message);
   }

   return OpenAjax.a11y.util.transformElementMarkup(str);
 }

 return "Definition not found for rule: " + this.rule_id;

};

/**
 * @method getSummary
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Gets the summary of the rule
 *
 * @param {Boolean}  required  - True if rule is required
 *
 * @return {String} Localized string of the rule summary based on being
 *                  required or recommended
 */
OpenAjax.a11y.Rule.prototype.getSummary = function (required) {

  var str = this.rule_nls['SUMMARY'];

  var message;

  var vstr;

  if (str) {

    vstr = "%s";

    if (str.indexOf(vstr) >= 0) {

      if (typeof required === 'boolean') {

        if (required) message = this.common_nls.message_severities.MUST;
        else message = this.common_nls.message_severities.SHOULD;

      }
      else {
        // If no rule type is defined assume "must"
        message = this.common_nls.message_severities.MUST + "/" + this.common_nls.message_severities.SHOULD;
      }

      str = str.replace(vstr, message);

    }
    return OpenAjax.a11y.util.transformElementMarkup(str);
  }

  return "Summary not found for rule: " + this.rule_id;

};

/**
 * @method getPurpose
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Gets an array strings representing the purpose, basically
 *       how does the rule help people with disabilities
 *
 * @return  {Array}  Returns an array of localized string describing the purpose
 */
OpenAjax.a11y.Rule.prototype.getPurpose = function () {

  var list = this.rule_nls['PURPOSE'];

  var new_list = [];

  if (list && list.length) {

    for (var i = 0; i < list.length; i++) {

      new_list.push(OpenAjax.a11y.util.transformElementMarkup(list[i]));

    } // end for

    return new_list;
  }

  return [];

};

/**
 * @method getTargetResourcesDescription
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Get a description of the markup or page feature the rule is evaluates
 *
 * @return  {String}  Localized string representing the markup or page feature
 *                    tested by the rule
 */
OpenAjax.a11y.Rule.prototype.getTargetResourcesDescription = function () {

  var target = this.rule_nls['TARGET_RESOURCES_DESC'];

  if (target) return OpenAjax.a11y.util.transformElementMarkup(target);

  return "** Target resource description not defined";

};

/**
 * @method getTargetResources
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Returns an localized array strings representing target resources of
 *       the rule
 *
 * @return  {Array}  Returns an array of strings identifying the elements and/or
 *                    attributes that the rule evaluates
 */
OpenAjax.a11y.Rule.prototype.getTargetResources = function () {

  if (this.target_resources) return this.target_resources;

  return [];

};

/**
 * @method getTargetResourcePrimaryProperty
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Get the primary attribute or calculated property of element used to evaluate a rule
 *
 * @return  {String}  see description
 */
OpenAjax.a11y.Rule.prototype.getTargetResourcePrimaryProperty = function () {

  if (typeof this.primary_property === 'string') return this.primary_property;

  return "";

};


/**
 * @method getTargetResourceSecondaryProperties
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Get the attributes and calculated properties of element used to evaluate a rule
 *
 * @return  {Array}  Returns an array of strings identifying the calculated properties
 *                   and/or attributes that the rule uses to evaluate the rule requirements
 */
OpenAjax.a11y.Rule.prototype.getTargetResourceSecondaryProperties = function () {

  if (this.resource_properties) return this.resource_properties;

  return [];

};


/**
 * @method getTechniques
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Get the techniques to implement the requirements of the rule
 *
 * @return  {Array}  Array of InformationalLinkInfo objects
 */
OpenAjax.a11y.Rule.prototype.getTechniques = function () {

  var list = this.rule_nls['TECHNIQUES'];

  var new_list = [];

  if (list && list.length) {

    for (var i = 0; i < list.length; i++) {

      var item = list[i];

      var ref;

      if (typeof item === 'string') ref = new OpenAjax.a11y.info.InformationalLinkInfo(OpenAjax.a11y.REFERENCES.TECHNIQUE, item, "");
      else ref = new OpenAjax.a11y.info.InformationalLinkInfo(OpenAjax.a11y.REFERENCES.TECHNIQUE, item.title, item.url);

      new_list.push(ref);

    } // end for

    return new_list;
  }

  return [];

};

/**
 * @method getManualCheckProcedures
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Gets manual checking proceedures for evaluating the rule
 *       requirements
 *
 * @return  {Array}  Array of InformationalLinkInfo objects
 */

OpenAjax.a11y.Rule.prototype.getManualCheckProcedures = function () {

  var list = this.rule_nls['MANUAL_CHECKS'];

  var new_list = [];

  if (list && list.length) {

    for (var i = 0; i < list.length; i++) {

      var item = list[i];

      var ref;

      if (typeof item === 'string') ref = new OpenAjax.a11y.info.InformationalLinkInfo(OpenAjax.a11y.REFERENCES.MANUAL_CHECK, item, "");
      else ref = new OpenAjax.a11y.info.InformationalLinkInfo(OpenAjax.a11y.REFERENCES.MANUAL_CHECK, item.title, item.url);

      new_list.push(ref);

    } // end for

    return new_list;
  }

  return [];

};



/**
 * @method getInformationalLinks
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Get information links related to understanding or implementation of the rule
 *
 * @return  {Array}  Returns an array of InformationalLinkInfo objects
 *
 * @example
 *
 * var node_list = [];
 * var info_links = rule.getInformationalLinks();
 *
 * for(var i = 0; i < info_links.length; i++) {
 *   var info_link = info_links[i];
 *
 *   // Using object properties to create a link element
 *   var node = document.createElement('a');
 *   node.appendChild(document.createTextNode(info_link.title));
 *   node.setAttribute('href',  info_link.url);
 *   node.setAttribute('class', info_link.type_const.toString());
 *
 *   node_list.push(node);
 * }
 */

OpenAjax.a11y.Rule.prototype.getInformationalLinks = function () {

  var list = this.rule_nls['INFORMATIONAL_LINKS'];

  var new_list = [];

  if (list && list.length) {

    for (var i = 0; i < list.length; i++) {

      var link = list[i];

      var ref = new OpenAjax.a11y.info.InformationalLinkInfo(link.type, link.title, link.url);

      new_list.push(ref);

    } // end for

    return new_list;
  }

  return [];

};


/**
 * @method getPrimarySuccessCriterion
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Get id of the primary WCAG 2.0 Success Criteria for the rule
 *
 * @return  {Number}  see description

OpenAjax.a11y.Rule.prototype.getPrimarySuccessCriterion = function () {

 return this.wcag_primary_id;

};
 */

/**
 * @method getPrimarySuccessCriterion
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Get information about primary WCAG 2.0 Success Criteria for the rule
 *
 * @return  {SuccessCriterionInfo}  Object representing information about the SC
 */

OpenAjax.a11y.Rule.prototype.getPrimarySuccessCriterion = function () {

  var info = new OpenAjax.a11y.info.SuccessCriterionInfo(this.wcag_primary_id);

  return info;

};

/**
 * @method getRelatedSuccessCriteria
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Get information about the related WCAG 2.0 Success Criteria for the rule
 *
 * @return  {Array}  Array of SuccessCriterionInfo objects
 */

OpenAjax.a11y.Rule.prototype.getRelatedSuccessCriteria = function () {

  var list = [];

  var ids = this.wcag_related_ids;
  var ids_len = ids.length;

  for (var i = 0; i < ids_len; i++) {

    var id = ids[i];

    var ref = new OpenAjax.a11y.info.SuccessCriterionInfo(id);

    list.push(ref);
  }

  return list;
};

/**
 * @method getWCAG20Level
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Get the string representation of the the WCAG 2.0 Success Criterion Level
 *       based on the primary id of the rule
 *
 * @return  {String}  String representing the WCAG 2.0 success criterion level
 *                    (i.e. A, AA or AAA)
 */

OpenAjax.a11y.Rule.prototype.getWCAG20Level = function () {

  return this.getPrimarySuccessCriterion().level_nls;

};


/**
 * @method toJSON
 *
 * @memberOf OpenAjax.a11y.Rule
 *
 * @desc Returns a JSON representation of the rule
 *
 * @param  {String}   prefix    - String of leading spaces for formatting JSON output (Optional)
 * @param  {Boolean}  required  - Required is needed for adjusting definition and summary strings to ruleset
 *                                requirements
 *
 * @return  {String}  Returns a JSON representation of the rule
 */

OpenAjax.a11y.Rule.prototype.toJSON = function (prefix, required) {

  function stringItem(property, value, last) {
    if (typeof value === 'string') json += prefix + "    \"" + property + "\" : " + JSON.stringify(value);
    else json += prefix + "    \"" + property + "\" : \"\"";

    if (last) json += "\n";
    else json += ",\n";
  }

  function numberItem(property, value, last) {
    json += prefix + "    \"" + property + "\" : " + value;

    if (last) json += "\n";
    else json += ",\n";
  }

  function stringListItem(property, list, last) {
    json += prefix + "    \"" + property + "\" : [";

    if (list && list.length) {
      var last_item = list.length - 1;
      for (var i = 0; i < list.length; i++) {
        if (last_item === i) json += JSON.stringify(list[i]);
        else json += JSON.stringify(list[i]) + ",";
      }
    }

    if (last) json += "]\n";
    else json += "],\n";
  }

  function addListOfStrings(name, list, last) {

    json += prefix + "    \"" + name + "\" : [\n";

    if (list && list.length) {
      var last_item = list.length - 1;
      for (var i = 0; i < list.length; i++) {
        if (last_item === i) json += "          " + JSON.stringify(list[i]) + "\n";
        else json += "          " + JSON.stringify(list[i]) + ",\n";
      }
    }

    if (last) json += prefix + "    ]\n";
    else json += prefix + "    ],\n";

  }



  function addInformationalLinks(last) {

    function addReferenceItem(reference, last) {

      json += prefix + "      { \"type\"  : "   + reference['type']  + ",\n";
      json += prefix + "        \"title\" : " + JSON.stringify(reference['title']) + ",\n";
      json += prefix + "        \"url\"   : " + JSON.stringify(reference['url'])   + "\n";

      if (last) json += prefix + "      }\n";
      else json += prefix + "      },\n";

    }

    json += prefix + "    \"informational_links\" : [\n";

    var info_links = rule_nls['INFORMATIONAL_LINKS'];

    if (info_links && info_links.length) {
      var last_item = info_links.length - 1;
      for (var i = 0; i < info_links.length; i++) {
        if (last_item === i) addReferenceItem(info_links[i], true);
        else addReferenceItem(info_links[i], false);
      }
    }

    if (last) json += prefix + "    ]\n";
    else json += prefix + "    ],\n";

  }

  function addMessages(name, list, last) {

    json += prefix + "    \"" + name + "\" : {\n";

    if (list) {
      var first = true;
      for (var item in list) {
        if (first) json += "           " + JSON.stringify(item) + ": " + JSON.stringify(list[item]);
        else json += ",\n          " + JSON.stringify(item) + ": " + JSON.stringify(list[item]);
        first = false;
      }
    }

    if (last) json += "\n" + prefix + "    }\n";
    else json += "\n" + prefix + "    },\n";

  }




  if (typeof prefix !== 'string') prefix = "";

  var json = "";

  var rule_nls = this.rule_nls;

  json += prefix + "  {\n";

  stringItem(    'rule_id',             this.rule_id);
  numberItem(    'rule_scope',          this.getScope());
//  stringItem(    'rule_scope_nls',      this.getScopeNLS());
  numberItem(    'rule_category',       this.getCategory());
  stringItem(    'rule_category_nls',   this.getCategoryInfo().title);
  numberItem(    'rule_group',          this.getGroup());
  stringItem(    'rule_group_nls',      this.getGroupNLS());
  stringItem(    'wcag_primary',        this.wcag_primary_id);
  stringListItem('wcag_related',        this.wcag_related_ids);
  stringItem(    'last_updated',        this.last_updated);
  stringListItem('target_resources',    this.target_resources);
  stringItem(    'language_dependency', this.language_dependency);
  stringItem(    'primary_property',    this.primary_property);
  stringListItem('resource_properties', this.resource_properties);
  stringItem(    'validate',            this.validate.toString());

  stringItem('nls_rule_id', rule_nls['ID']);

  if (typeof required === 'boolean') {
    stringItem('definition', this.getRuleDefinition(required));
    stringItem('summary', this.getRuleSummary(required));
  }
  else {
    stringItem('definition', rule_nls['DEFINITION']);
    stringItem('summary', rule_nls['SUMMARY']);
  }

  stringItem('target_resource_desc', rule_nls['TARGET_RESOURCES_DESC']);

  addListOfStrings('purpose',       rule_nls['PURPOSE']);

  addListOfStrings('techniques',    rule_nls['TECHNIQUES']);

  addListOfStrings('manual_checks', rule_nls['MANUAL_CHECKS']);

  addInformationalLinks();

  addMessages('rule_result_messages', rule_nls['RULE_RESULT_MESSAGES'], false);
  addMessages('node_result_messages', rule_nls['NODE_RESULT_MESSAGES'], true);

  json += prefix + "  }";

  return json;

};


/* ---------------------------------------------------------------- */
/*                             RuleManager                                */
/* ---------------------------------------------------------------- */

/**
 * @constructor RuleManager
 *
 * @memberOf OpenAjax.a11y
 *
 * @desc Creates an array of rule objects for evaluating accessibility
 */

OpenAjax.a11y.RuleManager = function () {

   var rules      = [];
   var rules_nls  = {};
   var locale     = 'en-us';

   return {

     /**
      * @method addRule
      *
      * @memberOf OpenAjax.a11y.RuleManager
      *
      * @desc Adds a new rule to the list of rules
      *
      * @param  {Object}    rule_item          - Object containing rule information
      *
      * @return  {Boolean} Returns true if the rule was added successfully; false if there was an error
      */

      addRule : function (rule_item) {

        var errors = false;

        // If library is loaded in a page, ignore reloading of a rule already loaded
        if (this.getRuleByRuleId(rule_item.rule_id)) {
          // OpenAjax.a11y.logger.error("[RuleManager]  ** Duplicate Rule ID: " + rule_item.rule_id);
          return false;
        }

        if (typeof rule_item.rule_id !== 'string') {
          OpenAjax.a11y.logger.error("[RuleManager]  ** Rule ID is missing");
          errors = true;
        }

        if (typeof rule_item.wcag_primary_id !== 'string') {
          OpenAjax.a11y.logger.error("[RuleManager]  ** Rule " + rule_item.rule_id + " primary wcag id is missing");
          errors = true;
        }

        if (!rule_item.wcag_related_ids) {
          OpenAjax.a11y.logger.error("[RuleManager]  ** Rule " + rule_item.rule_id + " related wcag ids is missing");
          errors = true;
        }

        if (typeof rule_item.rule_scope !== 'number') {
          OpenAjax.a11y.logger.error("[RuleManager]  ** Rule " + rule_item.rule_id + " rule scope is missing or not a number");
          errors = true;
        }

        if (typeof rule_item.rule_category !== 'number') {
          OpenAjax.a11y.logger.error("[RuleManager]  ** Rule " + rule_item.rule_id + " rule category is missing or not a number");
          errors = true;
        }

        if (typeof rule_item.rule_category !== 'number') {
          OpenAjax.a11y.logger.error("[RuleManager]  ** Rule " + rule_item.rule_id + " rule category is missing or not a number");
          errors = true;
        }

        if (typeof rule_item.rule_group !== 'number') {
          OpenAjax.a11y.logger.error("[RuleManager]  ** Rule " + rule_item.rule_id + " rule group is missing or not a number");
          errors = true;
        }

        if (typeof rule_item.primary_property !== 'string') {
          OpenAjax.a11y.logger.error("[RuleManager]  ** Rule " + rule_item.rule_id + " primary property is missing or not a string");
          errors = true;
        }

        if (!rule_item.resource_properties) {
          OpenAjax.a11y.logger.error("[RuleManager]  ** Rule " + rule_item.rule_id + " resource properties is missing or not an array");
          errors = true;
        }

        if (typeof rule_item.language_dependency !== 'string') {
          OpenAjax.a11y.logger.error("[RuleManager]  ** Rule " + rule_item.rule_id + " language property is missing or not a string");
          errors = true;
        }

        if (typeof rule_item.validate !== 'function') {
          OpenAjax.a11y.logger.error("[RuleManager]  ** Rule " + rule_item.rule_id + " validate property is missing or not a function");
          errors = true;
        }

        if (errors) return false;

        var rule = new OpenAjax.a11y.Rule(rule_item, rules_nls, locale);

        rules.push(rule);

        return true;

      },

      /**
       * @method addRulesFromJSON
       *
       * @memberOf OpenAjax.a11y.RuleManager
       *
       * @desc Adds a rules from a list of rules in JSON format
       *
       * @param {Object}    rule_array  - An array of objects representing OAA rules
       *
       * @return  {Boolean} Returns true if the rules were added successfully; false if there was an error
       */

       addRulesFromJSON : function (rule_array) {

        var rule_item;

//        OpenAjax.a11y.logger.info("[RuleManager] Loading Rules");

        for (var i = 0; i < rule_array.length; i++) {

          rule_item = rule_array[i];
          this.addRule(rule_item);

        }

      },

      /**
       * @method addRulesNLSFromJSON
       *
       * @memberOf OpenAjax.a11y.RuleManager
       *
       * @desc Adds a rule NLS information for a specific lanaguage
       *
       * @param {String}  loc             - Language of NLS rule information (i.e. 'en-us')
       * @param {Object}  rules_nls_info  - Object containing rule NLS information
       */

      addRulesNLSFromJSON : function (loc, rules_nls_info) {

        rules_nls[loc] = rules_nls[loc] || {};

      //  this.rules_nls[locale] = rules_nls;

//        OpenAjax.a11y.logger.debug("[RuleManager] LOADING RULE NLS INFORMATION");

        for (var item in rules_nls_info) {

          switch (item) {

          case 'rule_scope':
          case 'message_severities':
          case 'rule_categories':
          case 'ACTION_NONE':
          case 'NOT_APPLICABLE':

            rules_nls[loc][item] = rules_nls_info[item];
//            OpenAjax.a11y.logger.debug("[RuleManager]  Add " + item + ": " + rules_nls_info[item]);

            break;

          case 'rules':

            rules_nls[loc][item] = rules_nls[loc][item] || {};

            for (var rule_id in rules_nls_info[item]) {
//              OpenAjax.a11y.logger.debug("[RuleManager] Rule NLS " + rule_id);
              rules_nls[loc][item][rule_id] = rules_nls_info[item][rule_id];
            }

            break;

          default:
            break;

          }
        }
      },

      /**
       * @method setLocale
       *
       * @memberOf OpenAjax.a11y.RuleManager
       *
       * @desc Set the language to return strings
       *
       * @param  {String}  loc   - String identifying the language
       */

      setLocale : function (loc) {

        if ((typeof loc === 'string') && (loc.length)) {
          locale = loc;
          for (var i = 0; i < rules.length; i++) rules[i].setLocale(rules_nls, locale);
        }
        else {
          throw new Error("[RuleManager] ** Invalid locale");
        }

      },

      /**
       * @method getRuleByRuleId
       *
       * @memberOf OpenAjax.a11y.RuleManager
       *
       * @desc Returned rule object with the id
       *
       * @param  {String}  rule_id   - id of the rule to find
       *
       * @return  {Rule} Returns rule object if the rule id is found; null if the rule id is not found
       */

      getRuleByRuleId : function (rule_id) {

        var rule;
        var rule_len = rules.length;

        for (var i = 0; i < rule_len; i++ ) {
          rule = rules[i];
          if (rule.getId() === rule_id) return rule;
        }

        return null;
      },

      /**
       * @method toJSON
       *
       * @memberOf OpenAjax.a11y.Rules
       *
       * @desc Exports current rule information to a JSON format
       *
       * @return {String}  JSON formatted string
       */

      toJSON : function (prefix) {

        if (typeof prefix !== 'string') prefix = "";

        var json = "";

        json += prefix + "[\n";

        var last = rules.length - 1;
        for (var i = 0; i < rules.length; i++ ) {

          var rule = rules[i];

          if (i === last) json += rule.toJSON(prefix)  + "\n";
          else json += rule.toJSON(prefix) + ",\n";

        }

        json += prefix + "]";

        return json;
      }
   };
}();


/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                       RulesetFactory                             */
/* ---------------------------------------------------------------- */

/**
 * @constructor RulesetFactory
 *
 * @memberOf OpenAjax.a11y
 *
 * NOTE: The following properties are defined when the ruleset is created
 *
 * @property {Object}  ruleset_info        - RulesetInfo object
 * @property {Object}  rule_mapping_info   - Rule mapping information object
 * @property {String}  locale              - String representing the language
 */

OpenAjax.a11y.RulesetFactory = {

  /**
   * @method newInstance
   *
   * @memberOf OpenAjax.a11y.RulesetFactory
   *
   * @desc Gets a new instance of RulesetFactory object
   *
   * @return  {RulesetFactory}  see description
   */


  newInstance : function() {
    var ruleset_info = null;
    var rule_mapping_info = null;
    var locale = "en-us`";

    return {

      /**
       * @method setParameter
       *
       * @memberOf OpenAjax.a11y.RulesetFactory
       *
       * @desc Set required parameter for the ruleset
       *
       * @param  {String}           name   - Name of the parameter
       * @param  {String | Object}  value  - Value of the parameter
       */

      setParameter : function(name, value) {

        if (typeof name === 'string') {
          name = name.toLowerCase();
        }
        else {
          throw new Error("[OpenAjax A11y][Rulesetfactory] Parameter name not a string");
        }

        switch (name) {

        case 'rulesetinfo':
          if (value) {
            ruleset_info = value;
            return true;
          }
          else {
            throw new Error("[OpenAjax A11y][Rulesetfactory] Invalid Ruleset Information Object");
          }

        case 'rulemappinginfo':
          if (value) {
            rule_mapping_info = value;
            return true;
          }
          else {
            throw new Error("[OpenAjax A11y][Rulesetfactory] Invalid Rule Mapping Information Object");
          }

        default:
          throw new Error("[OpenAjax A11y][Rulesetfactory] Unsupported paramater: " + name);
        } // end switch
      }, // end setParameter

      /**
       * @method setFeature
       *
       * @memberOf OpenAjax.a11y.RulesetFactory
       *
       * @desc Set a optional feature for the ruleset
       *
       * @param  {String}           name   - Name of the feature
       * @param  {String | Object}  value  - Value of the feature
       */

      setFeature : function(name, value) {

        if (typeof name === 'string') {
          name = name.toLowerCase();
        }
        else {
          throw new Error("[OpenAjax A11y][Rulesetfactory] Feature name not a string");
        }

        switch(name) {

        case 'locale':
          if ((typeof value === 'string') && (value.length > 0)) {
            locale = value;
            return true;
          }
          else {
            throw new Error("[OpenAjax A11y][Rulesetfactory] Locale is not a string");
          }

        default:
          // throw exception to console
          throw new Error("[OpenAjax A11y][Rulesetfactory] Unsupported feature: " + name);

        }

      },  // end setFeature

      /**
       * @method newRuleset
       *
       * @memberOf OpenAjax.a11y.RulesetFactory
       *
       * @desc Gets a Ruleset object with the current parameters and features
       *
       * @return  {Ruleset}  see description
       */

      newRuleset : function() {

        if (ruleset_info && rule_mapping_info) {
          var ruleset = new OpenAjax.a11y.Ruleset(ruleset_info, rule_mapping_info, locale);
          return Object.freeze(ruleset);
        }

        return null;
      }
    };
  }
};



/* ---------------------------------------------------------------- */
/*                       Ruleset                              */
/* ---------------------------------------------------------------- */

/**
 * @constructor Ruleset
 *
 * @memberOf OpenAjax.a11y
 *
 * @param  {Object} ruleset_info       -  JSON object representing ruleset information
 * @param  {Object} rule_mapping_info  -  JSON object representing rule mapping
 * @param  {String} loc                -  String identifying the language
 */

/**
 * @private
 * @constructor Internal Properties
 * NOTE: The following properties are defined when the ruleset is loaded
 *
 * @property {Object} ruleset_information  - Object containing ruleset information
 *
 * @property {Array}  rule_mappings - Array of RuleMapping objects
 *
 * @property {Number}   evaluation_levels          - Level of WCAG 2.0 Success Criteria to evaluate (i.e. A, AA, AAA)
 * @property {Boolean}  recommended_rules_enabled  - If true recommended rules are evaluated
 */

OpenAjax.a11y.Ruleset = function (ruleset_info, rule_mapping_info, loc) {

  // local references to current NLS information, based on current locale setting

//  OpenAjax.a11y.logger.info("[OpenAjax A11y][Ruleset] Creating Ruleset: " + ruleset_info['ruleset_id']);

  var wcag20_nls = OpenAjax.a11y.nls.WCAG20.getNLS(locale);

  if (typeof loc !== 'string') loc = "en-us";

  var locale = loc;

  var recommended_rules_enabled = true;
  var evaluation_levels         = OpenAjax.a11y.EVALUATION_LEVELS.A_AA;
  var rule_mappings             = [];

  var id          = "";
  var version     = "";
  var updated     = "";

  var author        = "";
  var author_url    = "";

  var title           = "";
  var tooltip         = "";
  var abbrev          = "";
  var description     = "";
  var description_url = "";

  var required_count = 0;
  var recommended_count = 0;

  // Check for ruleset id

  if (ruleset_info['ruleset_id']) {
    id  = ruleset_info['ruleset_id'];
//    OpenAjax.a11y.logger.debug("[Ruleset] id: " + id);
  }
  else {
    OpenAjax.a11y.logger.error("[OpenAjax A11y][Ruleset]   ** Ruleset missing id");
    return null;
  }

  // Check for ruleset version

  if (ruleset_info['version']) {
    version  = ruleset_info['version'];
//    OpenAjax.a11y.logger.debug("[Ruleset] version: " + version);
  }
  else {
    OpenAjax.a11y.logger.error("[OpenAjax A11y][Ruleset]  ** Ruleset " + id + " missing version");
    return null;
  }

  // Check for ruleset last updated date

  if (ruleset_info['last_updated']) {
    updated  = ruleset_info['last_updated'];
//    OpenAjax.a11y.logger.debug("[Ruleset] date: " + updated);
  }
  else {
    OpenAjax.a11y.logger.error("[OpenAjax A11y][Ruleset]  ** Ruleset " + id + " missing last updated date");
    return null;
  }

  // Check for author

  if (ruleset_info['author']) {
    author = ruleset_info['author'];
//    OpenAjax.a11y.logger.debug("[Ruleset] author: " + author);
  }
  else {
    OpenAjax.a11y.logger.error("[OpenAjax A11y][Ruleset]  ** Ruleset " + id + " missing author");
    return null;
  }

  // Check for author url

  if (ruleset_info['author_url']) {
    author_url = ruleset_info['author_url'];
//    OpenAjax.a11y.logger.debug("[Ruleset] author URL: " + author_url);
  }
  else {
    OpenAjax.a11y.logger.warning("[OpenAjax A11y][Ruleset]  ** Ruleset " + id + " missing author URL");
  }


  // Check for localized ruleset title

  if (ruleset_info.nls && ruleset_info.nls[locale].title) {
    title = ruleset_info.nls[locale].title;
//    OpenAjax.a11y.logger.debug("[Ruleset] title: " + title);
  }
  else {
    OpenAjax.a11y.logger.error("[OpenAjax A11y][Ruleset]  ** Ruleset " + id + " missing title");
    return null;
  }

  // Check for localized ruleset tooltip

  if (ruleset_info.nls[locale].tooltip) {
    tooltip = ruleset_info.nls[locale].tooltip;
//    OpenAjax.a11y.logger.debug("[Ruleset] tooltip: " + tooltip);
  }
  else {
    OpenAjax.a11y.logger.warning("[OpenAjax A11y][Ruleset]  ** Ruleset " + id + " missing tooltip");
  }

  // Check for localized ruleset abbreviation

  if (ruleset_info.nls[locale].abbrev) {
    abbrev = ruleset_info.nls[locale].abbrev;
//    OpenAjax.a11y.logger.debug("[Ruleset] abbrev: " + abbrev);
  }
  else {
    OpenAjax.a11y.logger.warning("[OpenAjax A11y][Ruleset]  ** Ruleset " + id + " missing abbreviation");
  }

  // Check for localized ruleset descriptions

  if (ruleset_info.nls[locale].description) {
    description = ruleset_info.nls[locale].description;
//    OpenAjax.a11y.logger.debug("[Ruleset] description: " + description);
  }
  else {
    OpenAjax.a11y.logger.warning("[OpenAjax A11y][Ruleset]  ** Ruleset " + id + " missing description");
  }

  // Check for localized ruleset description url (optional)

  if (ruleset_info.nls[locale].description_url) {
    description_url = ruleset_info.nls[locale].description_url;
//    OpenAjax.a11y.logger.debug("[Ruleset] description URL: " + description_url);
  }

//  OpenAjax.a11y.logger.debug("[Ruleset] mapping rules");

  if (rule_mapping_info) {

    for (var rule_id in rule_mapping_info) {

//      OpenAjax.a11y.logger.debug("[Ruleset]  rule id: " + rule_id);

      var rule_mapping = rule_mapping_info[rule_id];

//      OpenAjax.a11y.logger.debug("[Ruleset] required: " + rule_mapping.required);
//      OpenAjax.a11y.logger.debug("[Ruleset]  enabled: " + rule_mapping.enabled);

      var rule = OpenAjax.a11y.RuleManager.getRuleByRuleId(rule_id);

//      OpenAjax.a11y.logger.debug("[Ruleset] Rule: " + rule + " Required: " + rule_mapping.required + " " + (typeof rule_mapping.required));

      if (rule && (typeof rule_mapping.required === 'boolean')) {

        if (rule && (typeof rule_mapping.enabled === 'boolean')) {

          var rm = new OpenAjax.a11y.RuleMapping(rule, rule_mapping.required, rule_mapping.enabled);

//          OpenAjax.a11y.logger.debug("[Ruleset]  rule mapping: " + rm);

          rule_mappings.push(rm);

          if (rule_mapping.required) required_count++;
          else recommended_count++;
        }
      }
      else {
        OpenAjax.a11y.logger.error("[OpenAjax A11y][Ruleset] ** Ruleset rule " + rule_id + " is missing valid 'required' property");
      }
    } // end loop
  }
  else {
    OpenAjax.a11y.logger.error("[OpenAjax A11y][Ruleset] ** Ruleset " + id + " does not have any rules");
  }

//  OpenAjax.a11y.logger.debug("[Ruleset] creating ruleset information: " + typeof OpenAjax.a11y.info.RulesetInfo);

  var ruleset_information = OpenAjax.a11y.info.RulesetInfo(id, version, updated, author, author_url, title, abbrev, tooltip, description, description_url, required_count, recommended_count);

//  OpenAjax.a11y.logger.debug("[Ruleset] ruleset information: " + ruleset_information.title);

  return {

    /**
     * @method getRulesetInfo
     *
     * @memberOf OpenAjax.a11y.Ruleset
     *
     * @desc Return ruleset of information
     *
     * @return {RulesetInfo}  RulesetInfo object
     */

    getRuleMappingsArray : function() {
      return rule_mappings;
    },

    /**
     * @method getId
     *
     * @memberOf OpenAjax.a11y.Ruleset
     *
     * @desc Return ruleset id
     *
     * @return {String}  see description
     */

    getId : function () {
      return id;
    },

    /**
     * @method getRulesetInfo
     *
     * @memberOf OpenAjax.a11y.Ruleset
     *
     * @desc Return ruleset of information
     *
     * @return {RulesetInfo}  RulesetInfo object
     */

    getRulesetInfo : function () {
      return ruleset_information;
    },

    /**
     * @method getEvaluationLevels
     *
     * @memberOf OpenAjax.a11y.Ruleset
     *
     * @desc Get WCAG levels to evaluate
     *
     * @return  {Number}  Number represents the levels of success criteria to test
     */

    getEvaluationLevels : function () {
      return evaluation_levels;
    },

    /**
     * @method getEvaluationLevelsNLS
     *
     * @memberOf OpenAjax.a11y.Ruleset
     *
     * @desc Get NLS WCAG levels to evaluate
     *
     * @return  {String}  String representing the levels of success criteria evaluated
     */

    getEvaluationLevelsNLS : function () {
      return wcag20_nls.getEvaluationLevelsNLS(evaluation_levels);
    },

    /**
     * @method getRecommendedRulesEnabled
     *
     * @memberOf OpenAjax.a11y.Ruleset
     *
     * @desc Get the state of the evaluation of recommeneded rules
     *
     * @return  {Boolean} True if evaluation included recommended rules, False if not to evaluate recommeneded rules
     */

     getRecommendedRulesEnabled : function () {
       return recommended_rules_enabled;
     },

    /**
     * @method getLocale
     *
     * @memberOf OpenAjax.a11y.Ruleset
     *
     * @desc Get the language of the ruleset
     *
     * @return  {String} see description
     */

     getLocale : function () {
       return locale;
     },

    /**
     * @method toJSON
     *
     * @memberOf OpenAjax.a11y.Ruleset
     *
     * @desc Creates a JSON representation of the rules in the ruleset
     *
     * @param  {String}  prefix         - A prefix string typically spaces for formatting output
     *
     * @return {String} JSON formatted string representing the ruleset
     */

    toJSON : function (prefix) {

      if (typeof prefix !== 'string' || prefix.length === 0) {
        prefix = "";
      }

      var next_prefix   = prefix + "  ";
      var next_prefix_2 = prefix + "    ";

      var json = "";

      json +=  prefix + "{\n";

      json += ruleset_information.toJSON(next_prefix);

      json += next_prefix + "\"wcag20_level\"        : "  + evaluation_levels + ",\n";
      json += next_prefix + "\"rec_rules_enabled\"   : "  + recommended_rules_enabled + ",\n";

      var rule_mappings_len = rule_mappings.length;
      var last = rule_mappings_len - 1;

      if (rule_mappings_len > 0) {
        json += next_prefix + "\"rule_mappings\" : {\n";

        for (var i = 0; i < rule_mappings_len; i++) {

          var rule_mapping = rule_mappings[i];
          var rule = rule_mapping.rule;

          json += next_prefix_2 + "\"" + rule.getId() + "\" : {\n";
          json += next_prefix_2 + "  \"enabled\"    : "  + rule_mapping.enabled + ",\n";
          json += next_prefix_2 + "  \"required\"   : "  + rule_mapping.required + "\n";

          if (i === last) json += next_prefix + "}\n";
          else json += next_prefix + "},\n";
        }  // end loop

       json += next_prefix + "  }\n";

      }
      else {
        json += next_prefix + "  \"rule_mappings\" : {}\n";
      }

      json += prefix + "}\n";

      return json;

    }
  };
};



/* ---------------------------------------------------------------- */
/*                       RuleMapping                          */
/* ---------------------------------------------------------------- */

/**
 * @constructor RuleMapping
 *
 * @memberOf OpenAjax.a11y
 *
 * @desc  Contains information about a rule in a ruleset
 *
 * @param  {Object}   rule      - id of the rule
 * @param  {Boolean}  required  - Boolean indicating if the rule is required or
 *                                recommended
 * @param  {Boolean}  required  - Boolean indicating if the rule is enabled or disabled
 *
 * @property  {Object}   rule      - rule object
 * @property  {Boolean}  required  - Boolean indicating if the rule is required or
 *                                   recommended
 * @property  {Boolean}  required  - Boolean indicating if the rule is enabled or disabled
 */


OpenAjax.a11y.RuleMapping = function (rule, required, enabled) {
   this.rule         = rule;
   this.required     = required;
   this.enabled      = enabled;
};



/* ---------------------------------------------------------------- */
/*                       RulesetManager                              */
/* ---------------------------------------------------------------- */

/**
 * @constructor RulesetManager
 *
 * @memberOf OpenAjax.a11y
 *
 * @desc Information on the rulesets available for evauating documents
 *
 * @property  {Array}   rulesets - Associative array of rulesets
 */

OpenAjax.a11y.RulesetManager = function() {

  var rulesets = [];

  return {
    /**
     * @method addRuleset
     *
     * @memberOf OpenAjax.a11y.RulesetManager
     *
     * @desc Adds a localized version of WCAG 2.0 requirements to the cache
     *
     * @param  {Object}  rulesetdata - JSON object containing the ruleset information
     */

    addRuleset : function(ruleset) {
      rulesets.push(ruleset);
    },

    /**
    * @method getRuleset
    *
    * @memberOf OpenAjax.a11y.RulesetManager
    *
    * @desc Gets a ruleset with the specified ID
    *
    * @param  {string}  ruleset_id  - Ruleset id of the ruleset to return
    */

    getRuleset : function(ruleset_id) {

      for (var i = 0; i < rulesets.length; i++ ) {
        if (rulesets[i].getId() === ruleset_id) return rulesets[i];
      }

      // if ruleset_id is not defined, return the first ruleset, if it is defined
      if (rulesets[0]) return rulesets[0];

      return null;
    },

    /**
    * @method getAllRulesets
    *
    * @memberOf OpenAjax.a11y.RulesetManager
    *
    * @desc Gets ruleset information and id, returned as a list of objects
    *
    * @return  {Array}  List of objects with two properties:<br/>
    *                     rulesetId (String)
    *                     rulesetInfo (RulesetInfo object)
    */

    getAllRulesets : function() {

       var rs_info = [];

       for (var i = 0; i < rulesets.length; i++) {

          var rs = rulesets[i];

          rs_info.push({ rulesetId: rs.getId(), rulesetInfo: rs.getRulesetInfo() });

       }

      return rs_info;
    },

    /**
     * @method toJSON
     *
     * @memberOf OpenAjax.a11y.RulesetManager
     *
     * @desc Creates a JSON representation of the rules in the ruleset
     *
     * @return {String} JSON formatted string representing the ruleset
     */

    toJSON : function () {

      var json = "[\n";

      for(var i = 0, j = 1; i < rulesets.length; i++, j++) {
        json += rulesets[i].toJSON("  ");
        if (j < rulesets.length) json += ",\n";
        else json += "\n";
      }

      json += "]\n";

      return json;
    }

  };

}();

/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*                       EvaluatorFactory                           */
/* ---------------------------------------------------------------- */

/**
 * @constructor EvaluatorFactory
 *
 * @memberOf OpenAjax.a11y
 *
 */

/**
 * @private
 * @constructor Internal Properties
 * NOTE: The following properties are defined when the ruleset is loaded
 *
 * @property {Object}  ruleset              - id of the ruleset
 * @property {Boolean} broken_link_testing  - If true test links for validity
 * @property {String}  event_processing     - String identifying how to detect event handlers
 *
 */

OpenAjax.a11y.EvaluatorFactory = {

  newInstance : function() {

    var ruleset             = null;
    var broken_link_testing = false;
    var event_processing    = "fae-util";
    var groups              = OpenAjax.a11y.RULE_GROUP.GROUP123;

    return {

      setParameter : function(name, value) {

        if (typeof name === 'string') {
          name = name.toLowerCase();
        }
        else {
          throw new Error("[EvaluatorFactory] parameter name is not a string");
        }

        switch (name) {

        case 'ruleset':
          if (value) {
            ruleset = value;
            return true;
          }
          else {
            throw new Error("[EvaluatorFactory] Invalid Ruleset Object");
          }

        default:
          throw new Error("[EvaluatorFactory] " + name + " is not a supported parameterå");
        } // end switch

      }, // end setParameter

      setFeature : function(name, value) {

        if (typeof name === 'string') {
          name = name.toLowerCase();
        }
        else {
          throw new Error("[EvaluatorFactory] feature name is not a string");
        }

        switch (name) {

        case 'groups':
          if ((typeof value === 'number') &&
              (value >= OpenAjax.a11y.RULE_GROUP.GROUP1) &&
              (value <= OpenAjax.a11y.RULE_GROUP.GROUP123)) {
            groups = value;
//            OpenAjax.a11y.logger.debug("[EvaluatorFactory] Groups: " + groups);
            return true;
          }
          else {
            throw new Error("[EvaluatorFactory] group is not a number or out of range");
          }


        case 'eventprocessing':

          if (typeof value === 'string') {

            value = value.toLowerCase();

            switch (value) {

            case 'fae-util':
            case 'firefox':
            case 'none':
              event_processing = value;
              OpenAjax.a11y.EVENT_HANDLER_PROCESSOR = value;
//              OpenAjax.a11y.logger.debug("[EvaluatorFactory] event processing: " + event_processing);
              return true;

            default:
              event_processing = "none";
              OpenAjax.a11y.EVENT_HANDLER_PROCESSOR = "none";
              throw new Error("[EvaluatorFactory] Invalid event processor: " + value);
            } // end switch

          }
          else {
            throw new Error("[EvaluatorFactory] Event processor value is not a string ");
          }

        case 'brokenlinktesting':

          if (typeof value !== 'boolean') {
            throw new Error("[EvaluatorFactory] Broken link testing value is not a boolean value (e.g. true, false)");
          }
          broken_link_testing = value;

          break;

        default:
          throw new Error("[EvaluatorFactory] " + name + " is not a supported feature");
        } // end switch
        return false;
      },  // end setFeature

      newEvaluator : function() {

//        OpenAjax.a11y.logger.debug("[EvaluatorFactory][newEvaluator] Ruleset: " + ruleset);
//        OpenAjax.a11y.logger.debug("[EvaluatorFactory][newEvaluator] broken link testing: " + broken_link_testing);

        var e = new OpenAjax.a11y.Evaluator(ruleset, broken_link_testing, event_processing, groups);

        return e;
      }
    };
  }
};


/* ---------------------------------------------------------------- */
/*                       Evaluator                                  */
/* ---------------------------------------------------------------- */

/**
 * @constructor Evaluator
 *
 * @memberOf OpenAjax.a11y
 *
 */

/**
 * @private
 * @constructor Internal Properties
 * NOTE: The following properties are defined when the ruleset is loaded
 *
 * @property {Object}  r    - id of the ruleset
 * @property {Boolean} blt  - If true test links for validity
 * @property {String}  ep   - String identifying how to detect event handlers
 * @property {Number}  grps - Number identifying which rules should be evaluated by rule group
 *
 */

OpenAjax.a11y.Evaluator = function (r, blt, ep, grps) {

//  OpenAjax.a11y.logger.debug("[Evaluator] Ruleset: " + r + " BLT: " + blt + " EP:" + ep );

  var ruleset             = r;
  var broken_link_testing = blt;
  var event_processing    = ep;
  var groups              = grps;

  return {

    /**
     * @method evaluate
     *
     * @memberOf OpenAjax.a11y.Evaluator.Evaluator
     *
     * @desc Evaluate a document using the OpenAjax ruleset and return an evaluation object
     *
     * @param  {Object}    doc       - Browser document object model (DOM) to be evaluated
     * @param  {String}    title     - Title of document being analyzed
     * @param  {String}    url       - url of document being analyzed
     */

    evaluate : function (doc_1, title, url_1, compat1, compat2) {

      var doc   = doc_1;
      var url   = url_1;

      if (typeof compat2 === 'boolean') {
        doc   = url_1;
        url   = doc_1;
      }

      var dom_cache = new OpenAjax.a11y.cache.DOMCache(url, title, doc);

      dom_cache.updateDOMElementCache();

      dom_cache.updateAllCaches();

      var evaluation_result = new OpenAjax.a11y.EvaluationResult(doc, title, url, ruleset, dom_cache);

//      OpenAjax.a11y.logger.info("Starting evaluation....");
//      OpenAjax.a11y.logger.info("         URL: " + url);
//      OpenAjax.a11y.logger.info("     RULESET: " + ruleset.getRulesetInfo().title);

      var rule_mappings = ruleset.getRuleMappingsArray();
      var rule_mappings_len = rule_mappings.length;

      for (var i = 0; i < rule_mappings_len; i++) {

        var rule_mapping = rule_mappings[i];
        var rule = rule_mapping.rule;

//        OpenAjax.a11y.logger.info("[evaluate][rule]: " + rule.getIdNLS());

        if (rule_mapping.enabled && (rule.getGroup() & groups)) {

          var rule_result = new OpenAjax.a11y.RuleResult(rule_mapping);

          if (dom_cache.has_body_element) rule.validate(dom_cache, rule_result);

          evaluation_result.addRuleResult(rule_result);

        }

      } // end rule loop

//      OpenAjax.a11y.logger.info("Evaluation Complete!");

      return evaluation_result;
    },

    /**
     * @method setEventHandlerProcessor
     *
     * @memberOf OpenAjax.a11y.Evaluator
     *
     * @desc Legacy support for FAE 2.0, remove when fae-util config scripts are updated
     */

    setEventHandlerProcessor: function() {

    },

    /**
     * @method getBrokenLinkTesting
     *
     * @memberOf OpenAjax.a11y.Evaluator
     *
     * @desc Get the state of the broken list testing
     *
     * @return  {Boolean} see description
     */

     getBrokenLinkTesting : function () {
       return broken_link_testing;
     },

    /**
     * @method getRuleset
     *
     * @memberOf OpenAjax.a11y.Evaluator
     *
     * @desc Get current ruleset
     *
     * @return  {Ruleset} see description
     */

     getRuleset : function () {
       return ruleset;
     },

    /**
     * @method getEventProcessing
     *
     * @memberOf OpenAjax.a11y.Evaluator
     *
     * @desc Get current event processing information
     *
     * @return  {String} see description
     */

     getEventProcessing : function () {
       return event_processing;
     }

  };
};

/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* -------------------------------------------------------------------------------------- */
/* OpenAjax Alliance Cache Properties and Values National Language Support (NLS): English */
/* -------------------------------------------------------------------------------------- */


OpenAjax.a11y.nls.Cache.addCacheNLSFromJSON('en-us', {

    /*
     * Boolean values
     */
    boolean_values : {
     true_value  : 'True',
     false_value : 'False'
    },

    not_boolean_value : "Not a boolean value",

    yes_no_values : {
     yes_value : 'Yes',
     no_value  : 'No'
    },

    required    : 'Required',
    recommended : 'Recommended',

    filteredItem  : "filtered element",
    filteredItems : "filtered elements",

    filteredRule  : "filtered rule",
    filteredRules : "filtered rules",

    undefined : "undefined",
    empty     : "empty",

    message   : "Message",

    rules     : "rules",
    rule      : "rule",

    noAction  : "No action needed",


    /*
     * Relative implementation priorities of complying to rule requirements
     */
    priorities: ['Undefined', 'First Priority', 'Second Priority', 'Third Priority'],

    /*
     * Types of rule references to a requirement
     */
    references: ['Unknown', 'Requirement', 'Coding Technique', 'Manual Evaluation', 'Best Practice', 'Authoring Technique', 'Other'],

    /*
     * Abbreviation for the types of rule references to a requirement
     */
    reference_abbreviations: ['U', 'R', 'C', 'ME', 'BP', 'A', 'O'],

    /*
     * Media constant values
     */
    reference_media_contants: ['Undefined', 'No', 'Maybe', 'Yes'],

    missing_label : {
      label : "no label",
      style : "missing_label"
    },

    empty_alt_text : {
      label : "empty alt",
      style : "empty_alt"
    },

    missing_alt : {
      label : "missing alt attribute",
      style : "empty_alt"
    },

    invalid_attribute : {
      label : "invalid attribute",
      value : "",
      style : "invalid"
    },

    invalid_value : {
      label : "",
      value : " (invalid)",
      style : "invalid"
    },

    element_result_nls: ['Undefined','P','H','MC','W','V'],

    rule_result_nls: ['Undefined','n/a','P','MC','W','V'],

    /*
     * Status of a rule for evaluating a requirement
     */
    status: ['Undefined', 'Proposed', 'Accepted', 'Deprecated'],

    resource_properties : {

    /*
     * DOMElement object properties
     */

      'document_order' : {
        label       : 'Order',
        description : 'The ordinal position of the item in the list',
        style       : 'doc_order'
      },
      'tag_name' : {
        label       : 'Tag Name',
        description : 'Tag (or element) name of the item',
        style       : 'element'
      },
      'id' : {
        label       : 'id',
        description :  'Value of the id attribute'
      },
      'id_unique'   : {
        label       : 'ID unique',
        description :  'Information about the id attribute value',
        values      : ['Undefined value', 'Not defined', 'Unique', 'Not unique'],
        style       : ['','','','warning']
      },
      'character_count' : {
        label       : 'Text Count',
        description :  'Number of characters in the text content of this tag'
      },
      'class_name'  : {
        label       : 'class',
        description :  'Value of the HTML class attribute'
      },
      'role'        : {
        label       : 'role',
        description :  'Can be used to redefine the role of an element into a landmark or widget'
      },
      'alt'         : {
        label       : 'alt',
        description :  'Value of the HTML alt attribute'
      },
      'alt_for_comparison' : {
        label       : 'Normlized Alt',
        description : 'Normalized version of the alt text content used for comparison'
      },
      'has_alt' : {
        label       : 'Alt Defined',
        description : 'True if the alt attribute was defined in markup'
      },
      'alt_length' : {
        label       : 'Alt text length',
        description : 'The length of the text in the alt text attribute'
      },
      'title'       : {
        label       : 'title',
        description : 'Value of the HTML title attribute'
      },
      'aria_describedby' : {
        label       : 'aria-describedby',
        description : 'aria-describedby can be used to provide additional information about an element to AT users'
      },
      'aria_hidden' : {
        label       : 'aria-hidden',
        description :  'aria-hidden can be used to hide information from assistive technologies that is visible graphically'
      },
      'aria_label'  : {
        label       : 'aria-label',
        description :  'aria-label can be used to label form controls and widgets'
      },
      'aria_labelledby' : {
        label       : 'aria-labelledby',
        description :  'aria-labelledby can be used to label form controls and widgets'
      },
      'xpath'       : {
        label       : 'XPath',
        description : 'XPath information used for identifying the location of the element in the DOM'
      },
      'has_aria_describedby' : {
        label       : 'Description',
        description : 'Description defined using the aria-describedby attribute'
      },
      'calculated_aria_description' : {
        label       : 'Calculated Description',
        description : 'Calculated text content of a description defined using the aria-describedby attribute'
      },
      'for_id'  : {
        label       : 'for',
        description : 'Value of the for attribute of a label element'
      },
      'parent_landmark_role'  : {
        label       : 'Parent landmark role',
        description : 'Role of the landmark that contains this content'
      },
      'parent_landmark'  : {
        label       : 'Containing landmark element',
        description : 'Landmark element that contains this content'
      },
      'is_widget'  : {
        label       : 'ARIA widget role',
        description : 'If element is part of an aria widget'
      },
      'is_landmark'  : {
        label       : 'ARIA landmark role',
        description : 'If element is part of an aria widget'
      },


    /*
     * Calculated values based on CSS properties
     */

      'graphical' : {
        label       : 'Graphical Visibility',
        description : 'Can the item be seen visually',
        values      : ['Undefined value', 'Unknown', 'Hidden', 'Visible']
      },
      'is_large_font' : {
        label       : 'Large Font',
        description : 'Boolean value used in WCAG 2.0 evaluation of color contrast ratio'
      },
      'is_visible_to_at' : {
        label       : 'AT Visible',
        description : 'Is the element and its content visible to Assistive Technology',
        values : ['undefined', 'unknown', 'hidden', 'visible']
      },
      'is_visible_onscreen' : {
        label       : 'Screen Visible',
        description : 'Is the element and its content visible on screen',
        values : ['undefined', 'unknown', 'hidden', 'visible']
      },


    /*
     * Run time CSS style properties
     */

      'display'              : {
        label       : 'display',
        description :  'The value of the CSS display property'
      },
      'visibility'           : {
        label       : 'visibility',
        description :  'The value of the CSS visibility property'
      },
      'color'                : {
        label       : 'color',
        description :  'The value of the CSS color property'
      },
      'background_color' : {
        label       : 'background-color',
        description :  'The value of the CSS background-color property'
      },
      'background_image' : {
        label       : 'background-image',
        description :  'The value of the CSS background-image property'
      },
      'font_family'          : {
        label       : 'font-family',
        description :  'The value of the CSS font-family property'
      },
      'font_size'            : {
        label       : 'font-size',
        description :  'The value of the CSS font-size property'
      },
      'font_weight'          : {
        label       : 'font-weight',
        description :  'The value of the CSS font-weight property'
      },
      'position'             : {
        label       : 'position',
        description :  'The value of the CSS position property'
      },
      'left'                 :  {
        label       : 'left',
        description :  'The value of the CSS left property'
      },
      'top'                  : {
        label       : 'top',
        description :  'The value of the CSS top property'
      },
      'height'                 :  {
        label       : 'height',
        description :  'The value of the CSS height property'
      },
      'width'                  : {
        label       : 'width',
        description :  'The value of the CSS width property'
      },
      'area'                  : {
        label       : 'area',
        description :  'The product of the width and height of an element'
      },

    /*
     * Abbreviation Cache object properties
     */
      'abbreviation_text' : {
        label       : 'Abbreviation',
        description :  'The text content of an ABBR or ACROYMN element'
      },

    /*
     * Image Cache object attributes
     */
      'source' : {
        label       : 'src',
        description : 'Value of the src attribute'
      },


    /*
     * Control Cache object attributes
     */
      'computed_label' : {
        label       : 'Label',
        description : 'The label communicated to assistive technologies for identifying the form control.'
      },
      'computed_label_source' : {
        label       : 'Labeling Technique',
        description : 'The technique used for defining the label',
        values      : ['unknown', 'none', 'label by reference', 'label encapsulation', 'title attribute', 'value attribute', 'alt attribute', 'button type', 'child text content', 'aria labelledby', 'aria label', 'caption', 'summary']
      },
      'num_main_landmarks' : {
        label       : 'Main landmarks',
        description : 'Number of main landmarks'
      },
      'num_visible_main_landmarks' : {
        label       : 'Visibile main landmarks',
        description : 'Number of visible main landmarks'
      },
      'fieldset_element' : {
        label       : 'Fieldset/Legend',
        description : 'Content of the fieldset legend element'
      },
      'legend_count' : {
        label       : 'Legend Count',
        description : 'Number of legend elements contained in a fieldset element'
      },
      'accessible_name' : {
        label       : 'Accessible Name',
        description : 'The name of content, link, form control or widget that is communicated to assistive technologies.'
      },
      'accessible_name_for_comparison' : {
        label       : 'Accessible Name (normalized)',
        description : 'Normailzed name of a widget for use in comparisons.'
      },
      'accessible_description' : {
        label       : 'Description',
        description : 'The description of content, image, link, form control or widget that is communicated to assistive technologies.'
      },
      'accessible_description_source' : {
        label       : 'Description Technique',
        description : 'The technique used for defining the description',
        values      : ['unknown', 'none', 'title attribute', 'aria describedby', 'summary']
      },
      'accessible_description_for_comparison' : {
        label       : 'Description (normalized)',
        description : 'Normalized description used for comparisons.'
      },
    /*
     * Link Cache object attributes
     */
      'is_url' : {
        label       : 'is a url',
        description : 'Boolean value indicating if a href contains a URL'
      },
      'is_target' : {
        label       : 'is a target',
        description : 'Boolean value indicating if the link can be a target'
      },
      'link_type' : {
        label       : 'Type of link',
        description : 'Type of link',
        values      : ['empty', 'other', 'internal link', 'link', 'secure link', 'ftp', 'secure ftps', 'file', 'javascript', 'mail to', 'target only']
      },
      'accessible_name_source' : {
        label       : 'Name from',
        description : 'The technique for defining the accessible name of a link',
        values      : ['unknown', 'none', 'label by reference', 'label encapsulation', 'title attribute', 'value attribute', 'alt attribute', 'button type', 'child text content', 'aria-labelledby attribute', 'aria-label attribute', 'caption', 'summary']
      },
      'is_broken' : {
        label       : 'Link broken',
        description : 'Tests to see if the link is broken, valid or has an error',
        values      : ['unkown',  'broken', 'vaild', 'not tested', 'error']
      },
      'name_attribute' : {
        label       : 'Name attribute',
        description : 'Value of the name attribute'
      },
      'target' : {
        label       : 'target',
        description : 'Value of the target attribute'
      },

    /*
     * Media Cache object properties
     */

      'is_live'  : {
        label       : 'Live',
        description :  'Is the media live video or audio',
        values      :  ['undefined', 'No', 'Maybe, manual verification required', 'Yes']

      },

      'is_video'  : {
        label       : 'Video',
        description :  'Does the media object contain video',
        values      :  ['undefined', 'No', 'Maybe, manual verification required', 'Yes']

      },

      'is_audio'  : {
        label       : 'Audio',
        description :  'Does the media object contain audio',
        values      :  ['undefined', 'No', 'Maybe, manual verification required', 'Yes']
      },

      'has_caption'  : {
        label       : 'Caption',
        description :  'Does the media object have captions',
        values      :  ['undefined', 'No', 'Maybe, manual verification required', 'Yes']
      },

      'has_text_alternative' : {
        label       : 'Text Equivalent',
        description :  'Does the media object have a text equivalent',
        values      :  ['undefined', 'No', 'Maybe, manual verification required', 'Yes']
      },

      'has_audio_description' : {
        label       : 'Audio Equivalent',
        description :  'Does the media object have a audio equivalent',
        values      :  ['undefined', 'No', 'Maybe, manual verification required', 'Yes']
      },

    /*
     * Name Cache object properties
     */

      'name'  : {
        label       : 'Name',
        description : 'Text content of the element'
      },
      'name_for_comparison' : {
        label       : 'Normalized name',
        description : 'Text content of the element normalized for use in comparisons'
      },
      'name_from_text_nodes' : {
        label       : 'Name from text',
        description : 'Text content of the element that comes from text dom nodes'
      },
      'name_from_image_alt' : {
        label       : 'Name from alt',
        description : 'Text content of the element that comes from alt text of images'
      },
      'image_count' : {
        label       : 'Image count',
        description : 'Number of images contained in the element'
      },
      'text_only_from_image' : {
        label       : 'Image only',
        description : 'Does the text content only come from images'
      },

    /*
     * List Cache object properties
     */

      'list_type'  : {
        label       : 'List Type',
        values      : ['Undefined', 'Container element', 'Item element', 'Landmark element'],
        description : 'Type of list cache element'
      },

    /*
     * Table Cache object properties
     */

      'row'                      : {
        label       : 'Row',
        description :  'The row of the cell in a table'
      },
      'column'                   : {
        label       : 'Column',
        description :  'The column of the cell in a table'
      },
      'cell_count'                   : {
        label       : 'Cell Count',
        description :  'Number of TH and TD elements in the table'
      },
      'max_row'                      : {
        label       : 'Rows',
        description :  'Number of rows in a table'
      },
      'max_column'                   : {
        label       : 'Columns',
        description :  'Number of columns in a table'
      },
      'number_of_header_ids' : {
        label       : 'Header ID Num',
        description :  'Number of ids in a headers attribute'
      },
      'text_content'             : {
        label       : 'Text',
        description :  'Text content of a table cell'
      },
      'header_content'             : {
        label       : 'Header',
        description :  'Text content of header cells associated with the data cell'
      },
      'header_source'  : {
        label       : 'Header Source',
        values      : ["Undefined", "none", "headers attribute", "Column/Row header cells"],
        description : 'How header cells were calculated for the table'
      },
      'text_normalized'    : {
        label       : 'Text',
        description : 'Text content of a element'
      },
      'caption'        : {
        label       : 'Caption',
        description : 'Caption is used to identify the information in the table'
      },
      'caption_source' : {
        label       : 'Caption Source',
        description : 'The technique used for defining the text content of the caption',
        values      : ['unknown', 'none', 'label by reference', 'label encapsulation', 'title attribute', 'value attribute', 'alt attribute', 'button type', 'child text content', 'aria labelledby', 'aria label', 'caption', 'summary']
      },
      'summary'        : {
        label       : 'Summary',
        description : 'A summary of the table content or author intended conclusions of the information in the table'
      },
      'summary_source' : {
        label       : 'Summary Source',
        description : 'The technique for defining the text content of the summary',
        values      : ['unknown', 'none', 'title', 'aria describedby', 'summary']
      },
      'is_data_table'            : {
        label       : 'Data Table',
        description :  'True if a table has been identified as a data table, otherwise false'
      },
      'is_complex_data_table'            : {
        label       : 'Complex Data Table',
        description :  'True if a table has been identified as a complex data table, otherwise false'
      },
      'first_row_th_count'       : {
        label       : 'Header Count',
        description :  'The number of header cells in the first row or column of a data table'
      },
      'first_row_cell_count' : {
        label       : 'Cell Count',
        description :  'The number of none empty cells in the first row or column of a data table'
      },
      'scope'               : {
        label       : 'scope',
        description :  'The value of the scope attribute of a table cell'
      },
      'headers'             : {
        label       : 'headers',
        description :  'The value of the headers attribute of a table cell'
      },
      'row_span'            : {
        label       : 'rowspan',
        description :  'The value of the rowspan attribute of a table cell'
      },
      'column_span'         : {
        label       : 'colspan',
        description :  'The value of the colspan attribute of a table cell'
      },
      'nesting_level'         : {
        label       : 'Nesting',
        description :  'The level of nesting of a layout table in other tables that are wider than 1 column and are not data tables'
      },
      'table_type'  : {
        label       : 'Table Type',
        values      : ["Undefined", "Table","Caption","Table Head","Table Body", "Row", "Header Cell", "Data Cell"],
        description : 'Type of table element'
      },
      'table_role'  : {
        label       : 'Table Role',
        values      : ["Undefined", "Unknown", "Layout Table", "Data Table", "Complex Data Table"],
        description : 'Identifies if the table is being used for layout or tabular data on the page, and if the data table is a complex data table'
      }

    }
  }
);
/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/* OpenAjax Alliance Rule Category National Language Support (NLS): English    */
/* --------------------------------------------------------------------------- */

OpenAjax.a11y.nls.RuleCategories.addNLS('en-us', {
  abbreviation : 'RC',
  title        : 'Rule Categories',
  url          : '',

  rule_categories: [
    {
      id           : OpenAjax.a11y.RULE_CATEGORIES.LANDMARKS,
      title        : 'Landmarks',
      url          : '',
      description  : 'Use ARIA landmark roles to structure the content of each page and identify major sections of content, thus making them more findable and navigable. The use of landmarks will, in many cases, reflect the visual styling and page layouts that web designers utilize to set apart various sections of content.'
    },
    {
      id           : OpenAjax.a11y.RULE_CATEGORIES.HEADINGS,
      title        : 'Headings',
      url          : '',
      description  : 'Use heading elements (H1-H6) to provide appropriate labels for landmarks, and to identify subsections of content within landmarks.'
    },
    {
      id           : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
      title        : 'Styles/Content',
      url          : '',
      description  : 'Use proper HTML markup to identify the semantics and language of text content. Ensure that text is readable by adhering to color contrast guidelines, and that information is not conveyed solely by the use of color, shape, location or sound.'
    },
    {
      id           : OpenAjax.a11y.RULE_CATEGORIES.IMAGES,
      title        : 'Images',
      url          : '',
      description  : 'Provide appropriate text alternatives for static images and graphics.'
    },
    {
      id           : OpenAjax.a11y.RULE_CATEGORIES.LINKS,
      title        : 'Links',
      url          : '',
      description  : 'Use link text that properly describes the target of each link. Ensure consistency and uniqueness for links that are usable, predictable and understandable.'
    },
    {
      id           : OpenAjax.a11y.RULE_CATEGORIES.TABLES,
      title        : 'Tables',
      url          : '',
      description  : 'Provide table captions or other meta-information as needed. Provide row and column header references for data cells of data tables. Ensure that tables used for layout properly linearize text content.'
    },
    {
      id           : OpenAjax.a11y.RULE_CATEGORIES.FORMS,
      title        : 'Forms',
      url          : '',
      description  : 'Provide meaningful labels for form elements and usable and understandable error feedback as needed.'
    },
    {
      id           : OpenAjax.a11y.RULE_CATEGORIES.WIDGETS_SCRIPTS,
      title        : 'Widgets/Scripts',
      url          : '',
      description  : 'Use appropriate event handlers on elements to support native interactivity using JavaScript. Ensure that custom widgets created using JavaScript support keyboard interaction and include ARIA markup to describe their roles, properties and states.'
    },
    {
      id           : OpenAjax.a11y.RULE_CATEGORIES.AUDIO_VIDEO,
      title        : 'Audio/Video',
      url          : '',
      description  : 'Provide appropriate text transcripts, captions or audio descriptions for elements used in rendering audio and video content.'
    },
    {
      id           : OpenAjax.a11y.RULE_CATEGORIES.KEYBOARD_SUPPORT,
      title        : 'Keyboard Support',
      url          : '',
      description  : 'Provide logical and sequential keyboard navigation among interactive elements such as links and form controls. Use standard models of keyboard interaction for custom widgets.'
    },
    {
      id           : OpenAjax.a11y.RULE_CATEGORIES.TIMING,
      title        : 'Timing',
      url          : '',
      description  : 'Eliminate accessibility problems caused by time limits on input and by content that moves, scrolls, flashes or auto-updates.'
    },
    {
      id           : OpenAjax.a11y.RULE_CATEGORIES.SITE_NAVIGATION,
      title        : 'Site Navigation',
      url          : '',
      description  : 'Ensure the consistent labeling and ordering of recurrent page sections across all pages within a website. Provide a meaningful title for each page within a website.'
    },
    // Composite rule categories
    {
      id           : OpenAjax.a11y.RULE_CATEGORIES.ALL,
      title        : 'All Rules',
      url          : '',
      description  : 'Includes all rules in the ruleset and provides a way to sort and compare the results of all the rules.'
    }
  ]
});
/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/* OpenAjax Alliance WCAG 2.0 National Language Support (NLS): English         */
/* --------------------------------------------------------------------------- */

OpenAjax.a11y.nls.WCAG20.addNLS('en-us', {


  abbreviation: 'WCAG 2.1',
  title: 'Web Content Accessibility Guidelines (WCAG) 2.1',
  url: 'https://www.w3.org/TR/WCAG21/',
  status: 'W3C Recommendation 05 June 2018',
  level: 'Level ',
  levels: [  'Undefined',  'AAA',  'AA',  '',  'A'  ],
  evaluation_levels: [  'Undefined',  'AAA',  'AA',  'AA and AAA',  'A',  'A and AAA',  'A nd AA',  'A, AA and AAA'  ],
  all_guidelines: {
    title: 'All Rules',
    description: 'All the rules related to WCAG 2.1.',
    url_spec: 'https://www.w3.org/TR/WCAG21/'
  },
  principles: {
    '1': {
      id: OpenAjax.a11y.WCAG20_PRINCIPLE.P_1,
      title: '1. Perceivable',
      description: 'Information and user interface components must be presentable to users in ways they can perceive.',
      url_spec: 'https://www.w3.org/TR/WCAG21/#perceivable',
      guidelines: {
        '1.1': {
          id: OpenAjax.a11y.WCAG20_GUIDELINE.G_1_1,
          title: 'Guideline 1.1 Text Alternatives',
          description: 'Provide text alternatives for any non-text content so that it can be changed into other forms people need, such as large print, braille, speech, symbols or simpler language.',
          url_spec: 'https://www.w3.org/TR/WCAG21/#text-alternatives',
          success_criteria: {
            '1.1.1': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_1_1,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 1.1.1 Non-text Content',
              description: 'All non-text content that is presented to the user has a text alternative that serves the equivalent purpose, except for the situations listed below.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#non-text-content',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#non-text-content',
              references: {
              }
            }
          }
        },
        '1.2': {
          id: OpenAjax.a11y.WCAG20_GUIDELINE.G_1_2,
          title: 'Guideline 1.2 Time-based Media',
          description: 'Provide alternatives for time-based media.',
          url_spec: 'https://www.w3.org/TR/WCAG21/#time-based-media',
          success_criteria: {
            '1.2.1': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_2_1,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 1.2.1 Audio-only and Video-only (Prerecorded)',
              description: 'For prerecorded audio-only and prerecorded video-only media, the following are true, except when the audio or video is a media alternative for text and is clearly labeled as such:',
              url_spec: 'https://www.w3.org/TR/WCAG21/#audio-only-and-video-only-prerecorded',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/audio-only-and-video-only-prerecorded.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#audio-only-and-video-only-prerecorded',
              references: {
              }
            },
            '1.2.2': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_2_2,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 1.2.2 Captions (Prerecorded)',
              description: 'Captions are provided for all prerecorded audio content in synchronized media, except when the media is a media alternative for text and is clearly labeled as such.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#captions-prerecorded',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/captions-prerecorded.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#captions-prerecorded',
              references: {
              }
            },
            '1.2.3': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_2_3,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 1.2.3 Audio Description or Media Alternative (Prerecorded)',
              description: 'An alternative for time-based media or audio description of the prerecorded video content is provided for synchronized media, except when the media is a media alternative for text and is clearly labeled as such.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#audio-description-or-media-alternative-prerecorded',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/audio-description-or-media-alternative-prerecorded.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#audio-description-or-media-alternative-prerecorded',
              references: {
              }
            },
            '1.2.4': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_2_4,
              level: OpenAjax.a11y.WCAG20_LEVEL.AA,
              title: 'Success Criterion 1.2.4 Captions (Live)',
              description: 'Captions are provided for all live audio content in synchronized media.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#captions-live',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/captions-live.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#captions-live',
              references: {
              }
            },
            '1.2.5': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_2_5,
              level: OpenAjax.a11y.WCAG20_LEVEL.AA,
              title: 'Success Criterion 1.2.5 Audio Description (Prerecorded)',
              description: 'Audio description is provided for all prerecorded video content in synchronized media.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#audio-description-prerecorded',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/audio-description-prerecorded.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#audio-description-prerecorded',
              references: {
              }
            },
            '1.2.6': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_2_6,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 1.2.6 Sign Language (Prerecorded)',
              description: 'Sign language interpretation is provided for all prerecorded audio content in synchronized media.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#sign-language-prerecorded',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/sign-language-prerecorded.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#sign-language-prerecorded',
              references: {
              }
            },
            '1.2.7': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_2_7,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 1.2.7 Extended Audio Description (Prerecorded)',
              description: 'Where pauses in foreground audio are insufficient to allow audio descriptions to convey the sense of the video, extended audio description is provided for all prerecorded video content in synchronized media.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#extended-audio-description-prerecorded',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/extended-audio-description-prerecorded.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#extended-audio-description-prerecorded',
              references: {
              }
            },
            '1.2.8': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_2_8,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 1.2.8 Media Alternative (Prerecorded)',
              description: 'An alternative for time-based media is provided for all prerecorded synchronized media and for all prerecorded video-only media.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#media-alternative-prerecorded',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/media-alternative-prerecorded.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#media-alternative-prerecorded',
              references: {
              }
            },
            '1.2.9': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_2_9,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 1.2.9 Audio-only (Live)',
              description: 'An alternative for time-based media that presents equivalent information for live audio-only content is provided.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#audio-only-live',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/audio-only-live.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#audio-only-live',
              references: {
              }
            }
          }
        },
        '1.3': {
          id: OpenAjax.a11y.WCAG20_GUIDELINE.G_1_3,
          title: 'Guideline 1.3 Adaptable',
          description: 'Create content that can be presented in different ways (for example simpler layout) without losing information or structure.',
          url_spec: 'https://www.w3.org/TR/WCAG21/#adaptable',
          success_criteria: {
            '1.3.1': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_3_1,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 1.3.1 Info and Relationships',
              description: 'Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#info-and-relationships',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#info-and-relationships',
              references: {
              }
            },
            '1.3.2': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_3_2,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 1.3.2 Meaningful Sequence',
              description: 'When the sequence in which content is presented affects its meaning, a correct reading sequence can be programmatically determined.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#meaningful-sequence',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/meaningful-sequence.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#meaningful-sequence',
              references: {
              }
            },
            '1.3.3': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_3_3,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 1.3.3 Sensory Characteristics',
              description: 'Instructions provided for understanding and operating content do not rely solely on sensory characteristics of components such as shape, color, size, visual location, orientation, or sound.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#sensory-characteristics',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/sensory-characteristics.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#sensory-characteristics',
              references: {
              }
            },
            '1.3.4': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_3_4,
              level: OpenAjax.a11y.WCAG20_LEVEL.AA,
              title: 'Success Criterion 1.3.4 Orientation',
              description: 'Content does not restrict its view and operation to a single display orientation, such as portrait or landscape, unless a specific display orientation is essential.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#orientation',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/orientation.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#orientation',
              references: {
              }
            },
            '1.3.5': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_3_5,
              level: OpenAjax.a11y.WCAG20_LEVEL.AA,
              title: 'Success Criterion 1.3.5 Identify Input Purpose',
              description: 'The purpose of each input field collecting information about the user can be programmatically determined when:',
              url_spec: 'https://www.w3.org/TR/WCAG21/#identify-input-purpose',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/identify-input-purpose.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#identify-input-purpose',
              references: {
              }
            },
            '1.3.6': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_3_6,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 1.3.6 Identify Purpose',
              description: 'In content implemented using markup languages, the purpose of User Interface Components, icons, and regions can be programmatically determined.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#identify-purpose',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/identify-purpose.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#identify-purpose',
              references: {
              }
            }
          }
        },
        '1.4': {
          id: OpenAjax.a11y.WCAG20_GUIDELINE.G_1_4,
          title: 'Guideline 1.4 Distinguishable',
          description: 'Make it easier for users to see and hear content including separating foreground from background.',
          url_spec: 'https://www.w3.org/TR/WCAG21/#distinguishable',
          success_criteria: {
            '1.4.1': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_4_1,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 1.4.1 Use of Color',
              description: 'Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#use-of-color',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/use-of-color.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#use-of-color',
              references: {
              }
            },
            '1.4.2': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_4_2,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 1.4.2 Audio Control',
              description: 'If any audio on a Web page plays automatically for more than 3 seconds, either a mechanism is available to pause or stop the audio, or a mechanism is available to control audio volume independently from the overall system volume level.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#audio-control',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/audio-control.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#audio-control',
              references: {
              }
            },
            '1.4.3': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_4_3,
              level: OpenAjax.a11y.WCAG20_LEVEL.AA,
              title: 'Success Criterion 1.4.3 Contrast (Minimum)',
              description: 'The visual presentation of text and images of text has a contrast ratio of at least 4.5:1, except for the following:',
              url_spec: 'https://www.w3.org/TR/WCAG21/#contrast-minimum',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#contrast-minimum',
              references: {
              }
            },
            '1.4.4': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_4_4,
              level: OpenAjax.a11y.WCAG20_LEVEL.AA,
              title: 'Success Criterion 1.4.4 Resize text',
              description: 'Except for captions and images of text, text can be resized without assistive technology up to 200 percent without loss of content or functionality.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#resize-text',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/resize-text.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#resize-text',
              references: {
              }
            },
            '1.4.5': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_4_5,
              level: OpenAjax.a11y.WCAG20_LEVEL.AA,
              title: 'Success Criterion 1.4.5 Images of Text',
              description: 'If the technologies being used can achieve the visual presentation, text is used to convey information rather than images of text except for the following:',
              url_spec: 'https://www.w3.org/TR/WCAG21/#images-of-text',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/images-of-text.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#images-of-text',
              references: {
              }
            },
            '1.4.6': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_4_6,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 1.4.6 Contrast (Enhanced)',
              description: 'The visual presentation of text and images of text has a contrast ratio of at least 7:1, except for the following:',
              url_spec: 'https://www.w3.org/TR/WCAG21/#contrast-enhanced',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/contrast-enhanced.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#contrast-enhanced',
              references: {
              }
            },
            '1.4.7': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_4_7,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 1.4.7 Low or No Background Audio',
              description: 'For prerecorded audio-only content that (1) contains primarily speech in the foreground, (2) is not an audio CAPTCHA or audio logo, and (3) is not vocalization intended to be primarily musical expression such as singing or rapping, at least one of the following is true:',
              url_spec: 'https://www.w3.org/TR/WCAG21/#low-or-no-background-audio',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/low-or-no-background-audio.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#low-or-no-background-audio',
              references: {
              }
            },
            '1.4.8': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_4_8,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 1.4.8 Visual Presentation',
              description: 'For the visual presentation of blocks of text, a mechanism is available to achieve the following:',
              url_spec: 'https://www.w3.org/TR/WCAG21/#visual-presentation',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/visual-presentation.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#visual-presentation',
              references: {
              }
            },
            '1.4.9': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_4_9,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 1.4.9 Images of Text (No Exception)',
              description: 'Images of text are only used for pure decoration or where a particular presentation of text is essential to the information being conveyed.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#images-of-text-no-exception',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/images-of-text-no-exception.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#images-of-text-no-exception',
              references: {
              }
            },
            '1.4.10': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_4_10,
              level: OpenAjax.a11y.WCAG20_LEVEL.AA,
              title: 'Success Criterion 1.4.10 Reflow',
              description: 'Content can be presented without loss of information or functionality, and without requiring scrolling in two dimensions for:',
              url_spec: 'https://www.w3.org/TR/WCAG21/#reflow',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/reflow.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#reflow',
              references: {
              }
            },
            '1.4.11': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_4_11,
              level: OpenAjax.a11y.WCAG20_LEVEL.AA,
              title: 'Success Criterion 1.4.11 Non-text Contrast',
              description: 'The visual presentation of the following have a contrast ratio of at least 3:1 against adjacent color(s):',
              url_spec: 'https://www.w3.org/TR/WCAG21/#non-text-contrast',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-contrast.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#non-text-contrast',
              references: {
              }
            },
            '1.4.12': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_4_12,
              level: OpenAjax.a11y.WCAG20_LEVEL.AA,
              title: 'Success Criterion 1.4.12 Text Spacing',
              description: 'In content implemented using markup languages that support the following text style properties, no loss of content or functionality occurs by setting all of the following and by changing no other style property:',
              url_spec: 'https://www.w3.org/TR/WCAG21/#text-spacing',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/text-spacing.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#text-spacing',
              references: {
              }
            },
            '1.4.13': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_1_4_13,
              level: OpenAjax.a11y.WCAG20_LEVEL.AA,
              title: 'Success Criterion 1.4.13 Content on Hover or Focus',
              description: 'Where receiving and then removing pointer hover or keyboard focus triggers additional content to become visible and then hidden, the following are true:',
              url_spec: 'https://www.w3.org/TR/WCAG21/#content-on-hover-or-focus',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#content-on-hover-or-focus',
              references: {
              }
            }
          }
        }
      }
    },
    '2': {
      id: OpenAjax.a11y.WCAG20_PRINCIPLE.P_2,
      title: '2. Operable',
      description: 'User interface components and navigation must be operable.',
      url_spec: 'https://www.w3.org/TR/WCAG21/#operable',
      guidelines: {
        '2.1': {
          id: OpenAjax.a11y.WCAG20_GUIDELINE.G_2_1,
          title: 'Guideline 2.1 Keyboard Accessible',
          description: 'Make all functionality available from a keyboard.',
          url_spec: 'https://www.w3.org/TR/WCAG21/#keyboard-accessible',
          success_criteria: {
            '2.1.1': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_1_1,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 2.1.1 Keyboard',
              description: 'All functionality of the content is operable through a keyboard interface without requiring specific timings for individual keystrokes, except where the underlying function requires input that depends on the path of the user\'s movement and not just the endpoints.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#keyboard',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/keyboard.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#keyboard',
              references: {
              }
            },
            '2.1.2': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_1_2,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 2.1.2 No Keyboard Trap',
              description: 'If keyboard focus can be moved to a component of the page using a keyboard interface, then focus can be moved away from that component using only a keyboard interface, and, if it requires more than unmodified arrow or tab keys or other standard exit methods, the user is advised of the method for moving focus away.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#no-keyboard-trap',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/no-keyboard-trap.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#no-keyboard-trap',
              references: {
              }
            },
            '2.1.3': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_1_3,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 2.1.3 Keyboard (No Exception)',
              description: 'All functionality of the content is operable through a keyboard interface without requiring specific timings for individual keystrokes.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#keyboard-no-exception',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/keyboard-no-exception.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#keyboard-no-exception',
              references: {
              }
            },
            '2.1.4': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_1_4,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 2.1.4 Character Key Shortcuts',
              description: 'If a keyboard shortcut is implemented in content using only letter (including upper- and lower-case letters), punctuation, number, or symbol characters, then at least one of the following is true:',
              url_spec: 'https://www.w3.org/TR/WCAG21/#character-key-shortcuts',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/character-key-shortcuts.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#character-key-shortcuts',
              references: {
              }
            }
          }
        },
        '2.2': {
          id: OpenAjax.a11y.WCAG20_GUIDELINE.G_2_2,
          title: 'Guideline 2.2 Enough Time',
          description: 'Provide users enough time to read and use content.',
          url_spec: 'https://www.w3.org/TR/WCAG21/#enough-time',
          success_criteria: {
            '2.2.1': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_2_1,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 2.2.1 Timing Adjustable',
              description: 'For each time limit that is set by the content, at least one of the following is true:',
              url_spec: 'https://www.w3.org/TR/WCAG21/#timing-adjustable',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/timing-adjustable.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#timing-adjustable',
              references: {
              }
            },
            '2.2.2': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_2_2,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 2.2.2 Pause, Stop, Hide',
              description: 'For moving, blinking, scrolling, or auto-updating information, all of the following are true:',
              url_spec: 'https://www.w3.org/TR/WCAG21/#pause-stop-hide',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/pause-stop-hide.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#pause-stop-hide',
              references: {
              }
            },
            '2.2.3': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_2_3,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 2.2.3 No Timing',
              description: 'Timing is not an essential part of the event or activity presented by the content, except for non-interactive synchronized media and real-time events.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#no-timing',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/no-timing.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#no-timing',
              references: {
              }
            },
            '2.2.4': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_2_4,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 2.2.4 Interruptions',
              description: 'Interruptions can be postponed or suppressed by the user, except interruptions involving an emergency.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#interruptions',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/interruptions.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#interruptions',
              references: {
              }
            },
            '2.2.5': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_2_5,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 2.2.5 Re-authenticating',
              description: 'When an authenticated session expires, the user can continue the activity without loss of data after re-authenticating.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#re-authenticating',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/re-authenticating.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#re-authenticating',
              references: {
              }
            },
            '2.2.6': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_2_6,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 2.2.6 Timeouts',
              description: 'Users are warned of the duration of any user inactivity that could cause data loss, unless the data is preserved for more than 20 hours when the user does not take any actions.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#timeouts',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/timeouts.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#timeouts',
              references: {
              }
            }
          }
        },
        '2.3': {
          id: OpenAjax.a11y.WCAG20_GUIDELINE.G_2_3,
          title: 'Guideline 2.3 Seizures and Physical Reactions',
          description: 'Do not design content in a way that is known to cause seizures or physical reactions.',
          url_spec: 'https://www.w3.org/TR/WCAG21/#seizures-and-physical-reactions',
          success_criteria: {
            '2.3.1': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_3_1,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 2.3.1 Three Flashes or Below Threshold',
              description: 'Web pages do not contain anything that flashes more than three times in any one second period, or the flash is below the general flash and red flash thresholds.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#three-flashes-or-below-threshold',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/three-flashes-or-below-threshold.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#three-flashes-or-below-threshold',
              references: {
              }
            },
            '2.3.2': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_3_2,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 2.3.2 Three Flashes',
              description: 'Web pages do not contain anything that flashes more than three times in any one second period.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#three-flashes',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/three-flashes.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#three-flashes',
              references: {
              }
            },
            '2.3.3': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_3_3,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 2.3.3 Animation from Interactions',
              description: 'Motion animation triggered by interaction can be disabled, unless the animation is essential to the functionality or the information being conveyed.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#animation-from-interactions',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/animation-from-interactions.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#animation-from-interactions',
              references: {
              }
            }
          }
        },
        '2.4': {
          id: OpenAjax.a11y.WCAG20_GUIDELINE.G_2_4,
          title: 'Guideline 2.4 Navigable',
          description: 'Provide ways to help users navigate, find content, and determine where they are.',
          url_spec: 'https://www.w3.org/TR/WCAG21/#navigable',
          success_criteria: {
            '2.4.1': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_4_1,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 2.4.1 Bypass Blocks',
              description: 'A mechanism is available to bypass blocks of content that are repeated on multiple Web pages.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#bypass-blocks',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/bypass-blocks.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#bypass-blocks',
              references: {
              }
            },
            '2.4.2': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_4_2,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 2.4.2 Page Titled',
              description: 'Web pages have titles that describe topic or purpose.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#page-titled',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/page-titled.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#page-titled',
              references: {
              }
            },
            '2.4.3': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_4_3,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 2.4.3 Focus Order',
              description: 'If a Web page can be navigated sequentially and the navigation sequences affect meaning or operation, focusable components receive focus in an order that preserves meaning and operability.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#focus-order',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/focus-order.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#focus-order',
              references: {
              }
            },
            '2.4.4': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_4_4,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 2.4.4 Link Purpose (In Context)',
              description: 'The purpose of each link can be determined from the link text alone or from the link text together with its programmatically determined link context, except where the purpose of the link would be ambiguous to users in general.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#link-purpose-in-context',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/link-purpose-in-context.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#link-purpose-in-context',
              references: {
              }
            },
            '2.4.5': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_4_5,
              level: OpenAjax.a11y.WCAG20_LEVEL.AA,
              title: 'Success Criterion 2.4.5 Multiple Ways',
              description: 'More than one way is available to locate a Web page within a set of Web pages except where the Web Page is the result of, or a step in, a process.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#multiple-ways',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/multiple-ways.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#multiple-ways',
              references: {
              }
            },
            '2.4.6': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_4_6,
              level: OpenAjax.a11y.WCAG20_LEVEL.AA,
              title: 'Success Criterion 2.4.6 Headings and Labels',
              description: 'Headings and labels describe topic or purpose.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#headings-and-labels',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/headings-and-labels.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#headings-and-labels',
              references: {
              }
            },
            '2.4.7': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_4_7,
              level: OpenAjax.a11y.WCAG20_LEVEL.AA,
              title: 'Success Criterion 2.4.7 Focus Visible',
              description: 'Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#focus-visible',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/focus-visible.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#focus-visible',
              references: {
              }
            },
            '2.4.8': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_4_8,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 2.4.8 Location',
              description: 'Information about the user\'s location within a set of Web pages is available.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#location',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/location.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#location',
              references: {
              }
            },
            '2.4.9': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_4_9,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 2.4.9 Link Purpose (Link Only)',
              description: 'A mechanism is available to allow the purpose of each link to be identified from link text alone, except where the purpose of the link would be ambiguous to users in general.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#link-purpose-link-only',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/link-purpose-link-only.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#link-purpose-link-only',
              references: {
              }
            },
            '2.4.10': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_4_10,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 2.4.10 Section Headings',
              description: 'Section headings are used to organize the content.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#section-headings',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/section-headings.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#section-headings',
              references: {
              }
            }
          }
        },
        '2.5': {
          id: OpenAjax.a11y.WCAG20_GUIDELINE.G_2_5,
          title: 'Guideline 2.5 Input Modalities',
          description: 'Make it easier for users to operate functionality through various inputs beyond keyboard.',
          url_spec: 'https://www.w3.org/TR/WCAG21/#input-modalities',
          success_criteria: {
            '2.5.1': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_5_1,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 2.5.1 Pointer Gestures',
              description: 'All functionality that uses multipoint or path-based gestures for operation can be operated with a single pointer without a path-based gesture, unless a multipoint or path-based gesture is essential.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#pointer-gestures',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/pointer-gestures.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#pointer-gestures',
              references: {
              }
            },
            '2.5.2': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_5_2,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 2.5.2 Pointer Cancellation',
              description: 'For functionality that can be operated using a single pointer, at least one of the following is true:',
              url_spec: 'https://www.w3.org/TR/WCAG21/#pointer-cancellation',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/pointer-cancellation.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#pointer-cancellation',
              references: {
              }
            },
            '2.5.3': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_5_3,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 2.5.3 Label in Name',
              description: 'For user interface components with labels that include text or images of text, the name contains the text that is presented visually.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#label-in-name',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/label-in-name.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#label-in-name',
              references: {
              }
            },
            '2.5.4': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_5_4,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 2.5.4 Motion Actuation',
              description: 'Functionality that can be operated by device motion or user motion can also be operated by user interface components and responding to the motion can be disabled to prevent accidental actuation, except when:',
              url_spec: 'https://www.w3.org/TR/WCAG21/#motion-actuation',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/motion-actuation.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#motion-actuation',
              references: {
              }
            },
            '2.5.5': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_5_5,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 2.5.5 Target Size',
              description: 'The size of the target for pointer inputs is at least 44 by 44 CSS pixels except when:',
              url_spec: 'https://www.w3.org/TR/WCAG21/#target-size',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/target-size.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#target-size',
              references: {
              }
            },
            '2.5.6': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_2_5_6,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 2.5.6 Concurrent Input Mechanisms',
              description: 'Web content does not restrict use of input modalities available on a platform except where the restriction is essential, required to ensure the security of the content, or required to respect user settings.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#concurrent-input-mechanisms',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/concurrent-input-mechanisms.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#concurrent-input-mechanisms',
              references: {
              }
            }
          }
        }
      }
    },
    '3': {
      id: OpenAjax.a11y.WCAG20_PRINCIPLE.P_3,
      title: '3. Understandable',
      description: 'Information and the operation of user interface must be understandable.',
      url_spec: 'https://www.w3.org/TR/WCAG21/#understandable',
      guidelines: {
        '3.1': {
          id: OpenAjax.a11y.WCAG20_GUIDELINE.G_3_1,
          title: 'Guideline 3.1 Readable',
          description: 'Make text content readable and understandable.',
          url_spec: 'https://www.w3.org/TR/WCAG21/#readable',
          success_criteria: {
            '3.1.1': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_3_1_1,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 3.1.1 Language of Page',
              description: 'The default human language of each Web page can be programmatically determined.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#language-of-page',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/language-of-page.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#language-of-page',
              references: {
              }
            },
            '3.1.2': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_3_1_2,
              level: OpenAjax.a11y.WCAG20_LEVEL.AA,
              title: 'Success Criterion 3.1.2 Language of Parts',
              description: 'The human language of each passage or phrase in the content can be programmatically determined except for proper names, technical terms, words of indeterminate language, and words or phrases that have become part of the vernacular of the immediately surrounding text.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#language-of-parts',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/language-of-parts.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#language-of-parts',
              references: {
              }
            },
            '3.1.3': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_3_1_3,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 3.1.3 Unusual Words',
              description: 'A mechanism is available for identifying specific definitions of words or phrases used in an unusual or restricted way, including idioms and jargon.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#unusual-words',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/unusual-words.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#unusual-words',
              references: {
              }
            },
            '3.1.4': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_3_1_4,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 3.1.4 Abbreviations',
              description: 'A mechanism for identifying the expanded form or meaning of abbreviations is available.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#abbreviations',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/abbreviations.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#abbreviations',
              references: {
              }
            },
            '3.1.5': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_3_1_5,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 3.1.5 Reading Level',
              description: 'When text requires reading ability more advanced than the lower secondary education level after removal of proper names and titles, supplemental content, or a version that does not require reading ability more advanced than the lower secondary education level, is available.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#reading-level',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/reading-level.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#reading-level',
              references: {
              }
            },
            '3.1.6': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_3_1_6,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 3.1.6 Pronunciation',
              description: 'A mechanism is available for identifying specific pronunciation of words where meaning of the words, in context, is ambiguous without knowing the pronunciation.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#pronunciation',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/pronunciation.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#pronunciation',
              references: {
              }
            }
          }
        },
        '3.2': {
          id: OpenAjax.a11y.WCAG20_GUIDELINE.G_3_2,
          title: 'Guideline 3.2 Predictable',
          description: 'Make Web pages appear and operate in predictable ways.',
          url_spec: 'https://www.w3.org/TR/WCAG21/#predictable',
          success_criteria: {
            '3.2.1': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_3_2_1,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 3.2.1 On Focus',
              description: 'When any user interface component receives focus, it does not initiate a change of context.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#on-focus',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/on-focus.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#on-focus',
              references: {
              }
            },
            '3.2.2': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_3_2_2,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 3.2.2 On Input',
              description: 'Changing the setting of any user interface component does not automatically cause a change of context unless the user has been advised of the behavior before using the component.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#on-input',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/on-input.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#on-input',
              references: {
              }
            },
            '3.2.3': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_3_2_3,
              level: OpenAjax.a11y.WCAG20_LEVEL.AA,
              title: 'Success Criterion 3.2.3 Consistent Navigation',
              description: 'Navigational mechanisms that are repeated on multiple Web pages within a set of Web pages occur in the same relative order each time they are repeated, unless a change is initiated by the user.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#consistent-navigation',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/consistent-navigation.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#consistent-navigation',
              references: {
              }
            },
            '3.2.4': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_3_2_4,
              level: OpenAjax.a11y.WCAG20_LEVEL.AA,
              title: 'Success Criterion 3.2.4 Consistent Identification',
              description: 'Components that have the same functionality within a set of Web pages are identified consistently.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#consistent-identification',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/consistent-identification.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#consistent-identification',
              references: {
              }
            },
            '3.2.5': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_3_2_5,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 3.2.5 Change on Request',
              description: 'Changes of context are initiated only by user request or a mechanism is available to turn off such changes.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#change-on-request',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/change-on-request.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#change-on-request',
              references: {
              }
            }
          }
        },
        '3.3': {
          id: OpenAjax.a11y.WCAG20_GUIDELINE.G_3_3,
          title: 'Guideline 3.3 Input Assistance',
          description: 'Help users avoid and correct mistakes.',
          url_spec: 'https://www.w3.org/TR/WCAG21/#input-assistance',
          success_criteria: {
            '3.3.1': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_3_3_1,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 3.3.1 Error Identification',
              description: 'If an input error is automatically detected, the item that is in error is identified and the error is described to the user in text.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#error-identification',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/error-identification.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#error-identification',
              references: {
              }
            },
            '3.3.2': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_3_3_2,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 3.3.2 Labels or Instructions',
              description: 'Labels or instructions are provided when content requires user input.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#labels-or-instructions',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/labels-or-instructions.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#labels-or-instructions',
              references: {
              }
            },
            '3.3.3': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_3_3_3,
              level: OpenAjax.a11y.WCAG20_LEVEL.AA,
              title: 'Success Criterion 3.3.3 Error Suggestion',
              description: 'If an input error is automatically detected and suggestions for correction are known, then the suggestions are provided to the user, unless it would jeopardize the security or purpose of the content.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#error-suggestion',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/error-suggestion.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#error-suggestion',
              references: {
              }
            },
            '3.3.4': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_3_3_4,
              level: OpenAjax.a11y.WCAG20_LEVEL.AA,
              title: 'Success Criterion 3.3.4 Error Prevention (Legal, Financial, Data)',
              description: 'For Web pages that cause legal commitments or financial transactions for the user to occur, that modify or delete user-controllable data in data storage systems, or that submit user test responses, at least one of the following is true:',
              url_spec: 'https://www.w3.org/TR/WCAG21/#error-prevention-legal-financial-data',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/error-prevention-legal-financial-data.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#error-prevention-legal-financial-data',
              references: {
              }
            },
            '3.3.5': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_3_3_5,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 3.3.5 Help',
              description: 'Context-sensitive help is available.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#help',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/help.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#help',
              references: {
              }
            },
            '3.3.6': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_3_3_6,
              level: OpenAjax.a11y.WCAG20_LEVEL.AAA,
              title: 'Success Criterion 3.3.6 Error Prevention (All)',
              description: 'For Web pages that require the user to submit information, at least one of the following is true:',
              url_spec: 'https://www.w3.org/TR/WCAG21/#error-prevention-all',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/error-prevention-all.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#error-prevention-all',
              references: {
              }
            }
          }
        }
      }
    },
    '4': {
      id: OpenAjax.a11y.WCAG20_PRINCIPLE.P_4,
      title: '4. Robust',
      description: 'Content must be robust enough that it can be interpreted by by a wide variety of user agents, including assistive technologies.',
      url_spec: 'https://www.w3.org/TR/WCAG21/#robust',
      guidelines: {
        '4.1': {
          id: OpenAjax.a11y.WCAG20_GUIDELINE.G_4_1,
          title: 'Guideline 4.1 Compatible',
          description: 'Maximize compatibility with current and future user agents, including assistive technologies.',
          url_spec: 'https://www.w3.org/TR/WCAG21/#compatible',
          success_criteria: {
            '4.1.1': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_4_1_1,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 4.1.1 Parsing',
              description: 'In content implemented using markup languages, elements have complete start and end tags, elements are nested according to their specifications, elements do not contain duplicate attributes, and any IDs are unique, except where the specifications allow these features.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#parsing',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/parsing.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#parsing',
              references: {
              }
            },
            '4.1.2': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_4_1_2,
              level: OpenAjax.a11y.WCAG20_LEVEL.A,
              title: 'Success Criterion 4.1.2 Name, Role, Value',
              description: 'For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#name-role-value',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/name-role-value.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#name-role-value',
              references: {
              }
            },
            '4.1.3': {
              id: OpenAjax.a11y.WCAG20_SUCCESS_CRITERION.SC_4_1_3,
              level: OpenAjax.a11y.WCAG20_LEVEL.AA,
              title: 'Success Criterion 4.1.3 Status Messages',
              description: 'In content implemented using markup languages, status messages can be programmatically determined through role or properties such that they can be presented to the user by assistive technologies without receiving focus.',
              url_spec: 'https://www.w3.org/TR/WCAG21/#status-messages',
              url_understand: 'https://www.w3.org/WAI/WCAG21/Understanding/status-messages.html',
              url_meet: 'https://www.w3.org/WAI/WCAG21/quickref/#status-messages',
              references: {
              }
            }
          }
        }
      }
    }
  }});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */


OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

    rule_scope: ['unknown', 'Element', 'Page', 'Website'],

    message_severities: {
      MUST  : 'must',
      SHOULD: 'should'
    },

    rule_categories: {
           '1': 'Audio and Video',
           '2': 'Tables',
           '4': 'Forms',
           '8': 'Images',
          '16': 'Keyboard Support',
          '32': 'Links',
          '64': 'Navigation',
         '128': 'Structure/Content',
         '256': 'Styles/Readability',
         '512': 'Widgets'
    },

    ACTION_NONE: 'None',

    NOT_APPLICABLE: 'N/A'

});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */


OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

    //
    //  OAA Rules National Language Support (NLS) for Audios
    //
    rules: {
        AUDIO_1: {
            ID:                    'Audio 1',
            DEFINITION:            '@audio@ elements %s have caption or text transcription of the audio content.',
            SUMMARY:               '@audio@ %s have alternative',
            TARGET_RESOURCES_DESC: '@audio@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:         'Add caption or text transcript to @audio@ element',
              FAIL_P:         'Add a caption or text transcript to each of the %N_F the @audio@ elements with out captions or transcripts.',
              MANUAL_CHECK_S: 'Verify the @audio@ element has either a caption or text transcript of the audio content.',
              MANUAL_CHECK_P: 'Verify the %N_MC @audio@ elements are audio only have either a caption or text transcript of the audio.',
              HIDDEN_S:       'The @audio@ element that is hidden was not analyzed for accessible audio.',
              HIDDEN_P:       'The %N_H @audio@ elements that are hidden were not analyzed for accessible audio.',
              NOT_APPLICABLE: 'No @audio@ elements found on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:    '@audio@ element has caption.',
              ELEMENT_PASS_2:    '@audio@ element has a text transcript.',
              ELEMENT_FAIL_1:    'Add caption or text transcript to @audio@ element.',
              ELEMENT_MC_1:      'Verify the @audio@ element has captions or text transcript.',
              ELEMENT_HIDDEN_1:  'The @audio@ element is hidden and was not evaluated.'
            },
            PURPOSE: [
              'Captions and text transcripts provide a means for people cannot hear the audio to understand the audio content.',
              'Some types of learning disabilities affect speech perception, captions and text transcripts provide an alternative way to understand the audio content.',
              'When the language of the audio is different than the native language of the listener, captions and text transcripts support the listner in understanding the audio content.'
            ],
            TECHNIQUES: [
              'Use the @track@ element to add captioning to the audio content.',
              'Use WebVTT to encode the timed stamped captioning information for the audio content.',
              'Use @aria-describedby@ to reference a text transcript of the audio content.'
            ],
            MANUAL_CHECKS: [
              'When captions are enabled on the media player, check to make sure the captions visible.',
              'If there is a caption make sure the captions accurately represents the audio content.',
              'If there is a text transcript make sure the transcript accurately represents the audio content.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HMTL 5: The audio element',
                url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-audio-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HMTL 5: The track element',
                url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-track-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'WebVTT: The Web Video Text Tracks Format',
                url:   'https://dev.w3.org/html5/webvtt/'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (ARIA) 1.0: aria-describedby',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-describedby'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'University of Washington: Creating Accessible Videos',
                url:   'https://www.washington.edu/accessibility/videos/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
                url:   'https://webaim.org/techniques/captions/'
              }
            ]
        },
        AUDIO_2: {
            ID:                    'Audio 2',
            DEFINITION:            '@object@ elements used for audio only %s have caption or text transcription of the audio content.',
            SUMMARY:               '@object@ for audio %s have alternative',
            TARGET_RESOURCES_DESC: '@object@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Add caption or text transcript to @object@ element.',
              FAIL_P:   'Add a caption or text transcript to each of the %N_F the @object@ elements with out captions or transcripts.',
              MANUAL_CHECK_S:     'Check if the @object@ element is audio only content.  If it is audio only make sure it has either a caption or text transcript of the audio content.',
              MANUAL_CHECK_P:     'Check if any of the %N_MC @object@ elements are audio only. If any are audio only make sure they have either a caption or text transcript of the audio.',
              HIDDEN_S: 'The @object@ element that is hidden was not analyzed for accessible audio.',
              HIDDEN_P: 'The %N_H @object@ elements that are hidden were not analyzed for accessible audio.',
              NOT_APPLICABLE:  'No @embed@ elements found on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   '@object@ element references text transcript.',
              ELEMENT_FAIL_1:   'Add captions or text transcript to @object@ element.',
              ELEMENT_MC_1:     'Verify the @object@ element has synchronous captions.',
              ELEMENT_MC_2:     'Verify the @object@ element only renders audio only, if it is audio only verify that it has captions or text transcript.',
              ELEMENT_HIDDEN_1: 'The @object@ element is hidden and was not evaluated.'
            },
            PURPOSE: [
              'Captions and text transcripts provide a means for people cannot hear the audio to understand the audio content.',
              'Some types of learning disabilities affect speech perception, captions and text transcripts provide an alternative way to understand the audio content.',
              'When the language of the audio is different than the native language of the listener, captions and text transcripts support the listner in understanding the audio content.'
            ],
            TECHNIQUES: [
              'Use the @audio@ element instead of the @object@ element for audio only content, since the @audio@ element provides better support for captions and text transcripts.',
              'Use @aria-describedby@ attribute to point to a text description of the audio only content.'
            ],
            MANUAL_CHECKS: [
              'Check the web page for a link to a text transcript of the audio, or if the transcript is part of the page rendering the audio.',
              'Check the media player for a button to turn on and off captions.',
              'When captions are enabled on the media player, check to make sure the captions visible and represent the speech and sounds heard on the audio.',
              'In some cases "open" captions might be used, this means the captions are alway "on" as part of the video.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HMTL 5: The object element',
                url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-object-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (ARIA) 1.0: aria-describedby',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-describedby'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'University of Washington: Creating Accessible Videos',
                url:   'https://www.washington.edu/accessibility/videos/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
                url:   'https://webaim.org/techniques/captions/'
              }
            ]
        },
        AUDIO_3: {
            ID:                    'Audio 3',
            DEFINITION:            '@embed@ elements used for audio only %s have caption or text transcription of the audio content.',
            SUMMARY:               '@embed@ for audio %s have alternative',
            TARGET_RESOURCES_DESC: '@embed@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:          'Add caption or text transcript to @embed@ element.',
              FAIL_P:          'Add a caption or text transcript to each of the %N_F @embed@ elements without captions or transcripts.',
              MANUAL_CHECK_S:  'Check if the @embed@ element is audio only content.  If it is audio only make sure it has either a caption or text transcript of the audio content.',
              MANUAL_CHECK_P:  'Check if any of the %N_MC @embed@ elements are audio only. If any are audio only make sure they have either a caption or text transcript of the audio.',
              HIDDEN_S:        'The @embed@ element that is hidden was not analyzed for accessible audio.',
              HIDDEN_P:        'The %N_H @embed@ elements that are hidden were not analyzed for accessibile audio.',
              NOT_APPLICABLE:  'No @embed@ elements found on this page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   '@embed@ element references text transcript.',
              ELEMENT_FAIL_1:   'Add captions or text transcript to @embed@ element.',
              ELEMENT_MC_1:     'Verify the @embed@ element has synchronous captions.',
              ELEMENT_MC_2:     'Verify the @embed@ element only renders audio only, if it is audio only verify that it has captions or text transcript.',
              ELEMENT_HIDDEN_1: 'The @object@ element is hidden and was not evaluated.'
            },
            PURPOSE: [
              'Captions and text transcripts provide a means for people cannot hear the audio to understand the audio content.',
              'Some types of learning disabilities affect speech perception, captions and text transcripts provide an alternative way to understand the audio content.',
              'When the language of the audio is different than the native language of the listener, captions and text transcripts support the listner in understanding the audio content.'
            ],
            TECHNIQUES: [
              'Use the @audio@ element instead of the @embed@ element for audio only content, since the @audio@ element provides better support for captions and text transcripts.',
              'Use @aria-describedby@ attribute to point to a text description of the audio only content.'
            ],
            MANUAL_CHECKS: [
              'Check the web page for a link to a text transcript of the audio, or if the transcript is part of the page rendering the audio.',
              'Check the media player for a button to turn on and off captions',
              'When captions are enabled on the media player, check to make sure the captions visible and represent the speech and sounds heard on the audio.',
              'In some cases "open" captions might be used, this means the captions are alway "on" as part of the video.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HMTL 5: The embed element',
                url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-embed-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (ARIA) 1.0: aria-describedby',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-describedby'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'University of Washington: Creating Accessible Videos',
                url:   'https://www.washington.edu/accessibility/videos/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
                url:   'https://webaim.org/techniques/captions/'
              }
            ]
        },
        AUDIO_4: {
            ID:                    'Audio 4',
            DEFINITION:            'Media content with audio that automatically starts playing when the page loads and lasts longer than 3 seconds %s provide a means for the user able to stop, pause or mute the audio content.',
            SUMMARY:               'Pause, stop or mute audio',
            TARGET_RESOURCES_DESC: 'Content that is used to auto play media that includes audio content',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:     'Verify that there is no media content that plays automatically and includes audio content that lasts longer than 3 seconds.  If the audio content lasts longer than 3 seconds, verify the user can pause, stop or mute the audio.',
              MANUAL_CHECK_P:     'Verify that there is no media content that plays automatically and includes audio content that lasts longer than 3 seconds.  If the audio content lasts longer than 3 seconds, verify the user can pause, stop or mute the audio.'
            },
            NODE_RESULT_MESSAGES: {
              PAGE_MC_1:   'Verify that there is no media content that plays automatically and includes audio content that lasts longer than 3 seconds.  If the audio content lasts longer than 3 seconds, verify the user can pause, stop or mute the audio.'
            },
            PURPOSE:        [ 'Audio content interferes with people using speech based assistive technologies like screen readers.'
                            ],
            TECHNIQUES:     [ 'Remove or disable the auto playing of media that includes audio content.',
                              'Provide a means to pause, stop or mute the audio content.',
                              'Use cookies to perserve the user peference of pausing, stopping or muting the audio content.'
                            ],
            MANUAL_CHECKS:  [ 'Verify that there is no media content that plays automatically and includes audio content that lasts longer than 3 seconds.  If the audio content lasts longer than 3 seconds, verify the user can pause, stop or mute the audio.'
                            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'WCAG 2.0 Success Criterion 1.4.2 Audio Control',
                url:   'https://www.w3.org/TR/WCAG20/#visual-audio-contrast-dis-audio'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'How to meet Success Criterion 1.4.2 Audio Control',
                url:   'https://www.w3.org/WAI/WCAG20/quickref/#qr-visual-audio-contrast-dis-audio'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'University of Washington: Creating Accessible Videos',
                url:   'https://www.washington.edu/accessibility/videos/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
                url:   'https://webaim.org/techniques/captions/'
              }
                            ]
        }
    }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */


OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

    //
    //  OAA Rules title and message string National Language Support (NLS)
    //
    rules: {
      BYPASS_1: {
            ID:                    'Bypass 1',
            DEFINITION:            'Provide a keyboard-supported means of bypassing blocks of content, such as navigation menus and page headers, to get to the main content of the page.',
            SUMMARY:               'Skip to main content link',
            TARGET_RESOURCES_DESC: '@a@ and @a[button]@',
            RULE_RESULT_MESSAGES: {
              FAIL_S :         'Provide a valid target for the "skip to main content" link.',
              FAIL_P :         'Provide a valid target for the "skip to main content" link.',
              MANUAL_CHECK_S:  'Verify that the first link on the page is a "skip to main content" link and that the target of the skip link is a focusable element.',
              MANUAL_CHECK_P:  'Verify that the first link on the page is a "skip to main content" link and that the target of the skip link is a focusable element.',
              HIDDEN_S:        'One link that is hidden was not evaluated.',
              HIDDEN_P:        '%N_H links that are hidden were not evaluated.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   '"SkipTo" menu button provides navigation to main and navigation landmarks and headings on the page.',
              ELEMENT_PASS_2:   'Link references a target on the page; verify that the target is focusable and at the start of the main content of the page.',
              ELEMENT_PASS_3:   'Target of link; verify that it is at the start of the main content of the page.',
              ELEMENT_FAIL_1:   'Link does not reference a valid target on the page.',
              ELEMENT_MC_1:     'Verify the target of "skip to main content" link is a focusable element.',
              ELEMENT_HIDDEN_1: 'Link is hidden from assistive technologies and was not evaluated.',
              PAGE_PASS_1:      'Page includes a link or "SkipTo" script that provides a means of skipping to the main content of the page.',
              PAGE_FAIL_1:      'Link does not reference a valid target on the page.',
              PAGE_MC_1:        'Verify that that the target of the "skip to main content" link is focusable.',
              PAGE_MC_2:        'Verify that the page provides a link or other means of skipping to the main content of the page.'
            },
            PURPOSE: [
              'Most pages of websites typically have navigation menus, page headers and other repeated content before the main content of the page.',
              'For keyboard-only and screen reader users, a link or other means of skipping these types of content blocks makes it easy to go directly to the main content of the page, without first having to tab through the repeated content.'
            ],
            TECHNIQUES: [
              'Make the first link on the page an internal link that references a valid target element at the beginning of the main content of the page.',
              'The @id@ attribute is preferred method to identify the target element for the "Skip to main content" link.',
              'To make any target element focusable, add @tabindex="-1"@ to the element. If the target is an @a@ element, adding @tabindex="-1"@ will remove it from the tab order.',
              'If you use an @h1[id="main"]@ element as the target of the "Skip to main content" link, most screen readers will read the heading level and content when the user activates the skip to link.',
              'Use the "SkipTo" script, main and navigation landmarks and headings (H1-H2) to enable keyboard navigation from the "SkipTo" menu to all major sections of a page, including main content.',
              'The @name@ attribute can be used if the target is an @a@ element and is focusable (e.g. tabindex or non-empty @href@ value), but this technique is discouraged, since the @name@ attribute is being deprecated in HTML5.'
            ],
            MANUAL_CHECKS: [
              'Using only the keyboard, use the link or "SkipTo" menu to move focus to the main content of the page.',
              'After moving focus to the main content, the next tab should move you to the first link, form control or other interactive element after the main content.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: 12.2 The A element',
                url:   'https://www.w3.org/TR/html4/struct/links.html#edef-A'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'WAI-ARIA 1.0 Authoring Practices: Using Tabindex to Manage Focus among Widgets',
                url:   'https://www.w3.org/TR/2013/WD-wai-aria-practices-20130307/#focus_tabindex'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'SkipTo plugin by PayPal Accessibility Team',
                url:   'https://paypal.github.io/skipto/'
              }
            ]
      }
    }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */


OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

    //
    //  OAA Rules title and message string National Language Support (NLS) for color rules
    //
    rules: {
        COLOR_1: {
            ID:                    'Color 1',
            DEFINITION:            'Text content %s exceed Color Contrast Ratio (CCR) of 3.1 for large and/or bolded text and 4.5 for any other size or style of text.',
            SUMMARY:               'Text %s exceed CCR threshold',
            TARGET_RESOURCES_DESC: 'All elements with text content',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Change the foreground and background colors of the text element to meet the CCR threshold.',
              FAIL_P:   'Change the foreground and background colors of the %N_F text elements to meet the CCR threshold.',
              MANUAL_CHECK_S:     'One element requires manual checking for CCR threshold to the use of a background image.',
              MANUAL_CHECK_P:     '%N_MC elements require manual checking for CCR thrshold to the use of background images.',
              HIDDEN_S: 'The element with text content that is hidden was not analyzed for color contrast accessibility.',
              HIDDEN_P: 'The %N_H elements with text content that are hidden were not analyzed for color contrast accessibility.',
              NOT_APPLICABLE:  'No visible text content on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   'CCR of %1 exceeds 4.5.',
              ELEMENT_PASS_2:   'CCR of %1 exceeds 3.1 for large or bolded text.',
              ELEMENT_FAIL_1:   'CCR of %1, adjust foreground and background colors to exceed 4.5.',
              ELEMENT_FAIL_2:   'CCR of %1 for large or bolded text, adjust foreground and background colors to exceed 3.1.',
              ELEMENT_MC_1:     'CCR of %1 is greater than 4.5, but background image may reduce color contrast.',
              ELEMENT_MC_2:     'CCR of %1 is less than or equal to 4.5, but background image may improve color contrast.',
              ELEMENT_MC_3:     'CCR of %1 is greater than 3.1 for large or bolded text, but background image may reduce color contrast.',
              ELEMENT_MC_4:     'CCR of %1 is less than or equal to 3.1 for large and bolded text, but background image may improve color contrast.',
              ELEMENT_HIDDEN_1: 'CCR was not tested since the text is hidden from assistive technologies.'
            },
            PURPOSE:        [ 'The higher the color contrast of text the more easy it is to read, especially for people with visual impairments.'
                            ],
            TECHNIQUES:     [ 'Change the foreground color to a more complementary color to the background color.',
                              'Change the background color to a more complementary color to the foreground color.',
                              'Remove background images or verify they do not compromise color contrast requirements.'
                            ],
            MANUAL_CHECKS:  [ 'Use graphic editing tools to analyze the color(s) of the background image and then recacluate the CCR with the range of colors in the background image.',
                              'Verify the range of colors that could be part of the background of text is have a CCR > 4.5.'
            ],
            INFORMATIONAL_LINKS: [{ type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                               title: 'WCAG 2.0 Success Criterion 1.4.3 Contrast (Minimum): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1',
                               url:   'https://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast'
                             },
                             { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                               title: 'How to meet Success Criterion 1.4.3 Contrast (Minimum): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1',
                               url:   'https://www.w3.org/WAI/WCAG20/quickref/#qr-visual-audio-contrast'
                             },
                            { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                              title: 'G17: Ensuring that a contrast ratio of at least 7:1 exists between text (and images of text) and background behind the text',
                              url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G17'
                            },
                            { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                              title: 'G18: Ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text',
                              url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G18'
                            },
                            { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                              title: 'G148: Not specifying background color, not specifying text color, and not using technology features that change those default',
                              url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G148'
                            },
                            { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                              title: 'G174: Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast',
                              url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G174'
                            }
                            ]
        },
        COLOR_2: {
            ID:                    'Color 2',
            DEFINITION:            'Color %s not be the only way to convey information on the page.',
            SUMMARY:               'Use of color',
            TARGET_RESOURCES_DESC: 'Any content on the page that refers to or is a specific color',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:     'Verify color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element on the page.'
            },
            NODE_RESULT_MESSAGES: {
              PAGE_MC_1: 'Verify color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element on the page.'
            },
            PURPOSE:        [ 'For people with color blindness and other forms of visual impairments will not be able to see colors or color differences.',
                              'This requirement also includes references to color of content on page to identify some type of information, there should be redundant labeling of the content, for example using text labels to also identify and refer to the information.'
                            ],
            TECHNIQUES:     [ 'Provide redundant text labels for content presented in color, it the color is presenting meaningful information.',
                              'Use background patterns to also identify information.'
                            ],
            MANUAL_CHECKS:  [ 'Verify the page does not use color alone to identify or refer to information on the page.'
                            ],
            INFORMATIONAL_LINKS: [{ type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                               title: 'WCAG 2.0 Success Criterion 1.4.1 Use of Color',
                               url:   'https://www.w3.org/TR/WCAG20/#visual-audio-contrast-without-color'
                             },
                             { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                               title: 'How to meet Success Criterion 1.4.1 Use of Color',
                               url:   'https://www.w3.org/WAI/WCAG20/quickref/#qr-visual-audio-contrast-without-color'
                             },
                            { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                              title: 'G14: Ensuring that information conveyed by color differences is also available in text',
                              url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G14'
                            }
                            ]
        }
   }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */


OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

    //
    //  OAA Rules title and message string National Language Support (NLS)
    //
    rules: {
        ERROR_1: {
            ID:                    'Error 1',
            DEFINITION:            'Form controls with invalid values %s provide information to assitive technologies that the values are invalid.',
            SUMMARY:               'Information on invalid values',
            TARGET_RESOURCES_DESC: '@textarea@, @select@ and @input@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Change the value of @aria-invalid@ property to @true@, on form control that is invalid and @aria-invalid="false"@.',
              FAIL_P:   'Change the value of @aria-invalid@ property to @true@, on %N_F form controls that are invalid and @aria-invalid="false"@.',
              MANUAL_CHECK_S:     'If the form control can be validated make sure it indicates invalid values when invalid.',
              MANUAL_CHECK_P:     'If the %N_MC form controls can be validated make sure they indicates invalid values when invalid.',
              HIDDEN_S: 'The control element that is hidden does not need to be tested for indicating invalid values.',
              HIDDEN_P: 'The %N_H control elements that are hidden do not need to be tested for indicating invalid values.',
              NOT_APPLICABLE:  'No form controls on this page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_FAIL_1:       '@%1@ is invalid (i.e. validity.valid property of the control is "false") change the value of "@aria-invalid@ attribute from @false@ to @true@.',
              ELEMENT_FAIL_2:       '@%1@ is valid (i.e. validity.valid property of the control is "true") change the value of "@aria-invalid@ attribute from @true@ to @false@.',
              ELEMENT_MC_1: '@%1@ is invalid (i.e. validity.valid property of the control is "false"), verify the label contains information on the value being invalid or add the @aria-invalid="true"@ attribute to the control.',
              ELEMENT_MC_2: '@%1@ is being tested for validity (i.e. @pattern@ attribute is present), verify the label contains information on the validity or add the @aria-invalid@ attribute to inidcate the state of validity of the control.',
              ELEMENT_MC_3: 'Verify if the @%1@ is being validated, if it is being validated verify it implements a technique to indicate the state of validity.',
              ELEMENT_PASS_1:         '@%1@ is invalid (i.e. validity.valid property of the control is "false") and the "@aria-invalid=true@" has been set.',
              ELEMENT_PASS_2:         '@%1@ is valid (i.e. validity.valid property of the control is "true") and the "@aria-invalid=false@" has been set.',
              ELEMENT_HIDDEN_1:       '%1 form control was not tested for indicating invalid values because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Users must be able to identify form control values which are invalid in order to successfully correct the values and submit the form.'
            ],
            TECHNIQUES: [
              'Add the text "invalid" to the label of the form control, the text can be placed off screen using CSS.',
              'Add the image to the label.  The image should be visible indicating an invalid value with the alt text \'invalid\'.',
              'Use @aira-invalid@ attribute to indicate the form control is invalid.'
            ],
            MANUAL_CHECKS: [
              'Enter invalid values into form controls that are validated and activate the validation event (i.e. form submission, change of focus...).',
              'For the form controls with invalid values check to make sure the technique for indicating the invalid value is present.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: The @label@ element',
                url:   'https://www.w3.org/TR/html4/interact/forms.html#edef-LABEL'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: aria-invalid',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-invalid'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H44: Using label elements to associate text labels with form controls',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H44'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA21: Using Aria-invalid to Indicate An Error Field',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA21'
              }
            ]
        },
        ERROR_2: {
            ID:                    'Error 2',
            DEFINITION:            'If user input is required for a form control the @required@ or @aria-required@ attribute %s must used.',
            SUMMARY:               'Required form controls',
            TARGET_RESOURCES_DESC: '@textarea@ and @input[type="text"]@ elements, and ARIA textbox, gridcell and combobox widgets',
            RULE_RESULT_MESSAGES: {
              FAIL_S:         'Update the form control with @aria-required="false"@ and the @required@ attributes to indicate the true required state of the control.',
              FAUL_P:         'Update the %N_F form controls with @aria-required="false"@ and the @required@ attributes to indicate the true required state of the control.',
              MANUAL_CHECK_S: 'If the form control is required, add the @required@ attribute or if HTML4 compatibility is required the @aria-required="true"@ attribute.',
              MANUAL_CHECK_P: 'If any of the %N_F form controls are required, add the @required@ attribute or if HTML4 compatibility is required the @aria-required="true"@ attribute.',
              HIDDEN_S:       'The form control element that is hidden does not need to be tested for being required.',
              HIDDEN_P:       'The %N_H form control elements that are hidden do not need to be tested for being required.',
              NOT_APPLICABLE: 'No form controls on this page that need testing for being required.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_FAIL_1:   'If the @input[type="%1"]@ element with the attribute @aria-required="false"@ which conflicts with presence of the @required@ attribute.',
              ELEMENT_PASS_1:   'If the @input[type="%1"]@ element has the @required@ attribute.',
              ELEMENT_PASS_2:   'If the @input[type="%1"]@ element has the @aria-required@ attribute.',
              ELEMENT_PASS_3:   'If the %1 element has the @required@ attribute.',
              ELEMENT_PASS_4:   'If the %1 element has @aria-required@.',
              ELEMENT_MC_1:     'If the @input[type="%1"]@ element is a required, add the @required@ attribute to the control.',
              ELEMENT_MC_2:     'If the %1 element is a required, add the @required@ attribute to the control.',
              ELEMENT_HIDDEN_1: 'The @input[type="%1"]@ element was not tested because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2: 'The @%1@ element was not tested because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Users benefit from information being informed if a input to a control is required for form submission or task completion.'
            ],
            TECHNIQUES: [
              'To identify a required form control, add the HTML5 @required@ attribute to the standard form controls.',
              'If compatibility with HTML4 standards or legacy browsers and assistve technologies, you can also use @aria-required="true"@ to indicate a form control is required.',
              'Use the @required@ attribute (or the @aria-required@ if used) as the CSS selector for visually styling the form control as required.  This ensures that the visual state stays synchronized with the accessibility API state used by assistive technologies.',
              'The only reason to support both @required@ and @aria-required@ on the same form control is to support legacy browsers and assistive technologies.  This required extra care to make sure the two values do not conflict.  If they do conflict the @required@ attribute will override the @aria-required@ property value.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: required attribute',
                url:   'https://www.w3.org/TR/html5/forms.html#attr-input-required'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: aria-required',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-required'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA2: Identifying a required field with the aria-required property',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA2'
              }
            ]
        },
        ERROR_3: {
            ID:                    'Error 3',
            DEFINITION:            'If user input is required for a widget the @aria-required@ attribute %s must used.',
            SUMMARY:               'Required widgets',
            TARGET_RESOURCES_DESC: '@textarea@ and @input[type="text"]@ elements, and ARIA textbox, gridcell and combobox widgets',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S: 'If the widget is required use @aria-required="true"@ attribute.',
              MANUAL_CHECK_P: 'If any of the %N_F widgets are required, use the @aria-required="true"@ attribute.',
              HIDDEN_S:       'The widget that is hidden does not need to be tested for being required.',
              HIDDEN_P:       'The %N_H widget elements that are hidden do not need to be tested for being required.',
              NOT_APPLICABLE: 'No widgets on this page that need testing for being required.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   'The @%1[role="%2"]@ widget is identified as required though the use of @aria-required="true"@ attribute.',
              ELEMENT_MC_1:     'If the @%1[role="%2"]@ widget is a required, add the @aria-required="true"@ attribute to the control.',
              ELEMENT_HIDDEN_1: 'The @%1[role="%2"]@ element was not tested because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Users benefit from information being informed if a input to a widget is required for form submission or task completion.'
            ],
            TECHNIQUES: [
              'To identify a required widget, add the ARIA @aria-required="true"@ attribute to the widget.',
              'Use the @aria-required@ attribute as the CSS selector for visually styling the widget as required.  This ensures that the visual state stays synchronized with the accessibility API state used by assistive technologies.',
              'Note the the HTML5 @required@ attribute CANNOT be used to indicate that a widget is required, the @requiured@ attribute can only be used on HTML5 defined form controls.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: aria-required',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-required'
              }
            ]
        },
        ERROR_4: {
            ID:                    'Error 4',
            DEFINITION:            'When input error is automatically detected and suggestions are automatically known, the suggestions %s be provided to the user (some exceptions).',
            SUMMARY:               'Error correction suggestions',
            TARGET_RESOURCES_DESC: '@textarea@ and @input[type="text"]@ elements, and ARIA textbox, gridcell and combobox widgets',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S: 'If the form control element or widget can automatically detect errors and suggest corrections, make sure that at least one accessible technique is used to present the suggestion to the user.',
              MANUAL_CHECK_P: 'If the %N_MC form control elements and/or widgets can automatically detect errors and suggest corrections, make sure that at least one accessible technique is used to present the suggestion to the user.',
              HIDDEN_S:       'The form control element and/or widget that is hidden does not need to be tested for accessible suggestions.',
              HIDDEN_P:       'The %N_H form control elements and/or widgets that are hidden does not need to be tested for accessible suggestions.',
              NOT_APPLICABLE: 'No form controls or widgets on this page that typically can provide suggestions.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_MC_1:     'If the @input[type="%1"]@ element can automatically detect errors and suggest corrections, use at least one accessible technique to provide the information to users.',
              ELEMENT_MC_2:     'If the @%1@ element can automatically detect errors and suggest corrections, use at least one accessible technique to provide the information to users.',
              ELEMENT_MC_3:     'If the @%1@ widget can automatically detect errors and suggest corrections, use at least one accessible technique to provide the information to users.',
              ELEMENT_HIDDEN_1: 'The @input[type="%1"]@ element was not tested because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2: 'The @%1@ element was not tested because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_3: 'The @%1@ widget was not tested because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Users benefit from being informed of invalid input and on how to correct invalid input.'
            ],
            TECHNIQUES: [
              'Add @aria-describedby@ reference on the form control or widget to the suggestion information.',
              'Use a popup list to provide suggested values for valid input.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: The @label@ element',
                url:   'https://www.w3.org/TR/html4/interact/forms.html#edef-LABEL'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: aria-invalid',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-invalid'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H44: Using label elements to associate text labels with form controls',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H44'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA1: Using the aria-describedby property to provide a descriptive label for user interface controls',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA1'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA19: Using ARIA role=alert or Live Regions to Identify Errors',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA19'
              }             ]
        },
        ERROR_5: {
            ID:                    'Error 5',
            DEFINITION:            'To prevent errors when input includes legal and/or financial transactions (e.g. online shopping, banking), the user %s be able to either reverse, check or confirm the data before the transaction is finalized.',
            SUMMARY:               'Prevent errors',
            TARGET_RESOURCES_DESC: 'Forms that contain legal or financial transactions including online purchases',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S: 'If the form control or widget on this page are used for legal and/or financial transactions, make sure the actions are either reversible or requires the user to confirm the information before the transaction is finalized.',
              MANUAL_CHECK_P: 'If the %N_MC form controls and widgets on this page are used for legal and/or financial transactions, make sure the actions are either reversible or requires the user to confirm the information before the transaction is finalized.',
              HIDDEN_S:       'The form control element and/or widget that is hidden does not need to be tested for accessible suggestions.',
              HIDDEN_P:       'The %N_H form control elements and/or widgets that are hidden does not need to be tested for accessible suggestions.',
              NOT_APPLICABLE: 'No form controls or widgets on this page that typically can provide suggestions.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_MC_1:     'If the form control or widget is used as part of a legal and/or financial transaction, make sure the information this control provides can be changed and/or confirmed before the transaction is finalized.',
              PAGE_MC_1:        'If form controls and widgets on this page are used for legal and/or financial transactions, make sure the actions are either reversible or requires the user to confirm the information before the transaction is finalized.',
              ELEMENT_HIDDEN_1: 'The form control or widget was not tested because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'The intent of this rule is to help users with disabilities avoid serious consequences as the result of a mistake when performing an action that cannot be reversed. For example, purchasing non-refundable airline tickets or submitting an order to purchase stock in a brokerage account are financial transactions with serious consequences.'
            ],
            TECHNIQUES: [
              'Provide a confirmation page showing all the user inputs before for final submission of the information for modification of user controlled data on a server.',
              'Provide a means for the user to review previous submissions and give them the ability to cancel or modify previous submissions of legal or financial information.',
              'Use a confirmation checkbox in addition to the submit button, to require the user to confirm the data is valid before submission.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'Understanding SC 3.3.4 Error Prevention (Legal, Financial, Data.)',
                url:   'https://www.w3.org/TR/UNDERSTANDING-WCAG20/minimize-error-reversible.html'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G164: Providing a stated time within which an online request (or transaction) may be amended or canceled by the user after making the request.',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G164'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G98: Providing the ability for the user to review and correct answers before submitting.',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G98'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G155: Providing a checkbox in addition to a submit button.',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G155'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G99: Providing the ability to recover deleted information.',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G99'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G168: Requesting confirmation to continue with selected action.',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G168'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G155: Providing a checkbox in addition to a submit button.',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G155'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G98: Providing the ability for the user to review and correct answers before submitting.',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G98'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: ' G168: Requesting confirmation to continue with selected action.',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G168'
              }
            ]
        }
    }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */


OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

    //
    //  OAA Rules title and message string National Language Support (NLS)
    //
    rules: {
        FOCUS_1: {
            ID:                    'Focus 1',
            DEFINITION:            'The sequential focus order of links, form controls, embedded apps and widgets %s be meaningful.',
            SUMMARY:               'Focus order %s be meaningful',
            TARGET_RESOURCES_DESC: '@a@, @area@, @input@, @textarea@ and @select@ elements and elements with widget roles with @tabindex@ values',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:     'Check the "tab" focus order of the page to make sure the sequence of focusable elements is meaningful.',
              MANUAL_CHECK_P:     'Check the "tab" focus order of the page to make sure the sequence of focusable elements is meaningful.',
              HIDDEN_S: 'The link, form control, embedded app or widget element that is hidden does not need to be tested for focus order.',
              HIDDEN_P: 'The %N_H links, form controls, embedded apps and/or widgets that are hidden do not need to be tested for focus order.',
              NOT_APPLICABLE:  'No or only one focusable element on the page'
            },
            NODE_RESULT_MESSAGES: {
              PAGE_MC_1:        'Use the "tab" key to check the focus order of the %1 interactive elements on the page (i.e. links, form controls, ...).',
              PAGE_MC_2:        'Use the "tab" key to check the focus order of the %1 interactive elements on the page (i.e. links, form controls, ...); NOTE: %2 other interactive elements on the page have been removed from the tab order by setting the @tabindex@ value to less than 0.',
              ELEMENT_MC_1:     '%1 element with @role@="%2" is part of the sequential focus order manual check.',
              ELEMENT_MC_2:     '%1 element is part of the sequential focus order manual check.',
              ELEMENT_MC_3:     '%1 element with @role@="%2" has a @tabindex@="%2", so it is NOT part of the sequential focus oarder of the page.',
              ELEMENT_MC_4:     '%1 element has a @tabindex@="%2", so it is NOT part of the sequential focus order of the page.',
              ELEMENT_HIDDEN_1: '%1 element with @role@="%2" is hidden, so NOT a part of the sequential focus order of the page.',
              ELEMENT_HIDDEN_2: '%1 element is hidden, so NOT a part of the sequential focus order of the page.'
            },
            PURPOSE: [
              'The "tab" key is the primary key many browsers use to navigate the interactive elements on a web page.',
              'The sequential order of the elements receiving focus can help a user understand the features on a web page.',
              'The usability of frequently used or important interactive features of a web page can be improved by moving them to the beginning of the focus sequence.'
            ],
            TECHNIQUES: [
              'Use document order to place related interactive items in a meaningful sequence.',
              'The @tabindex@ atttribute value (i.e. values greater than 0) can be used to change the sequence of focusable elements in a web page or make non-interactive elements part of the "tab" order of the page.',
              'A @tabindex@ values of less than 0 remove redundent interactive elements from the sequential focus order.'
            ],
            MANUAL_CHECKS: [
              'Use the "tab" key to move focus through the links, form controls, embedded applications and widgets on the page.',
              'Does the sequence of elements receiving focus make sense (i.e. related items on the page are navigated sequentially as a group).'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G59: Placing the interactive elements in an order that follows sequences and relationships within the content',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G59'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H4: Creating a logical tab order through links, form controls, and objects',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H4'
              }
            ]
        },
        FOCUS_2: {
            ID:                    'Focus 2',
            DEFINITION:            'The element with keyboard focus %s have a visible focus style that is different from the non-focus state.',
            SUMMARY:               'Focus %s be visible',
            TARGET_RESOURCES_DESC: '@a@, @area@, @input@, @textarea@ and @select@ elements and elements with widget roles with @tabindex@ values',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:     'Use the "tab" key to move focus between links, form controls, embedded apps and widgets and check the visibility of focus styling for each element as it receives focus.',
              MANUAL_CHECK_P:     'Use the "tab" key to move focus between links, form controls, embedded apps and widgets and check the visibility of focus styling for each element as it receives focus.',
              HIDDEN_S: 'The link, form control, embedded app or widget element that is hidden does not need to be tested for focus order.',
              HIDDEN_P: 'The %N_H links, form controls, embedded apps and/or widgets that are hidden do not need to be tested for focus order.',
              NOT_APPLICABLE:  'No focusable elements on the page'
            },
            NODE_RESULT_MESSAGES: {
              PAGE_MC_1:        'Use keyboard commands to check the keyboard focus styling of the %1 interactive elements on the page (i.e. links, form controls, ...).',
              PAGE_MC_2:        'Use keyboard commands to check the keyboard focus styling of the %1 interactive elements on the page (i.e. links, form controls, ...); NOTE: %2 interactive elements are hidden.',
              ELEMENT_MC_1:     '%1 element with @role@="%2" is part of the keyboard focus styling manual check.',
              ELEMENT_MC_2:     '%1 element is part of the keyboard focus styling manual check.',
              ELEMENT_HIDDEN_1: '%1 element with @role@="%2" is hidden, so is not visible for changing the focus styling.',
              ELEMENT_HIDDEN_2: '%1 element is hidden, so is not visible for changing the focus styling.'
            },
            PURPOSE: [
              'Many browsers don\'t provide a prominent or consistent visible keyboard focus styling for interactive elements, making it difficult for users to identify and track the element with keyboard focus.',
              'Author defined visible keyboard focus style makes it easier for users to know which interactive element has keyboard focus and provides more consistent user experience between browsers and operating systems.'
            ],
            TECHNIQUES: [
              'Use CSS psuedo element selector @:focus@ to change the styling of elements with keyboard focus.',
              'Use @focus@ and @blur@ event handlers on checkboxes and radio buttons to change the styling of not only the form control, but also its label text to make it easier to see.',
              'Styling changes should include creating a border around the interactive element and its label, typically using the CSS @border@ or @outline@ properties.',
              'For consistent look and feel to the website it is often useful for the focus and hover styles to be the same or similar.'
            ],
            MANUAL_CHECKS: [
              'Use the the keyboard (i.e. typically he "tab" key, but in the case of widgets other keys) to move focus through the links, form controls, embedded applications and widgets on the page.',
              'Check if the element with keyboard focus is clearly visible for all focusable elements on the page as you move focus between elements, and that it changes more than just color (i.e. border/outline around element with focus).',
              'Test keyboard focus styling using more than one browser and operating system, since there is a wide varability of between operating systems and browsers for styling keyboard focus.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'C15: Using CSS to change the presentation of a user interface component when it receives focus ',
                url:   'https://www.w3.org/TR/WCAG20-TECHS/C15'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G195: Using an author-supplied, highly visible focus indicator',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G195'
              }
            ]
        },
        FOCUS_3: {
            ID:                    'Focus 3',
            DEFINITION:            'The target of a link %s result in focus the content the window if the target results in more than one window opening.',
            SUMMARY:               'Target focus %s be in content window',
            TARGET_RESOURCES_DESC: '@a@, @area@ and @role="link"@ elements',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:     'Check the link to make sure that if the link opens more than one window that the focus is in the content window.',
              MANUAL_CHECK_P:     'Check the %N_MC links to make sure that if any of the links opens more than one window that the focus is in the content window.',
              HIDDEN_S: 'The link element that is hidden does not need to be tested for content focus.',
              HIDDEN_P: 'The %N_H link elements that are hidden do not need to be tested for content focus.',
              NOT_APPLICABLE:  'No link elements on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_MC_1: 'If the target of the link opens multiple windows (i.e. typically advertisements or other promotional information) make sure keyboard focus is on the content window.',
              ELEMENT_HIDDEN_1:       '%1 element is hidden, so cannot open any new windows.'
            },
            PURPOSE: [
              'User\'s can become disoriented if the focus causes unpredicatable actions, including new URLs and popup windows for advertisements or promotions.'
            ],
            TECHNIQUES: [
              'Do not link to URLs that open multiple windows and do not manage the focus to be in the content windoow the user was expecting by following the link.'
            ],
            MANUAL_CHECKS: [
              'After selecting a link and if it opens multiple windows, make sure the keyboard focus is in the content window.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G200: Opening new windows and tabs from a link only when necessary',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G200'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G201: Giving users advanced warning when opening a new window',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G201'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'F52: Failure of Success Criterion 3.2.1 and 3.2.5 due to opening a new window as soon as a new page is loaded',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F52'
              }
            ]
        },
        FOCUS_4: {
            ID:                    'Focus 4',
            DEFINITION:            '@select@ elements with @onchange@ event handler %s not automatically change the user\'s context when keyboard focus moves between options.',
            SUMMARY:               '@select@ %s not change context',
            TARGET_RESOURCES_DESC: '@a@, @area@ and @role="link"@ elements',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:     'Check the @select@ element to make sure that when keyboard focus moves between options does not cause a change in context (e.g. moving to a new URL or focus being moved from the @select@ element).',
              MANUAL_CHECK_P:     'Check the %N_MC @select@ elements to make sure that when keyboard focus moves between options in each control does not cause a change in context (e.g. moving to a new URL or focus being moved from the @select@ element).',
              HIDDEN_S: 'The @select@ element that is hidden does not need to be tested for automatically changing user context.',
              HIDDEN_P: 'The %N_H @select@ elements that are hidden do not need to be tested for automatically changing user context.',
              NOT_APPLICABLE:  'No @select@ elements on the page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_MC_1: 'Check to make sure moving keyboard focus between options in the @select@ box does not move focus from the list of options.',
              ELEMENT_HIDDEN_1:       '@select@ element is hidden.'
            },
            PURPOSE: [
              'User\'s can become disoriented if the focus changes cause unpredicatable actions.',
              'When the user is using the kyboard to explore @select@ box options, the focus must stay on the options, until the user selects one of the options.'
            ],
            TECHNIQUES: [
              'Do not use @onchange@ event handlers on @select@ elements.',
              'Use selections should be made using the enter key.'
            ],
            MANUAL_CHECKS: [
              'Move focus to the @selection@ box and use the keyboard to move the focus between options, check to make sure the focus changes are not causing the context to change (i.e. focus movig to a new window or focus moving from the current option in the select box).'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G200: Opening new windows and tabs from a link only when necessary',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G200'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G201: Giving users advanced warning when opening a new window',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G201'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'F52: Failure of Success Criterion 3.2.1 and 3.2.5 due to opening a new window as soon as a new page is loaded',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F52'
              }
            ]
        },
        FOCUS_5: {
            ID:         'Focus 5',
            DEFINITION: 'Forms %s use @input[type="submit"]@ or other form control buttons for submitting forms.',
            SUMMARY:    'Forms submitted using buttons',
            TARGET_RESOURCES_DESC: '@input[type="submit"]@, @input[type="button"]@, @input[type="image"]@, @button@, @[role="button"]@',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S: 'Verify that the form has uses a button to submit the form.',
              MANUAL_CHECK_P: 'Verify that each of the %N_MC forms has a button used to submit the form.',
              FAIL_S:    'No button elements found for submitting the form.',
              FAIL_P:    'No button elements found for submitting %N_MC forms.',
              HIDDEN_S:  'The form that is hidden was not evaluated.',
              HIDDEN_P:  'The %N_H forms that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No form controls on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1: 'The form has an @input[type="submit"]@.',
              ELEMENT_PASS_2: '@input[type="submit"]@ is used for form submission.',
              ELEMENT_FAIL_1: 'The form has no button elements.',
              ELEMENT_MC_1: 'Verify that the button element contained in the form can be used for form submission.',
              ELEMENT_MC_2: 'Verify that at least one of the %1 button elements contained in the form can be used for form submission.',
              ELEMENT_MC_3: 'Verify if the @input[type="%1"]@ element can be used to  submit the form.',
              ELEMENT_MC_4: 'Verify if the @button@ element can be used to  submit the form.',
              ELEMENT_MC_5: 'Verify if the @%1[role="button"]@ element can be used to  submit the form.',
              ELEMENT_HIDDEN_1: '@form@ element was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2: '@input[type="submit"]@ element was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_3: '@input[type="%1"]@ element was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_4: '@button@ element was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_5: '@%1[role="button"]@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Using a submit button allows users to easily identify and control how to  submit form information to a server for processing.  Forms that are submitted through changes in focus or selection may result in users prematurely submitting the form or not being aware they submitted the form.'
            ],
            TECHNIQUES: [
              'The preferred technique for submitting forms is with the use of the input[type="submit"] form control.',
              'An alternative techniques include using other HTML form control elements, including @input[type="button"]@, @input[type="image"]@ or @button@ elements with an accessible name indicating that the button is for submitting form information.',
              'In the case when a non-form control element (e.g. @a@ or @div@ element) is being used to submit the form, the element can use ARIA [role="button"] attribute with the accessible name indicating that the button is for submitting form information.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: The @input[type="submit"]@ element',
                url:   'https://www.w3.org/TR/html4/interact/forms.html#edef-INPUT'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H32: Providing submit buttons',
                url:   'https://www.w3.org/TR/2014/NOTE-WCAG20-TECHS-20140408/H32'
              }
            ]
        },
        FOCUS_6: {
            ID:         'Focus 6',
            DEFINITION: '@checkbox@ and @radio@ buttons %s not automatically change context.',
            SUMMARY:    '@checkbox/radio@ buttons changing context.',
            TARGET_RESOURCES_DESC: '@input[type="checkbox"]@ and @input[type="radio"]@',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S: 'Verify that the @checkbox@ or @radio@ button does not automatically change context.',
              MANUAL_CHECK_P: 'Verify that %N_MC checkbox@ and/or @radio@ buttons do not automatically change context.',
              HIDDEN_S: 'The @checkbox@ or @radio@ button that is hidden was not evaluated.',
              HIDDEN_P: 'The %N_H @checkbox@ or @radio@ buttons that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @checkbox@ or @radio@ buttons on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_MC_1:     'Verify that the @input[type="%1"]@ does not automatically change context when the control is checked or unchecked.',
              ELEMENT_MC_2:     'Verify that the @%1[role="%2"]@ does not automatically change context when the control is checked or unchecked.',
              ELEMENT_HIDDEN_1: '@input[type="%1"]@ element was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2: ' @%1[role="%2"]@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Users do not expect that checking or unchecking a radio button or checkbox will cause focus to move to another a page or section of the current page they are on.'
            ],
            TECHNIQUES: [
              'Remove or modify the event handlers to change the behavior to not automatically change context when the checkbox or radio button is checked or unchecked.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: The @input[type="checkbox"]@ and @input[type="radio"]@ element',
                url:   'https://www.w3.org/TR/html4/interact/forms.html#edef-INPUT'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: Checkbox Role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#checkbox'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: Radio Role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#radio'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H32: Providing submit buttons',
                url:   'https://www.w3.org/TR/2014/NOTE-WCAG20-TECHS-20140408/H32'
              }
            ]
        }
    }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */


OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

    //
    //  OAA Rules title and message string National Language Support (NLS)
    //
    rules: {
        CONTROL_1: {
            ID:         'Control 1',
            DEFINITION: 'Each @input@, @select@, @textarea@, @progress@, @meter@ and @output@ element %s have an accessible label.',
            SUMMARY:    'Form controls %s have labels',
            TARGET_RESOURCES_DESC: '@input@, @select@, @textarea@, @progress@, @meter@ and @output@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Add a label to the form control element that is unlabelled.',
              FAIL_P:   'Add labels to the %N_F form control elements that are unlabelled.',
              NOT_APPLICABLE: 'No @input@, @select@, @textarea@, @progress@, @meter@ or @output@ elements on the page.',
              HIDDEN_S: 'One form control element that is hidden was not evaluated.',
              HIDDEN_P: '%N_H form control elements that are hidden were not evaluated.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   '@%1@ control has the label: \'%2\'',
              ELEMENT_FAIL_1:   'Add label to @%1@ control.',
              ELEMENT_HIDDEN_1: '@%1@ control was not tested because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'A label associated with a form control ensures that information about the form control is spoken by screen readers when it receives focus.'
            ],
            TECHNIQUES: [
              'The preferred technique for labeling form controls is by reference: First, include an @id@ attribute on the form control to be labeled; then use the @label@ element with a @for@ attribute value that references the @id@ value of the control.',
              'An alternative technique is to use the @label@ element to encapsulate the form control element.',
              'In special cases, the @aria-labelledby@ attribute can be used on the form control element to reference the id(s) of the elements on the page that describe its purpose.',
              'In special cases, the @aria-label@ attribute can be used on the form control element to provide an explicit text description of its purpose.',
              'In special cases, the @title@ attribute on the form control element can be used to provide an explicit text description of its purpose.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: The @label@ element',
                url:   'https://www.w3.org/TR/html4/interact/forms.html#edef-LABEL'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-label@ attribute',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-labelledby@ attribute',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: The @title@ attribute',
                url:   'https://www.w3.org/TR/html4/struct/global.html#adef-title'
              },
              {type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'W3C WAI Accessibility Tutorials: Forms Concepts',
                url: 'https://www.w3.org/WAI/tutorials/forms/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H44: Using label elements to associate text labels with form controls',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H44'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H65: Using the title attribute to identify form controls when the label element cannot be used',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H65'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H71: Providing a description for groups of form controls using fieldset and legend elements',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H71'
              }
            ]
        },
        CONTROL_2: {
            ID:         'Control 2',
            DEFINITION: 'Every @input@ type @image@ element %s have an @alt@ or @title@ attribute with content.',
            SUMMARY:    'Image button %s have alt. content',
            TARGET_RESOURCES_DESC: '@input[type="image"]@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Add an @alt@ attribute to the @input[type="image"]@ element that does not have alt. content.',
              FAIL_P:   'Add an @alt@ attribute to the %N_F @input[type="image"]@ elements that do not have alt. content.',
              HIDDEN_S: 'The @input@ type @image@ element that is hidden was not evaluated.',
              HIDDEN_P: 'The %N_H @input@ type @image@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @input[type="image"]@ elements on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1: 'Image button has an accessible name: %1',
              ELEMENT_FAIL_1: 'Add @alt@ attribute with text content.',
              ELEMENT_FAIL_2: 'Add text content to the @alt@ attribute.',
              ELEMENT_HIDDEN_1: 'Image button was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Alternate content associated with an image-based form control ensures that information about the control is spoken by screen readers when it receives focus.'
            ],
            TECHNIQUES: [
              'The @alt@ attribute is the preferred and most commonly used way to provide an accessible label for @input@ type @image@ elements.',
              'In special cases, the @title@ attribute can be used on the @input@ type @image@ element to provide an explicit text description of its purpose.',
              'In special cases, the @aria-labelledby@ attribute can be used on the form control element to reference the id(s) of the elements on the page that describe its purpose.',
              'In special cases, the @aria-label@ attribute can be used on the form control element to provide an explicit text description of its purpose.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: The @input[type=image]@ element',
                url:   'https://www.w3.org/TR/html4/interact/forms.html#adef-type-INPUT'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-label@ attribute',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-labelledby@ attribute',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: The @title@ attribute',
                url:   'https://www.w3.org/TR/html4/struct/global.html#adef-title'
              },
              {type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'W3C WAI Accessibility Tutorials: Forms Concepts',
                url: 'https://www.w3.org/WAI/tutorials/forms/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H36: Using alt attributes on images used as submit buttons',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H36'
              }
            ]
        },
        CONTROL_3: {
            ID:         'Control 3',
            DEFINITION: 'A related group of radio buttons %s have a grouping label.',
            SUMMARY:    'Radio buttons %s have grouping label',
            TARGET_RESOURCES_DESC: '@input[type="radio"]@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Add a @fieldset@ container with a @legend@ label for the @input[type="radio"]@ element NOT in a grouping container.',
              FAIL_P:   'Add a @fieldset@ container with a @legend@ label for each group of the %N_F @input[type="radio"]@ elements NOT in a grouping container.',
              HIDDEN_S: 'The @input[type="radio"]@ that is hidden was not evaluated.',
              HIDDEN_P: 'The %N_H @input[type="radio"]@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @input[type="radio"]@ elements on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1: 'Radio button has grouping label "%1" from @fieldset/legend@ elements.',
              ELEMENT_PASS_2: 'Radio button has grouping label "%2" from @%1[role=group]@ element.',
              ELEMENT_FAIL_1: 'Add a @fieldset@ element with a @legend@ element to provide a grouping label for the radio buttons.',
              ELEMENT_FAIL_2: 'The @fieldset@ element has a missing or empty @legend@ element.',
              ELEMENT_FAIL_3: 'The @%1[role=group]@ grouping element does not have an accessible name.',
              ELEMENT_HIDDEN_1: 'Radio button was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Radio buttons that provide a set of related options need grouping information and a common grouping label to provide the overall context for those options.',
              'Screen readers treat grouping labels differently than standard labels, typically speaking the grouping label only once when focus is first moved to one the groups controls.'
            ],
            TECHNIQUES: [
              'The @fieldset@/@legend@ element combination is the preferred technique for providing a grouping information and label for a related group of radio buttons.',
              'If the @fieldset@/@legend@ technique cannot be used, use @[role=group]@ on a container element that contains the related radio buttons, and the container element must have an accessible name representing the grouping label.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: The @fieldset@ and @legend@ elements',
                url:   'https://www.w3.org/TR/html4/interact/forms.html#edef-FIELDSET'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @group@ role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/roles#group'
              },
              {type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'W3C WAI Accessibility Tutorials: Forms Concepts',
                url: 'https://www.w3.org/WAI/tutorials/forms/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H71: Providing a description for groups of form controls using fieldset and legend elements',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H71'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'IBM Web checklist: HTML example 6',
                url:   'https://www-03.ibm.com/able/guidelines/web/webstructure.html'
              }
            ]
        },
        CONTROL_4: {
            // TODO: Question: What if button only contains img elements with alt. text?
            ID:         'Control 4',
            DEFINITION: '@button@ elements %s have text content.',
            SUMMARY:    '@button@s %s have content',
            TARGET_RESOURCES_DESC: '@button@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Add descriptive text content to the @button@ element.',
              FAIL_P:   'Add descriptive text content to %N_F @button@ elements.',
              HIDDEN_S: 'The @button@ that is hidden was not evaluated.',
              HIDDEN_P: 'The %N_H @button@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No @button@ elements on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1: '@button@ element has text content.',
              ELEMENT_FAIL_1: 'Add text content to the @button@ element.',
              ELEMENT_HIDDEN_1: '@button@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'The text content of a @button@ element is used as its label, and ensures that the purpose of the button is spoken by screen readers when the button receives focus.'
            ],
            TECHNIQUES: [
              'The accessible label of a @button@ element includes its text content along with the @alt@ attribute content of any image elements it contains.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: The @button@ elements',
                url:   'https://www.w3.org/TR/html4/interact/forms.html#edef-BUTTON'
              },
              {type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'W3C WAI Accessibility Tutorials: Forms Concepts',
                url: 'https://www.w3.org/WAI/tutorials/forms/'
              }
            ]
        },
        CONTROL_5: {
            ID:         'Control 5',
            DEFINITION: 'All @id@ attribute values %s be unique on the page.',
            SUMMARY:               '@id@ %s be unique',
            TARGET_RESOURCES_DESC: 'Form control elements with @id@ attributes',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Update elements with @id@ attributes so that each attribute value is unique.',
              FAIL_P:   'Update elements with @id@ attributes so that each attribute value is unique.',
              HIDDEN_S: 'The element with an @id@ attribute that is hidden was not evaluated.',
              HIDDEN_P: 'The %N_H elements with @id@ attributes that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No elements or only one element with an @id@ attribute on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1: '\'%1\' @id@ attribute value is unique.',
              ELEMENT_FAIL_1: '@%1@ element shares the \'%2\' @id@ value with another element on the page.',
              ELEMENT_FAIL_2: 'The hidden @%1@ element shares the \'%2\' @id@ value with another element on the page.',
              ELEMENT_HIDDEN_1: '%1 element with @id@ attribute was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              '@id@ attribute values on form control elements can be used as references by @label@ elements. When @id@ attribute values on the page are not unique, form controls may be incorrectly labelled.',
              '@aria-labelledby@ and @aria-describedby@ atributes also depend on unique @id@ values for labeling and adding descriptions to form controls.'
            ],
            TECHNIQUES: [
              'If a form control defines an @id@ attribute, ensure that its value is unique on the page.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: @id@ attribute',
                url:   'https://www.w3.org/TR/html4/struct/global.html#adef-id'
              },
              {type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'W3C WAI Accessibility Tutorials: Forms Concepts',
                url: 'https://www.w3.org/WAI/tutorials/forms/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'F77: Failure of Success Criterion 4.1.1 due to duplicate values of type ID',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F77'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H88: Using HTML according to spec',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H88'
              }
            ]
        },
        CONTROL_6: {
            ID:         'Control 6',
            DEFINITION: 'Each @label@ element using the @for@ attribute %s reference a form control on the page.',
            SUMMARY:    '@label@ %s reference control',
            TARGET_RESOURCES_DESC: '@label@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Change the @label@ element to use the @for@ attribute to label its form control.',
              FAIL_P:   'Change the %N_F @label@ elements to use the @for@ attribute to label their respective form controls.',
              MANUAL_CHECK_S: 'There is one form control being labeled by more than one labeling technique.',
              MANUAL_CHECK_P: 'There are %N_MC form controls being labeled by more than one labeling technique.',
              HIDDEN_S: 'The @label@ element that is hidden was not evaluated.',
              HIDDEN_P: 'The %N_H @label@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No visible @label@ elements with invalid @for@ references on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1: '@label[for=%1]@ references a form control.',
              ELEMENT_FAIL_1: 'Change the @label@ element with the @for@ attribute value \'%1\' to reference a form control.',
              ELEMENT_MC_1:   'The @label[for=%1]@ is being ingored as a label because the form control is being labeled with @aria-labelledby@ or @aria-label@ attribute.',
              ELEMENT_HIDDEN_1: 'The @label@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              '@label@ elements are useful for accessibility only when they reference or encapsulate form controls.'
            ],
            TECHNIQUES: [
              'For a @label@ element to properly reference a form control, ensure that the @for@ attribute value on the @label@ element exactly matches the @id@ attribute value on the form control.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: The @label@ element FOR attribute',
                url:   'https://www.w3.org/TR/html4/interact/forms.html#adef-for'
              },
              {type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'W3C WAI Accessibility Tutorials: Forms Concepts',
                url: 'https://www.w3.org/WAI/tutorials/forms/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H44: Using label elements to associate text labels with form controls',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H44'
              }
            ]
        },
        CONTROL_7: {
            ID:         'Control 7',
            DEFINITION: 'Every @label@ and @legend@ element %s contain text content.',
            SUMMARY:    '@label@ %s have content',
            TARGET_RESOURCES_DESC: '@label@ and @legend@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Add text content to the @label@ or @legend@ element that describes the purpose of the form control or group of form controls, or remove the element if it is not needed for labeling.',
              FAIL_P:   'Add text content to the %N_F @label@ or @legend@ elements that describes the purpose of the form control or group of form controls, or remove the element(s) if they are not needed for labeling.',
              HIDDEN_S: 'One @label@ or @legend@ element that is hidden was not evaluated.',
              HIDDEN_P: 'The %N_H @label@ or @legend@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @label@ or @legend@ elements on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1: '@%1@ has text content.',
              ELEMENT_FAIL_1: 'Add text content to the @%1@ element, or if it is unneeded, remove it from the page.',
              ELEMENT_HIDDEN_1: '@%1@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'A @label@ or @legend@ elements is only useful for accessibility when it contains content that describes the purpose of the associated form control(s).'
            ],
            TECHNIQUES: [
              'Add text content to @label@ and @legend@ elements that describes the purpose of the form control or group of form controls.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: The @label@ element @for@ attribute',
                url:   'https://www.w3.org/TR/html4/interact/forms.html#adef-for'
              },
              {type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'W3C WAI Accessibility Tutorials: Forms Concepts',
                url: 'https://www.w3.org/WAI/tutorials/forms/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H44: Using @label@ elements to associate text labels with form controls',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H44'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H88: Using HTML according to spec',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H88'
              }
            ]
        },
        CONTROL_8: {
            ID:         'Control 8',
            DEFINITION: 'Every @fieldset@ element %s contain exactly one @legend@ element.',
            SUMMARY:    '@fieldset@ %s have one @legend@',
            TARGET_RESOURCES_DESC: '@fieldset@ and @legend@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Update the @fieldset@ element such that it contains only one @legend@ element.',
              FAIL_P:   'Update %N_F @fieldset@ elements such that each contains only one @legend@ element.',
              HIDDEN_S: 'One @fieldset@ element that is hidden was not evaluated.',
              HIDDEN_P: 'The %N_H @fieldset@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @fieldset@ elements on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1: '@fieldset@ has one @legend@ element.',
              ELEMENT_FAIL_1: 'Add @legend@ element.',
              ELEMENT_FAIL_2: 'Remove %1 @legend@ elements.',
              ELEMENT_FAIL_3: '@legend@ element is hidden from assistive technologies. Use CSS off-screen positioning instead of CSS display or visibility properties to remove @legend@ from graphical rendering.',
              ELEMENT_HIDDEN_1: '@fieldset@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Multiple @legend@ elements contained in the same @fieldset@ may result in the improper calculation of labels for assistive technologies.'
            ],
            TECHNIQUES: [
              'A @fieldset@ element should have one and only one @legend@ element to describe the purpose of the form controls it contains.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: Adding structure to forms: the @fieldset@ and @legend@ elements',
                url:   'https://www.w3.org/TR/html4/interact/forms.html#edef-FIELDSET'
              },
              {type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'W3C WAI Accessibility Tutorials: Forms Concepts',
                url: 'https://www.w3.org/WAI/tutorials/forms/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H71: Providing a description for groups of form controls using fieldset and legend elements',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H71'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H88: Using HTML according to spec',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H88'
              }
            ]
        },
        CONTROL_9: {
            ID:         'Control 9',
            DEFINITION: 'Verify that the @title@ attribute content serves as an appropriate label for the form control, and not only as a tooltip.',
            SUMMARY:    'Verify @title@ is the label.',
            TARGET_RESOURCES_DESC: '@textarea@, @select@ and @input@ elements',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S: 'Verify that the @title@ attribute is an appropriate label for the form control, and that it is not being used only as a tooltip.',
              MANUAL_CHECK_P: 'Verify that the @title@ attribute is an appropriate label for each of the %N_F form controls, and that it is not being used only as a tooltip.',
              HIDDEN_S: 'The form control element that is hidden was not evaluated.',
              HIDDEN_P: 'The %N_H form control elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @textarea@, @select@ or @input@ elements on this page with a @title@ attribute.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1: '@title@ is not used as label.',
              ELEMENT_MC_1:   'If possible use the @label@ element or an ARIA technique to label %1 form control instead of using the @title@ attribute.',
              ELEMENT_HIDDEN_1: '@%1@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'When the @title@ attribute is used for tooltips, it often uses more words than needed to label a form control for users of assistive technologies.',
              'Use @aria-label@ to provide a shorter label to users of assistive technologies if the @title@ attribute content is determined not to be an optimal label.'
            ],
            TECHNIQUES: [
              'The preferred technique for labeling form controls is to use the @label@ element and its @for@ attribute to reference the @id@ attribute value of the form control element.',
              'An alternative technique is to use the @label@ element to encapsulate the form control element.',
              'In special cases, the @aria-labelledby@ attribute can be used on the form control element to reference the id(s) of the elements on the page that describe its purpose.',
              'In special cases, the @aria-label@ attribute can be used on the form control element to provide an explicit text description of its purpose.',
              'The @title@ attribute will be used as the last resort to provide a label for the form control.'
            ],
            MANUAL_CHECKS: [
              'If the @title@ attribute is the labeling technique of last resort, use other form labeling techniques.',
              'Reserve the @title@ attribute for tooltips if they are needed for your form.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: Adding structure to forms: the @fieldset@ and @legend@ elements',
                url:   'https://www.w3.org/TR/html4/interact/forms.html#edef-FIELDSET'
              },
              {type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'W3C WAI Accessibility Tutorials: Forms Concepts',
                url: 'https://www.w3.org/WAI/tutorials/forms/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H88: Using HTML according to spec',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H88'
              }
            ]
        },
        CONTROL_10: {
            ID:         'Control 10',
            DEFINITION: 'Each standard HTML form control and ARIA widget role must have a label that is unique on the page.',
            SUMMARY:    'Labels %s be unique',
            TARGET_RESOURCES_DESC: '@select@, @textarea@ and @input@ elements of type @text@, @password@, @checkbox@, @radio@, @file@ and aria widget roles',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Update the labels for the %N_F form controls and ARIA widgets with duplicate labels to uniquely identify the purpose of each control on the page.',
              FAIL_P:   'Update the labels for the %N_F form controls and ARIA widgets with duplicate labels to uniquely identify the purpose of each control on the page.',
              HIDDEN_S: 'The form control or ARIA widget element that is hidden was not evaluated.',
              HIDDEN_P: 'The %N_H form control and/or ARIA widget elements or widgets that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No form controls or only one form control on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1: 'Label is unique.',
              ELEMENT_FAIL_1: 'Change the @label@ element content, use @fieldset@ and @legend@ elements or an ARIA technique to make the label text content unique on the page.',
              ELEMENT_HIDDEN_1: '%1 control element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Labels that are unique make it possible for people to understand the different purposes of form controls on the same page.'
            ],
            TECHNIQUES: [
              'The preferred technique for labeling standard HTML form controls is by reference: First, include an @id@ attribute on the form control to be labeled; then use the @label@ element with a @for@ attribute value that references the @id@ value of the control.',
              'An alternative technique for standard HTML form controls is to use the @label@ element to encapsulate the form control element.',
              'The @fieldset@ and @legend@ elements can be used add a grouping label to the form controls contained in the @fieldeset@ element.',
              'For ARIA widgets and special cases of standard HTML form controls, the @aria-labelledby@ attribute can be used to reference the id(s) of the elements on the page that describe its purpose.',
              'For ARIA widgets and special cases of standard HTML form controls, the @aria-label@ attribute can be used to provide an explicit text description of its purpose.',
              'For ARIA widgets and special cases of standard HTML form controls, the @title@ attribute can be used to provide an explicit text description of its purpose.',
              'For @input[type=submit]@ the default label is "Submit", but the label can be changed using other labeling techniques if there is more than one submit button on the page.',
              'For @input[type=reset]@ the default label is "Reset", but the label can be changed using other labeling techniques if there is more than one reset button on the page.',
              'For @input[type=image]@ the default label is defined using the @alt@ attribute.',
              'For @input[type=button]@ the default label is defined using the @value@ attribute.',
              'For the @button@ element, the child text content can be used to define its purpose.',
              'For some ARIA widgets (e.g. @menuitem@, @tab@, @treeitem@), the child text content can be used to define its purpose.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: The @label@ element',
                url:   'https://www.w3.org/TR/html4/interact/forms.html#edef-LABEL'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-label@ attribute',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-labelledby@ attribute',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: The @title@ attribute',
                url:   'https://www.w3.org/TR/html4/struct/global.html#adef-title'
              },
              {type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'W3C WAI Accessibility Tutorials: Forms Concepts',
                url: 'https://www.w3.org/WAI/tutorials/forms/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H44: Using label elements to associate text labels with form controls',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H44'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H65: Using the title attribute to identify form controls when the label element cannot be used',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H65'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H71: Providing a description for groups of form controls using fieldset and legend elements',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H71'
              }
            ]
        },
        CONTROL_11: {
            ID:         'Control 11',
            DEFINITION: 'If there is more than one form on a page, each submit and reset button %s have a unique label.',
            SUMMARY:    'Submit and reset button labels %s be unique',
            TARGET_RESOURCES_DESC: 'submit and reset buttons',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Change the labeling of the submit or reset button to uniquely identify which form on the page will be sumnitted or reset on the page.',
              FAIL_P:   'Change the labeling of the %N_F submit or reset buttons to uniquely identify which form on the page will be sumnitted or reset on the page.',
              HIDDEN_S: 'The submit or reset button that is hidden was not evaluated.',
              HIDDEN_P: 'The %N_H submit and/or reset buttons that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No forms or only one form with submit or reset buttons on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_FAIL_1: 'Change the text content of the @button@ element to create a unique label, or use @aria-label@ or @aria-labelledby@ to make the @%1@ button accessible names unique on the page.',
              ELEMENT_FAIL_2: 'Change the @value@ attribute of the @input@ element to create a unique label, or use @aria-label@ or @aria-labelledby@ to make the @%1@ button accessible names unique on the page.',
              ELEMENT_HIDDEN_1: '@%1@ button was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Labels that are unique make it possible for people to understand the different purposes of form controls on the same page.',
              '@submit@ and @reset@ form controls have default labels and if these are present on more than one form on a page, the user may not understand which form they are submitting.'
            ],
            TECHNIQUES: [
              'The preferred technique for changing the default label for @submit@ and @reset@ controls is the @value@ attribute.',
              'In special cases, the @aria-labelledby@ attribute can be used on the form control element to reference the id(s) of the elements on the page that describe its purpose.',
              'In special cases, the @aria-label@ attribute can be used on the form control element to provide an explicit text description of its purpose.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: The @form@ element',
                url:   'https://www.w3.org/TR/html4/interact/forms.html#edef-FORM'
              },
              {type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'W3C WAI Accessibility Tutorials: Forms Concepts',
                url: 'https://www.w3.org/WAI/tutorials/forms/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H44: Using label elements to associate text labels with form controls',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H44'
              },
            ]
        }    }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

  //
  //  OAA Rules title and message string National Language Support (NLS) for color rules
  //
  rules: {
    FRAME_1: {
      ID:                    'Frame 1',
      DEFINITION:            '@frame@ element %s have an accessible name to support screen reader navigation.',
      SUMMARY:               '@frame@ %s have accessible name',
      TARGET_RESOURCES_DESC: '@frame@ elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Add a @title@ attribute to the @frame@ element that describes the contents of the frame.',
        FAIL_P:   'Add a @title@ attribute to the %N_F @frame@ elements that describes the contents of the frame.',
        MANUAL_CHECK_S:  'Verify the @frame@ element with empty accessible name (e.g. @title=""@ attribute) does not contain visible content.',
        MANUAL_CHECK_M:  'Verify the %N_MC @frame@ elements with empty accessible names (e.g. @title=""@ attribute) do not contain visible content.',
        HIDDEN_S: 'The @frame@ element that is hidden was not evaluated.',
        HIDDEN_P: 'The %N_H @frame@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE:  'No visible @frame@ elements on this page.'
      },
      NODE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   '@frame@ element has the accessible name: %1.',
        ELEMENT_FAIL_1:   'Add a @title@ attribute to the @frame@ element describing the contents of the frame.',
        ELEMENT_MC_1:     'Verify the @frame@ element with empty accessible name (e.g. @title=""@) is not intended to be a frame navigation target.',
        ELEMENT_HIDDEN_1: '@frame@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSE:        [ 'Screen readers provide a means to navigate web page content using @frame@ elements.',
                        'The accessible name of the @frame@ element (the @title@ attribute value) must describe the contents of the frame.',
                        'The accessible name helps users decide whether they want to navigate to a frame.'
                      ],
      TECHNIQUES:     [ 'Use the @title@ attribute to provide an accessible name for a @frame@ element.',
                        'Accessible names should be short and describe the contents of the @frame@ element to help users to decide whether to navigate to a @frame@.',
                        'For @frame@s with no visible content, explicitly identify the @frame@ as having no information for the user (e.g. @title="No content"@).'
                      ],
      MANUAL_CHECKS:  [ 'View the accessible names of the frames in the document to verify that they help users identify the contents of each frame.'
      ],
      INFORMATIONAL_LINKS: [
                       { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                         title: 'WCAG 2.0 Success Criterion 2.4.1 Bypass Blocks: A mechanism is available to bypass blocks of content that are repeated on multiple Web pages',
                         url:   'https://www.w3.org/TR/WCAG20/#navigation-mechanisms-skip'
                       },
                       { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                         title: 'H64: Using the title attribute of the frame and iframe elements',
                         url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H64.html'
                       }
                      ]
    },

    FRAME_2: {
      ID:                    'Frame 2',
      DEFINITION:            '@iframe@ element %s have an accessible name to support screen reader navigation.',
      SUMMARY:               '@iframe@ %s have accessible name',
      TARGET_RESOURCES_DESC: '@iframe@ elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Add an accessible name to @iframe@ element that describes the contents of the frame.',
        FAIL_P:   'Add accessible names to %N_F @iframe@ elements that describe the contents of the frame.',
        MANUAL_CHECK_S:  'Verify the @iframe@ elements with empty accessible name (e.g. @title=""@ attribute) does not contain visible content.',
        MANUAL_CHECK_M:  'Verify the %N_MC @iframe@ elements with empty accessible names (e.g. @title=""@ attribute) do not contain visible content.',
        HIDDEN_S: 'The @iframe@ element that is hidden was not evaluated.',
        HIDDEN_P: 'The %N_H @iframe@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE:  'No visible @iframe@ elements on this page.'
      },
      NODE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   '@iframe@ element has accessible name.',
        ELEMENT_FAIL_1:   'Add an accessible name to the @iframe@ element describing the contents of the @iframe@.',
        ELEMENT_MC_1:     'Verify the @iframe@ element with empty accessible name (e.g. @title=""@) does not contain visible content.',
        ELEMENT_HIDDEN_1: '@iframe@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSE:        [ 'Screen readers provide a means to navigate web page content using @iframe@ elements.',
                        'The accessible name of the @iframe@ element must describe the contents of the @iframe@.',
                        'The accessible name helps users to decide whether they want to navigate to a @iframe@.'
      ],
      TECHNIQUES:     [ 'Use the @title@ attribute to define an accessible name for an @iframe@ element.',
                        'Use the @aria-label@ attribute to define an accessible name for an @iframe@ element.',
                        'Use the @aria-labelledby@ attribute to define an accessible name for an @iframe@ element.',
                        'Accessible names should be short and describe the contents of the @iframe@ element to help users to decide whether to navigate to the @iframe@.',
                        'For @iframe@s with no visible content, explicitly identify the @iframe@ as having no information for the user (e.g. @title="No content"@).'
      ],
      MANUAL_CHECKS:  [ 'View the accessible names of the @iframe@s in the page to verify that they help users identify the contents of each frame.'
      ],
      INFORMATIONAL_LINKS: [
                      { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                        title: 'WCAG 2.0 Success Criterion 2.4.1 Bypass Blocks: A mechanism is available to bypass blocks of content that are repeated on multiple Web pages',
                        url:   'https://www.w3.org/TR/WCAG20/#navigation-mechanisms-skip'
                      },
                      { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                        title: 'H64: Using the title attribute of the frame and iframe elements',
                        url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H64.html'
                      }
      ]
    }
  }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */


OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

  //
  //  OAA Rules title and message string National Language Support (NLS)
  //
  rules: {
    IMAGE_1: {
      ID:         'Image 1',
      DEFINITION: 'Each @img@ element %s specify an @alt@ attribute or equivalent markup that either defines a text alternative or identifies the image as being used for decoration, spacing or some other stylistic purpose.',
      SUMMARY:    'Images %s have alt text',
      TARGET_RESOURCES_DESC: '@img@ and [role="img"]',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Add an @alt@ attribute or equivalent markup to the image element with missing alt text, or identify the image as decorative.',
        FAIL_P:   'Add an @alt@ attribute or equivalent markup to each of the %N_F image elements with missing alt text, or identify the image as decorative.',
        HIDDEN_S: 'One image element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H image elements that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No @img@ or @[role="img"]@ elements found on this page.'
      },
      NODE_RESULT_MESSAGES: {
        ELEMENT_PASS_1: '@%1@ element has @alt@ attribute.',
        ELEMENT_PASS_2: '@%1@ element has @aria-labelledby@ attribute.',
        ELEMENT_PASS_3: '@%1@ element has @aria-label@ attribute.',
        ELEMENT_PASS_4: '@%1@ element has @title@ attribute.',
        ELEMENT_FAIL_1: 'Add an @alt@, @aria-labelledby@ or @aria-label@ attribute to the @%1@ element to add a text alternative, or use @alt=""@, @role="presentation"@ or include the image as a CSS @background-image@ to identify it as purely decorative.',
        ELEMENT_FAIL_2: 'Use the @aria-labelledby@ or @aria-label@ attribute instead of @alt@ attribute for the text alternative for @%1[role="img"]@ element, or change the role to @role="presentation"@ to identify the image as purely decorative.',
        ELEMENT_HIDDEN_1: '@%1@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSE: [
        'A text alternative for an image, usually specified with an @alt@ attribute, provides a summary of the purpose of the image for people with visual impairments, enabling them to understand the content or purpose of the image on the page.',
        'An image with a text alternative that is an empty string or that has @role="presentation"@ is ignored by assistive technologies. Such markup indicates that the image is being used for decoration, spacing or other stylistic purposes rather than meaningful content.'
      ],
      TECHNIQUES: [
        'A text alternative should summarize the purpose of an image as succinctly as possible (preferably with no more than 100 characters).',
        'The @alt@ attribute is the preferred and most commonly used way to provide a text alternative for @img@ and @area@ elements.',
        'The @aria-labelledby@ attribute can be used to provide a text alternative when an image can be described using text already associated with the image, or for elements with @role="img"@.',
        'The @aria-label@ attribute should only be used to provide a text alternative in the special case when an element has a @role="img"@ attribute. Use the @alt@ attribute for @img@ and @area@ elements.',
        'The @title@ attribute will be used by assistive technologies to provide a text alternative if no other specification technique is found.',
        'Use the attributes @alt=""@, @role="presentation"@ or include the image as a CSS @background-image@ to identify it as being used purely for stylistic or decorative purposes and one that should be ignored by people using assistive technologies.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'HTML 5 Specification: 12.2 The @img@ element',
          url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-img-element'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @img@ role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#img'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-label@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-labelledby@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'HTML 4.01 Specification: 13.8 How to specify alternate text',
          url:   'https://www.w3.org/TR/html4/struct/objects.html#adef-alt'
        },
        { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
          title: 'Web Accessibility Tutorials : Images',
          url:   'https://www.w3.org/WAI/tutorials/images/'
        },
        { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
          title: 'Diagram Center: Image Description',
          url:   'http://diagramcenter.org/making-images-accessible.html'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'G94: Providing text alternative for non-text content that serves the same purpose and presents the same information as the non-text content',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G94'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'G95: Providing text alternatives that provide a brief description of the non-text content',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G95'
        },
        { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
          title: 'WebAIM: Alternative Text',
          url:   'https://webaim.org/techniques/alttext/'
        },
        { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
          title: 'Accessibility at Penn State: Text Equivalents for Images',
          url:   'https://accessibility.psu.edu/images/'
        }
      ]
    },

    IMAGE_2: {
      ID:         'Image 2',
      DEFINITION: 'The text alternative for @img@ elements and elements with @[role="img"]@ %s summarize the content and/or purpose of the image.',
      SUMMARY:    'Alt text %s summarize purpose',
      TARGET_RESOURCES_DESC: '@img@, [role="img"] with short descriptions',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S: 'Verify that the text alternative of the @img@ element or element with @[role="img"]@ accurately and succinctly summarizes the content and/or purpose of the image.',
        MANUAL_CHECK_P: 'Verify that the text alternative for each of the %N_MC @img@ elements and/or elements with @[role="img"]@ accurately and succinctly summarizes the content and/or purpose of the image.',
        HIDDEN_S: 'One @img@ element or element with @[role="img"]@ element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H @img@ elements and/or elements with @[role="img"]@ that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No @img@ elements and/or elements with @[role="img"]@ on this page.'
      },
      NODE_RESULT_MESSAGES: {
        ELEMENT_MC_1: 'Verify the @img@ element\'s text alternative accurately and succinctly summarizes the content and/or purpose of the image.',
        ELEMENT_MC_2: 'Verify the @%1[role=img]@ element\'s text alternative accurately and succinctly summarizes the content and/or purpose of the image.',
        ELEMENT_HIDDEN_1: '@img@ element was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: '@%1[role=img]@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSE: [
        'Images can convey a wide range of content and be used for many different purposes on a web page, from button and icon images that perform simple actions to complex graphics that help people visualize the features and relationships of large data sets.',
        'Markup supports creating both short and long text alternatives. A short text alternative is designed to orient people who cannot see the image to the type of content it contains or its purpose on the page.  A long text alternative or long description provides comprehensive details of the features of an image, e.g., the data used to generate a chart or graph, relationships in a flow chart, or a MathML version of a mathematical equation.',
        'Images that function as buttons and perform an action on the page should have a short text alternative that is as succinct as possible (e.g., "Increase text size").',
        'Informative images of photographs need a short text alternative and additionally can often benefit from long descriptions.',
        'Informative images of charts or graphs need both a short text alternative and a long description to describe its purpose and the data used to create it.',
        'If an image that is informative does not have text alternative content, users of assistive technologies will not have access to the information the image conveys.'
      ],
      TECHNIQUES: [
        'Use the @alt@ attribute on @img@ elements to provide a text alternative for the image. A rule of thumb is to use what you would say to someone over the phone to describe the image.',
        'The @aria-labelledby@ attribute can be used to provide a text alternative when images can be described using text already associated with the image, such as a visible caption, or for elements with @role="img"@.',
        'The @aria-label@ attribute should only be used to provide a text alternative in the special case when an element has a @role="img"@ attribute.',
        'The @title@ attribute will be used by assistive technologies to provide a text alternative if no other specification technique is found.  NOTE: Using the @title@ attribute will also generate a tooltip in some browsers.',
        'Use the attributes @alt=""@, @role="presentation"@ or include the image as a CSS @background-image@ to identify it as being used purely for stylistic or decorative purposes and that it should be ignored by people using assistive technologies.'
      ],
      MANUAL_CHECKS: [
        'Find each image on the page and verify that it is only being used decoratively or is redundant with other information on the page.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'HTML 5 Specification: 12.2 The @img@ element',
          url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-img-element'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @img@ role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#img'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-label@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-labelledby@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'HTML 4.01 Specification: 13.8 How to specify alternate text',
          url:   'https://www.w3.org/TR/html4/struct/objects.html#adef-alt'
        },
        { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
          title: 'Web Accessibility Tutorials : Images',
          url:   'https://www.w3.org/WAI/tutorials/images/'
        },
        { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
          title: 'Diagram Center: Image Description',
          url:   'http://diagramcenter.org/making-images-accessible.html'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'G94: Providing text alternative for non-text content that serves the same purpose and presents the same information as the non-text content',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G94'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'G95: Providing text alternatives that provide a brief description of the non-text content',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G95'
        },
        { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
          title: 'WebAIM: Alternative Text',
          url:   'https://webaim.org/techniques/alttext/'
        },
        { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
          title: 'Accessibility at Penn State: Text Equivalents for Images',
          url:   'https://accessibility.psu.edu/images/'
        },
        { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
          title: 'Diagram Center: Digital Image And Graphic Resources for Accessible Materials',
          url:   'https://diagramcenter.org/'
        }

      ]
    },

    IMAGE_3: {
      ID:         'Image 3',
      DEFINITION: 'The source filename of the image element %s not be part of its text alternative.',
      SUMMARY:    'Alt text %s not include filename',
      TARGET_RESOURCES_DESC: '@img@, @area@ and @[role="img"]@ elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Change the value of the @alt@ attribute on the image element to summarize the purpose of the image without referencing its source filename.',
        FAIL_P:   'Change the value of the @alt@ attribute on the %N_F out of %N_T image elements to summarize the purpose of each image without referencing its source filename.',
        HIDDEN_S: 'One image element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H image elements that are hidden were not evaluated.',
        NOT_APPLICABLE:  'No @img@, @area@ or @[role="img"]@ elements found on this page.'
      },
      NODE_RESULT_MESSAGES: {
        ELEMENT_PASS_1: 'The text alternative does not contain the source filename.',
        ELEMENT_FAIL_1: 'Change the text alternative to summarize the purpose of the image without referencing its source filename.',
        ELEMENT_HIDDEN_1: '@%1@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSE: [
        'A text alternative should summarize the purpose of an image for people with visual impairments.',
        'The source filename of the image should not be included because generally it is not useful information.',
        'An image with a text alternative that is an empty string is ignored by assistive technologies, and indicates that it is being used for styling purposes rather than meaningful content.'
      ],
      TECHNIQUES: [
        'A text alternative should describe the purpose of an image as succinctly as possible (preferably with no more than 100 characters). Do not include the source filename as part of the text content.',
        'The @alt@ attribute is the preferred and most commonly used way to provide a text alternative for @img@ and @area@ elements.',
        'The @aria-labelledby@ attribute can be used to provide a text alternative when images can be described using text already associated with the image, such as a visible caption, or for elements with @role="img"@.',
        'The @aria-label@ attribute should only be used to provide a text alternative in the special case when an element has a @role="img"@ attribute.',
        'The @title@ attribute will be used by assistive technologies to provide a text alternative if no other specification technique is found.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'HTML 4.01 Specification: 13.8 How to specify alternate text',
          url:   'https://www.w3.org/TR/html4/struct/objects.html#adef-alt'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'G94: Providing text alternative for non-text content that serves the same purpose and presents the same information as the non-text content',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G94'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'G95: Providing text alternatives that provide a brief description of the non-text content',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G95'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'F30: Failure of Success Criterion 1.1.1 and 1.2.1 due to using text alternatives that are not alternatives (e.g., filenames or placeholder text)',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F30'
        }
      ]
    },

    IMAGE_4_EN: {
      ID:         'Image 4 (English)',
      DEFINITION: 'The text alternative  for an image %s be no more than 100 characters in length.',
      SUMMARY:    'Alt text no more than 100 characters',
      TARGET_RESOURCES_DESC: '@img@, @area@ and @[role="img"]@ elements',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S: 'Verify the image with the text alternative longer than 100 characters could not be reworded more succinctly or be rewritten to use a long description.',
        MANUAL_CHECK_P: 'Verify the %N_MC images with text alternatives longer than 100 characters can not be reworded more succinctly or be rewritten to use long descriptions.',
        HIDDEN_S: 'One image element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H image elements that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No @img@ or @[role="img"]@ elements on this page.'
      },
      NODE_RESULT_MESSAGES: {
        ELEMENT_PASS_1: 'The text alternative is %1 characters long.',
        ELEMENT_MC_1:   'The text alternative is %1 characters long. Check its content to determine whether it can be reworded to be no more than 100 characters. Also consider providing a long description using the @aria-describedby@, @title@ or @longdesc@ attribute, which would then allow shortening the text alternative content.',
        ELEMENT_HIDDEN_1: '@%1@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSE: [
        'A text alternative should summarize the purpose of an image as succinctly as possible for people with visual impairments.',
        'Overly long text alternatives can reduce usability by increasing the time it takes to read a web page and understand the significance of the included images.',
        'An image with a text alternative that is an empty string (e.g. @alt=""@) is ignored by assistive technologies, and indicates that it is being used for purely decorative, spacing or stylistic purposes rather than for meaningful content.'
      ],
      TECHNIQUES: [
        'A text alternative (e.g. in English and many other Western languages) should describe the purpose of an image as succinctly as possible (preferably with no more than 100 characters).',
        'If a text alternative requires more than 100 characters, consider using the @aria-describedby@, @title@ or @longdesc@ attribute for a longer, more detailed description of the image, along with shortening the text alternative content.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'HTML 4.01 Specification: 13.8 How to specify alternate text',
          url:   'https://www.w3.org/TR/html4/struct/objects.html#adef-alt'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'G94: Providing text alternative for non-text content that serves the same purpose and presents the same information as the non-text content',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G94'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'G95: Providing text alternatives that provide a brief description of the non-text content',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G95'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'F30: Failure of Success Criterion 1.1.1 and 1.2.1 due to using text alternatives that are not alternatives (e.g., filenames or placeholder text)',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F30'
        }
      ]
    },

    IMAGE_5: {
      ID:         'Image 5',
      DEFINITION: 'Verify an image with @[alt=""]@ or @[role="presentation"]@ is only being used for purely decorative, spacing or stylistic purposes.',
      SUMMARY:    'Verify image is decorative',
      TARGET_RESOURCES_DESC: '@img[alt=""]@, @img[role="presentation"]@, @[role="img"]@ with an empty text alternative',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S: 'Verify the image is being used purely for decorative, spacing or styling purposes.',
        MANUAL_CHECK_P: 'Verify the %N_MC images are being used purely for decorative, spacing or styling purposes.',
        HIDDEN_S: 'One @img@ element or element with @[role="img"]@ element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H @img@ elements and/or elements with @[role="img"]@ that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No @img@ elements or elements with @[role="img"]@ on this page.'
      },
      NODE_RESULT_MESSAGES: {
        ELEMENT_MC_1: 'Verify that the @img@ element is used only for decorative, spacing or styling purposes.',
        ELEMENT_MC_2: 'Verify that the @%1[role=img]@ element is used only for decorative, spacing or styling purposes.',
        ELEMENT_HIDDEN_1: '@img@ element was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: '@%1[role=img]@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSE: [
        'If an image is used purely for stylistic or decorative purposes, users of screen readers do not need to know that the image exists and no alternative is needed.',
        'If an image contains information, but is mistakenly identified as decorative, users of assistive technologies will not have access to the information.'
      ],
      TECHNIQUES: [
        'Use the attributes @alt=""@, @role="presentation"@ or include the image as a CSS @background-image@ to identify it as being used purely for stylistic or decorative purposes and that it should be ignored by people using assistive technologies.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'HTML 5 Specification: 12.2 The @img@ element',
          url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-img-element'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @presentation@ role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#presentation'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'CSS Backgrounds and Borders Module Level 3: The @background-image@ property',
          url:   'https://www.w3.org/TR/css3-background/#the-background-image'
        }
      ]
    },

    IMAGE_6: {
      ID:         'Image 6',
      DEFINITION: 'Complex images, charts or graphs (e.g. images generated from tabular data) %s have long descriptions to provide an additional detailed description of the information conveyed by the image.',
      SUMMARY:    'Long description for complex images',
      TARGET_RESOURCES_DESC: '@img@, [role="img"] that represent complex images and images generated from tabular data.',
      RULE_RESULT_MESSAGES: {
        FAIL_S: 'Update the undefined @idrefs@ of the @img@ element or element with @aria-describedby@ to include only defined @id@ values.',
        FAIL_P: 'Update the undefined @idrefs@ of the %N_MC @img@ elements and/or elements with @aria-describedby@ to include only defined @id@ values.',
        MANUAL_CHECK_S: 'Determine if the @img@ element or element with @[role="img"]@ can benefit from a long description, and if so, provide a detailed description of the content of the image.',
        MANUAL_CHECK_P: 'Determine if any of the %N_MC @img@ elements and/or elements with @[role="img"]@ can benefit from a long description, and for each that can, provide a detailed description of the content of the image.',
        HIDDEN_S: 'One @img@ element or element with @[role="img"]@ element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H @img@ elements and/or elements with @[role="img"]@ that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No @img@ elements and/or elements with @[role="img"]@ on this page.'
      },
      NODE_RESULT_MESSAGES: {
        ELEMENT_FAIL_1: 'The @aria-describedby@ attribute references undefined @id@ value(s): %1.',
        ELEMENT_MC_1: 'Verify the @img@ element\'s long description "%1" (from @aria-describedby="%1"@) provides a detailed description of the information conveyed by the image.',
        ELEMENT_MC_2: 'Verify the @%1[role=img]@\'s long description "%1" (from @aria-describedby="%1"@) provides a detailed description of the information conveyed by the image.',
        ELEMENT_MC_3A: 'Update the @title@ attribute content to provide additional information than what is already available in the @alt@ attribute for it to become a long description.',
        ELEMENT_MC_3: 'Verify the @img@ element\'s long description "%1" (from @title@) provides a detailed description of the information conveyed by the image.',
        ELEMENT_MC_4: 'Verify the @%1[role=img]@\'s long description "%1" (from @title@) provides a detailed description of the information conveyed by the image.',
        ELEMENT_MC_5: 'Verify the @img@ element\'s long description defined using @longdesc="%1"@ provides a detailed description of the information conveyed by the image.',
        ELEMENT_MC_6: 'Verify the @%1[role=img]@\'s long description defined using @longdesc="%2"@ provides a detailed description of the information conveyed by the image.',
        ELEMENT_MC_7: 'Determine whether the @img@ element is a complex image, chart or graph that needs a long description, and whether the text alternative could be used to indicate the presence and location of the long description.',
        ELEMENT_MC_8: 'Determine if the  @%1[role=img]@ element is a complex image, chart or graph that needs a long description, and whether the text alternative could be used to indicate the presence and location of the long description.',
        ELEMENT_HIDDEN_1: '@img@ element was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: '@%1[role=img]@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSE: [
        'A long description should provide more information and detail than the text alternative for the image (e.g. @alt@ attribute).',
        'Images can convey a wide range of content and be used for many different purposes on a web page, from purely decorative to complex graphics helping people visualize the features and relationships of large data sets.',
        'All users can benefit from long descriptions by providing another modality for the author to convey information contained in the image and by providing search engines with information to more accurately return relevant results.',
        'Informative images of photographs or paintings can often benefit from long descriptions.',
        'Informative images like charts or graphs need long descriptions to describe the data used to create the chart or graph.'
      ],
      TECHNIQUES: [
        'Ideally, the long description of an image should be accessible to all users by including it as part of the page content, and in close proximity to the image it describes.',
        'Use the @aria-describedby@ attribute to reference one or more @id@s on the page that contain the long description. When this technique is used, assistive technologies extract the text content of the referenced @id@s and make it available as concatenated, unstructured text (i.e., stripping out any list markup, links, paragraphs, etc.).',
        'Use the @title@ attribute to provide a long description.',
        'Use the @alt@ attribute or equivalent markup to indicate the presence and location of the long description when it consists of structured content (e.g. tabular data, lists, links) in close proximity to the image. For example, @alt="..., for more information view the following data table"@.',
        'Use the @longdesc@ attribute, which requires a URI value, to link to a long description for an image. NOTES: (1) The URI can be an internal link on the same page as the image, or a link to an external page or a fragment thereof. (2) There is a discoverability problem with this technique in that the description will typically only be available to screen reader users. Therefore, until browser implementations for @longdesc@ have improved, alternative techniques that enable all users to access the long description are preferred.',
        'Use techniques that allow all users to view the long description. For example, the @summary/details@ elements can be used when the author prefers the detailed description to be initially hidden from users.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'HTML 5 Specification: 12.2 The @img@ element',
          url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-img-element'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @img@ role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#img'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-describedby@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-describedby'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'HTML5 Image Description Extension (longdesc)',
          url:   'https://www.w3.org/TR/html-longdesc/'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'HTML 4.01 Specification: 13.8 How to specify alternate text',
          url:   'https://www.w3.org/TR/html4/struct/objects.html#adef-alt'
        },
        { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
          title: 'Web Accessibility Tutorials : Images',
          url:   'https://www.w3.org/WAI/tutorials/images/'
        },
        { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
          title: 'Diagram Center: Image Description',
          url:   'http://diagramcenter.org/making-images-accessible.html'
        },
        { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
          title: 'G94: Providing text alternative for non-text content that serves the same purpose and presents the same information as the non-text content',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G94'
        },
        { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
          title: 'WebAIM: Alternative Text',
          url:   'https://webaim.org/techniques/alttext/'
        },
        { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
          title: 'Accessibility at Penn State: Text Equivalents for Images',
          url:   'https://accessibility.psu.edu/images/'
        },
        { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
          title: 'Diagram Center: Digital Image And Graphic Resources for Accessible Materials',
          url:   'https://diagramcenter.org/'
        }
      ]
    },

    IMAGE_7: {
      ID:         'Image 7',
      DEFINITION: 'Mathematical expressions %s be marked up using MathML instead of bitmapped images.',
      SUMMARY:    'Use MathML for mathematical expressions',
      TARGET_RESOURCES_DESC: '@img@ and [role="img"] elements representing mathematical expressions',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S: 'If the @img@ element or element with @[role="img"]@ represents a mathematical expression, convert the image content to MathML.',
        MANUAL_CHECK_P: 'If the %N_MC @img@ elements and/or elements with @[role="img"]@ represents a mathematical expression, convert the image content to MathML.',
        HIDDEN_S: 'The @img@ element or element with @[role="img"]@ element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H @img@ elements and/or elements with @[role="img"]@ that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No @img@ elements and/or elements with @[role="img"]@ on this page.'
      },
      NODE_RESULT_MESSAGES: {
        ELEMENT_MC_1: 'If the @img@ element represents a mathematical expression, convert the image content to MathML.',
        ELEMENT_MC_2: 'If the @%1[role=img]@ element represents a mathematical expression, convert the image content to MathML.',
        ELEMENT_HIDDEN_1: '@img@ element was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: '@%1[role=img]@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSE: [
        'Images used to convey mathematical expressions are not accessible to people with disabilities using assistive technologies.',
        'MathML is a W3C standard for representing mathematical expressions for web technologies and is the most accessible web math format for people using assistive technologies.',
        'MathML has capabilities similar to SVG graphics, providing the abilities to resize and style content without the loss of fidelity of the visual rendering to match the capabilities of people with visual impairments.'
      ],
      TECHNIQUES: [
        'Use MathML to represent the mathematical expressions.',
        'Use MathJax to support MathML rendering in a wide range of browsers with and without native support for rendering MathML.',
        'Design Science MathPlayer is a universal math reader that now enables math to be spoken in many assistive technology products.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        {type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'Mathematical Markup Language (MathML) Version 3.0',
          url:   'https://www.w3.org/TR/MathML/'
        },
        {type:  OpenAjax.a11y.REFERENCES.REFERENCE,
          title: 'MathJax Javascript Library',
          url:   'https://www.mathjax.org/'
        },
        {type:  OpenAjax.a11y.REFERENCES.REFERENCE,
          title: 'PSU Accessibility: MathML and MathJax',
          url:   'https://accessibility.psu.edu/math/mathml/'
        },
        {type:  OpenAjax.a11y.REFERENCES.REFERENCE,
          title: 'Design Science: Math Type',
          url:   'https://www.dessci.com/en/products/mathtype/'
        },
        {type:  OpenAjax.a11y.REFERENCES.REFERENCE,
          title: 'Design Science: Math Player',
          url:   'https://www.dessci.com/en/products/mathplayer/'
        },
        {type:  OpenAjax.a11y.REFERENCES.REFERENCE,
          title: 'MathML in Daisy',
          url:   'https://www.daisy.org/project/mathml'
        },
        {type:  OpenAjax.a11y.REFERENCES.REFERENCE,
          title: 'EPUB 3 Accessibility Guidelines: MathML',
          url:   'https://www.idpf.org/accessibility/guidelines/content/mathml/desc.php'
        },
        {type:  OpenAjax.a11y.REFERENCES.REFERENCE,
          title: 'W3C Math Wiki: MathML Tools',
          url:   'https://www.w3.org/Math/wiki/Tools'
        }
      ]
    }
  }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

  //
  //  OAA Rules title and message string National Language Support (NLS)
  //
  rules: {
    HEADING_1: {
      ID:                    'Heading 1',
      DEFINITION:            'The page %s contain at least one @h1@ element identifying and describing the main content of the page.',
      SUMMARY:               'Page %s have @h1@ element',
      TARGET_RESOURCES_DESC: '@h1@ and @body@ elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Add a descriptive @h1@ element at the beginning of the main content of the page.',
        FAIL_P:   'Add a descriptive @h1@ element at the beginning of the main content of the page.',
        HIDDEN_S: 'One @h1@ element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H @h1@ elements that are hidden were not evaluated.'
      },
      NODE_RESULT_MESSAGES: {
        PAGE_PASS_1:     'Page has @h1@ element.',
        PAGE_FAIL_1:     'Add an @h1@ element at the beginning of the main content of the page.',
        ELEMENT_PASS_1:  '@h1@ element contributes to passing this rule.',
        ELEMENT_FAIL_1:  'Add an accessible name to the @h1@ element that describes the main content of the page.',
        ELEMENT_HIDDEN_1:'The @h1@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSE: [
        'An @h1@ heading provides an important navigation point for users of assistive technologies, allowing them to easily find the main content of the page.',
        'An @h1@ heading is often also used in the banner of a web page to identify and describe the website.',
        'Home pages of websites often have a variety of "main" sections (e.g. navigation links, news, calendars, ...) that could be considered having somewhat equal potential interest by a visitor, these sections could each be identified using @h1@ headings.'
      ],
      TECHNIQUES: [
        'Include an @h1@ element at the beginning of the main content.',
        'The accessible name of the @h1@ element should describe the main content of the page.',
        'The accessible name of the @h1@ element in the banner of the page, should identify and describe the website.',
        'The @h1@ element should be visible graphically and to assistive technologies. It should not be hidden using CSS techniques.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'HTML 4.01 Specification: The @h1@ element',
          url:   'https://www.w3.org/TR/html4/struct/global.html#edef-H1'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'G130: Providing descriptive headings',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G130'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'G141: Organizing a page using headings',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G141'
        },
        { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Headings',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/headings/'
        }
      ]
    },
    HEADING_2: {
      ID:                    'Heading 2',
      DEFINITION:            'If the page contains @h1@ element and either a @main@ or @banner@ landmark, the @h1@ element %s be a child of either the main or @banner@ landmark.',
      SUMMARY:               '@h1@ %s be in @main@ or @banner@ landmark',
      TARGET_RESOURCES_DESC: '@h1@ elements and elements with ARIA attribute @role="main"@ or @role="banner"@ ',
      RULE_RESULT_MESSAGES: {
        FAIL_S: 'Move the @h1@ element inside (and preferably at the beginning) of the @main@ element, or change the @h1@ element to another heading level.',
        FAIL_P: 'Move the %N_F @h1@ elements inside (and preferably at the beginning) of @main@ or @banner@ landmark elements, or change the @h1@ elements to other heading levels.',
        HIDDEN_S: 'One @h1@ element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H @h1@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No @h1@ elements and either a @main@ or @banner@ landmark.'
      },
      NODE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   'The @h1@ is a child element of a @main@ landmark.',
        ELEMENT_PASS_2:   'The @h1@ is a child element of a @banner@ landmark.',
        ELEMENT_FAIL_1:   'Position the @h1@ element as one of the first child elements of a @main@ landmark to mark the beginning of main content to identify the main content of this page, or within the @banner@ landmark to provide a label for the website.',
        ELEMENT_HIDDEN_1: 'The @h1@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSE: [
        'An @h1@ heading should primarily be used to identify the content on the specific page within the website and be placed at the beginning of the main content to provide an important navigation point for users of assistive technologies, allowing them to easily find the main content of the page.',
        'An @h1@ heading can also be used (but not required) to provide a label for the website and when it is used for this purpose it should be placed in the @banner@ element.',
        'Including both a @main@ landmark and an @h1@ element provides a redundant way for users of assistive technologies to find the main content of a web page.'
      ],
      TECHNIQUES: [
        'This rule supports the coding practice of reserving the @h1@ element for titling the main content area of a web page.',
        'Include an @h1@ element at the beginning of each @main@ landmark.',
        'The @h1@ element should describe the main content or purpose of the page.',
        'If there is more than one @main@ landmark, use the @aria-labelledby@ attribute on each to reference an @h1@ element that provides its accessible name.',
        'An @h1@ element being used to label the the website must be placed inside the @banner@ element.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'HTML 4.01 Specification: The @h1@ element',
          url:   'https://www.w3.org/TR/html4/struct/global.html#edef-H1'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: @main@ role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#main'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: @banner@ role',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#banner'
        },
        { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Page Structure',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/'
        }
      ]
    },
    HEADING_3: {
      ID:                    'Heading 3',
      DEFINITION:            'The accessible names of sibling heading elements of the same level %s be unique.',
      SUMMARY:               'Sibling headings %s be unique',
      TARGET_RESOURCES_DESC: 'Heading elements',
      RULE_RESULT_MESSAGES: {
        FAIL_P: 'Update the accessible names of the %N_F sibling heading elements of the same level to be unique.',
        HIDDEN_S: 'One heading element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H heading elements that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No sibling heading elements of the same level were found on the page.'
      },
      NODE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:    'The %1 heading content is unique among its sibling headings.',
        ELEMENT_FAIL_1:  'Change the accessible name of %1 heading to make it unique among its sibling headings.',
        ELEMENT_HIDDEN_1:  'The %1 element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSE: [
        'If section headings that share the same parent heading are NOT unique, users of assistive technologies will not be able to discern the differences among sibling sections of the web page.'
      ],
      TECHNIQUES: [
        'Make sure the accessible names of sibling headings that share the same parent heading help users understand the unique content of each section they describe.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'HTML 4.01 Specification: Headings: The H1, H2, H3, H4, H5, H6 elements',
          url:   'https://www.w3.org/TR/html4/struct/global.html#edef-H1'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'G130: Providing descriptive headings',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G130'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'G141: Organizing a page using headings',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G141'
        },
        { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Headings',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/headings/'
        }
      ]
    },
    HEADING_5: {
      ID:                    'Heading 5',
      DEFINITION:            'Heading elements %s be properly nested on the page.',
      SUMMARY:               'Headings %s be properly nested',
      TARGET_RESOURCES_DESC: 'Heading elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:  'Review the entire heading structure and update the heading levels so that the heading element is properly nested in relation to the %N_T headings on the page.',
        FAIL_P:  'Review the entire heading structure and update the heading levels so that the %N_F heading elements are properly nested in relation to the %N_T headings on the page.',
        HIDDEN_S: 'One heading element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H heading elements that are hidden were not evaluated.',
        NOT_APPLICABLE: 'No heading elements or only one heading element on this page.'
      },
      NODE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   'The %1 element is properly nested.',
        ELEMENT_PASS_2:   'All heading elements are properly nested',
        ELEMENT_FAIL_1:   'Adjust the level of the %1 element or other heading elements so that the headings are properly nested on the page.',
        ELEMENT_FAIL_2:   'Adjust the heading levels of the parent %1 element or this %2 element so that the headings are properly nested on the page.',
        ELEMENT_HIDDEN_1: 'The %1 element was not evaluated because it is hidden from assistive technologies.',
        ELEMENT_HIDDEN_2: 'The %1 element has not text content either add content, or remove it from the page if it is not needed.'
      },
      PURPOSE: [
        'Heading elements that are properly nested help users of assistive technologies understand the structure of the information on the web page.'
      ],
      TECHNIQUES: [
        'Include headings elements at the proper level for each section of a web page.',
        'Use headings as labels for ARIA landmarks to provide a redundant way for users of assistive technologies to navigate the page (i.e. header or landmark navigation).',
        'Check headings against other headings in the document to make sure they uniquely describe the content of each section of the web page.',
        'If headings are too similar to each other, users of assistive technologies will not be able to use them to understand the differences between sections of the web page.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'HTML 4.01 Specification: Headings: The H1, H2, H3, H4, H5, H6 elements',
          url:   'https://www.w3.org/TR/html4/struct/global.html#edef-H1'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'G130: Providing descriptive headings',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G130'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'G141: Organizing a page using headings',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G141'
        },
        { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Headings',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/headings/'
        }
      ]
    },
    HEADING_6: {
      ID:                    'Heading 6',
      DEFINITION:            'Heading elements %s have visible text content.',
      SUMMARY:               'Headings %s have text content',
      TARGET_RESOURCES_DESC: 'Heading elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'For the heading element with only image content, replace the image with text content styled using CSS.',
        FAIL_P:   'For the %N_F heading elements with only image content, replace the images with text content styled using CSS.',
        HIDDEN_S: 'One heading element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H heading elements that are hidden were not evaluated.',
        NOT_APPLICABLE:  'No headings with only image content.'
      },
      NODE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   'The %1 element contains visible text content.',
        ELEMENT_FAIL_1: 'Add visible text content to the %1 element.',
        ELEMENT_FAIL_2: 'The %1 element does not have an accessible name.  Either remove the heading from the page or add visible text content to describe the section.',
        ELEMENT_HIDDEN_1: 'The %1 element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSE: [
        'Heading elements that consist only of image content are not easily restyled for readabilty by people with low vision.'
      ],
      TECHNIQUES: [
        'Use CSS instead of images to style heading text content.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'HTML 4.01 Specification: Headings: The H1, H2, H3, H4, H5, H6 elements',
          url:   'https://www.w3.org/TR/html4/struct/global.html#edef-H1'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'C22: Using CSS to control visual presentation of text',
          url:   'https://www.w3.org/TR/WCAG20-TECHS/C22'
        },
        { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
          title: 'W3C Web Accessibility Tutorials: Headings',
          url:   'https://www.w3.org/WAI/tutorials/page-structure/headings/'
        }
      ]
    },
    HEADING_7: {
      ID:                    'Heading 7',
      DEFINITION:            'If a @contentinfo@, @complementary@, @form@, @navigation@ or @search@ landmark contains a heading element, the first heading should be an @h2@ element.',
      SUMMARY:               'First landmark heading @h2@',
      TARGET_RESOURCES_DESC: '@contentinfo@, @complementary@, @form@, @navigation@ or @search@ landmarks elements',
      RULE_RESULT_MESSAGES: {
        FAIL_S:   'Adjust the heading structure within the landmark so that the first heading is an @h2@ element.',
        FAIL_P:   'Adjust the heading structures of the %N_F landmarks with headings so that the first heading of each is an @h2@ element.',
        HIDDEN_S: 'One @h2@ element that is hidden was not evaluated.',
        HIDDEN_P: '%N_H @h2@ elements that are hidden were not evaluated.',
        NOT_APPLICABLE:  'No headings in landmarks, or no landmarks on the page.'
      },
      NODE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:   'The @h2@ element is the first heading in the landmark.',
        ELEMENT_FAIL_1: 'Adjust the headings in the %1 landmark to ensure that the first heading is an @h2@ element instead of an @%2@.',
        ELEMENT_HIDDEN_1: 'The @h2@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSE: [
        'Headings provide a redundant way for people to navigate and orient themselves to content on a web page.',
        'The use of an @h2@ element as the first heading in a landmark (except the @main@ and @banner@ landmarks) supports a consistent use of headings for finding the main sections in a web page.'
      ],
      TECHNIQUES: [
        'Locate an @h2@ element at the beginning of the content in the landmark to describe the content in the landmark.',
        'The @h2@ element can be used as the accessible name for a landmark using the @aria-labelledby@ attribute on the landmark to point to an @id@ attribute on the @h2@ element.',
        'The @h2@ element can be hidden from the graphical rendering using offscreen CSS positioning (e.g. @position: absolute@ )techniques.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: landmark roles',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#landmark'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'HTML 4.01 Specification: Headings: The H2 elements',
          url:   'https://www.w3.org/TR/html4/struct/global.html#edef-H2'
        }
      ]
    },
        // ----------------------------------------------------------------
        // LANDMARK_8: Headings nested in landmarks
        // ----------------------------------------------------------------

        HEADING_8: {
            ID:         'Heading 8',
            DEFINITION: 'Headings %s be properly nested within a landmark.',
            SUMMARY:    'Headings nested in landmarks',
            TARGET_RESOURCES_DESC: 'Landmark elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Review the heading structure within the landmark and adjust the heading levels such that all are properly nested.',
              FAIL_P:   'Review the heading structure for each landmark with more than one heading, and adjust the heading levels in each landmark such that all headings are properly nested.',
              HIDDEN_S: 'If the hidden heading element is supposed to be visible to assistive technologies, style it to be positioned off-screen.',
              HIDDEN_P: 'If any of the %N_H hidden heading elements are supposed to be visible to assistive technologies, style them to be positioned off-screen.',
              NOT_APPLICABLE: 'No nested headings found in landmarks.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   '@%1@ heading is properly nested in the @%2@ landmark.',
              ELEMENT_FAIL_1:   'Adjust the level of the @%1@ heading or other heading elements such that the headings are properly nested in the @%2@ landmark.',
              ELEMENT_FAIL_2:   'Add text content to @%1@ element that describes the section it labels or remove it from the @%2@ landmark.',
              ELEMENT_FAIL_3:   'Adjust the level of either the parent @%1@ heading or this @%2@ heading such that they are properly nested in the @%3@ landmark.',
              ELEMENT_HIDDEN_1: 'The @%1@ heading in the @%2@ landmark was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2: 'The @%2@ landmark was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              // TODO: what is the purpose?
              'Headings provide a way to indicate the structure and to label the sections of content within a landmark.',
              'Headings and there associated heading levels provide a way for people using assistive technology to understand and navigate the structure of the content within a landmark.'
            ],
            TECHNIQUES: [
              // TODO: what are the techniques?
              'Use an @h1@ element for the first heading in @main@ landmarks.',
              'Use an @h2@ element for the first heading in other top level landmarks.',
              'Use heading elements to identify the content of each section within a landmark.',
              'Properly nest of heading elements within a landmark (e.g. @h2@ follows @h1@ headings, @h3@ follows @h2@ headings, ...).'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: contentinfo role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#contentinfo'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'W3C Web Accessibility Tutorials: Page Structure',
                url:   'https://www.w3.org/WAI/tutorials/page-structure/'
              }
            ]
        }
    }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */


OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

    //
    //  OAA Rules title and message string National Language Support (NLS)
    //
    rules: {
         HTML_1: {
            ID:                    'HTML 1',
            DEFINITION:            '@strong@, @em@ or in some cases @h1-h6@ heading elements %s be used instead of @b@ and @i@ elements.',
            SUMMARY:               'Replace @b@ and @i@ elements',
            TARGET_RESOURCES_DESC: '@b@ and @i@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Change the @b@ or @i@ element to a @strong@ or @em@ element or, if appropriate, an @h1-h6@ element.',
              FAIL_P:   'Change the @b@ or @i@ elements to @strong@ or @em@ elements or, if appropriate, @h1-h6@ elements.',
              HIDDEN_S: 'If the hidden @b@ or @i@ element becomes visible, it should be changed to a @strong@, @em@ or possibly an @h1-h6@ element.',
              HIDDEN_P: 'If any of the %N_H hidden @b@ or @i@ elements become visible, they should be changed to @strong@, @em@ or possibly @h1-h6@ elements.',
              NOT_APPLICABLE:  'No @b@ or @i@ elements found on the page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_FAIL_1: 'Change the @b@ element to a @strong@ element or to a heading element (i.e. @h1-h6@), depending on its purpose in the page.',
              ELEMENT_HIDDEN_1: '@b@ element is hidden, but should be changed to a @strong@ element or to a heading element (i.e. @h1-h6@), depending on its purpose in the page, in case it becomes visible.',
              ELEMENT_FAIL_2: 'Change the @i@ element to an @em@ element or to a heading element (i.e. @h1-h6@), depending on its purpose in the page.',
              ELEMENT_HIDDEN_2: '@i@ element is hidden, but should be changed to an @em@ element or to a heading element (i.e. @h1-h6@), depending on its purpose in the page, in case it becomes visible.'
            },
            PURPOSE: [
              'In inline formatting use, the @b@ and @i@ elements do not convey the semantics of the text content.',
              'The @b@ and @i@ elements are often misused for emphasizing words in a sentence, or to change the styling of content being used as a section header in the page.'
            ],
            TECHNIQUES: [
              'If a @b@ element is being used in a sentence for emphasizing a word or phrase, replace it with the @strong@ element.',
              'If an @i@ element is being used in a sentence for emphasizing a word or phrase, replace it with the @em@ element.',
              'If a @b@ or @i@ element is being used to style a section heading, replace it with an @h1-h6@ heading element, depending on the level of heading needed in accordance with the structure of the page.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: Headings: The em and strong elements',
                url:   'https://www.w3.org/TR/html4/struct/text.html#edef-EM'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: Headings: The H1-H6 elements',
                url:   'https://www.w3.org/TR/html4/struct/global.html#edef-H2'
              }
            ]
        },
        HTML_2: {
            ID:                    'HTML 2',
            DEFINITION:            '@marquee@ elements %s be removed to improve readability of content.',
            SUMMARY:               'Replace @marquee@ elements',
            TARGET_RESOURCES_DESC: '@marquee@ element',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Replace the @marquee@ element with a standard HTML element. Use CSS techniques to style the content, and JavaScript to provide controls that stop and start the scrolling.',
              FAIL_P:   'Replace the %N_F @marquee@ elements with standard HTML elements. Use CSS techniques to style the content, and JavaScript to provide controls that stop and start the scrolling.',
              HIDDEN_S: 'If the hidden @marquee@ element becomes visible, it must be changed to a standard HTML element.  Use CSS techniques to style the content, and JavaScript to provide controls that stop and start the scrolling.',
              HIDDEN_P: 'If any of the %N_H hidden @marquee@ elements become visible, they must be changed to standard HTML elements. Use CSS techniques to style the content, and JavaScript to provide controls that stop and start the scrolling.',
              NOT_APPLICABLE:  'No @marquee@ elements found on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_FAIL_1: 'Change the @marquee@ element to a standard HTML element. Use CSS techniques to style the content, and JavaScript to provide controls that stop and start the scrolling.',
              ELEMENT_HIDDEN_1: '@marquee@ element is hidden, but should be changed to a standard HTML element, in case it becomes visible. Use CSS techniques to style the content, and JavaScript to provide controls that stop and start the scrolling.'
            },
            PURPOSE: [
              'Automatically moving text cannot be read by many people with visual impairments or by people with learning disabilities that affect reading.'
            ],
            TECHNIQUES: [
              'Replace the @marquee@ element with a standard HTML element and use CSS techniques to style the content.',
              'By default, when the page loads, the marquee should be paused.',
              'Use Javascript to provide buttons that start and stop the scrolling of content in the marquee.',
              'Provide a means to see all of the content in the marquee at one time.'
            ],
            MANUAL_CHECKS: [
              'Verify that when the page loads, the content is not scrolling.',
              'Verify that there are start and pause buttons that start and stop the scrolling of content.'
            ],
            INFORMATIONAL_LINKS: [
            ]
        },
        HTML_3: {
            ID:         'HTML 3',
            DEFINITION: 'Some HTML elements are restricted in the role allowed based on the semantics of the element (e.g. @li@ elements can only have list related ARIA roles).',
            SUMMARY:    'Role is not allowed',
            TARGET_RESOURCES_DESC: '',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Remove or update the role to an allowed role on the element',
              FAIL_P:   'Remove or update the roles to an allowed role on the %N_F elements',
              MANUAL_CHECK_S: 'The explict role on the element can be removed, since it is redundant with the implict role of the element.',
              MANUAL_CHECK_P: 'The explict role on the %N_MC elements can be removed, since they are redundant with the implict role of each element.',
              HIDDEN_S: 'If the hidden element becomes visible, it\'s role must be removed or updated.',
              HIDDEN_P: 'If any of the %N_H hidden elements become visible, it\'s role must be removed or updated to an allowed role.',
              NOT_APPLICABLE:  'No elements with role restrictions found on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_FAIL_1: 'The @%1@ element with the @%2@ and @%3@ attributes does not allow the implict role of the element to be changed.  Remove the @%4@ role from the element.',
              ELEMENT_FAIL_2: 'The @%1@ element with the @%2@ attribute does not allow the implict role of the element to be changed.  Remove the @%3@ role from the element.',
              ELEMENT_FAIL_3: 'The @%1@ element with an accessible name (e.g. using @aria-label@ or @aria-labelledby@) does not allow the implict role of the element to be changed.  Remove the @%2@ role from the element.',
              ELEMENT_FAIL_4: 'The @%1@ element does not allow the implict role of the element to be changed.  Remove the @%2@ role from the element.',
              ELEMENT_FAIL_5: 'The @%1@ element with the @%2@ and @%3@ attributes does not allow the @%4@ role.  Either remove the role or change it to one of the following allowed values: %5.',
              ELEMENT_FAIL_6: 'The @%1@ element with the @%2@ attribute does not allow the @%3@ role.  Either remove the role or change it to one of the following allowed values: @%4@.',
              ELEMENT_FAIL_7: 'The @%1@ element with an accessible name (e.g. using @aria-label@ or @aria-labelledby@) does not allow @%2@ role. Either remove the role or change it to one of the following allowed values: @%3@.',
              ELEMENT_FAIL_8: 'The @%1@ element does not allow the @%2@ role.  Either remove the role or change it to one of the following allowed values: @%3@.',
              ELEMENT_MC_1: 'The explict @%1@ role is the same as the native semantic role of the @%2@ element.  Defining the explict role is not recommended, and should be removed to ensure the semantics of the element are properly represented in accessibility APIs.',
              ELEMENT_HIDDEN_1: '@%1@ element is hidden, the @%2@ role must be removed before it becomes visible.',
              ELEMENT_HIDDEN_2: '@%1@ element is hidden, the @%2@ role must be removed or changed to an allowed role before it becomes visible.'
            },
            PURPOSE: [
              'ARIA role attributes change the exposed meaning (semantics) of HTML elements to assisitve technologies.',
              'When a role conflicts with the implicit semantics of an HTML element the accessibility API provides confusing and/or conflicting information to screen readers.',
              'Role restrictions make sure roles enhance rather than conflict with the implicit semantcs of an HTML element.'
            ],
            TECHNIQUES: [
              'Some HTML elements do not allow any role to override of the implicit role, in this case the role must be removed.',
              'Some HTML elements only allow certain roles to override of the implicit role, in this case only the allowed roles can be used to override the implicit role.',
              'When the explict role is the same as the implicit role for an HTML element, the explict role should be removed to insure the native semantics of the element are properly represented in accessibility APIs.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'W3C ARIA in HTML',
                url:   'https://www.w3.org/TR/html-aria/'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'W3C WAI-ARIA Authoring Practices 1.2 (Editor\'s Draft)',
                url:   'https://w3c.github.io/aria-practices/'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'W3C HTML Accessibility API Mappings 1.0',
                url:   'https://www.w3.org/TR/html-aam-1.0/'
              },
            ]
        }
   }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

  //
  //  OAA Rules title and message string National Language Support (NLS)
  //
  rules: {

    KEYBOARD_1: {
      ID:                    'Keyboard 1',
      DEFINITION:            'Elements with ARIA widget roles %s have event handlers that support the keyboard interactions required by those roles.',
      SUMMARY:               'Widget roles require keyboard support',
      TARGET_RESOURCES_DESC: 'Elements with ARIA widget roles',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:  'Verify the element with the widget role has the keyboard interactions required by its role.',
        MANUAL_CHECK_P:  'Verify the %N_MC elements with widget roles have the keyboard interactions required by their roles.',
        HIDDEN_S:        'One hidden element with a widget role was not evaluated.',
        HIDDEN_P:        '%N_H hidden elements with widget roles were not evaluated.',
        NOT_APPLICABLE:  'No elements with widget roles on the page'
      },
      NODE_RESULT_MESSAGES: {
        ELEMENT_MC_1:     'Verify the "%1" event handlers on the element support the keyboard interactions required by the @%2@ widget role.',
        ELEMENT_MC_2:     'Verify the "%1" event handlers on ancestor elements, or on the document object, support the keyboard interactions required by the @%2@ widget role.',
        ELEMENT_MC_3:     'Verify the "%1" event handlers on the @%2@ owner widget (through @aria-owns@) support the keyboard interactions on its descendant components required by the @%3@ widget role.',
        ELEMENT_MC_4:     'Verify the "%1" event handlers on the widget subcomponents support the keyboard interactions required by the @%2@ widget role.',
        ELEMENT_MC_5:     'Verify the keyboard interaction required by the @%1@ widget role.',
        ELEMENT_HIDDEN_1: 'Element with @%1@ widget role was not evaluated because it is hidden.'
      },
      PURPOSE: [
        'Keyboard support is required by people who cannot use the mouse and/or gestures to select the options and perform the actions made available to them by interactive elements.',
        'Native HTML4 and HTML5 link and form control elements have default keyboard interactions that are built-in and standardized among browsers.',
        'When authors create custom interactive elements they need to support the keyboard interaction patterns that users have come to expect.',
        'The ARIA Authoring Practices Guide identifies the keyboard interaction patterns that users expect and can rely upon, based on each ARIA widget role.'
      ],
      TECHNIQUES: [
        'Use the ARIA Authoring Practices guide to identify the keyboard interaction support needed for each ARIA Widget role being used.',
        'Add custom @keydown@, @keypress@ and/or @keyup@ event handlers to support the keyboard interactions required by the ARIA widget role.',
        'Verify that keyboard interactions are consistent among browsers and devices (e.g., desktop computers and mobile devices using Bluetooth keyboards).'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1: Widget Roles',
          url:   'https://www.w3.org/TR/wai-aria-1.1/#widget_roles'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'WAI-ARIA Authoring Practices 1.1: Design Patterns and Widgets',
          url:   'https://www.w3.org/TR/wai-aria-practices-1.1/#aria_ex'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'Mozilla Developer Network: DOM on-event handlers',
          url:   'https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Event_handlers'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'Mozilla Developer Network: EventTarget.addEventListener()',
          url:   'https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
        },
        { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
          title: 'OAA Web Accessibility ARIA Examples',
          url:   'https://oaa-accessibility.org/examples/'
        }
      ]
    },
    KEYBOARD_2: {
      ID:                    'Keyboard 2',
      DEFINITION:            'All functionality provided by the interactive elements on the page %s be operable through the keyboard interface.',
      SUMMARY:               'Interactive functionality %s be keyboard operable',
      TARGET_RESOURCES_DESC: 'Links, form controls, widgets, @object@, @embed@ and @applet@ elements',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:   'Verify that the functionality provided by the link, form control, element with event handlers or embedded application is operable through the keyboard.',
        MANUAL_CHECK_P:   'Verify that the functionality provided by the %N_MC links, form controls, elements with event handlers and/or embedded applications is operable through the keyboard.',
        HIDDEN_S:         'The hidden link, form control, element with event handlers, @object@ or @applet@ element was not evaluated.',
        HIDDEN_P:         '%N_H hidden links, form controls, elements with event handlers, @object@ and/or @applet@ elements were not evaluated.',
        NOT_APPLICABLE:   'No interactive elements on the page.'
      },
      NODE_RESULT_MESSAGES: {
        PAGE_PASS_1:       'The interactive element on the page does not have an explicit @tabindex@ value or added event handlers that might change its default functionality or ARIA role.',
        PAGE_PASS_2:       'The @%1@ interactive elements on the page do not have explicit @tabindex@ values or added event handlers that might change their default functionalities or ARIA roles.',
        ELEMENT_PASS_1:    'The @%1@ element does not have an explicit @tabindex@ value or added event handlers that might change its default functionality or ARIA role.',
        PAGE_MC_1:         'Verify that the functionality provided by the added event handler or explicitly defined @tabindex@ value on the interactive element has the corresponding keyboard support.',
        PAGE_MC_2:         'Verify that the functionality provided by the added event handlers or explicitly defined @tabindex@ values on the %1 interactive elements has the corresponding keyboard support.',
        ELEMENT_MC_1:      'Verify that the functionality provided by the added event handlers on the @%1@ element have the corresponding keyboard support.',
        ELEMENT_MC_2:      'Verify that the functionality that results from assigning @tabindex=%1@ on the @%2@ element has the corresponding keyboard support.',
        ELEMENT_MC_3:      'Verify that the functionality provided by the @%1@ element has the corresponding keyboard support.',
        ELEMENT_HIDDEN_1:  'The @%1@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSE: [
        'Many users are unable to use the mouse, either because of visual impairments, which make it difficult or impossible for them to see the pointer, or motor skill impairments, which prevent them from being able to accurately position the mouse pointer.',
        'This requirement is not intended to discourage support for mouse behaviors, but rather to make sure there is an equivalent way of using the keyboard for all interactive tasks that can be performed using the mouse.',
        'The recommended and most efficient way to include keyboard support for interactive elements is to follow computing platform conventions. This will make it it easier for all users to benefit from keyboard support, since the keystrokes and shortcuts will be easier to discover and familiar to the greatest number of users.',
        'Touch typists often prefer keyboard commands over mouse actions, especially for frequently performed operations, since they are much more efficient from a hand motion perspective.'
      ],
      TECHNIQUES: [
        'Use the WAI-ARIA 1.0 Authoring Practices to determine the keyboard support that is appropriate for common widget types.',
        'Use keyboard event handers to implement keyboard support for interactive behaviors defined on the page.',
        'Avoid using @object@ and @embed@ elements due to the difficulty in providing the corresponding keyboard support for all of their inherent interactive behaviors.',
        'Avoid using @tabindex@ values greater than 0 to change tabbing order, since tabbing behavior is inconsistent and therefore unpredictable across web browsers.'
      ],
      MANUAL_CHECKS: [
        'Make a list of the functional feature of a web site.',
        'Using only the keyboard, perform all of the functions provided by all of the interactive components on the web page.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'WAI-ARIA 1.0 Authoring Practices',
          url:   'https://www.w3.org/WAI/PF/aria-practices/'
        },
        { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
          title: 'OAA Web Accessibility ARIA Examples',
          url:   'https://oaa-accessibility.org/examples/'
        },
        { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
          title: 'Accessible jQuery-ui Components Demonstration',
          url:   'https://access.aol.com/aegis/'
        }
      ]
    },

    KEYBOARD_3: {
      ID:                    'Keyboard 3',
      DEFINITION:            '@object@ and @applet@ elements %s not trap the keyboard.',
      SUMMARY:               'No keyboard trap',
      TARGET_RESOURCES_DESC: '@object@ and @applet@ elements',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:  'Verify the embedded application to make sure the application does not trap the keyboard.',
        MANUAL_CHECK_P:  'Verify the %N_MC embedded applications to make sure application does not trap the keyboard.',
        HIDDEN_S:        'One hidden @object@ or @applet@ element was not evaluated.',
        HIDDEN_P:        '%N_H hidden @object@ and/or @applet@ elements were not evaluated.',
        NOT_APPLICABLE:  'No @applet@ and @object@ elements on the page.'
      },
      NODE_RESULT_MESSAGES: {
        ELEMENT_MC_1:  'Verify the %1 element to see if it traps the keyboard.',
        ELEMENT_HIDDEN_1:        '%1 element is hidden, so it cannot trap the keyboard.'
      },
      PURPOSE: [
        'If an embedded application (i.e. @object@ or @applet@ element) traps the keyboard, keyboard users will not be able to use the web page.'
      ],
      TECHNIQUES: [
        'Use @tabindex="-1"@ on the element to remove it from "tab" order of the page.',
        'If the embedded application does support accessibility, use a button to move focus to the application.'
      ],
      MANUAL_CHECKS: [
        'Move keyboard focus to the embedded application and see if you can move focus back to the web content using just the keyboard.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
        },
        { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
          title: 'OAA Web Accessibility ARIA Examples',
          url:   'https://oaa-accessibility.org/examples/'
        }
      ]
    }
  }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */


OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

    //
    //  OAA Rules title and message string National Language Support (NLS)
    //
    rules: {

        // ----------------------------------------------------------------
        // LANDMARK_1: main landmark: at least one
        // ----------------------------------------------------------------

        LANDMARK_1: {
            ID:         'Landmark 1',
            DEFINITION: 'Each page %s have at least one @main@ landmark, used to identify the main content.',
            SUMMARY:    '@main@ landmark: at least one',
            TARGET_RESOURCES_DESC: '@[role="main"]@ and @main@ element',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Add a @main@ landmark to the page.',
              FAIL_P:   'Add a @main@ landmark to the page.',
              HIDDEN_S: 'One @main@ landmark that is hidden was not evaluated.',
              HIDDEN_P: '%N_H @main@ landmarks that are hidden were not evaluated.'
            },
            NODE_RESULT_MESSAGES: {
              PAGE_PASS_1: 'Page has one @main@ landmark.',
              PAGE_PASS_2: 'Page has %1 @main@ landmarks.',
              PAGE_FAIL_1: 'Add a @main@ landmark that identifies the main content of the page.',
              ELEMENT_PASS_1:   '@%1[role="main"]@ defines a @main@ landmark.',
              ELEMENT_PASS_2:   '@main@ element defines a @main@ landmark.',
              ELEMENT_HIDDEN_1: '@%1@ element with @role="main"@ was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2: '@main@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'A @main@ landmark provides a navigation point to the primary content of the page for users of assistive technologies.',
              'Most pages only need one @main@ landmark, but in the case of portals or mashups, there may be more than one @main@ landmark on a "page".'
            ],
            TECHNIQUES: [
              'A @main@ element or an element with a @role="main"@ attribute defines a @main@ landmark.',
              'When there is only one @main@ landmark on the page (the typical case), do not use a label.',
              'When there is more than one @main@ landmark, use the @aria-labelledby@ or @aria-label@ attribute to describe the content of each.',
              'If you need to support Microsoft Internet Explorer 8, you must NOT use the @main@ element since the element is supported in the accessibility API, just use @role="main"@ to identify the main landmark.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: main role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#main'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: The MAIN element',
                url:   'https://www.w3.org/TR/html5/sections.html#the-main-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
                url:   'https://w3c.github.io/aria-practices/#aria_landmark'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
                url:   'https://w3c.github.io/aria-practices/examples/landmarks/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'W3C Web Accessibility Tutorials: Page Structure',
                url:   'https://www.w3.org/WAI/tutorials/page-structure/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
              }
            ]
        },

        // ----------------------------------------------------------------
        // LANDMARK_2: Page structure must/should be defined by landmarks
        // ----------------------------------------------------------------

        LANDMARK_2: {
            ID:         'Landmark 2',
            DEFINITION: 'All rendered content %s be placed inside of container elements with appropriate ARIA landmark roles.',
            SUMMARY:    'All content %s be contained in landmarks',
            TARGET_RESOURCES_DESC: 'all rendered content',
            RULE_RESULT_MESSAGES: {
              FAIL_S: 'Update the landmark structure of the page by placing the one element not contained in a landmark into a container element with a proper landmark role.',
              FAIL_P: 'Update the landmark structure of the page by placing the %N_F elements not contained in landmarks into one or more container elements with proper landmark roles.',
              MANUAL_CHECK_S: 'One element may contain renderable content.  If so, move it into a container element with proper landmark role.',
              MANUAL_CHECK_P: '%N_MC elements may contain renderable content.  If so, move them into container elements with proper landmark roles.',
              HIDDEN_S: 'One hidden element with renderable content was found.  If it could become visible make sure it is in a container element with a proper landmark role.',
              HIDDEN_P: '%N_H hidden elements with renderable content were found.  If any could become visible make sure they are in container elements with proper landmark roles.',
              NOT_APPLICABLE: 'No renderable content found on this page.'
            },
            NODE_RESULT_MESSAGES: {
              PAGE_PASS_1: 'All %1 elements with content are contained in landmarks.',
              PAGE_MC_1:   '%1 element(s) may contain renderable content. If so, move it/them into appropriate landmarks.',
              PAGE_FAIL_1: 'Move %1 element(s) into appropriate landmarks. (This may require creating additional landmarks.)',
              ELEMENT_PASS_1:   '@%1@ element is contained in @%2@ landmark.',
              ELEMENT_MC_1:     '@%1@ element may contain renderable content. If so, move it into an appropriate landmark.',
              ELEMENT_FAIL_1:   'Move @%1@ element into an appropriate landmark. (This may require creating an additional landmark.)',
              ELEMENT_HIDDEN_1: 'The @%1@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Landmarks provide a way to organize the various types of content on a page for users of assistive technologies. The organization of content regions using landmarks is functionally similar to the way visual designers organize information for people who rely on a graphical rendering of the content.',
              'When content is not contained in a landmark, it will be unreachable using landmark navigation, which is an important feature provided by assistive technologies such as screen readers.'
            ],
            TECHNIQUES: [
              'Use the appropriate landmarks to identify the different regions of content on a web page.',
              'The most important landmark roles are @main@ and @navigation@, as nearly every page will include at least those regions.',
              'Other commonly used landmark roles include @banner@, @contentinfo@, @complementary@ and @search@.',
              'Use HTML5 sectioning elements that have a default ARIA landmark role: @main@ (@main@), @nav@ (@navigation@), @aside@ (@complementary@) and in some situations @header@ (@banner@) and @footer@ (@contentinfo@). When using these elements, the @role@ attribute should NOT be defined.',
              'In HTML4 and XHTML 1.0 documents, a landmark can be created using a @div@ element with a @role@ attribute and the appropriate ARIA landmark role value (e.g., @role="main"@).',
              'The @search@ role is typically placed on a @form@ element or a @div@ that surrounds the search form.'
            ],
            MANUAL_CHECKS: [
              '@object@, @embed@ and @applet@ tags may be used to render content. Use inspection tools to determine if any of these elements actually render content on the page.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: Landmark Roles',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#landmark_roles'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: Sections',
                url:   'https://www.w3.org/TR/html5/sections.html#sections'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
                url:   'https://w3c.github.io/aria-practices/#aria_landmark'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
                url:   'https://w3c.github.io/aria-practices/examples/landmarks/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'W3C Web Accessibility Tutorials: Page Structure',
                url:   'https://www.w3.org/WAI/tutorials/page-structure/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
              }
            ]
        },

        // ----------------------------------------------------------------
        // LANDMARK_3: navigation landmark: at least one
        // ----------------------------------------------------------------

        LANDMARK_3: {
            ID:         'Landmark 3',
            DEFINITION: 'Each page in a website %s have at least one @navigation@ landmark, used to identify website navigation links.',
            SUMMARY:    '@navigation@ landmark: at least one',
            TARGET_RESOURCES_DESC: '@[role="navigation"]@ or top-level @nav@ element',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Add one or more @navigation@ landmarks that identify groups of links that support website navigation.',
              FAIL_P:   'Add one or more @navigation@ landmarks that identify groups of links that support website navigation.',
              HIDDEN_S: 'One @navigation@ landmark that is hidden was not evaluated.',
              HIDDEN_P: '%N_H @navigation@ landmarks that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No lists of links found on page.'
            },
            NODE_RESULT_MESSAGES: {
              WEBSITE_PASS_1: 'The page contains one @navigation@ landmark.',
              WEBSITE_PASS_2: 'The page contains %1 @navigation@ landmarks.',
              WEBSITE_FAIL_1: 'Add at least one @navigation@ landmark to the page to identify the links used for website or page content navigation.',
              ELEMENT_PASS_1:   '@%1[role="navigation"]@ defines a @navigation@ landmark.',
              ELEMENT_PASS_2:   '@nav@ element defines a @navigation@ landmark.',
              ELEMENT_FAIL_1:   '@%1@ list element has %2 links and not in any landmark.',
              ELEMENT_HIDDEN_1: '@%1@ element with @role="navigation"@ was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Navigation landmarks provide a way to identify groups (e.g. lists) of links that are intended to be used for website or page content navigation.'
            ],
            TECHNIQUES: [
              'Reserve the @navigation@ landmark for website and page navigation links.',
              'Website and page navigation links should be top-level @navigation@ landmarks (i.e. not contained in other landmarks).',
              'The @nav@ element or an element with @role="navigation"@ attribute defines a @navigation@ landmark and must be on a container element (e.g., @div@) for @ol@ and @ul@ elements that contain li elements with links. (This may require adding a container element.)',
              'If there is only one @navigation@ landmark on the page, do not use a label.',
              'If there is more than one @navigation@ landmark, use the @aria-labelledby@, @aria-label@ oe @title@ attribute to describe the purpose of the links (e.g., Table of Contents, Site Map, etc.) contained in each.',
              'If the same set of links is used in more than one place on a page, use "Copy 1", "Copy 2" ... "Copy N" as a part of the accessible name to make the navigation labels unique and help orient assistive technology users that the group of links is repeated on the page.'
            ],
            MANUAL_CHECKS: [
              'A list of links to other pages in the website, or to content sections of the current page, should use a @navigation@ landmark.',
              'Verify the links are used for website or page navigation purposes.',
              'Verify the labels uniquely identify each set of navigational links.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: navigation role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#navigation'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: The NAV element',
                url:   'https://www.w3.org/TR/html5/sections.html#the-nav-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
                url:   'https://w3c.github.io/aria-practices/#aria_landmark'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
                url:   'https://w3c.github.io/aria-practices/examples/landmarks/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'W3C Web Accessibility Tutorials: Page Structure',
                url:   'https://www.w3.org/WAI/tutorials/page-structure/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H97: Grouping related links using the nav element',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H97.html'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
              }
            ]
        },

        // ----------------------------------------------------------------
        // LANDMARK_4: banner landmark: for branding content
        // ----------------------------------------------------------------

        LANDMARK_4: {
            ID:         'Landmark 4',
            DEFINITION: 'Website branding content, typically at the top of a web page, %s be identified by using the @banner@ landmark.',
            SUMMARY:    '@banner@ landmark: identifies branding content',
            TARGET_RESOURCES_DESC: '@[role="banner"]@ and top-level @header@ element',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S: 'If there is branding content, typically at the top of the page, use the @banner@ landmark to identify it.',
              MANUAL_CHECK_P: 'If there is branding content, typically at the top of the page, use the @banner@ landmark to identify it.',
              HIDDEN_S: 'One @banner@ landmark that is hidden was not evaluated.',
              HIDDEN_P: '%N_H@ banner@ landmarks that are hidden were not evaluated.'
            },
            NODE_RESULT_MESSAGES: {
              WEBSITE_PASS_1:   'Page has @banner@ landmark.',
              WEBSITE_PASS_2:   'Page has %1 @banner@ landmarks.',
              WEBSITE_MC_1:     'If the page has a branding banner, use @role="banner"@ on its container element.',
              ELEMENT_PASS_1:   '@%1[role="banner"]@ defines a @banner@ landmark.',
              ELEMENT_PASS_2:   'The top level @header@ element defines a @banner@ landmark.',
              ELEMENT_HIDDEN_1: '@%1[role="banner"]@ element was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2: 'A top level @header@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'A @banner@ landmark provides a way to identify organizational or company branding content, usually replicated across all pages and located at the top of each page.'
            ],
            TECHNIQUES: [
              'The @header@ element defines a @banner@ landmark, except when it is a descendant of any of the following elements: @article@, @aside@, @main@, @nav@ or @section@.',
              'If the @header@ element technique is not being used, a @role="banner"@ attribute on the container element for the branding content can be used to define a @banner@ landmark.',
              'In websites that support mashups using @iframe@ or @frame@ elements, a @banner@ landmark is allowed in each frame.',
              'If the page is part of a website supporting mashups, use the @aria-labelledby@ or @aria-label@ attribute to differentiate @banner@ landmarks in each frame.'
            ],
           MANUAL_CHECKS: [
              'Banners are a convention used on most web sites to convey branding information, and may also be used as a location for advertising information.',
              'The @banner@ landmark identifies the banner content on the page.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: banner role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#banner'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: The FOOTER element',
                url:   'https://www.w3.org/TR/html5/sections.html#the-footer-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
                url:   'https://w3c.github.io/aria-practices/#aria_landmark'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
                url:   'https://w3c.github.io/aria-practices/examples/landmarks/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'W3C Web Accessibility Tutorials: Page Structure',
                url:   'https://www.w3.org/WAI/tutorials/page-structure/'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: Sectioning content',
                url:   'https://www.w3.org/TR/html5/dom.html#sectioning-content-0'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: Sectioning root',
                url:   'https://www.w3.org/TR/html5/sections.html#sectioning-root'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
              }
            ]
        },

        // ----------------------------------------------------------------
        // LANDMARK_5: banner landmark: no more than one
        // ----------------------------------------------------------------

        LANDMARK_5: {
            ID:         'Landmark 5',
            DEFINITION: 'Each page %s contain no more than one @banner@ landmark.',
            SUMMARY:    '@banner@ landmark: no more than one',
            TARGET_RESOURCES_DESC: '@[role="banner"]@ and top-level @header@ element',
            RULE_RESULT_MESSAGES: {
              FAIL_S: 'More than one @banner@ landmark found on the page. Only one @banner@ landmark is allowed per page or iframe.',
              FAIL_P: 'More than one @banner@ landmark found on the page. Only one @banner@ landmark is allowed per page or iframe.',
              HIDDEN_S: 'One @banner@ landmark that is hidden was not evaluated.',
              HIDDEN_P: '%N_H@ banner@ landmarks that are hidden were not evaluated.'
            },
            NODE_RESULT_MESSAGES: {
              PAGE_PASS_1:      'The page contains one @banner@ landmark.',
              PAGE_FAIL_1:      'The page contains %1 @banner@ landmarks. Modify the page to have only one container element with a @banner@ landmark role.',
              ELEMENT_PASS_1:   '@%1[role="banner"]@ defines a @banner@ landmark.',
              ELEMENT_PASS_2:   'Top level @header@ element defines a @banner@ landmark.',
              ELEMENT_FAIL_1:   '@%1[role="banner"]@ defines a @banner@ landmark.  Modify the page to include only one @banner@ element.',
              ELEMENT_FAIL_2:   'Top level @header@ element defines a @banner@ landmark.  Modify the page to include only one @banner@ element.',
              ELEMENT_HIDDEN_1: '@%1[role="banner"]@ was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2: 'Top level @header@ element  was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'A banner landmark provides a way to identify redundant branding content, usually placed at the top of each web page.'
            ],
            TECHNIQUES: [
              'The @header@ element defines a @banner@ landmark, except when it is a descendant of any of the following elements: @article@, @aside@, @main@, @nav@ or @section@.',
              'If the @header@ element technique is not being used, a @role="banner"@ attribute on the container element for the branding content can be used to define a @banner@ landmark.',
              'In websites that support mashups using @iframe@ or @frame@ elements, a @banner@ landmark is allowed in each frame.',
              'If the page is part of a website supporting mashups, use the @aria-labelledby@ or @aria-label@ attribute to differentiate @banner@ landmarks in each frame.'
            ],
            MANUAL_CHECKS: [
              'Banners are a convention used on most web sites to convey branding information, and may also be used as a location for advertising information.',
              'The @banner@ landmark identifies the banner content on the page.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: banner role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#banner'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: The FOOTER element',
                url:   'https://www.w3.org/TR/html5/sections.html#the-footer-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
                url:   'https://w3c.github.io/aria-practices/#aria_landmark'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
                url:   'https://w3c.github.io/aria-practices/examples/landmarks/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'W3C Web Accessibility Tutorials: Page Structure',
                url:   'https://www.w3.org/WAI/tutorials/page-structure/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
              }
            ]
        },

        // ----------------------------------------------------------------
        // LANDMARK_6: contentinfo landmark: for admin content
        // ----------------------------------------------------------------

        LANDMARK_6: {
            ID:         'Landmark 6',
            DEFINITION: 'Website administrative content (e.g., copyright, contact, privacy info, etc., typically at the bottom of a web page) %s be identified by using the @contentinfo@ landmark.',
            SUMMARY:    '@contentinfo@ landmark: identifies admin content',
            TARGET_RESOURCES_DESC: '@[role="contentinfo"]@ and top-level @footer@ element',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S: 'If there is administrative content (e.g., copyright, contact, privacy info, etc.), typically at the bottom of the page, use the @contentinfo@ landmark or top level @footer@ element to identify it.',
              MANUAL_CHECK_P: 'If there is administrative content (e.g., copyright, contact, privacy info, etc.), typically at the bottom of the page, use the @contentinfo@ landmark or top level @footer@ element to identify it.',
              HIDDEN_S: 'One @contentinfo@ landmark or @footer@ element that is hidden was not evaluated.',
              HIDDEN_P: '%N_H @contentinfo@ landmarks or @footer@ elements that are hidden were not evaluated.'
            },
            NODE_RESULT_MESSAGES: {
              WEBSITE_PASS_1: 'Page has @contentinfo@ landmark or top level @footer@ element.',
              WEBSITE_PASS_2: 'Page has %1 @contentinfo@ landmarks and/or top level @footer@ elements.',
              WEBSITE_MC_1:   'If the page has administrative content, use @role="contentinfo"@ or @footer@ element on its container element.',
              ELEMENT_PASS_1:   '@%1@ element has @role="contentinfo"@.',
              ELEMENT_PASS_2:   'Top level @footer@ element with the default @role="contentinfo"@.',
              ELEMENT_HIDDEN_1: '@%1@ element with @role="contentinfo"@ was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2: '@footer@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'The @contentinfo@ landmark provides a way to identify administrative content, typically found at the bottom of each page in a website and referred to as footer information in publishing contexts.',
              'The @contentinfo@ landmark typically includes information and/or links to copyright, contact info, privacy policies and other general information found on all pages in the website.'
            ],
            TECHNIQUES: [
              'The @footer@ element defines a @contentinfo@ landmark, except when it is a descendant of any of the following elements: @article@, @aside@, @main@, @nav@ or @section@.',
              'If the @footer@ element technique is not being used, a @role="contentinfo"@ attribute on the container element for the administrative content can be used to define a @contentinfo@ landmark.',
              'In websites that support mashups using @iframe@ or @frame@ elements, a @contentinfo@ landmark is allowed in each frame.',
              'If the page is part of a website supporting mashups, use the @aria-labelledby@ or @aria-label@ attribute to differentiate possible @contentinfo@ landmarks in each frame.'
            ],
            MANUAL_CHECKS: [
              'Footers are a convention used on most web sites to provide copyright, contact, privacy and other types of adminstrative content.',
              'The @contentinfo@ landmark identifies the footer content on the page.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: contentinfo role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#contentinfo'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: The FOOTER element',
                url:   'https://www.w3.org/TR/html5/sections.html#the-footer-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: Sectioning content',
                url:   'https://www.w3.org/TR/html5/dom.html#sectioning-content-0'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
                url:   'https://w3c.github.io/aria-practices/#aria_landmark'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
                url:   'https://w3c.github.io/aria-practices/examples/landmarks/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'W3C Web Accessibility Tutorials: Page Structure',
                url:   'https://www.w3.org/WAI/tutorials/page-structure/'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: Sectioning root',
                url:   'https://www.w3.org/TR/html5/sections.html#sectioning-root'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
              }
            ]
        },

        // ----------------------------------------------------------------
        // LANDMARK_7: contentinfo landmark: no more than one
        // ----------------------------------------------------------------

        LANDMARK_7: {
            ID:         'Landmark 7',
            DEFINITION: 'Each page %s contain no more than one @contentinfo@ landmark.',
            SUMMARY:    '@contentinfo@ landmark: no more than one',
            TARGET_RESOURCES_DESC: '@[role="contentinfo"]@ and top-level @footer@ element',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'More than one @contentinfo@ landmark found on the page. Only one @contentinfo@ landmark is allowed per page or iframe.',
              FAIL_P:   'More than one @contentinfo@ landmark found on the page. Only one @contentinfo@ landmark is allowed per page or iframe.',
              HIDDEN_S: 'One @contentinfo@ landmark that is hidden was not evaluated.',
              HIDDEN_P: '%N_H @contentinfo@ landmarks that are hidden were not evaluated.'
            },
            NODE_RESULT_MESSAGES: {
              PAGE_PASS_1:      'The page contains one @contentinfo@ landmark.',
              PAGE_FAIL_1:      'The page contains %1 @contentinfo@ landmarks and/or @footer@ elements. Modify the page to have only one container element with a @contentinfo@ landmark role or @footer@ element.',
              ELEMENT_PASS_1:   '@%1[role="contentinfo"]@ defines a @contentinfo@ landmark.',
              ELEMENT_PASS_2:   'Top level @footer@ element defines a @contentinfo@ landmark.',
              ELEMENT_FAIL_1:   '@%1[role="contentinfo"]@ defines a @contentinfo@ landmark.  Modify the page to include only one @contentinfo@ element.',
              ELEMENT_FAIL_2:   'Top level @footer@ element defines a @contentinfo@ landmark.  Modify the page to include only one @contentinfo@ element.',
              ELEMENT_HIDDEN_1: '@%1@ element with @role="contentinfo"@ was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2: '@footer@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'The @contentinfo@ landmark provides a way to identify administrative content, typically found at the bottom of each page in a website and referred to as footer information in publishing contexts.',
              'The @contentinfo@ landmark typically includes information and/or links to copyright, contact info, privacy policies and other general information found on all pages in the website.',
              'The @footer@ element that is NOT contained in an @section@ and @aside@ element has the default role of @contentinfo@ landmark.'
            ],
            TECHNIQUES: [
              'The @footer@ element defines a @contentinfo@ landmark, except when it is a descendant of any of the following elements: @article@, @aside@, @main@, @nav@ or @section@.',
              'If the @footer@ element technique is not being used, a @role="contentinfo"@ attribute on the container element for the administrative content can be used to define a @contentinfo@ landmark.',
              'In websites that support mashups using @iframe@ or @frame@ elements, a @contentinfo@ landmark is allowed in each frame.',
              'If the page is part of a website supporting mashups, use the @aria-labelledby@ or @aria-label@ attribute to differentiate possible @contentinfo@ landmarks in each frame.'
            ],
            MANUAL_CHECKS: [
              'Footers are a convention used on most web sites to provide copyright, contact, privacy and other types of adminstrative content.',
              'The @contentinfo@ landmark identifies the footer content on the page.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: contentinfo role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#contentinfo'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: The FOOTER element',
                url:   'https://www.w3.org/TR/html5/sections.html#the-footer-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
                url:   'https://w3c.github.io/aria-practices/#aria_landmark'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
                url:   'https://w3c.github.io/aria-practices/examples/landmarks/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'W3C Web Accessibility Tutorials: Page Structure',
                url:   'https://www.w3.org/WAI/tutorials/page-structure/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
              }
            ]
        },

        // ----------------------------------------------------------------
        // LANDMARK_8: banner landmark: must/should be top-level
        // ----------------------------------------------------------------

        LANDMARK_8: {
            ID:         'Landmark 8',
            DEFINITION: 'The @banner@ landmark %s be a top-level landmark.',
            SUMMARY:    '@banner@ landmark: %s be top-level',
            TARGET_RESOURCES_DESC: '@[role="banner"]@ and top-level @header@ element',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Update the @banner@ landmark on the page to ensure that it is a top-level landmark.',
              FAIL_P:   'Update the @banner@ landmarks on the page to ensure that each is a top-level landmark.',
              HIDDEN_S: 'One element with @[role="hidden"]@ attribute or @header@ element that is hidden was not evaluated.',
              HIDDEN_P: '%N_H elements with @[role="hidden"]@ attributes or @header@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No elements with @[role="banner"]@ or @header@ elements on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   '@%1[role="banner"]@ defines a top-level @banner@ landmark.',
              ELEMENT_PASS_2:   '@%1[role="banner"]@ defines a top-level @banner@ landmark in the @frame@ or @iframe@.',
              ELEMENT_PASS_3:   '@header@ element defines a top-level @banner@ landmark.',
              ELEMENT_PASS_4:   '@header@ element defines a top-level @banner@ landmark in the @frame@ or @iframe@.',
              ELEMENT_FAIL_1:   'Update the landmark structure on the page such that the @%1[role="banner"]@ element is a top-level landmark (it is currently the child of a @%2@ landmark).',
              ELEMENT_FAIL_2:   'Update the landmark structure on the page such that the @header@ element is a top-level landmark (it is currently the child of a @%1@ landmark).',
              ELEMENT_HIDDEN_1: '@%1[role="banner"]@ was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2: '@header@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Top-level landmarks are the easiest to find and navigate to using assistive technologies.',
              'Banner content is usually the content at beginning of a page that repeats on most pages within a website.'
            ],
            TECHNIQUES: [
              'When creating the landmark structure on the page, ensure that the @banner@ landmark or @header@ element is a top-level landmark (i.e., it is not contained within any other landmarks).',
              'A @header@ element with the context of the @body@ element or an element with @[role="contentinfo"]@ attribute defines a @banner@ landmark.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: banner role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#banner'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: The HEADER element',
                url:   'https://www.w3.org/TR/html5/sections.html#the-header-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
                url:   'https://w3c.github.io/aria-practices/#aria_landmark'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
                url:   'https://w3c.github.io/aria-practices/examples/landmarks/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'W3C Web Accessibility Tutorials: Page Structure',
                url:   'https://www.w3.org/WAI/tutorials/page-structure/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
              }
            ]
        },

        // ----------------------------------------------------------------
        // LANDMARK_9: banner landmark: restrictions
        // ----------------------------------------------------------------

        LANDMARK_9: {
            ID:         'Landmark 9',
            DEFINITION: 'The @banner@ landmark %s only contain @navigation@, @region@ or @search@ landmarks.',
            SUMMARY:    '@banner@ landmark: restrictions',
            TARGET_RESOURCES_DESC: '@banner@ landmark',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Update the landmarks on the page to ensure that the @banner@ landmark only contains @navigation@, @region@ and @search@ landmarks.',
              FAIL_P:   'Update the %N_F landmarks that are part of the @banner@ landmark to ensure that the @banner@ landmark only contains @navigation@, @region@ and @search@ landmarks.',
              HIDDEN_S: 'One element with @[role="banner"]@ or top-level @header@ element that is hidden was not evaluated.',
              HIDDEN_P: '%N_H elements with @[role="banner"]@ or top-level @header@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @[role="banner"]@ or top-level @header@ elements on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   '@%1@ landmark can be part of @banner@ landmark.',
              ELEMENT_PASS_2:   '@banner@ landmark does not contain any other landmarks.',
              ELEMENT_PASS_3:   '@banner@ landmark contains one allowed landmark: %1.',
              ELEMENT_PASS_4:   '@banner@ landmark contains %1 allowed landmarks: %2.',
              ELEMENT_FAIL_1:   'Update the landmarks on the page so that the @%1@ landmark is not contained in the @banner@ landmark or @header@ element. Depending on the content in this landmark, consider moving it outside the @banner@ landmark.',
              ELEMENT_FAIL_2:   'The  @banner@ landmark should NOT contain the following landmark: %1.',
              ELEMENT_FAIL_3:   'The  @banner@ landmark should NOT contain the following %1 landmarks: %2.',
              ELEMENT_HIDDEN_1: '@%1[role="banner"]@ was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2: '@header@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
               'Ensuring that the landmark structure of a page is not overly complex enables users of assistive technologies to more easily find and navigate to the desired content.'
            ],
            TECHNIQUES: [
              'If landmarks are needed within a @banner@ landmark, use only @navigation@, @region@ or @search@.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: banner role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#banner'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: The HEADER element',
                url:   'https://www.w3.org/TR/html5/sections.html#the-header-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: Sections',
                url:   'https://www.w3.org/TR/html5/sections.html#sections'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
                url:   'https://w3c.github.io/aria-practices/#aria_landmark'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
                url:   'https://w3c.github.io/aria-practices/examples/landmarks/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'W3C Web Accessibility Tutorials: Page Structure',
                url:   'https://www.w3.org/WAI/tutorials/page-structure/'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: Landmark Roles',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#landmark_roles'
              }
            ]
        },

        // ----------------------------------------------------------------
        // LANDMARK_10: navigation landmark: restrictions
        // ----------------------------------------------------------------

        LANDMARK_10: {
            ID:         'Landmark 10',
            DEFINITION: 'The @navigation@ landmark %s only contain @region@ or @search@ landmarks.',
            SUMMARY:    '@navigation@ landmark: restrictions',
            TARGET_RESOURCES_DESC: '@navigation@ landmark',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Update the landmarks on the page to ensure that the @navigation@ landmark only contains @region@ or @search@ landmarks.',
              FAIL_P:   'Update the %N_F @navigation@ landmarks on the page to ensure that they only contain  @region@ or @search@ landmarks.',
              HIDDEN_S: 'One @navigation@ landmark that is hidden was not evaluated.',
              HIDDEN_P: '%N_H @navigation@ landmarks that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @navigation@ landmarks on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   '@%1@ landmark can be part of @navigation@ landmark.',
              ELEMENT_PASS_2:   '@navigation@ landmark does not contain any other landmarks.',
              ELEMENT_PASS_3:   '@navigation@ landmark contains one allowed landmark: %1.',
              ELEMENT_PASS_4:   '@navigation@ landmark contains %1 allowed landmarks: %2.',
              ELEMENT_FAIL_1:   'Update the landmarks on the page such that the @%1@ landmark is not contained by the @navigation@ landmark. Depending on the content in this landmark, consider moving it outside the @navigation@ landmark.',
              ELEMENT_FAIL_2:   'The  @navigation@ landmark should NOT contain the following landmark: %1.',
              ELEMENT_FAIL_3:   'The  @navigation@ landmark should NOT contain the following %1 landmarks: %2.',
              ELEMENT_HIDDEN_1: '@%1[role="navigation"]@ was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2: '@nav@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Ensuring that the landmark structure of a page is not overly complex enables users of assistive technologies to more easily find and navigate to the desired content.'
            ],
            TECHNIQUES: [
              'If landmarks are needed within a @navigation@ landmark, use only @region@ or @search@.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: navigation role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#navigation'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: The NAV element',
                url:   'https://www.w3.org/TR/html5/sections.html#the-nav-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
                url:   'https://w3c.github.io/aria-practices/#aria_landmark'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'W3C Web Accessibility Tutorials: Page Structure',
                url:   'https://www.w3.org/WAI/tutorials/page-structure/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
                url:   'https://w3c.github.io/aria-practices/examples/landmarks/'
              }
            ]
        },

        // ----------------------------------------------------------------
        // LANDMARK_11: main landmark: must/should be top-level
        // ----------------------------------------------------------------

        LANDMARK_11: {
            ID:         'Landmark 11',
            DEFINITION: 'The @main@ landmark %s be a top-level landmark.',
            SUMMARY:    '@main@ landmark: %s be top-level',
            TARGET_RESOURCES_DESC: '@main@ landmark',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Update the @main@ landmark on the page to ensure that it is a top-level landmark.',
              FAIL_P:   'Update the  @main@ landmarks on the page to ensure that each is a top-level @main@ landmark.',
              HIDDEN_S: 'One element with @[role="main"]@ attribute or a @main@ element that is hidden was not evaluated.',
              HIDDEN_P: '%N_H elements with @[role="main"]@ attribute and/or @main@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @[role="main"]@ attributes or @main@ elements on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   '@%1[role="main"]@ attribute defines a top-level @main@ landmark.',
              ELEMENT_PASS_2:   '@%1[role="main"]@ attribute defines a top-level @main@ landmark in the @frame@ or @iframe@.',
              ELEMENT_PASS_3:   '@main@ element defines a top-level @main@ landmark.',
              ELEMENT_PASS_4:   '@main@ element defines a top-level @main@ landmark in the @frame@ or @iframe@.',
              ELEMENT_FAIL_1:   'Update the landmark structure on the page such that the @%1[role="main"]@ element defines a top-level @main@ landmark (it is currently the child of a @%2@ landmark).',
              ELEMENT_FAIL_2:   'Update the landmark structure on the page such that the @main@ element defines a top-level @main@ landmark (it is currently the child of a @%1@ landmark).',
              ELEMENT_HIDDEN_1: '@%1[role="main"]@ was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2: '@main@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Top-level landmarks are the easiest landmarks to find and navigate to using assistive technologies.'
            ],
            TECHNIQUES: [
              'When creating the landmark structure on the page, ensure that the @main@ landmark is a top-level landmark (i.e., it is not contained within any other landmarks).',
              'The @main@ element or an element with @[role="main"]@ attribute defines a @main@ landmark.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: main role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#main'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: The MAIN element',
                url:   'https://www.w3.org/TR/html5/sections.html#the-main-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
                url:   'https://w3c.github.io/aria-practices/#aria_landmark'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
                url:   'https://w3c.github.io/aria-practices/examples/landmarks/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'W3C Web Accessibility Tutorials: Page Structure',
                url:   'https://www.w3.org/WAI/tutorials/page-structure/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
              }
            ]
        },

        // ----------------------------------------------------------------
        // LANDMARK_12: contentinfo landmark: must/should be top-level
        // ----------------------------------------------------------------

        LANDMARK_12: {
            ID:         'Landmark 12',
            DEFINITION: 'The @contentinfo@ landmark %s be a top-level landmark.',
            SUMMARY:    '@contentinfo@ landmark: %s be top-level',
            TARGET_RESOURCES_DESC: '@contentinfo@ landmark',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Update the @contentinfo@ landmark on the page to ensure that it is a top-level landmark.',
              FAIL_P:   'Update the @contentinfo@ landmarks on the page to ensure that each @contentinfo@ landmark is a top-level landmark.',
              HIDDEN_S: 'One element with @[role="contentinfo"]@ attribute or @footer@ element that is hidden was not evaluated.',
              HIDDEN_P: '%N_H elements with  @[role="contentinfo"]@ attributes and/or @footer@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No elements with @[role="contentinfo"]@ attribute and/or @footer@ elements landmarks on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   '@%1[role="contentinfo"]@ attribute defines a top-level @contentinfo@ landmark.',
              ELEMENT_PASS_2:   '@%1[role="contentinfo"]@ attribute defines a top-level @contentinfo@ landmark in the @frame@ or @iframe@.',
              ELEMENT_PASS_3:   '@footer@ element defines a top-level @contentinfo@ landmark.',
              ELEMENT_PASS_4:   '@footer@ element defines a top-level @contentinfo@ landmark in the @frame@ or @iframe@.',
              ELEMENT_FAIL_1:   'Update the landmark structure on the page such that the @%1[role="contentinfo"]@ element defines a top-level @contentinfo@ landmark (it is currently the child of a @%2@ landmark).',
              ELEMENT_FAIL_2:   'Update the landmark structure on the page such that the @footer@ element defines a top-level @contentinfo@ landmark (it is currently the child of a @%1@ landmark).',
              ELEMENT_HIDDEN_1: '@%1@ element with @role="contentinfo"@ was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2: '@%1@ element with @role="contentinfo"@ was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Top-level landmarks are the easiest to find and navigate to using assistive technologies.'
            ],
            TECHNIQUES: [
              'When creating the landmark structure on the page, ensure that the @contentinfo@ landmark is a top-level landmark (i.e., it is not contained within any other landmarks).',
              'A @footer@ element with the context of the @body@ element or an element with @[role="contentinfo"]@ attribute defines a @contentinfo@ landmark.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: contentinfo role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#contentinfo'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: The FOOTER element',
                url:   'https://www.w3.org/TR/html5/sections.html#the-footer-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
                url:   'https://w3c.github.io/aria-practices/#aria_landmark'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
                url:   'https://w3c.github.io/aria-practices/examples/landmarks/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'W3C Web Accessibility Tutorials: Page Structure',
                url:   'https://www.w3.org/WAI/tutorials/page-structure/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
              }
            ]
        },

        // ----------------------------------------------------------------
        // LANDMARK_13: contentinfo landmark: restrictions
        // ----------------------------------------------------------------

        LANDMARK_13: {
            ID:         'Landmark 13',
            DEFINITION: 'The @contentinfo@ landmark %s only contain @navigation@, @region@ or @search@ landmarks.',
            SUMMARY:    '@contentinfo@ landmark: restrictions',
            TARGET_RESOURCES_DESC: '@contentinfo@ landmark',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Update the landmarks on the page to ensure that the @contentinfo@ landmark only contains @navigation@, @region@ and @search@ landmarks.',
              FAIL_P:   'Update the %N_F landmarks that are part of the @contentinfo@ landmark to ensure that the @contentinfo@ landmark only contains @navigation@, @region@ and @search@ landmarks.',
              HIDDEN_S: 'One element with @[role="contentinfo"]@ or top-level @footer@ element that is hidden was not evaluated.',
              HIDDEN_P: '%N_H elements with @[role="contentinfo"]@ or top-level @footer@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @[role="contentinfo"]@ or top-level @footer@ elements on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   '@%1@ landmark can be part of @contentinfo@ landmark.',
              ELEMENT_PASS_2:   '@contentinfo@ landmark does not contain any other landmarks.',
              ELEMENT_PASS_3:   '@contentinfo@ landmark contains one allowed landmark: %1.',
              ELEMENT_PASS_4:   '@contentinfo@ landmark contains %1 allowed landmarks: %2.',
              ELEMENT_FAIL_1:   'Update the landmarks on the page so that the @%1@ landmark is not contained in the @contentinfo@ landmark. Depending on the content in this landmark, consider moving it outside the @contentinfo@ landmark.',
              ELEMENT_FAIL_2:   'The  @contentinfo@ landmark should NOT contain the following landmark: %1.',
              ELEMENT_FAIL_3:   'The  @contentinfo@ landmark should NOT contain the following %1 landmarks: %2.',
              ELEMENT_HIDDEN_1: '@%1[role="contentinfo"]@ was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2: '@footer@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
               'Ensuring that the landmark structure of a page is not overly complex enables users of assistive technologies to more easily find and navigate to the desired content.'
            ],
            TECHNIQUES: [
              'If landmarks are needed within a @contentinfo@ landmark, use only @navigation@, @region@ or @search@.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: contentinfo role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#contentinfo'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: The FOOTER element',
                url:   'https://www.w3.org/TR/html5/sections.html#the-footer-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: Sections',
                url:   'https://www.w3.org/TR/html5/sections.html#sections'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: Landmark Roles',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#landmark_roles'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
                url:   'https://w3c.github.io/aria-practices/#aria_landmark'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
                url:   'https://w3c.github.io/aria-practices/examples/landmarks/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'W3C Web Accessibility Tutorials: Page Structure',
                url:   'https://www.w3.org/WAI/tutorials/page-structure/'
              }
            ]
        },

        // ----------------------------------------------------------------
        // LANDMARK_14: search landmark: restrictions
        // ----------------------------------------------------------------

        LANDMARK_14: {
            ID:         'Landmark 14',
            DEFINITION: 'The @search@ landmark %s only contain @region@ landmarks.',
            SUMMARY:    '@search@ landmark: restrictions',
            TARGET_RESOURCES_DESC: '@search@ landmark',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Update the landmarks on the page to ensure that the @search@ landmark only contains @region@ landmarks.',
              FAIL_P:   'Update the %N_F @search@ landmarks on the page to ensure that each only contains  @region@ landmarks.',
              HIDDEN_S: 'One @search@ landmark that is hidden was not evaluated.',
              HIDDEN_P: '%N_H @search@ landmarks that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @search@ landmarks on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1: '@%1@ landmark can be part of @search@ landmark.',
              ELEMENT_PASS_2: '@search@ landmark does not contain any @region@ landmarks.',
              ELEMENT_PASS_3: '@search@ landmark contains one allowed landmark: %1.',
              ELEMENT_PASS_4: '@search@ landmark contains %1 allowed landmarks: %2.',
              ELEMENT_FAIL_1: 'Update the landmark structure on the page such that the @%1@ landmark is not contained by the @search@ landmark. Depending on the content in this landmark, consider moving it outside the @search@ landmark.',
              ELEMENT_FAIL_2:   'The  @search@ landmark should NOT contain the following landmark: %1.',
              ELEMENT_FAIL_3:   'The  @search@ landmark should NOT contain the following %1 landmarks: %2.',
              ELEMENT_HIDDEN_1: '@%1@ element with @role="search"@ was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2: '@%1@ element with @role="@%2"@ was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'A @search@ landmark identifies a form on the page used to search for content across the entire website.',
              'For @search@ landmarks containing more than one search option and where each option can be represented as its own section, use @region@ landmarks to identify these sections.',
              'Ensuring that the landmark structure of a page is not overly complex enables users of assistive technologies to more easily find and navigate to the desired content.'
            ],
            TECHNIQUES: [
              'Website search options should be top-level @search@ landmarks (e.g. not contained in other landmarks).',
              'Include a @role="search"@ attribute on an element that contains all of the search form controls.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: search role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#search'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
                url:   'https://w3c.github.io/aria-practices/#aria_landmark'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
                url:   'https://w3c.github.io/aria-practices/examples/landmarks/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'W3C Web Accessibility Tutorials: Page Structure',
                url:   'https://www.w3.org/WAI/tutorials/page-structure/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
              }
            ]
        },

        // ----------------------------------------------------------------
        // LANDMARK_15: form landmark: restrictions
        // ----------------------------------------------------------------

        LANDMARK_15: {
            ID:         'Landmark 15',
            DEFINITION: 'The @form@ landmark %s only contain @region@ landmarks.',
            SUMMARY:    '@form@ landmark: restrictions',
            TARGET_RESOURCES_DESC: '@form@ landmark',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Update the landmark structure on the page to ensure that the @form@ landmark only contains @region@ landmarks.',
              FAIL_P:   'Update the %N_F @form@ landmarks on the page to ensure that each only contains @region@ landmarks.',
              HIDDEN_S: 'One @form@ landmark that is hidden was not evaluated.',
              HIDDEN_P: '%N_H @form@ landmarks that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @form@ landmarks on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   '@%1@ landmark can be part of @form@ landmark.',
              ELEMENT_PASS_2:   '@form@ landmark does not contain any @region@ landmarks.',
              ELEMENT_PASS_3:   '@form@ landmark contains one @region@ landmark.',
              ELEMENT_PASS_4:   '@form@ landmark contains %1 @region@ landmarks.',
              ELEMENT_FAIL_1:   'Update the landmark structure on the page such that the @%1@ landmark is not contained by the @form@ landmark. Depending on the content in this landmark, consider moving it outside the @form@ landmark.',
              ELEMENT_FAIL_2:   'Update the landmark structure on the page such that the @form@ landmark contains only @region@ landmarks.',
              ELEMENT_HIDDEN_1: '@%1@ element with @role="form"@ was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2: '@form@ element was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_3: '@%1@ element with @role="%2"@ was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Form landmarks provide a way to identify groups of form controls and widgets on the page.',
              'For @form@ landmarks containing more than one group of controls, where each is considered its own section, use @region@ landmarks to identify these sections.',
              'Ensuring that the landmark structure of a page is not overly complex enables users of assistive technologies to more easily find and navigate to the desired content.'
            ],
            TECHNIQUES: [
              'A @form@ element or an element with a @role="form"@ attribute, which also has an author-defined accessible name, will be considered an @form@ landmark.',
              'A @form@ landmark should be a container element of all the form controls in the form.',
              'Use a element @[role=region]@ attribute or a @section@ on an element that identifies subgroups or sections of controls.',
              'Use ARIA labeling techniques to give each region an accessible name describing the contents of the region.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: form role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#form'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
                url:   'https://w3c.github.io/aria-practices/#aria_landmark'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
                url:   'https://w3c.github.io/aria-practices/examples/landmarks/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'W3C Web Accessibility Tutorials: Page Structure',
                url:   'https://www.w3.org/WAI/tutorials/page-structure/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
              }
            ]
        },

        // ----------------------------------------------------------------
        // LANDMARK_16: region landmark labeling
        // ----------------------------------------------------------------

        LANDMARK_16: {
            ID:         'Landmark 16',
            DEFINITION: 'Each element with an @[role=region]@ that should be an @region@ landmark %s have an accessible name.',
            SUMMARY:    '@region@ landmark must have accessible name',
            TARGET_RESOURCES_DESC: 'Elements with @role="region"@ and @section@ elements',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S: 'Determine whether the element with ARIA role of @region@ should be a landmark and if so, add an accessible name to the element.',
              MANUAL_CHECK_P: 'Determine if any of the %N_MC elements with ARIA role of @region@ should be landmarks, and if so, add an accessible name to the those elements.',
              HIDDEN_S: 'One element with ARIA role of @region@ that is hidden was not evaluated.',
              HIDDEN_P: '%N_H elements with ARIA role of @region@ that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No elements with ARIA role of @region@ on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   '@%1[role="region"]@ element has an accessible name and is considered an ARIA landmark.',
              ELEMENT_PASS_2:   '@section@ element has an accessible name.',
              ELEMENT_MC_1:     'Determine if the @%1[role="region"]@ element should be an ARIA landmark, and if so, add an accessible name.',
              ELEMENT_MC_2:     'Determine if the @section@ element should be an ARIA landmark, and if so, add an accessible name.',
              ELEMENT_HIDDEN_1: '@%1[role="region"]@ element was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2: '@section@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'The @region@ landmark is used to identify subsections of @banner@, @complementary@, @contentinfo@, @main@, @navigation@ and @search@ landmarks.',
              'For an element with an @[role=region]@ to be considered an @region@ landmark on the page, it must have an accessible name that identifies the contents of the region.'
            ],
            TECHNIQUES: [
              'A @section@ element or an element with a @role="region"@ attribute, which also has an author-defined accessible name, will be considered an @region@ landmark.',
              'Use the @aria-labelledby@ attribute to provide an accessible name by referencing the @id@s of one or more heading (e.g. h2, h3, h4 element) or other elements that identify the contents of the region.',
              'Use the @aria-label@ attribute to provide an accessible name that identifies the contents of the region.',
              'The @title@ attribute may also be used to provide an accessible name to identify the contents of the region. Note, however, that this technique also generates a tooltip in many  web browsers.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: region role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#region'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: The SECTION element',
                url:   'https://www.w3.org/TR/html5/sections.html#the-section-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
                url:   'https://w3c.github.io/aria-practices/#aria_landmark'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
                url:   'https://w3c.github.io/aria-practices/examples/landmarks/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'W3C Web Accessibility Tutorials: Page Structure',
                url:   'https://www.w3.org/WAI/tutorials/page-structure/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA20: Using the region role to identify a region of the page',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA20'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
              }

            ]
        },

        // ----------------------------------------------------------------
        // LANDMARK_17: unique acc. names for landmarks with same role
        // ----------------------------------------------------------------

        LANDMARK_17: {
            ID:         'Landmark 17',
            DEFINITION: 'Multiple instances of landmarks with the same role %s have unique accessible names.',
            SUMMARY:    'Landmarks %s be uniquely identifiable',
            TARGET_RESOURCES_DESC: 'Landmarks',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Review the landmark labeling to ensure that its accessible name is unique among other landmarks of the same type.',
              FAIL_P:   'Review the labeling of %N_T landmarks to ensure that, if any other landmarks of the same type exist on the page, each has a unique accessible name.',
              HIDDEN_S: 'One landmark that is hidden was not evaluated.',
              HIDDEN_P: '%N_H landmarks that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No landmarks on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   '@%1@ landmark has a unique label.',
              ELEMENT_FAIL_1:   'Change the accessible name "%1" of the @%2@ landmark (or the other duplicates) so that it is unique on the page.',
              ELEMENT_HIDDEN_1: '@%1@ element with @role="%2"@ was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Landmarks identify the regions of content on a page.',
              'When a landmark does not have an author-defined accessible name, assistive technologies will use its ARIA role as an identifier.',
              'When there is more than one landmark of the same type on the page (e.g., multiple @navigation@ and/or @region@ landmarks), additional labeling through the use of author-defined accessible names is needed to allow users to differentiate among them.'
            ],
            TECHNIQUES: [
              'Use the @aria-labelledby@ attribute to provide a unique accessible name by referencing the @id@ of a heading or other element on the page that describes the content of the landmark.',
              'Use the @aria-label@ attribute to provide a unique accessible name that describes the content of the landmark.',
              'The @title@ attribute may be used to provide a unique accessible name that describes the content of the landmark. Note, however, that many browsers will also generate a tooltip from the @title@ attribute value.',
              'While ARIA landmarks may be defined using the @role@ attribute, some HTML5 sectioning elements have default landmark roles (e.g., @main@, @nav@, @aside@, and in some situations, @header@ and @footer@). Thus when multiple @nav@ elements, for example, are used on a page, define a unique accessible name for each of them.'
                          ],
            MANUAL_CHECKS: [
              'Verify that the label describes the content of the landmark.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: region role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#region'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: Sections',
                url:   'https://www.w3.org/TR/html5/sections.html#sections'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
                url:   'https://w3c.github.io/aria-practices/#aria_landmark'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
                url:   'https://w3c.github.io/aria-practices/examples/landmarks/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'W3C Web Accessibility Tutorials: Page Structure',
                url:   'https://www.w3.org/WAI/tutorials/page-structure/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
              }
            ]
        },

        // ----------------------------------------------------------------
        // LANDMARK_18: Landmarks must be descriptive
        // ----------------------------------------------------------------

        LANDMARK_18: {
            ID:         'Landmark 18',
            DEFINITION: 'Landmarks %s identify regions of content on the page according to the ARIA Landmark Roles specification.',
            SUMMARY:    'Landmarks %s identify content regions',
            TARGET_RESOURCES_DESC: 'Elements with ARIA Landmark roles',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:  'Verify that the landmark role correctly identifies the content region for which the element is a container.',
              MANUAL_CHECK_P:  'Verify that each of the %N_MC landmark roles correctly identifies the content region for which its corresponding element is a container.',
              HIDDEN_S:        'One landmark that is hidden was not evaluated.',
              HIDDEN_P:        '%N_H landmarks that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No landmarks on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_MC_1:      'Verify the @%1@ landmark with the label "%2" describes the type of content it contains.',
              ELEMENT_HIDDEN_1:  'The @%1@ landmark was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'When ARIA landmarks are used to identify regions of content on the page, users of assistive technologies gain programmatic access to those regions through built-in navigation commands.',
              'Proper use of landmarks provides a navigable structure where common sections or features of pages can be easily accessed or, conversely, skipped over if they represent repeated blocks of content.',
              'If the appropriate landmark roles are NOT used, the type or purpose of each content region will be less obvious to users of assistive technologies.',
              'In the worst-case scenario, when NO landmark roles are present, the content on the page will be presented to users of assistive technologies as a single undifferentiated block.',
              'Visual styling of blocks of content are often good indicators of potential landmarks (e.g. @banner@, @main@, @navigation@, @contentinfo@).'
            ],
            TECHNIQUES: [
              'Use the appropriate landmarks to identify the different regions of content on a web page.',
              'The most important landmark roles are @main@ and @navigation@, as nearly every page will include at least those regions.',
              'Other commonly used landmark roles include @banner@, @contentinfo@, @complementary@ and @search@.',
              'Use HTML5 sectioning elements that have a default ARIA landmark role: @main@ (@main@), @nav@ (@navigation@), @aside@ (@complementary@) and in some situations @header@ (@banner@) and @footer@ (@contentinfo@). When using these elements, the @role@ attribute should NOT be defined.',
              'In HTML4 and XHTML 1.0 documents, a landmark can be created using a @div@ element with a @role@ attribute and the appropriate ARIA landmark role value (e.g., @role="main"@).',
              'The @search@ role is typically placed on a @form@ element or a @div@ that surrounds the search form.',
              'When there are multiple instances of a particular landmark role on a page, provide a unique accessible name for each landmark with the same role to enable users to differentiate among them.',
              'An alternative landmark can be created in HTML5 by using the @section@ element, which has a default landmark role of @region@, with an author-defined accessible name (e.g., using @aria-labelledby@ to reference a heading element).',
              'Do not nest landmarks with the same role (e.g., do not place navigation landmarks within a navigation landmark). Instead, use the @section@ element technique described above to provide additional subsections within a standard landmark.',
              'If a region on a page does not correspond to one of the defined ARIA landmark roles, the @section@ element technique described above can be used to create a landmark container for the content.'
            ],
            MANUAL_CHECKS: [
              'View the accessible names of the landmarks on the page and verify that each uniquely describes the type of content the landmark contains.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: Landmark Roles',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#landmark_roles'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: Sections',
                url:   'https://www.w3.org/TR/html5/sections.html#sections'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
                url:   'https://w3c.github.io/aria-practices/#aria_landmark'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
                url:   'https://w3c.github.io/aria-practices/examples/landmarks/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'W3C Web Accessibility Tutorials: Page Structure',
                url:   'https://www.w3.org/WAI/tutorials/page-structure/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
              }

            ]
        },

        // ----------------------------------------------------------------
        // LANDMARK_19: complementary landmark: restrictions
        // ----------------------------------------------------------------

        LANDMARK_19: {
            ID:         'Landmark 19',
            DEFINITION: 'The @complementary@ landmark %s be a top-level landmark.',
            SUMMARY:    '@complementary@ landmark: must be top level',
            TARGET_RESOURCES_DESC: '@complementary@ landmark',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Update the @complementary@ landmark on the page to ensure that it is a top-level @complementary@ landmark.',
              FAIL_P:   'Update the @complementary@ landmarks on the page to ensure that each is a top-level  @complementary@ landmark or a child of a @main@ landmark.',
              HIDDEN_S: 'One element with @[role="complementary"]@ attribute or @aside@ element that is hidden was not evaluated.',
              HIDDEN_P: '%N_H elements with @[role="complementary"]@ attribute and/or @aside@ elements  that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @[role="complementary"]@ attributes and/or @aside@ elements on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   '@%1[role="complementary"]@ attribute defines a @complementary@ landmark that is a top-level landmark.',
              ELEMENT_PASS_2:   '@%1[role="complementary"]@ attribute defines a @complementary@ landmark that is a top-level landmark in the @frame@ or @iframe@.',
              ELEMENT_PASS_3:   '@aside@ element defines a @complementary@ landmark that is a top-level landmark.',
              ELEMENT_PASS_4:   '@aside@ element defines a @complementary@ landmark is a top-level landmark in the @frame@ or @iframe@.',
              ELEMENT_FAIL_1:   'Update the landmark structure on the page such that the @%1[role="complementary"]@ attribute defines a @complementary@ that is a top-level landmark (it is currently the child of a @%2@ landmark).',
              ELEMENT_FAIL_2:   'Update the landmark structure on the page such that the @aside@ element is a top-level landmark (it is currently the child of a @%1@ landmark).',
              ELEMENT_HIDDEN_1: '@%1[role="complementary"]@ was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2: '@aside@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              '@complementary@ landmarks provide a way to identify sections of a page that may not be considered the main content, but that provide important supporting or related information to the main content.',
              'Top-level landmarks are the easiest to find and navigate to using assistive technologies.'
            ],
            TECHNIQUES: [
              'Use an @aside@ element to define a @complementary@ landmark.',
              'If the @aside@ element technique is not being used, a @role="complementary"@ attribute on the container element of the supporting content can be used to define a @complementary@ landmark.',
              'When creating the landmark structure on the page, ensure that the @complementary@ landmark is a top-level landmark (i.e., it is not contained within any other landmarks).'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: complementary role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#complementary'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: The ASIDE element',
                url:   'https://www.w3.org/TR/html5/sections.html#the-aside-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmarks',
                url:   'https://w3c.github.io/aria-practices/#aria_landmark'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'WAI-ARIA Authoring Practices 1.2: Landmark Example',
                url:   'https://w3c.github.io/aria-practices/examples/landmarks/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'W3C Web Accessibility Tutorials: Page Structure',
                url:   'https://www.w3.org/WAI/tutorials/page-structure/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA11: Using ARIA landmarks to identify regions of a page',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA13: Using aria-labelledby to name regions and landmarks',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA13'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14'
              }
            ]
        }
   }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */


OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

    //
    //  OAA Rules title and message string National Language Support (NLS)
    //
    rules: {
        LANGUAGE_1: {
            ID:                    'Language 1',
            DEFINITION:            'Page %s define the language of its principal content using a valid IANA language code.',
            SUMMARY:               'Page %s use language code',
            TARGET_RESOURCES_DESC: 'HTML element',
            RULE_RESULT_MESSAGES: {
              FAIL_S:  'Identify the principal language of the web page by using the @lang@ attribute on its @html@ element.'
            },
            NODE_RESULT_MESSAGES: {
              PAGE_PASS_1: 'The @html@ element defines the \'%1\' language code.',
              PAGE_FAIL_1: 'Add a @lang@ attribute with a valid IANA code to the  @html@ element of the page.',
              PAGE_FAIL_2: 'Change the language code \'%1\' defined in the @lang@ attribute of the @html@ element to a valid IANA code.'
            },
            PURPOSE: [
              'Assistive technologies like screen readers and other speech output technologies need to know the languages represented by the characters in order to speak the text content correctly.'
            ],
            TECHNIQUES: [
              'Use the @lang@ attribute on the @html@ or @xhtml@ element to define the principal language of the web page.',
              'Use the IANA codes to identify the principal language (e.g. en, fr, ...).'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML4: Specifying the language of content: the lang attribute',
                url:   'https://www.w3.org/TR/html4/struct/dirlang.html#adef-lang'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: The lang and xml:lang attributes',
                url:   'https://www.w3.org/TR/html5/dom.html#the-lang-and-xml:lang-attributes'
              },
              { type:  OpenAjax.a11y.REFERENCES.OTHER,
                title: 'W3C Internationalization: Language tags in HTML and XML',
                url:   'https://www.w3.org/International/articles/language-tags/'
              },
              { type:  OpenAjax.a11y.REFERENCES.OTHER,
                title: 'W3C Internationalization: Choosing a Language Tag',
                url:   'https://www.w3.org/International/questions/qa-choosing-language-tags'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H57: Using language attributes on the html element',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H57'
              }
            ]
        },
        LANGUAGE_2: {
            ID:                    'Language 2',
            DEFINITION:            'Elements with text content in a different language from the principal language of the page %s use the @lang@ attribute with a valid IANA language code to identify the change.',
            SUMMARY:               'Identify language changes',
            TARGET_RESOURCES_DESC: 'Elements with text content that is in a different language than the principal language of the page',
            RULE_RESULT_MESSAGES: {
              FAIL_S:  'Change the @lang@ attribute value to a valid IANA language code for the element with the @lang@ attribute.',
              FAIL_P:  'Change the @lang@ attribute values of the %N_F elements with invalid codes to valid IANA language codes.',
              MANUAL_CHECK_S: 'Review the page for any text content that is different than the principal language of the page. If such content is found, use the @lang@ attribute on the appropriate container element to identify the language change.',
              MANUAL_CHECK_P: 'Review the page for any text content that is different than the principal language of the page. If any such content sections are found, use the @lang@ attribute on each of the appropriate container elements to identify the language changes.'
            },
            NODE_RESULT_MESSAGES: {
              PAGE_FAIL_1: 'Change the @lang@ attribute value on the element with an invalid code to a valid IANA language code.',
              PAGE_FAIL_2: 'Change the @lang@ attribute values on the %1 elements with invalid codes to valid IANA language codes.',
              PAGE_MC_1: 'One change in language was found on the page. Review the page for any other text content in languages that are different than the principal language of the page. If any more changes in language are found, use the @lang@ attribute to identify them.',
              PAGE_MC_2: '%1 changes in language were found on the page. Review the page for any other text content in languages that are different than the principal language of the page. If any more changes in language are found, use the @lang@ attribute to identify them.',
              PAGE_MC_3: 'Review the page for any text content in a languages that are different than the principal language of the page. If any changes in language are found, use the @lang@ attribute to identify them.',
              ELEMENT_PASS_1: 'The @%1@ element has the valid language code of \'%2\'',
              ELEMENT_FAIL_1: 'Change the value \'%2\' defined for the @lang@ attribute on the @%1@ element to a valid IANA language code.',
              ELEMENT_HIDDEN_1: 'The @%1@ element with the language code \'%2\' is hidden'
            },
            PURPOSE: [
              'Assistive technologies like screen readers and other speech output technologies need to know the language of the characters of an element to speak the text content correctly.'
            ],
            TECHNIQUES: [
              'Use the @lang@ attribute to define the IANA language of the text content of the element.',
              'Use the IANA codes to identify the language of the text in the element (e.g. en, fr, ...).'
            ],
            MANUAL_CHECKS: [
              'Review the page for any text content in languages that are different than the principal language of the page.',
              'If any changes in language are found, use the @lang@ attribute to identify them.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML4: Specifying the language of content: the lang attribute',
                url:   'https://www.w3.org/TR/html4/struct/dirlang.html#adef-lang'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: The lang and xml:lang attributes',
                url:   'https://www.w3.org/TR/html5/dom.html#the-lang-and-xml:lang-attributes'
              },
              { type:  OpenAjax.a11y.REFERENCES.OTHER,
                title: 'W3C Internationalization: Language tags in HTML and XML',
                url:   'https://www.w3.org/International/articles/language-tags/'
              },
              { type:  OpenAjax.a11y.REFERENCES.OTHER,
                title: 'W3C Internationalization: Choosing a Language Tag',
                url:   'https://www.w3.org/International/questions/qa-choosing-language-tags'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H58: Using language attributes to identify changes in the human language',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H58'
              }
            ]
        },
        LANGUAGE_3: {
            ID:                    'Language 3',
            DEFINITION:            'Elements with @lang@ attribute %s have valid IANA language codes.',
            SUMMARY:               'Valid IANA language codes',
            TARGET_RESOURCES_DESC: 'Elements with lang attributes',
            RULE_RESULT_MESSAGES: {
              NOT_APPLICABLE: 'No elements with @lang@ attribute defined'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   'The @%1@ element defines the \'%2\' language code.',
              ELEMENT_FAIL_1: 'Change the language code \'%2\' defined in the @lang@ attribute of the @%1@ element to a valid IANA language code.',
              ELEMENT_HIDDEN_1: 'The @%1@ element with the language code \'%2\' is hidden.'
            },
            PURPOSE: [
              'Assistive technologies like screen readers and other speech output technologies need to know the language of the characters of an element in order to speak the text content correctly.'
            ],
            TECHNIQUES: [
              'Use the @lang@ attribute to define the IANA language of the text content of the element.',
              'Use the IANA codes to identify the language of the text in the element (e.g. en, fr, ...).'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML4: Specifying the language of content: the lang attribute',
                url:   'https://www.w3.org/TR/html4/struct/dirlang.html#adef-lang'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: The lang and xml:lang attributes',
                url:   'https://www.w3.org/TR/html5/dom.html#the-lang-and-xml:lang-attributes'
              },
              { type:  OpenAjax.a11y.REFERENCES.OTHER,
                title: 'W3C Internationalization: Language tags in HTML and XML',
                url:   'https://www.w3.org/International/articles/language-tags/'
              },
              { type:  OpenAjax.a11y.REFERENCES.OTHER,
                title: 'W3C Internationalization: Choosing a Language Tag',
                url:   'https://www.w3.org/International/questions/qa-choosing-language-tags'
              }
            ]
        }
   }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */


OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

    //
    //  OAA Rules title and message string National Language Support (NLS)
    //
    rules: {
        LAYOUT_1: {
            ID:                    'Layout 1',
            DEFINITION:            'Layout tables %s organize content in a meaningful sequence.',
            SUMMARY:               'Layout tables %s have meaningful sequence',
            TARGET_RESOURCES_DESC: '@table@ elements used for layout',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:    'Verify document has a meaningful sequence when layout table markup is disabled.  If content does not have a meaningful sequence, reorganize content on the page to have a meaningful sequence when layout tables are disabled.',
              HIDDEN_S:          'One @table@ element that is hidden was not evaluated.',
              HIDDEN_P:          '%N_H @table@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No layout tables found on this page.'
            },
            NODE_RESULT_MESSAGES: {
              PAGE_PASS_1:      'Page does not have any tables or layout tables are only one column wide.',
              PAGE_MC_1:        '%1 tables being used for layout were found, verify the page has a meaningful sequence of content when table markup is disabled.',
              ELEMENT_PASS_1:   'Table is one column wide, and will have the same document sequence when table markup is disabled.',
              ELEMENT_MC_1:     'Verify document has a meaningful sequence of content when layout table markup is disabled.',
              ELEMENT_MC_2:     'Verify the content in the %1x%2 layout table has a meaningful sequence of content when table markup is disabled, if the table is actually a data table add data table markup to give the table an effective caption and the data tables headings.',
              ELEMENT_MC_3:     'Verify the nesting of tables for layout of content maintains a meaningful sequence of content when table markup is disabled.',
              ELEMENT_HIDDEN_1: 'Meaningful sequence was not tested The layout @table@ is hidden from assistive technologies.'
            },
            PURPOSE: [
              'The sequence of the content (i.e. reading order) in a web page affects the conveyed meaning, especially for users of assistive technologies who cannot see the relationships between sections of content as provided by the visual cues in a graphical layout.',
              'Using table markup for page layout is one way in which the DOM order of web content can be altered such that it makes sense visually, but the reading order rendered by assistive technologies is no longer meaningful.'
            ],
            TECHNIQUES: [
              'Use CSS and web standards techniques for the coding of content, and the graphical styling and positioning of content.',
              'Avoid using table markup for graphical layout, if you do use tables for layout make sure the content still is meaningful when the table markup is disabled.',
              'Avoid using nested tables for layout, the deeper the level of nesting the more chance there of having a confusing sequence of content.',
              'Tables that are used for layout should use only @tr@ and @td@ elements, and the @table@, @tr@ and @td@ elements should have a @role="presentation"@ attribute to clearly indicate the table markup is being used for layout.'
            ],
            MANUAL_CHECKS: [
              'Use browser developer tools to disable table markup or enable a user stylesheet to change table cells to be rendered as block level elements.',
              'With layout tables disabled, view the content to make sure the reading order and structure of the document makes sense.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification: Visual formatting model',
                url:   'https://www.w3.org/TR/CSS21/visuren.html'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G57: Ordering the content in a meaningful sequence',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G57'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'C6: Positioning content based on structural markup',
                url:   'https://www.w3.org/TR/WCAG20-TECHS/C6'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'C8: Using CSS letter-spacing to control spacing within a word',
                url:   'https://www.w3.org/TR/WCAG20-TECHS/C8'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'C27: Making the DOM order match the visual order',
                url:   'https://www.w3.org/TR/WCAG20-TECHS/C27'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'F1: Failure of Success Criterion 1.3.2 due to changing the meaning of content by positioning information with CSS',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F1'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'F33: Failure of Success Criterion 1.3.1 and 1.3.2 due to using white space characters to create multiple columns in plain text content',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F33'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'F34: Failure of Success Criterion 1.3.1 and 1.3.2 due to using white space characters to format tables in plain text content',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F34'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'F49: Failure of Success Criterion 1.3.2 due to using an HTML layout table that does not make sense when linearized',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F49'
              },
              { type:  OpenAjax.a11y.REFERENCES.OTHER,
                title: 'Web Standards Group',
                url:   'https://webstandardsgroup.org/standards/'
              },
              { type:  OpenAjax.a11y.REFERENCES.OTHER,
                title: 'W3C Standards',
                url:   'https://www.w3.org/standards/'
              }
            ]
        },
        LAYOUT_2: {
            ID:                    'Layout 2',
            DEFINITION:            'Tables %s not be nested for layout of content.',
            SUMMARY:               'Do not nest layout tables',
            TARGET_RESOURCES_DESC: '@table@ elements used for layout',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Update the markup and CSS on this page to remove the nesting of the layout table that is nested.',
              FAIL_P:   'Update the markup and CSS on this page to remove the nesting of %N_F layout tables that are nested.',
              HIDDEN_S: 'One table element that is hidden was not evaluated.',
              HIDDEN_P: '%N_H table elements that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No table elements used for layout.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:    'Table is not nested with another layout table.',
              ELEMENT_PASS_2:    'Table is one column wide, and will have the same document sequence when table markup is disabled.',
              ELEMENT_FAIL_1:  'Update the markup and CSS on this page to remove the nesting of this layout table.',
              ELEMENT_HIDDEN_1:  'Table nesting was not tested beacuse the @table@ is hidden from assistive technology.'
            },
            PURPOSE: [
              'The sequence of content (i.e. order) in the document code affects its meaning, nesting layout tables often makes the sequence of content less understandable.'
            ],
            TECHNIQUES: [
              'Use CSS and web standards techniques for the coding of content, and the graphical styling and positioning of content.',
              'Avoid using table markup for graphical layout, if you do use tables for layout make sure the content still is meaningful when the table markup is disabled.',
              'Avoid using nested tables for layout, the deeper the level of nesting the more chance there of having a confusing sequence of content.',
              'Tables that are used for layout should use only @tr@ and @td@ elements, and the @table@, @tr@ and @td@ elements should have a @role="presentation"@ attribute to clearly indicate the table markup is being used for layout.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification: Visual formatting model',
                url:   'https://www.w3.org/TR/CSS21/visuren.html'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'F33: Failure of Success Criterion 1.3.1 and 1.3.2 due to using white space characters to create multiple columns in plain text content',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F33'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'F49: Failure of Success Criterion 1.3.2 due to using an HTML layout table that does not make sense when linearized',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F49'
              },
              { type:  OpenAjax.a11y.REFERENCES.OTHER,
                title: 'Web Standards Group',
                url:   'https://webstandardsgroup.org/standards/'
              },
              { type:  OpenAjax.a11y.REFERENCES.OTHER,
                title: 'W3C Standards',
                url:   'https://www.w3.org/standards/'
              }
            ]
        },
        LAYOUT_3: {
            ID:                    'Layout 3',
            DEFINITION:            'Verify that the use of the @aria-flowto@ attribute supports the intended reading order of content on the page.',
            SUMMARY:               'Verify @aria-flowto@ supports reading order',
            TARGET_RESOURCES_DESC: 'Elements with @aria-flowto@ attribute',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:    'Verify the element with the @aria-flowto@ attribute contributes to the intended reading order of content on the page.',
              MANUAL_CHECK_P:    'Verify the %N_MC elements with the @aria-flowto@ attributes contribute to the intended reading order of content on the page.',
              HIDDEN_S:          'One element with @aria-flowto@ attribute that is hidden was not evaluated.',
              HIDDEN_P:          '%N_H elements with @aria-flowto@ attribute that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No elements with @aria-flowto@ attribute found.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_MC_1:     'Verify the content reflow defined by the @aria-flowto@ attribute on the  @%1@ element creates a meaningful reading order.',
              ELEMENT_HIDDEN_1: '@%1@ element with @aria-flowto@ attribute was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'The reading order of content on the page can, in some cases, be made easier to understand by users of assistive technology with the use of @aria-flowto@.',
              'By default the reading order used by assisitive technologies is the same as the DOM ordering of content.',
              'When the DOM order of content is interspersed with unrelated content, @aria-flowto@ can be used to keep related content together.  For example a multi-column newspaper where an article spans several columns, @aria-flowto@ can be used to make it look like one continuous column to assistive technology.',
              'The @aria-flowto@ reorganizes the content by changing the order of how the content is represented in accessibility Application Programming Interfaces (APIs) used by operating systems to communicate to screen readers.'
            ],
            TECHNIQUES: [
              'The @aria-flowto@ attribute value contains a sequence of @idrefs@ that changes the reading order of content on the page as rendered by assistive technologies.',
              'Since @aria-flowto@ changes reading order to assistive technologies, it is important to read the page with a screen reader to verify the content affected by the @aria-flowto@ places related information in the proper sequence.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.1 Specification: flowto property',
                url:   'https://www.w3.org/TR/wai-aria-1.2/states_and_properties#aria-flowto'
              }
            ]
        }
   }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

  //
  //  OAA Rules title and message string National Language Support (NLS)
  //
  rules: {

    LINK_1: {
      ID:                    'Link 1',
      DEFINITION:            'The accessible name of a link %s accurately describe the target or purpose of the link.',
      SUMMARY:               'Link text %s describe the link target',
      TARGET_RESOURCES_DESC: '@a@ and @area@ elements and elements with @role="link"@ attribute',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S: 'Verify the accessible name of the @a@, @area@ or @[role=link]@ element describes the target of the link.',
        MANUAL_CHECK_P: 'Verify the accessible name of each of the %N_MC @a@, @area@ or @[role=link]@ elements describes the target of the link.',
        FAIL_S:         'Add text content to the empty link that describes the target of the link.',
        FAIL_P:         'Add text content to the %N_F empty links that describes the target of each link.',
        HIDDEN_S:       'One hidden link was not evaluated.',
        HIDDEN_P:       '%N_H hidden links were not evaluated.',
        NOT_APPLICABLE: 'No @a@, @area@ or @[role=link]@ elements on the page.'
      },
      NODE_RESULT_MESSAGES: {
        ELEMENT_MC_1:     '@%1@ element has accessible name "%2". Verify that the name accurately describes the target of the link, or if not, change the accessible name to be more descriptive.',
        ELEMENT_MC_2:     '@%1@ element has accessible name "%2" with text content "%3". Verify that the name and text content, along with its surrounding context, each accurately describes the target of the link, or if not, change the accessible name, text content and/or context so that they are more descriptive.',
        ELEMENT_FAIL_1:   'The @%1@ element does NOT have an accessible name. Add text content to the link or use an ARIA labeling technique so that the accessible name describes the target of the link.',
        ELEMENT_HIDDEN_1: '@%1@ element was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSE: [
        'When the accessible name of a link does not describe its target or purpose, users will not have the information they need to determine the usefulness of the target resources.',
        'Following links to target resources that do not provide the expected informational value is inefficient and potentially frustrating.'
      ],
      TECHNIQUES: [
        'The text content of a link, which is its default accessible name, should uniquely describe the target or purpose of the link.',
        'Use @aria-label@, @aria-labelledby@ or the @title@ attribute to provide a more descriptive accessible name when the text content of the link cannot be changed.',
        'Use @aria-describedby@ to provide additional information for links that share the same accessible name but have different contexts to allow users to differentiate among them.',
        'If the content of a link includes an @img@ element, the accessible name for the link will incorporate the text alternative specified for the image.'
      ],
      MANUAL_CHECKS: [
        'Read the accessible name for each link aloud and make sure that it describes the target or purpose of the link.'
      ],
      INFORMATIONAL_LINKS: [
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'HTML 4.01 Specification: 12.2 The A element',
          url:   'https://www.w3.org/TR/html4/struct/links.html#edef-A'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-label@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-labelledby@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-describedby@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-describedby'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'HTML 4.01 Specification: The @title@ attribute',
          url:   'https://www.w3.org/TR/html4/struct/global.html#adef-title'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'H30: Providing link text that describes the purpose of a link for anchor elements',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H30'
        },
        { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
          title: 'OAA Example 44 - Using aria-describedby to satisfy WCAG 2.4.4 Link Purpose in Context',
          url:   'https://oaa-accessibility.org/example/44/'
        }
      ]
    },

    LINK_2: {
      ID:                    'Link 2',
      DEFINITION:            'Links with different @href@s %s have unique accessible names or descriptions.',
      SUMMARY:               'Link text %s be unique',
      TARGET_RESOURCES_DESC: '@a@ and @area@ elements and elements with @role="link"@',
      RULE_RESULT_MESSAGES: {
        FAIL_P:   'Change the accessible names or add @aria-describedby@ attributes to the %N_F @a@, @area@ or @[role=link]@ elements to provide additional information that makes each accessible name or description unique.',
        NOT_APPLICABLE:  'No @a@, @area@ or @[role=link]@ elements on the page share the same accessible name.'
      },
      NODE_RESULT_MESSAGES: {
        ELEMENT_PASS_1:     '@%1@ element has the same @href@ value as the %2 links with which it shares its accessible name.',
        ELEMENT_PASS_2:     '@%1@ element has a different @href@ value than the %2 links with which it shares its accessible name, but has a unique description using the @aria-describedby@ attribute.',
        ELEMENT_FAIL_1:   'Change the accessible name of the @%1@ element or provide additional information using the @aria-describedby@ attribute to make the link text unique.'
      },
      PURPOSE: [
        'Screen reader programs provide commands that list all links on a page by their accessible names. When links are taken out of their page context and placed in the context of such a list, links with the same accessible name appear to refer to the same informational resource.',
        'When links that point to different URLs have the same accessible name or description, screen reader users may be unable to determine which link among them references the information they are seeking.'
      ],
      TECHNIQUES: [
        'The link text (i.e. its accessible name and/or description) should uniquely describe the target of a link.',
        'Use the @aria-label@, @aria-labelledby@ or @title@ attribute to provide a more descriptive accessible name when the text content of the link cannot be changed.',
        'Use @aria-describedby@ to provide additional information for links that share the same accessible name but have different contexts to allow users to differentiate among them.'
      ],
      MANUAL_CHECKS: [
      ],
      INFORMATIONAL_LINKS: [
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'HTML 4.01 Specification: 12.2 The A element',
          url:   'https://www.w3.org/TR/html4/struct/links.html#edef-A'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-label@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-labelledby@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-describedby@ attribute',
          url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-describedby'
        },
        { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'HTML 4.01 Specification: The @title@ attribute',
          url:   'https://www.w3.org/TR/html4/struct/global.html#adef-title'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'H30: Providing link text that describes the purpose of a link for anchor elements',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H30'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA1: Using the aria-describedby property to provide a descriptive label for user interface controls',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA1'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA7: Using aria-labelledby for link purpose',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA7'
        },
        { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
          title: 'ARIA8: Using aria-label for link purpose',
          url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA8'
        },
        { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
          title: 'OAA Example 44 - Using aria-describedby to satisfy WCAG 2.4.4 Link Purpose in Context',
          url:   'https://oaa-accessibility.org/example/44/'
        }
      ]
    }
  }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */


OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

    //
    //  OAA Rules title and message string National Language Support (NLS)

    //
    rules: {
     LIST_1: {
            ID:                    'List 1',
            DEFINITION:            'Page %s use semantic markup for lists: to identify the type of list container (ordered, unordered or description list) and to group its related list item elements.',
            SUMMARY:               'Use semantic markup for lists',
            TARGET_RESOURCES_DESC: '@ul@, @ol@, @li@, @dl@, @dt@ and @dd@ elements, @[role="list"]@, @[role="group"]@ and @[role="listitem"]@',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:   'Verify the list element is used semantically.',
              MANUAL_CHECK_P:   'Verify the %N_MC list elements are used semantically.',
              HIDDEN_S:         'The hidden list element was not evaluated.',
              HIDDEN_P:         'The %N_H hidden list elements were not evaluated.',
              NOT_APPLICABLE:   'No list elements found on the page.'
            },
            NODE_RESULT_MESSAGES: {
              PAGE_MC_1:         'Verify the %1 list elements are used semantically and that list markup was not omitted.',
              ELEMENT_MC_1:      'Verify the @%1@ element identifies a container element for a related group of list items.',
              ELEMENT_MC_2:      'Verify the @%1@ element identifies a list item element in a meaningfully grouped list of items.',
              ELEMENT_HIDDEN_1:  'The hidden @%1@ element was not evaluated.'
            },
            PURPOSE: [
              'When list markup is used semantically, assistive technologies are able to convey information to users as they navigate to and within lists, such as the total number of items and the relative position of each item in the list.',
              'Assistive technologies also provide additional navigation commands for lists, such as "Go to next list item" and "Go to next list".',
              'Concision of list item content is important for accessibility, since assistive technologies read the entire content of each list item when users navigate through lists.',
              'When list markup is used in ways that violate the semantics of lists, it will be confusing to users of assistive technologies and diminish the accessibility of the page.'
            ],
            TECHNIQUES: [
              'Ensure that list item content is concise.',
              'You can use ARIA labeling techniques to give a list container element a descriptive label.',
              'Use @ol@ as a container element for an ordered list of items.',
              'Use @ul@ as a container element for an unordered list of items.',
              'Use @li@ elements to identify items in ordered (@ol@) and unordered (@ul@) lists.',
              'Use @dl@ as a container element for a description list (a.k.a. definition list) that contains contiguous groupings of terms and their associated descriptions or definitions.',
              'Use @dt@ elements to identify terms being described or defined in a description list (@dl@).',
              'Use @dd@ elements to identify descriptions or definitions for a term in a description list (@dl@).',
              'For repairing existing content that does not use list elements, you can use the ARIA @role@ attributes with value @[role="list"]@ or @[role="group"]to identify list container elements and @[role="listitem"]@ to identify list item elements.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: ol element',
                url:   'https://www.w3.org/TR/html5/grouping-content.html#the-ol-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: ul element',
                url:   'https://www.w3.org/TR/html5/grouping-content.html#the-ul-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: li element',
                url:   'https://www.w3.org/TR/html5/grouping-content.html#the-li-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: dl element',
                url:   'https://www.w3.org/TR/html5/grouping-content.html#the-dl-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: dt element',
                url:   'https://www.w3.org/TR/html5/grouping-content.html#the-dt-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: dd element',
                url:   'https://www.w3.org/TR/html5/grouping-content.html#the-dd-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: group role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#group'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: list role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#list'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: listitem role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#listitem'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: aria-posinset',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-posinset'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: aria-setsize',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-setsize'
              }
            ]
        },
     LIST_2: {
            ID:                    'List 2',
            DEFINITION:            'When appropriate, a list container element (@ul@, @ol@, @dl@, @[role="list"]@, @[role="group"]@) %s include a label that describes the purpose or contents of the list.',
            SUMMARY:               'Provide list labels when appropriate',
            TARGET_RESOURCES_DESC: '@ul@, @ol@ and @dl@ elements, container elements with @[role="list"]@, @[role="group"]@',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:   'Determine whether the container element benefits from a label and, if so, verify that it accurately describes the contents of the list.',
              MANUAL_CHECK_P:   'Determine whether the %N_MC list container elements benefit from labels and, if so, verify that each accurately describes the contents of the list.',
              HIDDEN_S:         'The hidden list element was not evaluated.',
              HIDDEN_P:         'The %N_H hidden list elements were not evaluated.',
              NOT_APPLICABLE:   'No list elements elements found on the page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_MC_1:      'Verify the label "%1" accurately describes the contents of the list.',
              ELEMENT_MC_2:      'Verify the @%1@ list container element does not benefit from a label, or add a label that describes the contents of the list.',
              ELEMENT_HIDDEN_1:  'The hidden @%1@ element was not evaluated.'
            },
            PURPOSE: [
              'Assistive technologies use labels on @ul@, @ol@ and @dl@ elements, and elements with @[role="list"]@ and @[role="group"]@ attributes to help screen reader users understand the purpose or contents of lists.'
            ],
            TECHNIQUES: [
              'Use the @aria-labelledby@ attribute to add a label to a list container element to reference the @id@(s) of one or more elements on the page that describe its contents.',
              'Use the @aria-label@ attribute to add a label to a list container element to provide an explicit text description of its contents.',
              'The @title@ attribute can also be used to add a label to a list container element to provide an explicit text description of its contents.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: ol element',
                url:   'https://www.w3.org/TR/html5/grouping-content.html#the-ol-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: ul element',
                url:   'https://www.w3.org/TR/html5/grouping-content.html#the-ul-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: dl element',
                url:   'https://www.w3.org/TR/html5/grouping-content.html#the-dl-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: group role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#group'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: list role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#list'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-label@ attribute',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-labelledby@ attribute',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: The @title@ attribute',
                url:   'https://www.w3.org/TR/html4/struct/global.html#adef-title'
              }
            ]
        }
     }
});

/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */


OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

    //
    //  OAA Rules title and message string National Language Support (NLS)
    //
    rules: {
        NAVIGATION_1: {
            ID:         'Navigation 1',
            DEFINITION: 'At least two of the following features %s be provided for finding content in a website: a website search feature; a list of links on the home page to all pages in the website; a list of links on each page for navigation between pages; bread crumb links on each page for hierarchical navigation of the website and/or a dedicated page that serves as a site map of all the pages in the website.',
            SUMMARY:    'At least two ways of finding content',
            TARGET_RESOURCES_DESC: 'Website navigational links and search form controls',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S: 'Verify that this page can be found from other pages in the website using at least two of the following features: a website search feature; a list of links for navigation from at least one other page in the website and/or from a page in the web site that serves as a site map.',
              MANUAL_CHECK_P: 'Verify that this page can be found from other pages in the website using at least two of the following features: a website search feature; a list of links for navigation from at least one other page in the website and/or from a page in the web site that serves as a site map.',
              NOT_APPLICABLE: 'Single page web resource: no other pages to link to or to search from.'
            },
            NODE_RESULT_MESSAGES: {
              WEBSITE_MC_1: 'This page has both @navigation@ and @search@ landmarks. Verify that they provide links for navigating and the ability to search for content in this website.',
              WEBSITE_MC_2: 'Verify that this page can be found from at least two of the following website features: a website search feature; a list of links for navigation from at least one other page in the website and/or from a page in the web site that serves as a site map.',
              ELEMENT_MC_1: 'Verify that this @navigation@ landmark can be used for navigation of the content in this website.',
              ELEMENT_MC_2: 'Verify that this @search@ landmark can be used to search for content in this website.'
            },
            PURPOSE: [
              'One of the fundamental features of the web is the provision of easy access to useful information. By providing multiple ways to find information within a website, people with disabilities are able to locate content in a manner that best meets their needs.'
            ],
            TECHNIQUES: [
              'Website search feature identified by the @search@ landmark.',
              'A list of links for navigation between pages using the @navigation@ landmark.',
              'Sandtrail/bread crumb links for hierarchical navigation of the website using the @navigation@ landmark.',
              'A dedicated page that serves as a site map of all the pages in the website.'
            ],
            MANUAL_CHECKS: [
              'Verify that at least two of the techniques are implemented for finding content on this page.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: Landmark Roles',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#landmark_roles'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G63: Providing a site map',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G63'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G64: Providing a Table of Contents',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G64'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G125: Providing links to navigate to related Web pages',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G125'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G126: Providing a list of links to all other Web pages',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G126'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G161: Providing a search function to help users find content',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G161'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G185: Linking to all of the pages on the site from the home page',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G185'
              }
            ]
        },
        NAVIGATION_2: {
            ID:         'Navigation 2',
            DEFINITION: 'Consistent ordering of @main@, @navigation@, @search@, @banner@, @contentinfo@, @complementary@ and any other shared landmarks used across all pages in a website.',
            SUMMARY:    'Consistent ordering of landmarks',
            TARGET_RESOURCES_DESC: '@main@, @navigation@, @search@, @banner@ and @contentinfo@ landmarks',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S: 'Verify that this page uses the same ordering of@main@, @navigation@, @search@, @banner@, @contentinfo@, @complementary@ and any other shared landmarks as other pages within the website.',
              MANUAL_CHECK_P: 'Verify that this page uses the same ordering of @main@, @navigation@, @search@, @banner@, @contentinfo@, @complementary@ and any other shared landmarks as other pages within the website.',
              NOT_APPLICABLE: 'No landmarks found on the page.'
            },
            NODE_RESULT_MESSAGES: {
              WEBSITE_MC_1:   'Verify that this page uses the same ordering of the following landmarks as other pages in the website: %1.',
              ELEMENT_MC_1:   'Verify that the ordering of the @main@ landmark relative to other landmarks on this page is the same as the ordering used on the other pages in this website.',
              ELEMENT_MC_2:   'Verify that the ordering of the @navigation@ landmark relative to other landmarks on this page is the same as the ordering used on the other pages in this website.',
              ELEMENT_MC_3:   'Verify that the ordering of the @banner@ landmark relative to other landmarks on this page is the same as the ordering used on the other pages in this website.',
              ELEMENT_MC_4:   'Verify that the ordering of the @contentinfo@ landmark relative to other landmarks on this page is the same as the ordering used on the other pages in this website.',
              ELEMENT_MC_5:   'Verify that the ordering of the @search@ landmark relative to other landmarks on this page is the same as the ordering used on the other pages in this website.',
              ELEMENT_MC_6:   'Verify that the ordering of the @complementary@ landmark relative to other landmarks on this page is the same as the ordering used on the other pages in this website.'
            },
            PURPOSE: [
              'One of the fundamental features of the web is the provision of easy access to useful information. Providing consistent ordering of landmarks across all pages of a website will make it easier for people to find the information they are seeking and to navigate between and within pages.'
            ],
            TECHNIQUES: [
              'Include the basic @main@, @navigation@, @banner@ and @contentinfo@ landmarks in your page templates for the website.',
              'If the page includes a website search form, use the @search@ landmark.',
              'Use consistent ordering of the @main@, @navigation@, @search@, @banner@, @contentinfo@, @complementary@ and any other landmarks that are a part of each page within a website.'
            ],
            MANUAL_CHECKS: [
              'Verify that the ordering of the @main@, @navigation@, @search@, @banner@, @contentinfo@, @complementary@ and any other landmarks that are part of each page is consistent with the ordering of these landmarks on other pages.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: Landmark Roles',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#landmark_roles'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G61: Presenting repeated components in the same relative order each time they appear',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G61'
              }
            ]
        },
        NAVIGATION_3: {
            ID:         'Navigation 3',
            DEFINITION: 'Consistent ordering of @h1@ and @h2@ elements that label recurring page sections common across all pages in a website.',
            SUMMARY:    'Consistent ordering of @h1@ and @h2@ labels',
            TARGET_RESOURCES_DESC: '@h1@ and @h2@ elements used to identify recurring sections of pages within a website',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S: 'Verify that this page uses the same ordering of @h1@ and @h2@ elements used to mark recurring page sections as the ordering used on the other pages within the website.',
              MANUAL_CHECK_P: 'Verify that this page uses the same ordering of @h1@ and @h2@ elements used to mark recurring page sections as the ordering used on the other pages within the website.',
              FAIL_S:         'No @h1@ or @h2@ elements found on the page.',
              FAIL_P:         'No @h1@ or @h2@ elements found on the page.',
              NOT_APPLICABLE: 'Single page web resource: consistent ordering of @h1@ and @h2@ does not apply.'
            },
            NODE_RESULT_MESSAGES: {
              WEBSITE_FAIL_1: 'No @h1@ or @h2@ elements found on the page.',
              WEBSITE_MC_1:   'Verify that the ordering of @h1@ and @h2@ elements used to mark recurring page sections on this page is the same as the ordering used on the other pages within the website.',
              ELEMENT_MC_1:   'Verify that if this @h1@ heading is used to identify the main content of the page, it is in the same order relative to any @h2@ elements that identify recurring page sections as the ordering used on the other pages within the website.',
              ELEMENT_MC_2:   'Verify that if this @h2@ heading is used to identify a recurring page section, it is in the same order relative to other comparable @h2@ elements as the ordering used on the other pages within the website.'
            },
            PURPOSE: [
              'One of the fundamental features of the web is the provision of easy access to useful information. Consistent ordering of @h1@ and @h2@ elements used to identify recurring page sections common across all pages in the website will make it easier for people to find information they are seeking and to navigate between and within pages.'
            ],
            TECHNIQUES: [
              'Use an @h1@ element to identify the main content within a page.',
              'Use @h2@ elements to identify other recurring page sections such as navigation bars, web site search forms, footer information, etc.'
            ],
            MANUAL_CHECKS: [
              'View the @h1@ and @h2@ heading structure of the page, and verify that it has the same or a similar structure as other pages within the website, especially with respect to recurring page sections.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: Landmark Roles',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#landmark_roles'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G61: Presenting repeated components in the same relative order each time they appear',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G61'
              }
            ]
        },
        NAVIGATION_4: {
            ID:         'Navigation 4',
            DEFINITION: 'Consistent labeling of landmarks across all pages in a website.',
            SUMMARY:    'Consistent labeling of landmarks',
            TARGET_RESOURCES_DESC: '@main@, @navigation@, @search@, @banner@, @complementary@ and @contentinfo@ landmarks',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S: 'Verify that the labeling of the @main@, @navigation@, @search@, @banner@, @complementary@ and @contentinfo@ landmarks on this page is consistent with the labeling of all comparable landmarks on all other pages within the website.',
              MANUAL_CHECK_P: 'Verify that the labeling of the @main@, @navigation@, @search@, @banner@, @complementary@ and @contentinfo@ landmarks on this page is consistent with the labeling of all comparable landmarks on all other pages within the website.',
              NOT_APPLICABLE:  'No landmarks found on the page.'
            },
            NODE_RESULT_MESSAGES: {
              WEBSITE_MC_1: 'Verify that the labeling of landmarks on this page is consistent with the labeling of comparable landmarks on all other pages within the website.',
              ELEMENT_MC_1: 'Verify that the labeling of the @main@ landmark on this page is consistent with the labeling of comparable @main@ landmarks on all other pages within the website.',
              ELEMENT_MC_2: 'Verify that the labeling of the @navigation@ landmark on this page is consistent with the labeling of comparable @navigation@ landmarks on all other pages within the website.',
              ELEMENT_MC_3: 'Verify that the labeling of the @banner@ landmark on this page is consistent with the labeling of comparable @banner@ landmarks on all other pages within the website.',
              ELEMENT_MC_4: 'Verify that the labeling of the @contentinfo@ landmark on this page is consistent with the labeling of comparable @contentinfo@ landmarks on all other pages within the website.',
              ELEMENT_MC_5: 'Verify that the labeling of the @search@ landmark on this page is consistent with the labeling of comparable @search@ landmarks on all other pages within the website.',
              ELEMENT_MC_6: 'Verify that the labeling of the @complementary@ landmark on this page is consistent with the labeling of comparable @complementary@ landmarks on all other pages within the website.'
            },
            PURPOSE: [
              'One of the fundamental features of the web is the provision of easy access to useful information. Consistent labeling of comparable landmark-identified content across all pages of a website will make it easier for people to find information they are seeking and to navigate between and within pages.'
            ],
            TECHNIQUES: [
              'Most pages have sections associated with the @main@, @navigation@, @banner@ and @contentinfo@ landmarks in your page templates for the website.',
              'If the page includes a website search form, use the @search@ landmark.',
              'Landmarks only need labels (using @aria-label@ or @aria-labelledby@) if there is more than one landmark of the same type on a page.',
              'If landmarks have labels, use consistent labeling of the landmarks across all pages within the website.'
            ],
            MANUAL_CHECKS: [
              'Verify that the main content of the page is contained within the @main@ landmark.',
              'Verify that recurring content at the top of each page is contained within a @banner@ landmark.',
              'Verify that website navigational links are contained within @navigation@ landmarks.',
              'Verify that recurring content at the bottom of each page is contained within a @contentinfo@ landmark.',
              'Verify that if a landmark has a label and there are comparable landmarks on other pages in the website, the labels are the same on each page.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: Landmark Roles',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#landmark_roles'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G61: Presenting repeated components in the same relative order each time they appear',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G61'
              }
            ]
        },
        NAVIGATION_5: {
            ID:         'Navigation 5',
            DEFINITION: 'Consistent accessible names for @h1@ and @h2@ elements that identify recurring page sections common across all pages in a website.',
            SUMMARY:    'Consistent @h1@ and @h2@ page section labels',
            TARGET_RESOURCES_DESC: '@h1@ and @h2@ elements used to identify recurring page sections within a website',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S: 'Verify that the accessible names of @h1@ and @h2@ elements used to identify recurring page sections are consistent with those on all other pages within the website.',
              MANUAL_CHECK_P: 'Verify that the accessible names of @h1@ and @h2@ elements used to identify recurring page sections are consistent with those on all other pages within the website.',
              FAIL_S: 'No @h1@ or @h2@ elements found on the page.',
              FAIL_P: 'No @h1@ or @h2@ elements found on the page.',
              NOT_APPLICABLE: 'Single page web resource: consistency of accessible names does not apply.'
            },
            NODE_RESULT_MESSAGES: {
              WEBSITE_FAIL_1: 'No @h1@ or @h2@ elements found on the page',
              WEBSITE_MC_1:   'Verify that the accessible names of @h1@ and @h2@ elements used to identify recurring page sections are the same as those of comparable @h1@ and @h2@ elements found on the other pages within the website.',
              ELEMENT_MC_1:   'Verify that if this @h1@ heading is used to identify the main content of the page, it has the same accessible name as comparable @h1@ elements on the other pages within the website.',
              ELEMENT_MC_2:   'Verify that if this @h2@ heading is used to identify a recurring page section, it has the same accessible name as comparable @h2@ elements on the other pages within the website.'
            },
            PURPOSE: [
              'One of the fundamental features of the web is the provision of easy access to useful information. Consistent accessible names of @h1@ and @h2@ elements used to identify recurring page sections common across all pages in the website will make it easier for people to find information they are seeking and to navigate between and within pages.'
            ],
            TECHNIQUES: [
              'Use @h1@ elements to identify the main content within a page.',
              'Use @h2@ elements to identify other major sections within pages, e.g. navigation bars, web site search forms, footer information, etc.'
            ],
            MANUAL_CHECKS: [
              'View the @h1@ and @h2@ heading structure of the page, and verify that it has the same relative order as other pages within the website'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: Landmark Roles',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#landmark_roles'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G61: Presenting repeated components in the same relative order each time they appear',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G61'
              }
            ]
        }
   }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

  //
  //  OAA Rules title and message string National Language Support (NLS) for sensory rules
  //
  rules: {
    ORDER_1: {
      ID:                    'Order 1',
      DEFINITION:            'Elements positioned using CSS @absolute@, @relative@ or @fixed@ %s maintain a meaningful reading order of content.',
      SUMMARY:               'Reading order: CSS positioning',
      TARGET_RESOURCES_DESC: '@article@, @aside@, @div@, @footer@, @header@, @main@, @nav@, @section@, @table[role="presentation"]@',
      RULE_RESULT_MESSAGES: {
        MANUAL_CHECK_S:   'Verify the element positioned with CSS maintains a reading order meaningful to users of assistive technologies.',
        MANUAL_CHECK_P:   'Verify the %N_MC elements positioned with CSS maintain a reading order meaningful to users of assistive technologies.',
        HIDDEN_S:         'The element positioned with CSS that is hidden was not evaluated.',
        HIDDEN_P:         '%N_H elements positioned with CSS that are hidden were not evaluated.'
        },
      NODE_RESULT_MESSAGES: {
        ELEMENT_MC_1:     'Verify the @%1@ element with @position: %2@ maintains a meaningful reading order with other content on the page.',
        ELEMENT_HIDDEN_1: 'The @%1@ element with @position: %2@ was not evaluated because it is hidden from assistive technologies.'
      },
      PURPOSE: [
        'If the reading order of text content on the page is presented to users of assistive technologies in an order that does not match the intension of the author, reading comprehension will be affected. In worst-case scenarios, the meaning of the out-of-order content may contradict or bear little resemblance to the intended meaning.',
        'Assistive technologies render web page content based upon the sequence of the DOM elements within the HTML document.',
        'Web page designs that rely upon @table@ markup for layout or advanced CSS positioning techniques and JavaScript to rearrange content may result in a visual rendering of content that differs in reading order from the actual DOM ordering used by assistive technologies. Thus while the visual rendering may appear to have the correct or desired reading order, when rendered by assistive technologies such as screen readers, the actual reading order will be incorrect and correspondingly illogical.',
        'The relationship of the DOM order of content to the intended reading order is therefore very important for ensuring that information is logically presented to users of assistive technologies.'
      ],
      TECHNIQUES: [
        'Minimize the use of CSS @position@ values of @absolute@,  @relative@ and @fixed@.',
        'Make sure related content moves as a block when repositioning content on a page.'
      ],
      MANUAL_CHECKS: [
        'Disable layout tables (e.g. table[role="presentation"]) and CSS to make sure the content rendered has a meaningful sequence.'
      ],
      INFORMATIONAL_LINKS: [
        {
          type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'WCAG 2.0 Success Criterion 1.3.2 Meaningful Sequence',
          url:   'https://www.w3.org/TR/WCAG20/#content-structure-separation-sequence'
        },
        {
          type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
          title: 'Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification: position property',
          url:   'https://www.w3.org/TR/CSS2/visuren.html#propdef-position'
        }
      ]
    }
  }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */


OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

    //
    //  OAA Rules National Language Support (NLS) for Audio Rules
    //
    rules: {
        RESIZE_1: {
            ID:                    'Resize 1',
            DEFINITION:            'When the text of a page is resized the text content %s reflow to fill available view and all text content should remain visible (e.g. text is not clipped by iframe sizes or CSS overflow limits).',
            SUMMARY:               'Resize text content',
            TARGET_RESOURCES_DESC: 'All pages',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:  'Resize the text using the zoom feature of the browser to check to make sure text content is visible (e.g. text is not clipped by iframe sizes or CSS overflow limits).'
            },
            NODE_RESULT_MESSAGES: {
              PAGE_MC_1:      'Resize the text using the zoom feature of the browser to check to make sure text content is visible (e.g. text is not clipped by iframe sizes or CSS overflow limits).'
            },
            PURPOSE: [
              'People with visual impairments may increase the size of text and the text should reflow to fit the available viewing area to make it easier to read.',
              'If text is clipped by limits on iframe sizes or CSS overflow properties some text content will be impossible to view.'
            ],
            TECHNIQUES: [
              'Use relative CSS sized like @em@ and @percentage@ rather than pixels and point sizes.',
              'If using the CSS overflow property, @iframe@ or @frame@ check to make sure content reflows and is not clipped by changes in zoom levels.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'How to meet 1.4.4 Resize Text',
                url:   'https://www.w3.org/WAI/WCAG20/quickref/#qr-visual-audio-contrast-scale'
              }
            ]
        }
    }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */


OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

    //
    //  OAA Rules title and message string National Language Support (NLS)
    //
    rules: {
        ROLE_1: {
            ID:               'Role 1',
            DEFINITION:       'Overriding a @main@ element\'s default @role@ of @main@ landmark %s only be done in special cases. NOTE: Deprecated in favor of HTML 3 a more general rule on role restrictions based on ARIA in HTML specification.',
            SUMMARY:          '@main@ element @role@ semantics. (Deprecated)',
            TARGET_RESOURCES_DESC: '@main@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:         'Remove the @role@ attribute from the @main@ element to support the default @main@ landmark semantics, if the content does not represent @main@ landmark semantics use @role="presentation"@ or change the element to one that does identify the semantics of the content.',
              FAIL_P:         'Remove the @role@ attribute from the %N_F @main@ elements to support the default @main@ landmark semantics, if the content does not represent @main@ landmark semantics use @role="presentation"@ or change the element to one that does identify the semantics of the content.',
              MANUAL_CHECK_S: 'Verify that the @main@ element with @role="presentation"@ does not contain @main@ landmark semantics.',
              MANUAL_CHECK_P: 'Verify that the %N_MC @main@ elements with @role="presentation"@ do not contain @main@ landmark semantics.',
              HIDDEN_S:       'One @main@ element that is hidden was not evaluated.',
              HIDDEN_P:       '%N_H @main@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @main@ elements found on the page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_FAIL_1:   'Remove the attribute @role="%1"@ to support the default semantics of a @main@ landmark or if the element does not identify the primary content change the role to @role="presentation"@ or use a different element that does identify the semantics of content.',
              ELEMENT_MC_1:     'Verify the @main@ element with @role="presentation"@ does not contain the primary content of the page.',
              ELEMENT_HIDDEN_1: '@main@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'The @main@ element has role restrictions as part of its definition in the W3C HTML5 Specification.',
              'The @main@ element semantics are to identify the primary content on the page.',
              'If the @main@ element does not contain the primary content of the web page the @main@ landmark semantics the of the element must be changed.'
            ],
            TECHNIQUES: [
              'HTML5 enabled browsers and modern assistive technologies identify the @main@ element as a @main@ landmark without @role="main"@ being specified, but @role="main"@ is allowed for backward compatibility.',
              'If the @main@ element does not contain the primary content of the web page due to author error use @role="presentation"@ to override the @main@ landmark semantics or change element to an element that correctly identifies the semantics of the content.',
              'If you need to support Microsoft Internet Explorer(IE) 8, use @div[role="main"]@ instead of the @main@ element to indicate primary content, since IE 8 does not support accessibility features of HTML5 elements.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 5 Specification: The main element',
                url:   'https://www.w3.org/TR/html5/grouping-content.html#the-main-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Using WAI-ARIA in HTML',
                url:   'https://www.w3.org/TR/aria-in-html/'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: main role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#main'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: presentation role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#presentation'
              }
            ]
        },
        ROLE_2: {
            ID:               'Role 2',
            DEFINITION:       'The @body@ element %s only @document@ (default) or @application@ role semantics. NOTE: Deprecated in favor of HTML 3 a more general rule on role restrictions based on ARIA in HTML specification.',
            SUMMARY:          '@body@ element role semantics. (Deprecated)',
            TARGET_RESOURCES_DESC: '@body@ element',
            RULE_RESULT_MESSAGES: {
              FAIL_S:         'Change the role attribute on the @body@ element to either @document@ or @application@, or remove the @role@ attribute all together.',
              FAIL_P:         'Change the role attribute on the %N_F @body@ elements to either @document@ or @application@, or remove the role attribute all together.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_FAIL_1: 'Change the attribute @role="%1"@ to @role="document"@ or @role="application"@, or remove the @role@ attribute all together.'
            },
            PURPOSE: [
              'The @body@ element has role restrictions as part of its definition in the W3C HTML5 Specification.',
              'The @body@ element should only be used to indicate whether the page is primarily has @document@ or @application@ semantics.',
              'The default (e.g. no @role@ attribute) is @document@ role semantics.'
            ],
            TECHNIQUES: [
              'If the web page is primarily composed of forms and widgets that benefit from using the @role="application"@ on the @body@ element.',
              'If the web page is primarily composed of non interactive text and images do not use the @role@ attribute on the @body@ element.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 5 Specification: The body element',
                url:   'https://www.w3.org/TR/html5/sections.html#the-body-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: document role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#document'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: application role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#application'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Using WAI-ARIA in HTML',
                url:   'https://www.w3.org/TR/aria-in-html/'
              }
            ]
        },
        ROLE_3: {
            ID:               'Role 3',
            DEFINITION:       '@ol@ and @ul@ elements %s only have grouping role values of @directory, @group@, @listbox@, @menu@, @menubar@, @presentation@, @radiogroup@, @tablist@, @toolbar@ or @tree@. NOTE: Deprecated in favor of HTML 3 a more general rule on role restrictions based on ARIA in HTML specification.',
            SUMMARY:          '@ol@ and @ul@ role grouping semantics. (Deprecated)',
            TARGET_RESOURCES_DESC: '@ol@ and @ul@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:         'Remove the @role@ on the @ol@ and @ul@ element or change the @role@ semantics to an allowed grouping widget role.',
              FAIL_P:         'Remove the @role@ on the %N_F @ol@ and @ul@ elements or change the @role@ semantics to an allowed grouping widget role.',
              MANUAL_CHECK_S: 'Verify that the  @ol@ and @ul@ element with @role="presentation"@ does not contain content related to the semantics of a list element or grouping widget role.',
              MANUAL_CHECK_P: 'Verify that the %N_MC  @ol@ and @ul@ elements with @role="presentation"@ do not contain content related to the semantics of a list element or grouping widget role.',
              HIDDEN_S:       'One @ol@ and @ul@ element with @role@ attribute that is hidden was not evaluated.',
              HIDDEN_P:       '%N_H @ol@ and @ul@ elements with @role@ attribute that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @ol@ and @ul@ elements with @role@ attribute found on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_FAIL_1:   'Remove the @role@ attribute on the @%1@ element, change the attribute @role="%2"@ to an allowed role, or use a different element that represents the semantics of the content.',
              ELEMENT_MC_1:     'Verify the @%1@ element with @role="presentation"@ does not contain content that could be considered part of a list.',
              ELEMENT_HIDDEN_1: '@%1@ element with @role="%2"@ was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'The @ol@ and @ul@ elements have role restrictions as part of their definition in the W3C HTML5 Specification.',
              'When @ol@ and @ul@ elements only need to use the @role@ attribute when they are part of interactive widgets and are restricted to widget grouping roles.',
              'The @role@ values used identify grouping widget roles to ensure that their native grouping semantics are not inadvertently overridden by non-grouping widget or landmark roles.'
            ],
            TECHNIQUES: [
              'Do not use the @role@ attribute if the default semantics of @ol@ or @ul@ represent a container of a non-interactive list.',
              'The @ol@ and @ul@ elements when used as part of widgets must be used to indicate the grouping of a list of related widget roles.',
              'Allowed role values include: @directory, @group@, @listbox@, @menu@, @menubar@, @presentation@, @radiogroup@, @tablist@, @toolbar@ or @tree@.',
              'In rare cases @role="presentation"@ is allowed on a @ol@ and @ul@ element when the element is not being used to represent a group of related items in a list.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 5 Specification: The ol element',
                url:   'https://www.w3.org/TR/html5/grouping-content.html#the-ol-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 5 Specification: The ul element',
                url:   'https://www.w3.org/TR/html5/grouping-content.html#the-ul-element'
              }
            ]
        },
        ROLE_4: {
            ID:               'Role 4',
            DEFINITION:       '@article@ element %s only have @role@ semantics of @region@, @article@ (default), @main@, @document@ or @application@. NOTE: Deprecated in favor of HTML 3 a more general rule on role restrictions based on ARIA in HTML specification.',
            SUMMARY:          '@article@ element role semantics. (Deprecated)',
            TARGET_RESOURCES_DESC: '@article@ element',
            RULE_RESULT_MESSAGES: {
              FAIL_S:         'Remove the @role@ attribute or change the @role@ attribute on the @article@ element to an allowed @role@ value or remove the @role@ attribute all together.',
              FAIL_P:         'Remove the @role@ attributes and/or change the @role@ attribute on the %N_F @article@ elements to an allowed @role@ value or remove the role attribute all together.',
              HIDDEN_S:       'One @article@ element that is hidden was not evaluated.',
              HIDDEN_P:       '%N_H @article@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @article@ elements found on the page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_FAIL_1:   'Remove the @role@ attribute, change the attribute @role="%1"@ to one of the allowed roles, or use a different element that does semantically identify the content',
              ELEMENT_HIDDEN_1: '@article@ element with @role="%1"@ was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'The @article@ element has role restrictions as part of its definition in the W3C HTML5 Specification.',
              'The @article@ element can be primarily be used to identify news paper or magazine articles, a list or nested messages in a comment or discussion list.',
              'The @article@ element might also be used to identify static text and image content in a web application using the @region@ or @document@ role.',
              'The @article@ element might also be used to identify a section of form controls and widgets in a web application using the @region@ or @application@ role.'

            ],
            TECHNIQUES: [
              'If the content of the @article@ element is primarily form controls and/or widgets use @role="application"@ on the @article@ element.',
              'If the content of the @article@ element is used as the container for the main content of the page use @role="main"@ on the @article@ element or preferably change the element to a @main@ element.',
              'If the content of the @article@ element is used as the container for a message in nested discussion list, comment to a blog, or as a magazine/news story use @role="article"@ on the @article@ element.',
              'If the content of the @article@ element is used as a sub-section of another landmark use @role="region"@ with an accessible name to identify the sub-section.',
              'If the content of the @article@ element does not meet any of the other techniques do not use the @role@ attribute.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 5 Specification: The article element',
                url:   'https://www.w3.org/TR/html5/sections.html#the-article-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: document role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#document'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: application role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#application'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: main role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#main'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: article role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#article'
              }

            ]
        },
        ROLE_5: {
            ID:               'Role 5',
            DEFINITION:       '@section@ element %s only have role semantics of @alert@, @alertdialog@, @application@, @contentinfo@, @dialog@, @document@, @log@, @main@, @marquee@, @presentation@, @region@, @search@ or @status@. NOTE: Deprecated in favor of HTML 3 a more general rule on role restrictions based on ARIA in HTML specification.',
            SUMMARY:          '@section@ element role semantics. (Deprecated)',
            TARGET_RESOURCES_DESC: '@section@ element',
            RULE_RESULT_MESSAGES: {
              FAIL_S:         'Remove the @role@ attribute on the @section@ element or change the role to an allowed role that semantically identifies the content:  @alert@, @alertdialog@, @application@, @contentinfo@, @dialog@, @document@, @log@, @main@, @marquee@, @presentation@, @region@, @search@ or @status@, or remove the @role@ attribute all together.',
              FAIL_P:         'Remove the @role@ attribute on the %N_F @section@ elements and/or change their roles to an allowed role that semantically identifies the content:  @alert@, @alertdialog@, @application@, @contentinfo@, @dialog@, @document@, @log@, @main@, @marquee@, @presentation@, @region@, @search@ or @status@, or remove the @role@ attribute all together.',
              HIDDEN_S:       'One @section@ element that is hidden was not evaluated.',
              HIDDEN_P:       '%N_H @section@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @section@ elements found on the page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_FAIL_1:   'Remove the @role@ attribute, change the attribute @role="%1"@ to one of the allowed roles, or use a different element that does semantically identify the content',
              ELEMENT_HIDDEN_1: '@section@ element with @role="%1"@ was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'The @section@ element has role restrictions as part of its definition in the W3C HTML5 Specification.',
              'The @section@ element can be used to for identifying many types of of sections and sub sections within a web page and a limited number of widget roles, review the techniques for the possible uses of the section element with ARIA @role@ semantics.',
              'The @section@ element should not be used when there is a more semantically meaningful elements available (e.g. @main@, @header@, @footer@,..)',
              'The default (e.g. no @role@ attribute) is @role="region"@, if the @section@ element has an accessible name it will be considered a landmark in the document.'
            ],
            TECHNIQUES: [
              'If the content of the @section@ element is used as a sub-section of another landmark use @role="region"@ with an accessible name to identify the sub-section.',
              'If the content of the @section@ element is used to provide a time sensitive text message to the user that is very important for the user to know use the live region @role="alert"@ on the @section@ element.',
              'If the content of the @section@ element is used to create a error dialog box with a message that is very important for the user to know use the @role="alertdialog"@ on the @section@ element.',
              'If the content of the @section@ element is primarily form controls and/or widgets use @role="application"@ on the @section@ element.',
              'If the content of the @section@ element is used as the container for footer information that is repeated on most pages of the website use @role="contentinfo"@ on the @section@ element.',
              'If the content of the @section@ element is used to create a non-error message related dialog box use the @role="dialog"@ on the @section@ element.',
              'If the content of the @section@ element is primarily composed of non interactive text and images and the @section@ element is embedded inside an container element with @role="application""@ use the @role="document"@ attribute on the @section@ element.',
              'If the content of the @section@ element is used as the container a list of messages use @role="log"@ on the @section@ element.',
              'If the content of the @section@ element is used as the container for the main content of the page use @role="main"@ on the @section@ element.',
              'If the content of the @section@ element is used as for periodically changing text on the page that is considered more informational (e.g. news tag line) use @role="marquee"@ on the @section@ element.',
              'If the content of the @section@ element is NOT being used as the container for a region landmark use @role="presentation"@ on the @section@ element to remove it from landmark navigation.',
              'If the content of the @section@ element is used as the container for sub section within a landmark use @role="region"@ on the @section@ element.',
              'If the content of the @section@ element is used as the container for a search the website form use @role="search"@ on the @section@ element.',
              'If the content of the @section@ element is used as the container for a status message that will be automatically be updated on some pending transaction use @role="status"@ on the @section@ element.',
              'If the content of the @section@ element does not meet any of the other techniques do not use the @role@ attribute.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 5 Specification: The article element',
                url:   'https://www.w3.org/TR/html5/sections.html#the-article-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: alert role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#alert'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: alertdialog role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#alertdialog'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: application role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#application'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2:contentinfo role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#contentinfo'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: dialog role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#dialog'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: document role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#document'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: log role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#log'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: main role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#main'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: marquee role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#marquee'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: presentation role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#presentation'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: search role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#search'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: status role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#status'
              }
            ]
        },
        ROLE_6: {
            ID:               'Role 6',
            DEFINITION:       'Overriding a @nav@ element\'s default @role@ of @navigation@ landmark %s only be done in special cases. NOTE: Deprecated in favor of HTML 3 a more general rule on role restrictions based on ARIA in HTML specification.',
            SUMMARY:          'Do not override @nav@ element semantics. (Deprecated)',
            TARGET_RESOURCES_DESC: '@nav@ element',
            RULE_RESULT_MESSAGES: {
              FAIL_S:         'Remove the @role@ attribute on the @nav@ element to support the default semantics of a @navigation@ landmark, change the @role@ attribute to @presentation@ if the content does not represent a @navigation@ landmark or change the element to an element that better represents the semantics of the content.',
              FAIL_P:         'Remove the @role@ attribute on the %N_F @nav@ elements to support the default semantics of a @navigation@ landmark, change the @role@ attribute to @presentation@ if the content does not represent a @navigation@ landmark or change the element to an element that better represents the semantics of the content.',
              HIDDEN_S:       'One @nav@ element that is hidden was not evaluated.',
              HIDDEN_P:       '%N_H @nav@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @nav@ elements found on the page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_FAIL_1:   'Remove the @role@ attribute, change the attribute @role="%1"@ to @navigation@ or @role="presentation"@ or use a different element that represents the semantics of the content.',
              ELEMENT_MC_1:     'Verify the @nav[role="presentation"]@ does not contain content that represents a @navigation@ landmark.',
              ELEMENT_HIDDEN_1: '@nav@ element with @role="%1"@ was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'A @nav@ element has role restrictions as part of its definition in the W3C HTML5 Specification to help ensure the @nav@ element semantics of identifying @navigation@ landmark content.',
              'A @nav@ element should only use @role="presentation"@ if the content of the @nav@ element is not being used to identify @navigation@ landmark content (e.g. repairing poor page semantics).'
            ],
            TECHNIQUES: [
              'The @nav@ element with no @role@ value by default defines a @navigation@ landmark, but the @role="navigation"@ is allowed to support legacy pages.',
              'If the @nav@ element does not identify a @navigation@ landmark content use a different element that does identify the semantics of content.',
              'In rare cases @role="presentation"@ can be used when the @nav@ element does not represent the website or page navigation links on the page (e.g. repairing poor page semantics).',
              'Any other @role@ values are not allowed on @nav@ elements.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 5 Specification: The nav element',
                url:   'https://www.w3.org/TR/html5/sections.html#the-nav-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: navigation role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#navigation'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: presentation role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#presentation'
              }

            ]
        },
        ROLE_7: {
            ID:               'Role 7',
            DEFINITION:       '@aside@ element %s only have role semantics of @complementary@ (default do not set), @note@, @region@, @search@ or @presentation@. NOTE: Deprecated in favor of HTML 3 a more general rule on role restrictions based on ARIA in HTML specification.',
            SUMMARY:          '@aside@ element role semantics. (Deprecated)',
            TARGET_RESOURCES_DESC: '@aside@ element',
            RULE_RESULT_MESSAGES: {
              FAIL_S:         'Remove the @role@ attribute on the @aside@ element, change the role to an allowed role that semantically identifies the content: @complementary@ (default do not set), @note@, @region@, @search@ or @presentation@ .',
              FAIL_P:         'Remove the @role@ attribute on the %N_F @section@ elements, change their roles to an allowed role that semantically identifies the content:  @complementary@ (default do not set), @note@, @region@, @search@ or @presentation@.',
              HIDDEN_S:       'One @aside@ element that is hidden was not evaluated.',
              HIDDEN_P:       '%N_H @aside@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @aside@ elements found on the page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_FAIL_1:   'Remove the @role@ attribute, change the attribute @role="%1"@ to one of the allowed roles, or use a different element that does semantically identify the content',
              ELEMENT_HIDDEN_1: '@aside@ element with @role="%1"@ was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'The @aside@ element has role restrictions as part of its definition in the W3C HTML5 Specification.',
              'The @aside@ element is used for tangentially related content to main content of the page and are often represented as sidebars in printed typography.',
              'Tangentially related content should be identified as a @role="complementary"@, @role="search"@ or role of @role="note"@.',
              'The difference between @complementary@ and @search@ roles and the @note@ role is that @complementary@ and @search@ are landmark roles and support and @note@ is not a landmark role.',
              'The @search@ role should be used if the content of the @aside@ element are form controls or widgets used for searching the website content.'
            ],
            TECHNIQUES: [
              'If the content of the @aside@ element is used for tangentially related content to main content of the page use @role="complementary"@ to make the content part of the landmark navigation of the page.',
              'If the content of the @aside@ element is used for website content search form controls use @role="search"@ to identify the search semantics and make the content part of the landmark navigation of the page.',
              'If the content of the @aside@ element is used for tangentially related content to main content of the page use @role="note"@.  The @note@ role is not part of the landmark navigation of the page and therefore is less commonly used.',
              'If the content of the @aside@ element is used as a sub-section of another landmark use @role="region"@ with an accessible name to identify the sub-section.',
              'If the content of the @aside@ element is used for any other purpose than for tangentially related content to main content use @role="presentation"@ to remove the @aside@ semantics.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 5 Specification: The aside element',
                url:   'https://www.w3.org/TR/html5/sections.html#the-aside-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: complementary role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#complementary'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: note role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#note'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: search role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#search'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: presentation role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#presentation'
              }
            ]
        },
        ROLE_8: {
            ID:               'Role 8',
            DEFINITION:       'Overriding a @header@ element\'s default @role@ of @banner@ landmark %s only be done in special cases. NOTE: Deprecated in favor of HTML 3 a more general rule on role restrictions based on ARIA in HTML specification.',
            SUMMARY:          'Do not override @header@ element @role@. (Deprecated)',
            TARGET_RESOURCES_DESC: '@header@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:         'Remove the @role@ attribute from the @header@ element to support the default @banner@ landmark semantics, if the content does not represent @banner@ landmark semantics use @role="presentation"@ or change the element to one that does identify the semantics of the content .',
              FAIL_P:         'Remove the @role@ attribute from the %N_F @header@ elements to support the default @banner@ landmark semantics, if the content does not represent @banner@ landmark semantics use @role="presentation"@ or change the element to one that does identify the semantics of the content .',
              MANUAL_CHECK_S: 'Verify that the @header@ element with @role="presentation"@ does not contain @banner@ landmark semantics.',
              MANUAL_CHECK_P: 'Verify that the %N_MC @header@ elements with @role="presentation"@ do not contain @banner@ landmark semantics.',
              HIDDEN_S:       'One @header@ element that is hidden was not evaluated.',
              HIDDEN_P:       '%N_H @header@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @header@ elements found on the page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_FAIL_1:   'Remove the @role@ attribute, change the attribute @role="%1"@ to @banner@ or @role="presentation"@, or use a different element that represents the semantics of the content.',
              ELEMENT_MC_1:     'Verify the @header[role="presentation"]@ does not contain content that represents a @banner@ landmark.',
              ELEMENT_HIDDEN_1: '@header@ element with @role="%1"@ was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'A top-level @header@ element has role restrictions as part of its definition in the W3C HTML5 Specification to help ensure the @header@ element semantics of identifying @banner@ landmark content.',
              'A top-level @header@ element should only use @role="presentation"@ if the content of the @header@ element is not being used to identify @banner@ landmark content (e.g. repairing poor page semantics).'
            ],
            TECHNIQUES: [
              'The top level @header@ element with no @role@ value by default defines a @banner@ landmark, but the @role="banner"@ is allowed to support legacy pages.',
              'If the top level @header@ element does not identify a @banner@ landmark content use a different element that does identify the semantics of content.',
              'In rare cases @role="presentation"@ can be used when the @header@ element does not represent the @banner@ landmark content on the page (e.g. repairing poor page semantics).',
              'Any other @role@ values are not allowed on @header@ elements.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 5 Specification: The main element',
                url:   'https://www.w3.org/TR/html5/grouping-content.html#the-main-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: banner role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#banner'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: presentation role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#presentation'
              }
            ]
        },
        ROLE_9: {
            ID:               'Role 9',
            DEFINITION:       'Overriding a @footer@ element\'s default @role@ of @contentinfo@ landmark %s only be done in special cases. NOTE: Deprecated in favor of HTML 3 a more general rule on role restrictions based on ARIA in HTML specification.',
            SUMMARY:          'Do not override @footer@ element @role@. (Deprecated)',
            TARGET_RESOURCES_DESC: '@footer@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:         'Remove the @role@ attribute from the @footer@ element to support the default @contentinfo@ landmark semantics, if the content does not represent @contentinfo@ landmark semantics use @role="presentation"@ or change the element to one that does identify the semantics of the content .',
              FAIL_P:         'Remove the @role@ attribute from the %N_F @footer@ elements to support the default @contnentinfo@ landmark semantics, if the content does not represent @contentinfo@ landmark semantics use @role="presentation"@ or change the element to one that does identify the semantics of the content .',
              MANUAL_CHECK_S: 'Verify that the @footer@ element with @role="presentation"@ does not contain @banner@ landmark semantics.',
              MANUAL_CHECK_P: 'Verify that the %N_MC @footer@ elements with @role="presentation"@ do not contain @banner@ landmark semantics.',
              HIDDEN_S:       'One @footer@ element that is hidden was not evaluated.',
              HIDDEN_P:       '%N_H @footer@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @footer@ elements found on the page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_FAIL_1:   'Remove the @role@ attribute, change the attribute @role="%1"@ to @contentinfo@ or @role="presentation"@, or use a different element that represents the semantics of the content.',
              ELEMENT_MC_1:     'Verify the @footer[role="presentation"]@ does not contain content that represents a @contentinfo@ landmark.',
              ELEMENT_HIDDEN_1: '@footer@ element with @role="%1"@ was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'A top-level @footer@ element has role restrictions as part of its definition in the W3C HTML5 Specification to help ensure the @footer@ element semantics of identifying @contentinfo@ landmark content.',
              'A top-level @footer@ element should only use @role="presentation"@ if the content of the @footer@ element is not being used to identify @contentinfo@ landmark content (e.g. repairing poor page semantics).'
            ],
            TECHNIQUES: [
              'The top level @footer@ element with no @role@ value by default defines a @contentinfo@ landmark, but the @role="contentinfo"@ is allowed to support legacy pages.',
              'If the top level @footer@ element does not identify a @contentinfo@ landmark content use a different element that does identify the semantics of the content.',
              'In rare cases @role="presentation"@ can be used when the @footer@ element does not represent the @contentinfo@ landmark content on the page (e.g. repairing poor page semantics).',
              'Any other @role@ values are not allowed on @footer@ elements.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 5 Specification: The main element',
                url:   'https://www.w3.org/TR/html5/grouping-content.html#the-main-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: contentinfo role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#contentinfo'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: presentation role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#presentation'
              }
            ]
        },
        ROLE_10: {
            ID:               'Role 10',
            DEFINITION:       'Overriding heading element\'s (@h1-h6@) default @role@ of @heading@  %s only be done in special cases.  NOTE: Deprecated in favor of HTML 3 a more general rule on role restrictions based on ARIA in HTML specification.',
            SUMMARY:          'Overriding @h1-h6@ role semantics. (Deprecated)',
            TARGET_RESOURCES_DESC: '@h1@, @h2@, @h3@, @h4@, @h5@, @h6@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:         'Remove the @role@ attribute from the heading element to support the default @heading@ semantics, use @tab@ if the heading represents a @tab@ in a @tabpanel@, or use @role="presentation"@ if the content does not represent @heading@ or @tab@ semantics.',
              FAIL_P:         'Remove the @role@ attribute from the %N_F heading elements to support the default @heading@ semantics, use @tab@ if the heading represents a @tab@ in a @tabpanel@, and/or use @role="presentation"@ if the content does not represent @heading@ or @tab@ semantics.',
              MANUAL_CHECK_S: 'Verify that the heading element (@h1-h6@) with @role="presentation"@ does not contain @banner@ landmark semantics.',
              MANUAL_CHECK_P: 'Verify that the %N_MC heading elements (@h1-h6@) with @role="presentation"@ do not contain @banner@ landmark semantics.',
              HIDDEN_S:       'One heading element (@h1-h6@) that is hidden was not evaluated.',
              HIDDEN_P:       '%N_H heading elements (@h1-h6@) that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @heading@ elements found on the page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_FAIL_1:   'Remove the @role@ attribute form the %1 element to support the default semantics of @heading@, change the attribute @[role="%2"]@ to @tab@ or @presentation@, or use a different element that represents the semantics of the content.',
              ELEMENT_MC_1:     'Verify the @%1[role="presentation"]@ does not contain content that represents a @heading@ semantics.',
              ELEMENT_HIDDEN_1: '@%1[role="%2"]@ was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Heading elements (@h1-h6@) have role restrictions as part of its definition in the W3C HTML5 Specification to help ensure the heading element semantics of identifying @heading@ and @tab@ content.',
              'Heading elements (@h1-h6@) should only use @role="presentation"@ if the content of the heading element is not being used to identify @heading@ and @tab@ content (e.g. repairing poor page semantics).'
            ],
            TECHNIQUES: [
              'Heading elements (@h1-h6@) typically do not need any role definition, there default role is @heading@.',
              'Heading elements (@h1-h6@) used as the @tab@s in a @tabpanel@ widget need to have the @role="tab"@.',
              'In rare cases @role="presentation"@ can be used when a heading element does not provide a label for a section of content or is a tab in a tabpanel widget. Although a better solution is to change the element to something more semantically meaningful.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 5 Specification: The main element',
                url:   'https://www.w3.org/TR/html5/grouping-content.html#the-main-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: heading role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#heading'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: tab role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#tab'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: presentation role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#presentation'
              }
            ]
        },
        ROLE_11: {
            ID:               'Role 11',
            DEFINITION:       '@li@ elements %s only have group item role values of @listitem@ (default - do not set), @menuitem@, @menuitemcheckbox@, @menuitemradio@, @option@, @tab@, @treeitem@ or @presentation@.  NOTE: Deprecated in favor of HTML 3 a more general rule on role restrictions based on ARIA in HTML specification.',
            SUMMARY:          '@li@ element group item semantics. (Deprecated)',
            TARGET_RESOURCES_DESC: '@li@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:         'Remove the @role@ on the @li@ element to support the default @listitem@ semantics or change the @role@ semantics to an allowed grouping widget role.',
              FAIL_P:         'Remove the @role@ on the %N_F @li@ elements to support the default @listitem@ semantics and/or change the @role@ semantics to an allowed grouping widget role.',
              MANUAL_CHECK_S: 'Verify that the @li@ element with @role="presentation"@ does not contain content related to the semantics of the @listitem@ or other allowed @grouping@ widget roles.',
              MANUAL_CHECK_P: 'Verify that the %N_MC @li@ elements with @role="presentation"@ do not contain content related to the semantics of the @listitem@ or other allowed @grouping@ widget roles.',
              HIDDEN_S:       'One @li@ element with @role@ attribute that is hidden was not evaluated.',
              HIDDEN_P:       '%N_H @li@ elements with @role@ attribute that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @li@ elements with @role@ attribute found on the page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_FAIL_1:   'Remove the @role@ attribute on the @li@ element, change the attribute @role="%1"@ to an allowed role, or use a different element that represents the semantics of the content.',
              ELEMENT_MC_1:   'Verify the @li@ element with @role="presentation"@ does not contain content that could be considered part of a list.',
              ELEMENT_HIDDEN_1: '@li@ element with @role="%1"@ was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'The @li@ element have role restrictions as part of their definition in the W3C HTML5 Specification.',
              'When @li@ elements only need to use the @role@ attribute when they are part of interactive widgets and are restricted to widget group item roles.',
              'The @role@ values used identify grouping widget roles to ensure that their native grouping semantics are not inadvertently overridden by non-grouping widget or landmark roles.'
            ],
            TECHNIQUES: [
              'The @li@ elements when used as part of widgets must be used to indicate an item in a grouping widget role.',
              'In rare cases @role="presentation"@ is allowed on a @li@ element when the element is not being used to represent an item in a list.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 5 Specification: The li element',
                url:   'https://www.w3.org/TR/html5/grouping-content.html#the-li-element'
              }
            ]
        },
        ROLE_12: {
            ID:               'Role 12',
            DEFINITION:       '@a[href]@ elements %s only have role values of @link@ (default), @button@, @checkbox@, @menuitem@, @menuitemcheckbox@, @menuitemradio@, @tab@, @switch@ or @treeitem@.  NOTE: Deprecated in favor of HTML 3 a more general rule on role restrictions based on ARIA in HTML specification.',
            SUMMARY:          '@a[href]@ element role semantics. (Deprecated)',
            TARGET_RESOURCES_DESC: '@a[href]@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:         'Remove the @role@ on the @a@ element to support the default @link@ semantics or change the @role@ semantics to an allowed grouping widget role.',
              FAIL_P:         'Remove the @role@ on the %N_F @a@ elements to support the default @link@ semantics and/or change the @role@ semantics to an allowed grouping widget role.',
              HIDDEN_S:       'One @a[href]@ element with @role@ attribute that is hidden was not evaluated.',
              HIDDEN_P:       '%N_H @a[href]@ elements with @role@ attribute that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @a[href]@ elements with @role@ attribute found on the page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   'The @role=%1@ is an allowed role value for the @a[href]@ element.',
              ELEMENT_FAIL_1:   'Remove the @role@ attribute on the @a[href]@ element, change the attribute @role="%1"@ to an allowed role, or use a different element that represents the semantics of the content.',
              ELEMENT_HIDDEN_1: '@a[href]@ element with @role="%1"@ was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'The @a[href]@ has a default role of @link@ and the browser natively supports the behavior of being part of the tab order of the page (e.g. @tabindex=0@) and will repsond to click events and the enter key.',
              'When @a[href]@ elements only need to use the @role@ attribute when they are part of interactive widgets and are restricted to subset of widget roles: @button@, @checkbox@, @menuitem@, @menuitemcheckbox@, @menuitemradio@, @tab@, @switch@ or @treeitem@.'
            ],
            TECHNIQUES: [
              'The @a[href]@ element\'s default role of @link@ can only be overridden with following roles: @button@, @checkbox@, @menuitem@, @menuitemcheckbox@, @menuitemradio@, @tab@, @switch@ or @treeitem@.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 5 Specification: The a element',
                url:   'https://www.w3.org/TR/html51/semantics.html#the-a-element'
              }
            ]
        },
        ROLE_13: {
            ID:               'Role 13',
            DEFINITION:       '@select@ elements %s only have role values of @listbox@ (default) or @menu@.  NOTE: Deprecated in favor of HTML 3 a more general rule on role restrictions based on ARIA in HTML specification.',
            SUMMARY:          '@select@ element role semantics. (Deprecated)',
            TARGET_RESOURCES_DESC: '@select]@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:         'Remove the @role@ on the @select@ element to support the default @listbox@ semantics or change the @role@ semantics to the @menu@ role.',
              FAIL_P:         'Remove the @role@ on the %N_F @select@ elements to support the default @listbox@ semantics and/or change the @role@ semantics to the @menu@ role.',
              HIDDEN_S:       'One @select@ element with @role@ attribute that is hidden was not evaluated.',
              HIDDEN_P:       '%N_H @select@ elements with @role@ attribute that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @select@ elements with @role@ attribute found on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   'The @role=%1@ is an allowed role value for the @select@ element.',
              ELEMENT_FAIL_1:   'Remove the @role@ attribute on the @select@ element, change the attribute @role="%1"@ to an allowed role, or use a different element that represents the semantics of the content.',
              ELEMENT_HIDDEN_1: '@select@ element with @role="%1"@ was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'The @select@ element has a default role of @listbox@ and the browser natively supports the behavior of being part of the tab order of the page (e.g. @tabindex=0@) and will repsond to click events and the enter key.',
              'When @select@ elements only need to use the @role@ attribute when it semantics are a @menu@ instead of a @listbox@.'
            ],
            TECHNIQUES: [
              'The @select@ element\'s default role of @listbox@ can only be overridden with @menu@.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 5 Specification: The select element',
                url:   'https://www.w3.org/TR/html51/semantics.html#the-select-element'
              }
            ]
        },
        ROLE_14: {
            ID:               'Role 14',
            DEFINITION:       '@textarea@ elements %s only have role values of @listbox@ (default) or @menu@.  NOTE: Deprecated in favor of HTML 3 a more general rule on role restrictions based on ARIA in HTML specification.',
            SUMMARY:          '@textarea@ element role semantics. (Deprecated)',
            TARGET_RESOURCES_DESC: '@textarea]@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:         'Remove the @role@ on the @textarea@ element to support the default @textbox@ semantics or use a different element to represent the semantics of the content.',
              FAIL_P:         'Remove the @role@ on the %N_F @textarea@ elements to support the default @editbox@ semantics and/or use a different element to represent the semantics of the content.',
              HIDDEN_S:       'One @textarea@ element with @role@ attribute that is hidden was not evaluated.',
              HIDDEN_P:       '%N_H @textarea@ elements with @role@ attribute that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No @textarea@ elements with @role@ attribute found on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   'The @role=%1@ is an allowed role value for the @textarea@ element, but it should be removed since a @textarea@ element can only have the semantics of a @textbox@.',
              ELEMENT_FAIL_1:   'Remove the @role@ attribute on the @textarea@ element, either remove the role to allow the default role of @textbox@, or use a different element that represents the semantics of the content.',
              ELEMENT_HIDDEN_1: '@textarea@ element with @role="%1"@ was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'The @textarea@ element has a default role of @textbox@ can have no other role value.'
            ],
            TECHNIQUES: [
              'The @textarea@ element\'s default role of @textbox@ it can have NO other role, do NOT set.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 5 Specification: The textarea element',
                url:   'https://www.w3.org/TR/html51/semantics.html#the-textarea-element'
              }
            ]
        }
   }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */


OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

    //
    //  OAA Rules title and message string National Language Support (NLS) for sensory rules
    //
    rules: {
        SENSORY_1: {
            ID:                    'Sensory 1',
            DEFINITION:            'Understanding and operating on content on the page %s not rely solely on the shape, size, visual location, orientation, or sound.',
            SUMMARY:               'Not only shape, size and location',
            TARGET_RESOURCES_DESC: 'Images used for links and controls',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:     'Verify that understanding the content, navigation of links and operation of controls and widgets does not depend solely on the shape, size, visual location, orientation, or sound.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_MC_1: 'Verify that understanding the content, navigation of links and operation of controls and widgets does not depend solely on the shape, size, visual location, orientation, or sound.'
            },
            PURPOSE:        [ 'People with visual impairments and learning disabilities that affect the visual processing of information may not be able to perceive the content or identify the purpose of links and controls.',
                              'People with hearing impairments and learning disabilities that affect the auditory processing of information may not be able to perceive the content or identify the purpose of links and controls.'
                            ],
            TECHNIQUES:     [ 'Provide redundant text labels and references in addition to references to shape, size, visual location or sound.'
                            ],
            MANUAL_CHECKS:  [ 'Verify that understanding the content, navigation of links and operation of controls and widgets does not depend solely on the shape, size, visual location, orientation, or sound.'
                            ],
            INFORMATIONAL_LINKS: [{ type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                               title: 'WCAG 2.0 Success Criterion 1.3.3 Sensory Characteristics',
                               url:   'https://www.w3.org/TR/WCAG20/#content-structure-separation-understanding'
                             },
                             { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                               title: 'How to meet Success Criterion 1.3.3 Sensory Characteristics',
                               url:   'https://www.w3.org/WAI/WCAG20/quickref/#qr-content-structure-separation-understanding'
                             }
                            ]
        }
    }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */


OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

    //
    //  OAA Rules title and message string National Language Support (NLS)
    //
    rules: {
        TABLE_1: {
            ID:                    'Table 1',
            DEFINITION:            'Data cells in data tables %s have row and/or column header cells.',
            SUMMARY:               'Data cells %s have row/column headers',
            TARGET_RESOURCES_DESC: '@td@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:         'Add @th@ elements to the first row or column of the data table.',
              FAIL_P:         'Add @th@ elements to the first row or column of the data table.',
              MANUAL_CHECK_S: 'The @td@ element does not have any text content. Verify that this cell is being used for formatting and does not need row or column headers.',
              MANUAL_CHECK_P: '%N_F @td@ elements do not have any text content. Verify that these cells are being used for formatting and do not need row or column headers.',
              HIDDEN_S:       'One @td@ element that is hidden was not evaluated.',
              HIDDEN_P:       '%N_H @td@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No data tables and/or @td@ cells on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   'The @td@ element has row and/or column headers.',
              ELEMENT_FAIL_1:   'Add text content to the row and/or column header cells.',
              ELEMENT_FAIL_2:   'Add header cells using row and/or column headers.',
              ELEMENT_MC_1:     'The @td@ element does not have any text content and it does not have any header cells. Verify that this cell is being used for formatting and does not need row or column headers.',
              ELEMENT_HIDDEN_1: 'The @td@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'When @th@ (table header) elements are used as the first cell in each row and/or column of a data table, assistive technologies can infer the header-to-data-cell relationships for those rows and columns, making the header information programmatically available to screen reader users from any data cell.',
              'By providing a representation that is functionally equivalent to the visual relationships of data cells to row and column headers that sighted users rely upon, screen reader users are able to maintain orientation and comprehension as they traverse the data table.',
              'When solitary row and/or column headers are not sufficient to describe a data cell, use the @headers@ attribute to identify the appropriate header cells.'
            ],
            TECHNIQUES: [
              'Use a @th@ element as the first cell in each row and/or column to define row and column headers in simple data tables.',
              'Use @th@ element for row and column header cells.',
              'While not recommended, it is also valid to use @td@ element with a @scope@ attribute as a header cell.',
              'Avoid using empty rows and columns for formatting data tables. Use CSS instead.'
            ],
            MANUAL_CHECKS: [
              'Verify that empty @td@ and @th@ elements do not need table headers.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: 11.2.6 Table cells: The TH and TD elements',
                url:   'https://www.w3.org/TR/html4/struct/tables.html#edef-TD'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: scope attribute',
                url:   'https://www.w3.org/TR/html4/struct/tables.html#adef-scope'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H51: Using table markup to present tabular information',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H51'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H63: Using the scope attribute to associate header cells and data cells in data tables',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H63'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'IBM Web checklist Checkpoint 1.3e: Tables',
                url:   'https://www-03.ibm.com/able/guidelines/web/webtableheaders.html'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'W3C Web Accessibility Tutorials: Tables',
                url:   'https://www.w3.org/WAI/tutorials/tables/'
              }
            ]
        },
        TABLE_2: {
            ID:                    'Table 2',
            DEFINITION:            'Data tables %s have an accessible name to identify the purpose of the table.',
            SUMMARY:               'Data tables %s have name',
            TARGET_RESOURCES_DESC: '@table@',
            RULE_RESULT_MESSAGES: {
              FAIL_S:           'Add an accessible name for the data table using either the @caption@ element; or one of the following @table@ element attributes: @summary@, @title@, @aria-label@ or @aria-labelledby@.',
              FAIL_P:           'Add an accessible name to each of the %N_F out of %N_T data tables using either the @caption@ element; or one of the following @table@ element attributes: @summary@, @title@, @aria-label@ or @aria-labelledby@.',
              HIDDEN_S:         'One data table that is hidden was not evaluated.',
              HIDDEN_P:         '%N_H data tables that are hidden were not evaluated.',
              NOT_APPLICABLE:   'No data tables found on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   'Accessible name defined using the @caption@ element: \'%1\'.',
              ELEMENT_PASS_2:   'Accessible name defined using the @summary@ attribute with content: \'%1\'.',
              ELEMENT_PASS_3:   'Accessible name defined using the @aria-label@ attribute with content: \'%1\'.',
              ELEMENT_PASS_4:   'Accessible name defined using the @aria-labelledby@ attribute with content: \'%1\'.',
              ELEMENT_PASS_5:   'Accessible name defined using the @title@ attribute with content: \'%1\'.',
              ELEMENT_FAIL_1:   'Add accessible name using either the @caption@ element; or one of the following @table@ element attributes: @summary@, @title@ @aria-label@ or @aria-labelledby@ attribute.',
              ELEMENT_HIDDEN_1: 'The @table@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'An accessible name for a data table enables people using assistive technologies to identify the purpose of the table and to differentiate among multiple data tables on the same page.',
              'Screen readers include table navigation commands and the accessible name will provides context to the table.'
            ],
            TECHNIQUES: [
              'Use @caption@ element to provide an accessible name for a data table.',
              'Use @summary@ attribute to provide an accessible name for a data table.',
              'Use @title@ attribute to provide an accessible name for a data table.',
              'Use @aria-label@ attribute to provide an accessible name for a data table (NOTE: inconsistent browser/AT support).',
              'Use @aria-labelledby@ attribute to provide an accessible name for a data table (NOTE: inconsistent browser/AT support).',
              'If the table is not used for tabular data, but instead for layout of content, use the @role="presentation"@ on the @table@ element.'
            ],
            MANUAL_CHECKS: [
              'Make sure the the accessible name accurately and succinctly identifies the purpose of the data table.',
              'If the table markup is actually being used for laying out content in rows or columns, use @role="presentation"@ on the @table@ element.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: 11.2.2 Table Captions: The CAPTION element',
                url:   'https://www.w3.org/TR/html4/struct/tables.html#h-11.2.2'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: summary attribute',
                url:   'https://www.w3.org/TR/html4/struct/tables.html#adef-summary'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-label@ attribute',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-labelledby@ attribute',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: The @title@ attribute',
                url:   'https://www.w3.org/TR/html4/struct/global.html#adef-title'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'W3C Web Accessibility Tutorials: Tables',
                url:   'https://www.w3.org/WAI/tutorials/tables/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H39: Using caption elements to associate data table captions with data tables',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H39'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H73: Using the summary attribute of the table element to give an overview of data tables',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H73'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'F46: Failure of Success Criterion 1.3.1 due to using th elements, caption elements, or non-empty summary attributes in layout tables',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F46'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'IBM Web checklist Checkpoint 1.3e: Tables',
                url:   'https://www-03.ibm.com/able/guidelines/web/webtableheaders.html'
              }
            ]
        },
        TABLE_3: {
            ID:                    'Table 3',
            DEFINITION:            'Some data tables %s have an accessible description (e.g. summary) of contents of the table.',
            SUMMARY:               'Data tables %s have description',
            TARGET_RESOURCES_DESC: '@table[summary]@,  @table[title]@ or @aria-describedby@ attribute',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S: 'For the data table without a summary, consider adding an @summary@, @title@ or @aria-describedby@ attribute to point to a summary of the information in the simple table.',
              MANUAL_CHECK_P: 'For the %N_F data tables without summary, consider adding an @summary@, @title@ or @aria-describedby@ attribute to point to a summary of the information in each simple table.',
              HIDDEN_S:       'One data @table@ element that is hidden was not evaluated.',
              HIDDEN_P:       'The %N_H data @table@ elements elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No data tables on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   'The @table@ element has an accessible description through the @summary@ attribute.',
              ELEMENT_PASS_2:   'The @table@ element has an accessible description through the @aria-describedby@ reference.',
              ELEMENT_PASS_3:   'The @table@ element has an accessible description through the @title@ attribute.',
              ELEMENT_MC_1:     'This is a simple table, consider adding a @summary@ or @aria-describedby@ attribute to provide a accessible description (e.g. a summary) of the content of the table.',
              ELEMENT_MC_2:     'This is a complex table, it is highly recommended to add a @summary@ or @aria-describedby@ attribute to provide a accessible description (e.g. a summary) of the content of the table.',
              ELEMENT_HIDDEN_1: 'The @table@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Complex data tables are defined as tables with row and/or column spans, or more than one header cell (e.g. @th@ element) in any row or column of the table.',
              'An accessible description providing a summary of the organization of the table or numerical values reduces the time for users of assistive technology to explore and understand the content of a table.',
              'An accessible description that includes a synopsis of the authors intended conclusions of viewing the content of a table make it easier for people using assistive technologies to understand importance of why the author provided the data table.'
              ],
            TECHNIQUES: [
              'Use the  @summary@ attribute to provide a accessible description of the information in a data table.',
              'Use the  @title@ attribute to provide a accessible description of the information in a data table.',
              'Use the  @aria-describedby@ attribute to provide a reference to an accessible description of the information in a data table.'
            ],
            MANUAL_CHECKS: [
              'Verify the content of the accessible description accurately summarizes the organization, numerical information in the table or authors intended conclusions from viewing the table.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: summary attribute',
                url:   'https://www.w3.org/TR/html4/struct/tables.html#adef-summary'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-describedby@ attribute',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-describedby'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: The @title@ attribute',
                url:   'https://www.w3.org/TR/html4/struct/global.html#adef-title'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'W3C Web Accessibility Tutorials: Tables',
                url:   'https://www.w3.org/WAI/tutorials/tables/'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'IBM Web checklist Checkpoint 1.3e: Tables',
                url:   'https://www-03.ibm.com/able/guidelines/web/webtableheaders.html'
              }
            ]
        },
        TABLE_4: {
            ID:                    'Table 4',
            DEFINITION:            'Data tables %s have unique accessible names to help users identify and differentiate the data tables on a page.',
            SUMMARY:               'Data tables %s have unique names',
            TARGET_RESOURCES_DESC: '@table@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:         'Change the accessible name of the @table@ to be unique.',
              FAIL_P:         'Change the accessible name of the %N_F out of %N_T data tables that do not have unique names to be unique.',
              HIDDEN_S:       'One @table@ element that is hidden was not evaluated.',
              HIDDEN_P:       '%N_H @table@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'Multiple data tables were not found on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   'The accessible name for the data table is unique: \'%1\'.',
              ELEMENT_FAIL_1:   'Change the accessible name for the data table to be unique on the page: \'%1\'.',
              ELEMENT_FAIL_2:   'Add a accessible name to the data table.',
              ELEMENT_HIDDEN_1: 'The @table@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Data tables that share the same accessible name make it difficult to users of assistive technologies to differentiate the differences in content of the data tables on the same page.',
              'In rare cases when multiple data tables have duplicate data, use "Copy 1", "Copy 2" and "Copy X" as part of the accessible name of each table to make it clear that there is more than one copy of the same information on the page.'
            ],
            TECHNIQUES: [
              'Use @caption@ element to provide an accessible name for a data table.',
              'Use @summary@ attribute to provide an accessible name for a data table.',
              'Use @title@ attribute to provide an accessible name for a data table.',
              'Use @aria-label@ attribute to provide an accessible name for a data table (NOTE: inconsistent browser/AT support).',
              'Use @aria-labelledby@ attribute to provide an accessible name for a data table (NOTE: inconsistent browser/AT support).',
              'If the table is not used for tabular data, but instead for layout of content, use the @role="presentation"@ on the @table@ element.'
            ],
            MANUAL_CHECKS: [
              'Verify the accessible names for tables are unique and identify the content in the data tables.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: 11.2.2 Table Captions: The CAPTION element',
                url:   'https://www.w3.org/TR/html4/struct/tables.html#h-11.2.2'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: summary attribute',
                url:   'https://www.w3.org/TR/html4/struct/tables.html#adef-summary'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-label@ attribute',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-labelledby@ attribute',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: The @title@ attribute',
                url:   'https://www.w3.org/TR/html4/struct/global.html#adef-title'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'W3C Web Accessibility Tutorials: Tables',
                url:   'https://www.w3.org/WAI/tutorials/tables/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H39: Using caption elements to associate data table captions with data tables',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H39'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H73: Using the summary attribute of the table element to give an overview of data tables',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H73'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'F46: Failure of Success Criterion 1.3.1 due to using th elements, caption elements, or non-empty summary attributes in layout tables',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/failures/F46'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'IBM Web checklist Checkpoint 1.3e: Tables',
                url:   'https://www-03.ibm.com/able/guidelines/web/webtableheaders.html'
              }
            ]
        },
        TABLE_5: {
            ID:                    'Table 5',
            DEFINITION:            'Table markup %s identify a table as either a data table or a layout table.',
            SUMMARY:               'Identify table markup as data or layout',
            TARGET_RESOURCES_DESC: '@table@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'The table without headers or @role="presentation"@, define the purpose of the table by adding header cells if the table is being used for tabular data or use @role="presentation"@ on the table elements if the table is being used to layout content.',
              FAIL_P:   'For the %N_F tables without headers or @role=presentation"@, define the purpose of the table by adding header cells if the table is being used for tabular data or use @role="presentation"@ on the table elements if the table is being used to layout content.',
              MANUAL_CHECK_S: 'Verify the @table@ element that only has one row or column is used only only for layout.',
              MANUAL_CHECK_P: 'Verify the %N_H @table@ elements that only have one row or column are used only only for layout.',
              HIDDEN_S: 'One @table@ element that is hidden was not evaluated.',
              HIDDEN_P: '%N_H @table@ elements elements that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No table markup found on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   'The @table@ is considered a data table, since it has header cells or an accessible name.',
              ELEMENT_PASS_2:   'The @table@ is considered a layout table, since it has @role="presentation"@.',
              ELEMENT_PASS_3:   'The @table@ is considered a complex data table, since it has colums/row spans or multiple headers in a row or column.',
              ELEMENT_MC_1:     'Verify the table with only one row is only used for layout purposes.',
              ELEMENT_MC_2:     'Verify the table with only one column is only used for layout purposes.',
              ELEMENT_FAIL_1:   'Define the purpose of the table by adding header cells if the table is being used for tabular data or use @role="presentation"@ on the table element if the table is being used to layout content.',
              ELEMENT_HIDDEN_1: 'The @table@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'The @table@ element is designed for representing tabular data in a web page, but table markup has also been used by web developers as a means to layout content in rows and columns.',
              'Users of assistive technology are confused when the purpose of table markup is not clearly identified (i.e. layout or for tabular data).',
              'Use @role="presentation"@ on the @table@ element to clearly identify a table markup for layout.',
              'Adding an accessible name and/or description to a @table@ element identifies table markup as a data table (e.g. layout tables must not have an accessible name or description).',
              'The use header cells (e.g. @th@ or @td[scope]@ elements) identifies a @table@ element as a data table.'
            ],
            TECHNIQUES: [
              'Use @th@ elements in the first row and/or first column to identify a table as a data table.',
              'Use @caption@ element; @summary@, @title@, @aria-label@, @aria-labelledby@ or @aria-describedby@ attribute to add an accessible name or description to a @table@ element.',
              'Use @role="presentation"@ on the @table@ element to identify a table and its child table elements (e.g. @tr@ and @td@ elements) are being used for layout.',
              'Layout tables must only use the @tr@ and @td@ table elements for layout content and must NOT have an accessible name or description.'
            ],
            MANUAL_CHECKS: [
              'If a table is used for layout verify the order of content still makes sense when the table markup is disabled.',
              'If a table is used for data tables, verify the each data cell has header cells that clearly identify the meaning of the content of the data cell.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: presentation role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#presentation'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: 11.2.6 Table cells: The TH and TD elements',
                url:   'https://www.w3.org/TR/html4/struct/tables.html#edef-TD'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: 11.2.2 Table Captions: The CAPTION element',
                url:   'https://www.w3.org/TR/html4/struct/tables.html#h-11.2.2'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: summary attribute',
                url:   'https://www.w3.org/TR/html4/struct/tables.html#adef-summary'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'W3C Web Accessibility Tutorials: Tables',
                url:   'https://www.w3.org/WAI/tutorials/tables/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H51: Using table markup to present tabular information',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H51'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H63: Using the scope attribute to associate header cells and data cells in data tables',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H63'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'IBM Web checklist Checkpoint 1.3e: Tables',
                url:   'https://www-03.ibm.com/able/guidelines/web/webtableheaders.html'
              }
            ]
        },
        TABLE_6: {
            ID:                    'Table 6',
            DEFINITION:            'Each data table header cell %s use @th@ elements rather than @td@ element with a @scope@ attribute.',
            SUMMARY:               'Header cells %s be @th@ elements',
            TARGET_RESOURCES_DESC: '@th@ and @td[scope]@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Change the @td[scope]@ element to a @th@ element',
              FAIL_P:   'Change the @td[scope]@ element to a @th@ element for each of the %N_F header cells using @td[scope]@',
              HIDDEN_S: 'One @table@ element that is hidden was not evaluated.',
              HIDDEN_P: '%N_H @table@ elements elements that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No td[scope]@ elements on the page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   'The @th@ element is used for header cell',
              ELEMENT_FAIL_1:   'Change the @td[scope]@ element to a @th@ element',
              ELEMENT_HIDDEN_1: 'The @th@ element was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              '@th@ element is the web standards way to identify header cells in a table, and makes the data table source code easier to read and debug for accessibility problems.'
            ],
            TECHNIQUES: [
              'Use @th@ elements in the first row or column to identify row and column headers in a simple data tables.',
              'Use @headers@ attribute on each @td@ element to identify header information in complex data tables.',
              'Use @th@ element for cells used as header cells in the table.'
            ],
            MANUAL_CHECKS: [
              'Verify the each data cell has header cells that clearly identify the meaning of the content of the data cell.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: 11.2.6 Table cells: The TH and TD elements',
                url:   'https://www.w3.org/TR/html4/struct/tables.html#edef-TD'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'W3C Web Accessibility Tutorials: Tables',
                url:   'https://www.w3.org/WAI/tutorials/tables/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H51: Using table markup to present tabular information',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H51'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H63: Using the scope attribute to associate header cells and data cells in data tables',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H63'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'IBM Web checklist Checkpoint 1.3e: Tables',
                url:   'https://www-03.ibm.com/able/guidelines/web/webtableheaders.html'
              }
            ]
        },
        TABLE_7: {
            ID:                    'Table 7',
            DEFINITION:            'Data cells in complex data tables %s use @headers@ attribute to identify header cells.',
            SUMMARY:               'Data cells %s use @headers@ attribute',
            TARGET_RESOURCES_DESC: '@td@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:         'Add a @headers@ attribute to the data cell to identify the header cells for the data cell.',
              FAIL_P:         'Add %N_F data cells use the @headers@ attribute to identify the header cells for the data cell.',
              MANUAL_CHECK_S: 'The @td@ element does not have any text content and it does not have any header cells, verify that this cell is being used for formatting and does not need headers.',
              MANUAL_CHECK_P: 'There are %N_MC @td@ elements that do not have any text content and do not have any header cells, verify that thess cells are being used for formatting and do not need headers.',
              HIDDEN_S:       'One @td@ element that is hidden was not evaluated.',
              HIDDEN_P:       '%N_H @td@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No complex data tables on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   'The header comes from the @headers@ attribute with the following ids: \'%1\'.',
              ELEMENT_FAIL_1:   'Add header cells using the @headers@ attribute, since this table is a complex data table.',
              ELEMENT_FAIL_2:   'Add text content to the header cells with the following ids: \'%1\'.',
              ELEMENT_FAIL_3:   'Change the idrefs \'%1\' in the @headers@ attribute to valid ids.',
              ELEMENT_MC_1:     'The @td@ element does not have any text content and it does not have any header cells, verify that this cell is being used for formatting and does not need headers.',
              ELEMENT_HIDDEN_1: 'Data cell was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'The data cells in complex data tables need to use the @headers@ attribute to identify the appropriate header cells, since simple row/column relationships cannot be relied upon to provide header information.',
              'Complex data tables are defined as tables with row and/or column spans, or more than one header cell (e.g. @th@ element) in any row or column of the table.'
            ],
            TECHNIQUES: [
              'Use @headers@ attribute on each @td@ element used as a data cell to identify header information in complex data tables.'
            ],
            MANUAL_CHECKS: [
              'Verify the each data cell has header cells that clearly identify the meaning of the content of the data cell.',
              'Verify that empty @td@ and @th@ elements and does not need table headers.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: 11.2.6 Table cells: The TH and TD elements',
                url:   'https://www.w3.org/TR/html4/struct/tables.html#edef-TD'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'W3C Web Accessibility Tutorials: Tables',
                url:   'https://www.w3.org/WAI/tutorials/tables/'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'IBM Web checklist Checkpoint 1.3e: Tables',
                url:   'https://www-03.ibm.com/able/guidelines/web/webtableheaders.html'
              }
            ]
        },
        TABLE_8: {
            ID:                    'Table 8',
            DEFINITION:            'The accessible name of a data table % be different from its accessible description.',
            SUMMARY:               'Name %s be different than description',
            TARGET_RESOURCES_DESC: 'Data tables with both an accessible name and accessible description',
            RULE_RESULT_MESSAGES: {
              FAIL_S:         'Change the accessible name and/or accessible description of the data table with accessible name that is the same as the accessible description, make sure the accessible name identifies the content of the data table and the description provides a summary of the content.',
              FAIL_P:         'Change the accessible name and/or accessible description of the %N_F data tables with accessible name that is the same as the accessible description, make sure the accessible name identifies the content of each data table and the description provides a summary of the content.',
              MANUAL_CHECK_S: 'Verify the data table with an accessible name that is longer than the accessible description is actually providing a useful summary of the contents of the data table.',
              MANUAL_CHECK_P: 'Verify the %N_MC data tables with an accessible name that is longer than the accessible description is actually providing a useful summary of the contents of the data table.',
              HIDDEN_S:       'One @table@ element that is hidden was not evaluated.',
              HIDDEN_P:       '%N_H @table@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No data tables with both an accessible name and description on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   'Accessible name and description are different.',
              ELEMENT_FAIL_1:   'Change the accessible name and/or accessible description, make sure the accessible name identifies the content of the table and the description provides a summary of the content.',
              ELEMENT_MC_1:     'Verify the data table with an accessible name that is longer than the accessible description is actually providing a useful summary of the contents of the data table.',
              ELEMENT_HIDDEN_1: 'The table was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Accessible name and description are designed to provide two different types of information to users of assistive technologies and therefore should not duplicate each other.',
              'Accessible name is designed to provide a short title to identify the data table, so when users of assistive technology are using table navigation commands they can identify the table.',
              'Accessible description is designed to provide a longer summary of the table, this could include author intended conclusions of the data.'
            ],
            TECHNIQUES: [
              'Accessible name is typically defined using the @caption@ element, but the @summary@, @title@, @aria-label@ and @aria-labelledby@ attribute can also be used.',
              'Accessible description is typically defined using the @summary@ attribute, but the @title@ and @aria-describedby@ attribute can also be used.',
              'The accessible name is defined before the accessible description, so if using the @summary@ and/or @title@ attribute for the accessible name will require a different technique to add an accessible description.'
            ],
            MANUAL_CHECKS: [
              'Verify the accessible name clearly identifies the table.',
              'Verify the summary accurately summarizes the table.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML 4.01 Specification: 11.2.6 Table cells: The TH and TD elements',
                url:   'https://www.w3.org/TR/html4/struct/tables.html#edef-TD'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'W3C Web Accessibility Tutorials: Tables',
                url:   'https://www.w3.org/WAI/tutorials/tables/'
              }
            ]
        }
   }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */


OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

    //
    //  OAA Rules National Language Support (NLS) for Audio Rules
    //
    rules: {
        TIMING_1: {
            ID:                    'Timing 1',
            DEFINITION:            'A page that contains time limits for user interaction or viewing content %s provide a way to turn off, adjust or extend the time limits.',
            SUMMARY:               'Control time limits',
            TARGET_RESOURCES_DESC: 'Pages with scripting or other embedded technologies to control the response time for input or the amount of time to view content',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:  'If the page contains time limits, verify that there is a way to turn off, adjust or extend the time limits; or that one of the three exceptions applies.'
            },
            NODE_RESULT_MESSAGES: {
              PAGE_MC_1:      'If the page contains time limits, verify that there is a way to turn off, adjust or extend the time limits; or that one of the three exceptions applies.'
            },
            PURPOSE: [
              'People with physical disabilities may need more time to respond to web sites with time limits for selecting an option.',
              'People with visual impairments and visual processing learning disabilities may need more time to read material if the rendering of the material is automatically removed or obscured after a time period.',
              'Providing adjustable time periods in line with the persons capabilities makes it possible for people to complete the tasks associated with the website.'
            ],
            TECHNIQUES: [
              'Turn off: The user is allowed to turn off the time limit before encountering it.',
              'Adjust: The user is allowed to adjust the time limit before encountering it over a wide range that is at least ten times the length of the default setting.',
              'Extend: The user is warned before time expires and given at least 20 seconds to extend the time limit with a simple action (for example, "press the space bar"), and the user is allowed to extend the time limit at least ten time.',
              'Real-time Exception: The time limit is a required part of a real-time event (for example, an auction), and no alternative to the time limit is possible.',
              'Essential Exception: The time limit is essential and extending it would invalidate the activity.',
              '20 Hour Exception: The time limit is longer than 20 hours.'
            ],
            MANUAL_CHECKS: [
              'If the page contains time limits, verify that there is a way to turn off, adjust or extend the time limits; or that one of the three exceptions applies.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'How to meet 2.2.1 Timing Adjustable',
                url:   'https://www.w3.org/WAI/WCAG20/quickref/#qr-time-limits-required-behaviors'
              }
            ]
        },
        TIMING_2: {
            ID:                    'Timing 2',
            DEFINITION:            'A page that includes moving, blinking, scrolling or auto-updating content that starts automatically and lasts more than 5 seconds %s have a mechanism to pause, stop, or hide such content.',
            SUMMARY:               'Control moving, blinking or auto-updating content',
            TARGET_RESOURCES_DESC: 'Canvas, SVG and image animations; moving, blinking, scrolling or auto-updating text content; and embedded applications',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:     'If the page includes moving, blinking, scrolling or auto-updating content, verify there has a mechanism to pause, stop, or hide the information.',
              MANUAL_CHECK_P:     'If the page includes moving, blinking, scrolling or auto-updating content, verify there has a mechanism to pause, stop, or hide the information.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_MC_1:     'If the %1 element includes moving, blinking, scrolling or auto-updating content, verify there has a mechanism to pause, stop, or hide the information.',
              ELEMENT_HIDDEN_1: 'The %1 element has not evaluated for moving, blinking, scrolling or auto-updating content',
              PAGE_MC_1:        'If the page includes moving, blinking, scrolling or auto-updating content, verify there has a mechanism to pause, stop, or hide the information.'
            },
            PURPOSE: [
              'People with visual impairments and visual processing learning disabilities may not be able to read or understand content that is blinking, scrolling or auto updating'
            ],
            TECHNIQUES: [
              'Pause/Resume: Through configuration or controls on the page, enable the user to pause and resume the moving, blinking, scrolling or auto-updating content.',
              'Stop: Through configuration or controls on the page, enable the user to stop the moving, blinking, scrolling or auto-updating content and see all of the content at one time.',
              'Hide: Through configuration or controls on the page, enable the user to hide the moving, blinking, scrolling or auto-updating content if it is not essential for the activity.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'How to meet 2.2.2 Pause, Stop, Hide',
                url:   'https://www.w3.org/WAI/WCAG20/quickref/#qr-time-limits-pause'
              }
            ]
        },
        TIMING_3: {
            ID:                    'Timing 3',
            DEFINITION:            'A page %s not include content that flashes more than three times in one second, unless below general flash and red flash thresholds.',
            SUMMARY:               'Flashing limits',
            TARGET_RESOURCES_DESC: 'Canvas, SVG and image animations; flashing text content; video; and embedded applications',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:     'Verify the page does not include content that flashes more than three times in one second, unless below general flash and red flash thresholds.',
              MANUAL_CHECK_P:     'Verify the page does not include content that flashes more than three times in one second, unless below general flash and red flash thresholds.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_MC_1:     'Verify the %1 element does not include content that flashes more than three times in one second, unless below general flash and red flash thresholds.',
              ELEMENT_HIDDEN_1: 'The %1 element has not evaluated for moving, blinking, scrolling or auto-updating content',
              PAGE_MC_1:        'Verify the page does not include any content that flashes more than three times in one second, unless below general flash and red flash thresholds.'
            },
            PURPOSE: [
              'People who have photosensitive seizure disorders can have a seizure triggered by content that flashes at certain frequencies for more than a few flashes.',
              'People are even more sensitive to red flashing than to other colors.',
              'NOTE: This flashing requirements was adapted from the broadcasting industry standards (e.g. content is viewed from a closer distance and using a larger angle of vision).'
            ],
            TECHNIQUES: [
              'There is no remedication technique, the content must be removed or disabled from flashing.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'How to meet 2.3.1 Three Flashes or Below Threshold',
                url:   'https://www.w3.org/WAI/WCAG20/quickref/#qr-seizure-does-not-violate'
              }
            ]
        }
    }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */


OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

    //
    //  OAA Rules title and message string National Language Support (NLS)
    //
    rules: {
        TITLE_1: {
            ID:            'Title 1',
            DEFINITION:    '@title@ element %s identify both the website and page content.',
            SUMMARY:       '@title@ %s identify website and page',
            TARGET_RESOURCES_DESC: '@title@',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S: 'Verify that the @title@ element identifies both the website (if applicable) and the page content.',
              FAIL_S: 'Add a @title@ element to the @head@ element section with text content that identifies both the website (if applicable) and the page content.'
            },
            NODE_RESULT_MESSAGES: {
              PAGE_MC_1:   'Verify that the @title@ element identifies both the website (if applicable) and the page content.',
              PAGE_FAIL_1: 'Add content to the @title@ element that identifies both the website (if applicable) and the page content.',
              PAGE_FAIL_2: 'Add a @title@ element to the page that identifies both the website (if applicable) and the page content.'
            },
            PURPOSE: [
              'The @title@ element content can be accessed by assistive technologies to orient the user to the website and page content.'
            ],
            TECHNIQUES: [
              'Use a @title@ element to identify the website and page content.',
              'If the page is part of a sequence of web pages, include the sequence number and total number of steps in the @title@ element.'
            ],
            MANUAL_CHECKS: [
              'If applicable, verify that the title of the page identifies the website to which it belongs.',
              'Verify that the title of the page also identifies the page content.',
              'If the page is part of a sequence of web pages, verify that the title describes which step it is in the sequence.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML TITLE Element Specification',
                url:   'https://www.w3.org/TR/html4/struct/global.html#edef-TITLE'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G88: Providing descriptive titles for Web pages',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G88'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H25: Providing a title using the title element',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H25'
              }
            ]
        },
        TITLE_2: {
            ID:            'Title 2',
            DEFINITION:    '@h1@ elements %s match part of the @title@ element content.',
            SUMMARY:       '@h1@ %s match part of the @title@',
            TARGET_RESOURCES_DESC: '@title@ and @h1@',
            RULE_RESULT_MESSAGES: {
              FAIL_S: 'The page has missing, hidden or empty @title@ and/or @h1@ elements or the @h1@ element content is not similar to the @title@ content.',
              FAIL_P: 'The page has missing, hidden or empty @title@ and/or @h1@ elements or the content of the @h1@ elements is not similar to the @title@ content.',
              MANUAL_CHECK_S: 'Verify that both the @title@ and @h1@ elements describe the purpose or content of the page and @h1@ elements are use to identify and describe the major sections of the page.',
              MANUAL_CHECK_P: 'Verify that both the @title@ and @h1@ elements describe the purpose or content of the page and @h1@ elements are use to identify and describe the major sections of the page.',
              HIDDEN_S: 'The page has a hidden @h1@ element that was not evaluated.',
              HIDDEN_P: 'The page has %N_H hidden @h1@ elements that were not evaluated.'
            },
            NODE_RESULT_MESSAGES: {
              PAGE_MC_1:   'The @h1@ element has the same or similar content as the @title@ element.',
              PAGE_PASS_1: 'The @h1@ element has the same or similar content as the @title@ element.',
              PAGE_PASS_2: 'The @h1@ elements have the same or similar content as the @title@ element.',
              PAGE_FAIL_1: 'Add a @title@ element to the page to enable the evaluation of @h1@ elements for similarity.',
              PAGE_FAIL_2: 'Add an @h1@ element to the page at the beginning of the main content.',
              PAGE_FAIL_3: 'Update the @h1@ element to have the same or similar content as the @title@ element.',
              PAGE_FAIL_4: 'Update the @h1@ elements to have the same or similar content as the @title@ element.',
              ELEMENT_MC_1:   'Verify @h1@ element identifies and describes a major section of the page.',
              ELEMENT_PASS_1: 'The @h1@ element has the same or similar content as the @title@ element.',
              ELEMENT_FAIL_1: 'The @h1@ element does NOT have the same or similar content as the @title@ element.',
              ELEMENT_FAIL_2: 'Add content to the @h1@ element, or remove it from the page.',
              ELEMENT_HIDDEN_1: 'The @h1@ element is hidden from assistive technology and therefore does not describe the purpose or content of the page.'
            },
            PURPOSE: [
              '@h1@ elements can be accessed by assistive technologies to identify the page content and to orient users within the website. The @h1@ element may also be used to identify the website.'
            ],
            TECHNIQUES: [
              'Use the @h1@ element to identify the page content in the same or similar way as the @title@ element.',
              'The @h1@ element may also be used to identify the website in the same or similar way as the @title@ element.',
              'If the page is part of a sequence of web pages, the @h1@ element should indicate the step in the sequence.'
            ],
            MANUAL_CHECKS: [
              'Verify that the @h1@ content identifies the page content.',
              'If applicable, verify that the @h1@ content of the page identifies the website to which it belongs.',
              'If the web page is part of a sequence of web pages, verify that the @h1@ content indicates the step number of the sequence.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML TITLE Element Specification',
                url:   'https://www.w3.org/TR/html4/struct/global.html#edef-TITLE'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G88: Providing descriptive titles for Web pages',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G88'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H25: Providing a title using the title element',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H25'
              }
            ]
        }
   }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */


OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

    //
    //  OAA Rules title and message string National Language Support (NLS)
    //
    rules: {
        VIDEO_1: {
            ID:                    'Video 1',
            DEFINITION:            '@video@ elements used for prerecorded video only content %s have text or audio description of the video content.',
            SUMMARY:               '@video@ for video only %s have alternative',
            TARGET_RESOURCES_DESC: '@video@ elements',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:     'Verify the @video@ element with the @aria-describedby@ attributes is used for video only content.   If so, verify the text description reference using the @aria-describedby@ describes the video only content.',
              MANUAL_CHECK_P:     'Verify if any of the %N_MC @video@ elements with the @aria-describedby@ attributes are used for video only content.   If so, verify the text description reference using the @aria-describedby@ describes the video only content.',
              HIDDEN_S: 'The @video@ element that is hidden was not evaluated.',
              HIDDEN_P: 'The %N_H @video@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No @video@ elements found on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:    '@video@ element has audio description track',
              ELEMENT_MC_1:      'Verify the @video@ element is used for video only content.   If so, verify the text description reference using the @aria-describedby@ describes the video only content.',
              ELEMENT_MC_2:      'Verify the @video@ element is used for video only content provides an audio track to describe the video content or text description of the video.',
              ELEMENT_HIDDEN_1:  'The @video@ element is hidden and therefore not evaluated.'
            },
            PURPOSE: [
              'Text and audio descriptions provide a means for people who cannot see the video to understand the video content.',
              'Some types of learning disabilities affect visual processing, text and audio descriptions provide an alternative way to understand the video content.'
            ],
            TECHNIQUES: [
              'Use the @track@ element to add audio descriptions to the video content.',
              'Use @aria-describedby@ to reference a text description of the video content.',
              'Include an audio sound track that describes the video content.'
            ],
            MANUAL_CHECKS: [
              'When audio descriptions are enabled on the media player, check to make sure the audio description can be heard.',
              'If there is a audio description make sure the description accurately describes the video content.',
              'If there is a text description make sure the description accurately describes the video content.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HMTL 5: The video element',
                url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-video-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HMTL 5: The track element',
                url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-track-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (ARIA) 1.0: aria-describedby',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-describedby'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'University of Washington: Creating Accessible Videos',
                url:   'https://www.washington.edu/accessibility/videos/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
                url:   'https://webaim.org/techniques/captions/'
              }
            ]
        },
        VIDEO_2: {
            ID:                    'Video 2',
            DEFINITION:            '@object@ elements used for prerecorded video only content %s have text or audio descriptions of the video content.',
            SUMMARY:               '@object@ for video only %s have alternative',
            TARGET_RESOURCES_DESC: '@object@ elements',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:     'Verify the @object@ element is used for prerecorded video only content.  If it is used for video only, verify it has either a text or audio description of the video content.',
              MANUAL_CHECK_P:     'Verify if any of the %N_MC @object@ elements are used for prerecorded video only content.  If any are used for video only, verify they have either a text or audio description of the video content.',
              HIDDEN_S: 'The @object@ element that is hidden was not evaluated.',
              HIDDEN_P: 'The %N_H @object@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No @object@ elements found on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_MC_1: 'Verify the @object@ element with @video@ in its @type@ attrbute is used for video only content.  If so verify the @aria-describedby@ references a text description of the video only content.',
              ELEMENT_MC_2: 'Verify the @object@ element with @video@ in its @type@ attrbute is used for video only content.  If so verify the video only content has a text or audio descriptions.',
              ELEMENT_MC_3: 'Verify if the @object@ element is used for video only content.  If so verify the @aria-describedby@ references a text description of the video only content.',
              ELEMENT_MC_4: 'Verify if the @object@ element is used for video only content.  If so verify the video only content has a text or audio description.',
              ELEMENT_HIDDEN_1:       'The @object@ element is hidden and cannot render video content.'
            },
            PURPOSE: [
              'Text and audio descriptions provide a means for people who cannot see the video to understand the video content.',
              'Some types of learning disabilities affect visual processing, text and audio descriptions provide an alternative way to understand the video content.'
            ],
            TECHNIQUES: [
              'Use the @video@ element instead of the @object@ element for video only content, since the @video@ element provides better support for audio description tracks.',
              'Include an audio track in the video that describes the video content.',
              'Use @aria-describedby@ attribute to point to a text description of the video only content.'
            ],
            MANUAL_CHECKS: [
              'When audio descriptions are enabled on the media player, check to make sure the audio description can be heard.',
              'If there is a audio description make sure the description accurately describes the video content.',
              'If there is a text description make sure the description accurately describes the video content.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HMTL 5: The object element',
                url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-object-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (ARIA) 1.0: aria-describedby',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-describedby'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'University of Washington: Creating Accessible Videos',
                url:   'https://www.washington.edu/accessibility/videos/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
                url:   'https://webaim.org/techniques/captions/'
              }
            ]
        },
        VIDEO_3: {
            ID:                    'Video 3',
            DEFINITION:            '@embed@ elements used for video only content %s have caption or text transcription of the audio content.',
            SUMMARY:               '@embed@ for video only %s have alternative',
            TARGET_RESOURCES_DESC: '@embed@ elements',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:     'Verify the @embed@ element is used for prerecorded video only content.  If it is used for video only, verify it has either a text or audio description of the video content.',
              MANUAL_CHECK_P:     'Verify if any of the %N_MC @embed@ elements are used for prerecorded video only content.  If any are used for video only, verify they have either a text or audio description of the video content.',
              HIDDEN_S: 'The @embed@ element that is hidden was not evaluated.',
              HIDDEN_P: 'The %N_H @embed@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No @embed@ elements found on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_MC_1: 'Verify the @embed@ element with @video@ in its @type@ attribute is used for video only content.  If so verify the @aria-describedby@ references a text description of the video only content.',
              ELEMENT_MC_2: 'Verify the @embed@ element with @video@ in its @type@ attribute is used for video only content.  If so verify the video only content has a text or audio description.',
              ELEMENT_MC_3: 'Verify if the @embed@ element is used for video only content.  If so verify the @aria-describedby@ references a text description of the video only content.',
              ELEMENT_MC_4: 'Verify if the @embed@ element is used for video only content.  If so verify the video only content has a text or audio description.',
              ELEMENT_HIDDEN_1:       'The @embed@ element is hidden and cannot render video content.'
            },
            PURPOSE: [
              'Text and audio descriptions provide a means for people who cannot see the video to understand the video content.',
              'Some types of learning disabilities affect visual processing, text and audio descriptions provide an alternative way to understand the video content.'
            ],
            TECHNIQUES: [
              'Use the @video@ element instead of the @embed@ element for video only content, since the @video@ element provides better support for audio description tracks.',
              'Include an audio track in the video that describes the video content.',
              'Use @aria-describedby@ attribute to point to a text description of the video only content.'
            ],
            MANUAL_CHECKS: [
              'When audio descriptions are enabled on the media player, check to make sure the audio description can be heard.',
              'If there is a audio description make sure the description accurately describes the video content.',
              'If there is a text description make sure the description accurately describes the video content.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HMTL 5: The embed element',
                url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-embed-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (ARIA) 1.0: aria-describedby',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-describedby'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'University of Washington: Creating Accessible Videos',
                url:   'https://www.washington.edu/accessibility/videos/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
                url:   'https://webaim.org/techniques/captions/'
              }
            ]
        },
        VIDEO_4: {
            ID:                    'Video 4',
            DEFINITION:            'Live and prerecorded video with synchronized audio (i.e. a movie, lecture) using the @video@ element %s have synchronized captions.',
            SUMMARY:               '@video@ %s have caption',
            TARGET_RESOURCES_DESC: '@video@ elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Add caption @track@ element to the @video@ element.',
              FAIL_P:   'Add caption @track@ element to each of the %N_F @video@ elements with out caption tracks.',
              MANUAL_CHECK_S:     'Verify that the @video@ element without a caption track has open captions.',
              MANUAL_CHECK_P:     'Verify that the %N_MC @video@ elements without caption tracks have open captions.',
              HIDDEN_S: 'The @video@ element that is hidden was not evaluated.',
              HIDDEN_P: 'The %N_H @video@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No @video@ elements found on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:         '@video@ element has caption track.',
              ELEMENT_FAIL_1:       'Add caption @track@ element to @video@ element.',
              ELEMENT_MC_1: 'Verify the video content includes open captions.',
              ELEMENT_HIDDEN_1:       'The @video@ element is hidden and cannot render content.'
            },
            PURPOSE: [
              'Synchronized captions provide a means for people who cannot hear the audio content of a video to understand the audio content of the video.',
              'Some types of learning disabilities affect auditory processing, captions provide an alternative way to understand the audio content of a video.',
              'This rule covers the requirements of both WCAG 2.0 Success Criteria 1.2.2 and 1.2.4, and therefore covers both live and prerecorded video content.'
             ],
            TECHNIQUES: [
              'Use the @track@ element to add a caption track to the video content.',
              'Use open captions to include the captions as part of the video.',
              'If closed captions are not support, use open captioning to include captions as part of the video.',
              'Open captioning is the only way to insure that captions are available on most cells phones and tablet computers connecting through wireless services.'
            ],
            MANUAL_CHECKS: [
              'When captions are enabled on the media player, verify the captions are visible.',
              'Verify that the captions accurately represent and are synchronized with the speech and sounds in the video.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HMTL 5: The video element',
                url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-video-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HMTL 5: The track element',
                url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-track-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'University of Washington: Creating Accessible Videos',
                url:   'https://www.washington.edu/accessibility/videos/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
                url:   'https://webaim.org/techniques/captions/'
              }
            ]
        },
        VIDEO_5: {
            ID:                    'Video 5',
            DEFINITION:            'Live and prerecorded video with synchronized audio (i.e. a movie, lecture) using the @object@ element %s have synchronized captions.',
            SUMMARY:               '@object@ for video %s have captions',
            TARGET_RESOURCES_DESC: '@object@ elements',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:     'Verify the @object@ element is used for video content with synchronized audio (i.e movie, lecture).  If it is video with synchronized audio, verify it has open or closed captioning of the audio content.',
              MANUAL_CHECK_P:     'Verify if any of the %N_MC @object@ elements are used for video content with synchronized audio (i.e movie, lecture).  If any are used for video with synchronized audio, verify it has open or closed captioning of the audio content.',
              HIDDEN_S: 'The @object@ element that is hidden was not evaluated.',
              HIDDEN_P: 'The %N_H @object@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No @object@ elements found on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_MC_1: 'Verify the @object@ element with @video@ in its @type@ attribute has synchronized audio (i.e. movie, lecture).  If so, verify there is open or closed captioning of the audio content.',
              ELEMENT_MC_2: 'Verify the @object@ element renders video content with synchronized audio (i.e. movie, lecture).  If so, verify there is open or closed captioning of the audio content.',
              ELEMENT_HIDDEN_1: 'The @object@ element is hidden and cannot render video content.'
            },
            PURPOSE: [
              'Synchronized captions provide a means for people who cannot hear the audio content of a video to have access to the speech and sounds of the video.',
              'Some types of learning disabilities effect auditory processing, captions provide an alternative way to understand the audio content of a video.',
              'This rule covers the requirements of both WCAG 2.0 Success Criteria 1.2.2 and 1.2.4, and therefore covers both live and prerecorded content.'
            ],
            TECHNIQUES: [
              'Consider using the @video@ element instead of the @object@ element for video containing synchronized audio.  The @video@ element has better support for adding caption tracks.',
              'Use video authoring tools and player technologies that support captioning.  Use the features of the authoring system and player to add open or closed captions to the video.',
              'If closed captions are not support, use open captioning to include captions as part of the video.',
              'Open captioning is the only way to insure that captions are available on most cells phones and tablet computers.'
            ],
            MANUAL_CHECKS: [
              'When captions are enabled on the media player, verify the captions are visible.',
              'Verify that the captions accurately represent and are synchronized with the speech and sounds in the video.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HMTL 5: The object element',
                url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-object-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'University of Washington: Creating Accessible Videos',
                url:   'https://www.washington.edu/accessibility/videos/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
                url:   'https://webaim.org/techniques/captions/'
              }
            ]
        },
        VIDEO_6: {
            ID:                    'Video 6',
            DEFINITION:            'Live and prerecorded video with synchronized audio (i.e. a movie, lecture) using the @embed@ element %s have synchronized captions.',
            SUMMARY:               '@embed@ for video %s have captions',
            TARGET_RESOURCES_DESC: '@embed@ elements',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:     'Verify the @embed@ element is used for video content with synchronized audio (i.e movie, lecture).  If it is video with synchronized audio, verify it has captions of the audio content.',
              MANUAL_CHECK_P:     'Verify if any of the %N_MC @embed@ elements are used for video content with synchronized audio (i.e movie, lecture).  If any are used for video with synchronized audio, verify it has captions of the audio content.',
              HIDDEN_S: 'The @embed@ element that is hidden was not evaluated.',
              HIDDEN_P: 'The %N_H @embed@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No @embed@ elements found on this page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_MC_1: 'Verify the @embed@ element with @video@ in its @type@ attribute has synchronized audio (i.e. movie, lecture).  If so, verify their are captions avialble for the audio content.',
              ELEMENT_MC_2: 'Verify the @embed@ element renders video content with synchronized audio (i.e. movie, lecture).  If so, verify their are captions avialble for the audio content.',
              ELEMENT_HIDDEN_1:       'The @embed@ element is hidden and cannot render video content.'
            },
            PURPOSE: [
              'Synchronized captions provide a means for people who cannot hear the audio content of a video to have access to the speech and sounds of the video.',
              'Some types of learning disabilities effect auditory processing, captoins provide an alternative way to understand the audio content of a video.',
              'This rule covers the requirements of both WCAG 2.0 Success Criteria 1.2.2 and 1.2.4, and therefore covers both live and prerecorded content.'
            ],
            TECHNIQUES: [
              'Consider using the @video@ element instead of the @object@ element for video containing synchronized audio.  The @video@ element has better support for adding caption tracks.',
              'Use video authoring tools and player technologies that support captioning.  Use the features of the authoring system and player to add open or closed captions to the video.',
              'If closed captions are not support, use open captioning to include captions as part of the video.',
              'Open captioning is the only way to insure that captions are available on most cells phones and tablet computers.'
            ],
            MANUAL_CHECKS: [
              'When captions are enabled on the media player, verify the captions are visible.',
              'Verify that the captions accurately represent and are synchronized with the speech and sounds in the video.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HMTL 5: The embed element',
                url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-embed-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'University of Washington: Creating Accessible Videos',
                url:   'https://www.washington.edu/accessibility/videos/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
                url:   'https://webaim.org/techniques/captions/'
              }
            ]
        },
        VIDEO_7: {
            ID:                    'Video 7',
            DEFINITION:            '@video@ elements used for prerecorded video with synchronized audio (i.e. a movie, archived lecture) %s have an audio description of the video content.',
            SUMMARY:               '@video@ element %s have audio description.',
            TARGET_RESOURCES_DESC: '@video@ elements.',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Add audio description track to @video@ element without an audio description track.',
              FAIL_P:   'Add audio description track to each of the %N_F the @video@ elements without audio description tracks.',
              MANUAL_CHECK_S:     'Verify the @video@ element with is used for prerecorded video with synchronized audio.   If so, verify the video includes an audio description of the video content.',
              MANUAL_CHECK_P:     'Verify if any of the %N_MC @video@ elements are used for prerecorded video with synchronized audio.   If so, verify each of the videos includes an audio description of the video content.',
              HIDDEN_S: 'The @video@ element that is hidden was not evaluated.',
              HIDDEN_P: 'The %N_H @video@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No @video@ elements found on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:         '@video@ element has audio description track.',
              ELEMENT_FAIL_1:       'Add audio description track to @video@ element.',
              ELEMENT_MC_1: 'Verify an audio description of the video content is included in the audio track of the video.',
              ELEMENT_HIDDEN_1:       'The @video@ element is hidden and cannot render content.'
            },
            PURPOSE: [
              'Text and audio descriptions provide a means for people who cannot see the video to understand the video content.',
              'Some types of learning disabilities affect visual processing, text and audio descriptions provide an alternative way to understand the video content.',
              'This rule covers the requirements of both WCAG 2.0 Success Criteria 1.2.3 and 1.2.5, that is why a text description of the video content cannot be used to satisfy this rule.'
            ],
            TECHNIQUES: [
              'Use the @track@ element to add audio descriptions to the video content.',
              'Use @aria-describedby@ to reference a text description of the video content.'
            ],
            MANUAL_CHECKS: [
              'When audio descriptions are enabled on the media player, check to make sure the audio description can be heard.',
              'If there is a audio description make sure the description accurately describes the video content.',
              'If there is a text description make sure the description accurately describes the video content.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HMTL 5: The video element',
                url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-video-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HMTL 5: The track element',
                url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-track-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (ARIA) 1.0: aria-describedby',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-describedby'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'University of Washington: Creating Accessible Videos',
                url:   'https://www.washington.edu/accessibility/videos/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
                url:   'https://webaim.org/techniques/captions/'
              }
            ]
        },
        VIDEO_8: {
            ID:                    'Video 8',
            DEFINITION:            '@object@ elements used for prerecorded video with synchronized audio (i.e. a movie, archived lecture) %s have an audio description of the video content.',
            SUMMARY:               '@object@ for video %s have audio description.',
            TARGET_RESOURCES_DESC: '@object@ elements',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:     'Verify the @object@ element is used for prerecorded video with synchronized audio (i.e. a movie, archived lecture).  If so, verify the video includes an audio description of the video content.',
              MANUAL_CHECK_P:     'Verify if any of the %N_MC @object@ elements are used for prerecorded video with synchronized audio (i.e. a movie, archived lecture).  If so, verify each video includes an audio description of the video content.',
              HIDDEN_S: 'The @object@ element that is hidden was not evaluated.',
              HIDDEN_P: 'The %N_H @object@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No @object@ elements found on this page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_MC_1: 'Verify the @object@ element with @video@ in its @type@ attrbute is used for prerecorded video with synchronized audio (i.e. a movie, archived lecture).  If so verify an audio description of the video content is available.',
              ELEMENT_MC_2: 'Verify if the @object@ element is used for prerecorded video with synchronized audio (i.e. a movie, archived lecture).  If so verify an audio description of the video content is available.',
              ELEMENT_HIDDEN_1:       'The @object@ element is hidden and cannot render video content.'
            },
            PURPOSE: [
              'Text and audio descriptions provide a means for people who cannot see the video to understand the video content.',
              'Some types of learning disabilities affect visual processing, text and audio descriptions provide an alternative way to understand the video content.',
              'This rule covers the requirements of both WCAG 2.0 Success Criteria 1.2.3 and 1.2.5, that is why a text description of the video content cannot be used to satisfy this rule.'
            ],
            TECHNIQUES: [
              'Use the @video@ element instead of the @object@ element for video only content, since the @video@ element provides better support for audio description tracks.',
              'Include an audio track in the video that describes the video content.',
              'Use @aria-describedby@ attribute to point to a text description of the video only content.'
            ],
            MANUAL_CHECKS: [
              'When audio descriptions are enabled on the media player, check to make sure the audio description can be heard.',
              'If there is a audio description make sure the description accurately describes the video content.',
              'If there is a text description make sure the description accurately describes the video content.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HMTL 5: The object element',
                url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-object-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (ARIA) 1.0: aria-describedby',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-describedby'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'University of Washington: Creating Accessible Videos',
                url:   'https://www.washington.edu/accessibility/videos/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
                url:   'https://webaim.org/techniques/captions/'
              }
            ]
        },
        VIDEO_9: {
            ID:                    'Video 9',
            DEFINITION:            '@embed@ elements used for prerecorded video with synchronized audio (i.e. a movie, archived lecture) %s have audio description of the video content.',
            SUMMARY:               '@embed@ for video %s have audio description',
            TARGET_RESOURCES_DESC: '@embed@ elements',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:     'Verify the @embed@ element is used for prerecorded video with synchronized audio (i.e. a movie, archived lecture).   If so, verify the video includes an audio description of the video content.',
              MANUAL_CHECK_P:     'Verify if any of the %N_MC @embed@ elements are used for prerecorded video with synchronized audio (i.e. a movie, archived lecture).   If so, verify each of the videos include an audio description of the video content.',
              HIDDEN_S: 'The @embed@ element that is hidden was not evaluated.',
              HIDDEN_P: 'The %N_H @embed@ elements that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No @embed@ elements found on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_MC_1: 'Verify the @embed@ element with @video@ in its @type@ attrbute is used for video with synchronized audio (i.e. a movie, archived lecture).  If so, verify the video includes an audio description of the video content.',
              ELEMENT_MC_2: 'Verify if the @embed@ element is used for video with synchronized audio (i.e. a movie, archived lecture).  If so, verify the video includes an audio description of the video content.',
              ELEMENT_HIDDEN_1:       'The @embed@ element is hidden and cannot render video content.'
            },
            PURPOSE: [
              'Text and audio descriptions provide a means for people who cannot see the video to understand the video content.',
              'Some types of learning disabilities affect visual processing, text and audio descriptions provide an alternative way to understand the video content.',
              'This rule covers the requirements of both WCAG 2.0 Success Criteria 1.2.3 and 1.2.5, that is why a text description of the video content cannot be used to satisfy this rule.'
            ],
            TECHNIQUES: [
              'Use the @video@ element instead of the @embed@ element for video only content, since the @video@ element provides better support for audio description tracks.',
              'Include an audio track in the video that describes the video content.',
              'Use @aria-describedby@ attribute to point to a text description of the video only content.'
            ],
            MANUAL_CHECKS: [
              'When audio descriptions are enabled on the media player, check to make sure the audio description can be heard.',
              'If there is a audio description make sure the description accurately describes the video content.',
              'If there is a text description make sure the description accurately describes the video content.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HMTL 5: The embed element',
                url:   'https://www.w3.org/TR/html5/embedded-content-0.html#the-embed-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (ARIA) 1.0: aria-describedby',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-describedby'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'University of Washington: Creating Accessible Videos',
                url:   'https://www.washington.edu/accessibility/videos/'
              },
              { type:  OpenAjax.a11y.REFERENCES.TECHNIQUE,
                title: 'WebAIM: Captions, Transcripts, and Audio Descriptions',
                url:   'https://webaim.org/techniques/captions/'
              }
            ]
        }
   }
});
/*
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/*       OpenAjax Alliance Rules National Language Support (NLS): English      */
/* --------------------------------------------------------------------------- */


OpenAjax.a11y.RuleManager.addRulesNLSFromJSON('en-us', {

    //
    //  OAA Rules title and message string National Language Support (NLS)
    //
    rules: {
        WIDGET_1: {
            ID:                    'Widget 1',
            DEFINITION:            'Widgets %s have label.',
            SUMMARY:               'Widgets %s have label',
            TARGET_RESOURCES_DESC: 'Elements with @role@ attribute values that are defined as widgets',
            RULE_RESULT_MESSAGES: {
              FAIL_S:         'Add a label to the element with a widget role that is unlabelled.',
              FAIL_P:         'Add labels to the %N_F elements with widget roles that are unlabelled.',
              MANUAL_CHECK_S: 'Element with a widget role may need a label.',
              MANUAL_CHECK_P: '%N_MC out of %N_T element with widget roles may need a label.',
              HIDDEN_S:       'An element defined as a widget role that is hidden and was not evaluated.',
              HIDDEN_P:       '%N_H elements defined with widget roles that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No elements with widget roles on this page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1: '@%1@ element with @%2@ widget role has label: %3.',
              ELEMENT_MC_1:   '@%1@ element with @%2@ widget role may require a label depending on context (i.e multiple elements with the same widget role) in the page, adding an label will improve accessibility.',
              ELEMENT_FAIL_1:   'Add label to @%1@ element with @%2@ widget role.',
              ELEMENT_HIDDEN_1: 'Label for widget was not tested because @%1@ element with @%2@ widget role is hidden from assistive technologies and/or not visible on screen'
            },
            PURPOSE: [
              'A label associated with a element with a widget role ensures that information about the widget is spoken by screen readers when it receives focus.'
            ],
            TECHNIQUES: [
              'In some cases the child text nodes and @alt@ from descendant image elements will be used as the label for elements with widget roles.',
              'Use @aria-labelledby@ attribute to reference the id(s) of the elements on the page to label elements with widget roles.',
              'Use @aria-label@ attribute to provide a explicit label for an element with a widget role.',
              'Elements with grouping widget roles may not receive keyboard focus, but giving them a label provides users of assistive technologies a more accurate description of the purpose of the widget'
            ],
            MANUAL_CHECKS: [
              'Good labels are both concise and descriptive of the element with widget role purpose.',
              'If element with widget roles are arranged in groups, make sure labels include grouping information.',
              'Consider using @aria-describedby@ to provide references to instructions or error information.',
              'When there is more than one widget of the same type on a page, they need an label for users to uniquely identify the form control.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Accessible Name (e.g. label) Calculation',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#namecalculation'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: aria-labelledby',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: aria-label',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA6: Using aria-label to provide labels for objects',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA6'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA9: Using aria-labelledby to concatenate a label from several text nodes',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA9'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'ARIA Authoring Practices',
                url:   'https://w3c.github.io/aria-practices/'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'MDN Web Docs: ARIA ',
                url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'Web Fundamentals: Introduction to ARIA',
                url:   'https://developers.google.com/web/fundamentals/accessibility/semantics-aria'
              }
            ]
        },
        WIDGET_2: {
            ID:                    'Widget 2',
            DEFINITION:            'Elements with @onClick@ event handlers %s be a link, button or have a widget role with tabindex.',
            SUMMARY:               '@onClick@ event handlers %s have role',
            TARGET_RESOURCES_DESC: 'Elements with @onClick@ event handler values that are defined as widgets',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Add widget role name to element.',
              FAIL_P:   'Add widget roles to each of the %N_F elements.',
              MANUAL_CHECK_S:     'Verify that any child elements that can respond to element with an @onclick@ event handler are a link, form control or has a widget role, and can be accessed with the keyboard alone.',
              MANUAL_CHECK_P:     'Verify that any child elements that can respond to %N_MC elements with an @onclick@ event handler are a link, form control or has a widget role, and can be accessed with the keyboard alone.',
              HIDDEN_S: 'The element with an @onClick@ event handler that is hidden and was not evaluated.',
              HIDDEN_P: '%N_H elements with @onClick@ events handler that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No elements with @onClick@ event handlers on the page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   '@%1@ element has a widget role.',
              ELEMENT_PASS_2:   '@%1@ element is a form control.',
              ELEMENT_PASS_3:   '@%1@ element is a link.',
              ELEMENT_FAIL_1:   'Add widget role to the @%1@ element.',
              ELEMENT_MC_1:     'The @%1@ element has an @onclick@ event handler, verify any child elements that can respond to the @onclick@ event handler are a link, form control or have a widget role, and can be access with the keyboard alone.',
              ELEMENT_HIDDEN_1: 'Elements with onClick events having a @role@ was not tested because %1 element with @onClick@ event handler is hidden from assistive technologies and/or not visible on screen.'
            },
            PURPOSE: [
              'Elements with @onClick@ event handlers must be a link, form control or have a widget role.'
            ],
            TECHNIQUES: [
              'Use ARIA widget role on non-form controls to describe their function on the page.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Widget Roles',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#widget_roles'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'WAI-ARIA 1.2 Authoring Practices:  Keyboard Navigation Inside Components',
                url:   'https://w3c.github.io/aria-practices/#kbd_general_within'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA4: Using a WAI-ARIA role to expose the role of a user interface component',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA4.html'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'ARIA Authoring Practices',
                url:   'https://w3c.github.io/aria-practices/'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'MDN Web Docs: ARIA ',
                url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'Web Fundamentals: Introduction to ARIA',
                url:   'https://developers.google.com/web/fundamentals/accessibility/semantics-aria'
              }
            ]
        },
        WIDGET_3: {
            ID:                    'Widget 3',
            DEFINITION:            '@role@ attribute value %s be a widget, section, landmark or live region role.',
            SUMMARY:               '@role@ %s be valid',
            TARGET_RESOURCES_DESC: 'Elements with @role@ attribute values',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Add a valid widget, section, landmark or live region role value to the element.',
              FAIL_P:   'Add a valid widget, section, landmark or live region role values to %N_F out of %N_T elements with @role@ attributes.',
              HIDDEN_S: 'The element with a role that is hidden and was not evaluated.',
              HIDDEN_P: '%N_H elements with a role that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No elements with @role@ attribute on this page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:     '@%1@ is a widget role.',
              ELEMENT_PASS_2:     '@%1@ is a landmark role.',
              ELEMENT_PASS_3:     '@%1@ is a live region role.',
              ELEMENT_PASS_4:     '@%1@ is a section role.',
              ELEMENT_FAIL_1:   '@%1@ is an abstract ARIA role, change the role attribute to a widget, landmark or live region role.',
              ELEMENT_FAIL_2:   'The @role@ attribute is an empty string, change the @role@ attribute value to an appropriate widget, landmark, section or live region role.',
              ELEMENT_FAIL_3:   '@%1@ is not a defined ARIA role, change the @role@ attribute value to an appropriate widget, landmark, section or live region role.',
              ELEMENT_HIDDEN_1:   '@role@ attribute value was not validated because the %1 element is hidden from assistive technologies and/or not visible on screen.'
            },
            PURPOSE: [
              'Elements with @role@ attributes describe the section of a document (i.e landmarks) and the types of interactive elements (i.e. widgets) to users of assistive technologies, especially screen reader users.'
            ],
            TECHNIQUES: [
              'Use ARIA landmark roles to describe the sections of a web page.',
              'Use ARIA widget roles to describe interactive elements on a web page'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Widget Roles',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#widget_roles'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Landmark Roles',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#landmark_roles'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA4: Using a WAI-ARIA role to expose the role of a user interface component',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA4.html'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA19: Using ARIA role=alert or Live Regions to Identify Errors',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA19.html'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'ARIA Authoring Practices',
                url:   'https://w3c.github.io/aria-practices/'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'MDN Web Docs: ARIA ',
                url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'Web Fundamentals: Introduction to ARIA',
                url:   'https://developers.google.com/web/fundamentals/accessibility/semantics-aria'
              }
            ]
        },
        WIDGET_4: {
            ID:                    'Widget 4',
            DEFINITION:            'ARIA property and state values %s be valid types.',
            SUMMARY:               'ARIA values %s be valid',
            TARGET_RESOURCES_DESC: 'Elements with aria attributes',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Change ARIA attribute to a valid type.',
              FAIL_P:   'Change %N_F out of %N_T ARIA attributes to a valid types.',
              HIDDEN_S: 'The widget that is hidden and was not evaluated.',
              HIDDEN_P: '%N_H widgets that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No ARIA attributes on this page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   'The @%1@ attribute with the value "@%2@" is a valid token.',
              ELEMENT_PASS_2:   'The @%1@ attribute with the value "@%2@" is a valid "%3" type.',
              ELEMENT_FAIL_1: 'The @%1@ attribute with the value "@%2@" must change to one of the following values: %3.',
              ELEMENT_FAIL_2: 'The @%1@ attribute with the value "@%2@" must change to one or more of the following values: %3.',
              ELEMENT_FAIL_3: 'The @%1@ attribute with the value "@%2@" must change to a value with type of \'%3\'.',
              ELEMENT_HIDDEN_1: 'ARIA attribute value was not tested for validity because the @%1@ attribute with the value "@%2@" is hidden from assistive technologies and not visible on screen.'
            },
            PURPOSE: [
              'ARIA attributes must be a valid type to accurately describe web content to users of assistive technologies, especially screen reader users.'
            ],
            TECHNIQUES: [
              'Use valid values for ARIA attributes.',
              'Check W3C WAI Accessible Rich Internet Applications specifications for allowed values for ARIA attributes.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Supported Property and States',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#states_and_properties'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA5: Using WAI-ARIA state and property attributes to expose the state of a user interface component',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA5.html'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'ARIA Authoring Practices',
                url:   'https://w3c.github.io/aria-practices/'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'MDN Web Docs: ARIA ',
                url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'Web Fundamentals: Introduction to ARIA',
                url:   'https://developers.google.com/web/fundamentals/accessibility/semantics-aria'
              }
            ]
      },
      WIDGET_5: {
            ID:                    'Widget 5',
            DEFINITION:            'Elements with the attributes that start with @aria-@ %s be a valid ARIA property or state.',
            SUMMARY:               'Attributes that start with @aria-@ %s be defined.',
            TARGET_RESOURCES_DESC: 'Elements with aria attributes',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Change ARIA attribute to a defined property or state.',
              FAIL_P:   'Change all %N_F out of %N_T ARIA attributes to a defined properties or states.',
              HIDDEN_S: 'The widget that is hidden and was not evaluated.',
              HIDDEN_P: '%N_H widgets that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No undefined ARIA attributes on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:    'The @%1@ attribute is a defined ARIA property or state.',
              ELEMENT_FAIL_1:  'The @%1@ attribute must be changed to a defined ARIA property or state.',
              ELEMENT_HIDDEN_1:  'Valid ARIA attribute was not tested becasue the @%1@ attribute with the value "@%2@" is hidden from assistive technologies and/or not visible on screen.'
            },
            PURPOSE: [
              'ARIA attributes must be defined properties or states to accurately describe web content to users of assistive technologies, especially screen reader users'
            ],
            TECHNIQUES: [
              'Use defined ARIA properties and states in the ARIA specification.',
              'Check W3C WAI Accessible Rich Internet Applications specifications for allowed values for ARIA attributes.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Supported Property and States',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#states_and_properties'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA5: Using WAI-ARIA state and property attributes to expose the state of a user interface component',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA5.html'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'ARIA Authoring Practices',
                url:   'https://w3c.github.io/aria-practices/'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'MDN Web Docs: ARIA ',
                url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'Web Fundamentals: Introduction to ARIA',
                url:   'https://developers.google.com/web/fundamentals/accessibility/semantics-aria'
              }
            ]
      },
      WIDGET_6: {
            ID:                    'Widget 6',
            DEFINITION:            'Widgets %s define required properties and states.',
            SUMMARY:               'Widgets %s have properties',
            TARGET_RESOURCES_DESC: 'Widgets with required properties and states',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Add required properties and states to widget.',
              FAIL_P:   'Add required properties and states to the %N_F of the %N_T widgets with required properties and/or states on the page.',
              HIDDEN_S: 'The widget with required properties and states that is hidden and was not evaluated.',
              HIDDEN_P: '%N_H widgets that have required properties and states that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No widgets with required properties and states on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   '@%1@ widget has the following required ARIA properties and states: %2.',
              ELEMENT_FAIL_1: 'Add one or more of the required ARIA properties and states (i.e. "%2") to the @%1@ widget.',
              ELEMENT_HIDDEN_1: 'Required ARA properties and states was not tested because the %1 widget is hidden from assistive technologies and/or not visible on screen.'
            },
            PURPOSE: [
              'ARIA roles, properties and states describes the features of interactive widgets to users of assistive technologies, especially screen reader users.'
            ],
            TECHNIQUES: [
              'Use required ARIA properties to describe the features and options of a widget.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Widget Roles',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#widget_roles'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA5: Using WAI-ARIA state and property attributes to expose the state of a user interface component',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA5.html'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'ARIA Authoring Practices',
                url:   'https://w3c.github.io/aria-practices/'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'MDN Web Docs: ARIA ',
                url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'Web Fundamentals: Introduction to ARIA',
                url:   'https://developers.google.com/web/fundamentals/accessibility/semantics-aria'
              }
            ]
        },
      WIDGET_7: {
            ID:                    'Widget 7',
            DEFINITION:            'Container widgets %s have required owned elements.',
            SUMMARY:               'Widgets %s have owned elements',
            TARGET_RESOURCES_DESC: 'Widgets with required owned elements',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Add required child element to the widget.',
              FAIL_P:   'Add required child elements for the %N_F out of %N_T widgets missing required child elements.',
              HIDDEN_S: 'The widget with requires child elements that is is hidden and was not evaluated.',
              HIDDEN_P: '%N_H hidden widgets that require child elements were not evaluated.',
              NOT_APPLICABLE:  'No widgets with required child elements on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:    '@%1@ widget contains at least one required owned element: @%2@.',
              ELEMENT_PASS_2:    'When @aria-busy@ is set to @true@, the @%1@ widget is not required to contain required owned elements.',
              ELEMENT_FAIL_1:  '@%1@ widget does not contain one or more of following required owned elements: @%2@.',
              ELEMENT_HIDDEN_1:  'Required owned elements was not tested because the @%1@ widget is hidden from assistive technologies and not visible on screen.'
            },
            PURPOSE: [
              'ARIA roles, properties and states describes the features of interactive widgets to users of assistive technologies, especially screen reader users.',
              'Roles that are associated with container widgets have important parent/child relationships with other roles.',
              'Parent/Child relationships are used by assistive technologies for computing the number of items in a container and the item position.',
              'Container roles are also used by assistive technologies to provide enhanced navigation features for moving between items in lists, tables, grids and treegrids.'
            ],
            TECHNIQUES: [
              'Required owned elements can be defined using the HTML DOM structure or the @aria-owns@ attribute.',
              'Use the DOM structure to add required owned elements by making them a descendant of the container element.',
              'When the owned elements are not descendants of the container element, use the @aria-owns@ attribute on the container element to reference the owned elements.',
              'When @aria-busy@ attribute is set to @true@ on the container element, the container element does not need to own any required elements.  @aria-busy@ should be used when a container element is being dynamically populated.',
              'NOTE: The DOM structure technique is preferred over the @aria-owns@ technique, since it is less likely to result in authoring errors associated with creating and referencing elements with unique @id@s.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Owned Element definition',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#dfn-owned-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: aria-owns attribute',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-owns'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'ARIA Authoring Practices',
                url:   'https://w3c.github.io/aria-practices/'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'MDN Web Docs: ARIA ',
                url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'Web Fundamentals: Introduction to ARIA',
                url:   'https://developers.google.com/web/fundamentals/accessibility/semantics-aria'
              }
            ]
        },
     WIDGET_8: {
            ID:                    'Widget 8',
            DEFINITION:            'Role %s have a required parent role using the HTML DOM structure or the @aria-owns@ attribute.',
            SUMMARY:               'Role %s have parent',
            TARGET_RESOURCES_DESC: 'Role with required parent role',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Add required parent role to the widget.',
              FAIL_P:   'Add required parent role to the %N_F of the %N_T widgets that require a parent role.',
              HIDDEN_S: 'The role that requires a parent role that is hidden and was not evaluated.',
              HIDDEN_P: '%N_H widgets that require a parent roles that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No widgets with required parent role on this page'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   '@%1@ role is a child of the a @%2@ role.',
              ELEMENT_FAIL_1:   'The @%2@ role requires a parent @%1@ role, check your HTML DOM structure to ensure an ancestor element or an @aria-owns@ attributes identifies a required parent role.',
              ELEMENT_HIDDEN_1: 'Required parent role was not tested because the @%1@ widget is hidden from assistive technologies and/or not visible on screen.'
            },
            PURPOSE: [
              'ARIA roles, properties and states describes the features of interactive widgets to users of assistive technologies, especially screen reader users.',
              'Roles that are associated with container widgets have important parent/child relationships with other roles.',
              'Parent/child relationships are used by assistive technologies for computing the number of items owned by a container and the position of an item (e.g. "third of five links").',
              'Container roles are also used by assistive technologies to provide enhanced navigation features for moving between items in lists, tables, grids and treegrids.'
            ],
            TECHNIQUES: [
              'Parent roles can be defined using the HTML DOM structure or the @aria-owns@ attribute.',
              'Required parent role is a DOM ancestor of the element.',
              'Required parent role references the element using the @aria-owns@ attribute.',
              'NOTE: HTML DOM parent/child relationships for defining relationships is preferred over the use of @aria-owns@ attribute, since it is less likely to result in authoring errors associated with creating and referencing elements with unique @id@s.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Owned Element definition',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#dfn-owned-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: aria-owns attribute',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-owns'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'ARIA Authoring Practices',
                url:   'https://w3c.github.io/aria-practices/'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'MDN Web Docs: ARIA ',
                url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'Web Fundamentals: Introduction to ARIA',
                url:   'https://developers.google.com/web/fundamentals/accessibility/semantics-aria'
              }
            ]
        },
     WIDGET_9: {
            ID:                    'Widget 9',
            DEFINITION:            'Elements %s be owned by only one widget.',
            SUMMARY:               'Only one owner',
            TARGET_RESOURCES_DESC: 'Widgets with required parent roles',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Update widgets with aria-owns to make sure a element is only referenced once.',
              FAIL_P:   'Update %N_F out of %N_T widgets with aria-owns to make sure they reference a element only once.',
              NOT_APPLICABLE:  'No elements are referenced using aria-owns on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:   '@%2@ element is referenced only by @%1@ container element using aria-owns.',
              ELEMENT_FAIL_1: 'Check the @%1@ @aria-owns@ reference to @%2@ element so it is only referenced by one container element.',
            },
            PURPOSE: [
              'ARIA container elements  have require child elements.',
              'When the HTML DOM parent/child relationships do not identify the child elements the @aria-owns@ attribute can be used to reference the child elements.',
              'A child element can only be referenced using @aria-owns@ by one container element.'
            ],
            TECHNIQUES: [
              'Container elements using @aria-owns@ attribute must accurately reference the associated child elements.',
              'A child element can only be referenced by one container element using the @aria-owns@ attribute.',
              'Update the application to use the DOM parent/child relationships instead of using @aria-owns@ technique.',
              'NOTE: HTML DOM parent/child relationships for defining relationships is preferred over the use of @aria-owns@ attribute, since it is less likely to result in authoring errors associated with creating and referencing elements with unique @id@s.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Owned Element definition',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#dfn-owned-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: aria-owns attribute',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-owns'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'ARIA Authoring Practices',
                url:   'https://w3c.github.io/aria-practices/'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'MDN Web Docs: ARIA ',
                url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'Web Fundamentals: Introduction to ARIA',
                url:   'https://developers.google.com/web/fundamentals/accessibility/semantics-aria'
              }
            ]
        },
     WIDGET_10: {
            ID:                    'Widget 10',
            DEFINITION:            'Range widget %s have value between minimum and maximum values, or have an indeterminate state.',
            SUMMARY:               'Value in range',
            TARGET_RESOURCES_DESC: 'Range widgets',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Update @range@ widget attributes of the range widget so the @aria-valuenow@ attribute is in the range defined by @aria-valuemin@ and @aria-valuemax@ attributes.',
              FAIL_P:   'Update @range@ widget attributes of the %N_F out of %N_T range widgets so the @aria-valuenow@ attribute of each widget is in the range defined by @aria-valuemin@ and @aria-valuemax@ attributes.',
              HIDDEN_S: 'The @range@ widget that is hidden and was not evaluated.',
              HIDDEN_P: '%N_H @range@ widgets that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No @range@ widgets on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_PASS_1:  '@%1@ widget is using @aria-valuetext@ attribute which overrides the @aria-valuenow@ attribute for describing the value of the range.',
              ELEMENT_PASS_2:  '@%1@ widget value of %2 is in the range %3 and %4.',
              ELEMENT_PASS_3:  '@%1@ widget has no @aria-valuenow@ attribute and the value is considered indeterminate.',
              ELEMENT_FAIL_1:  'Update the numeric values of @aria-valuenow@ (%1), @aria-valuemin@ (%2) and @aria-valuemax@ (%3) so the @aria-valuenow@ value is in range.',
              ELEMENT_FAIL_2:  'Update the numeric values of @aria-valuemin@ (%1) and @aria-valuemax@ (%2) so the @aria-valuemin@ value is less than the @aria-valuemax@ value.',
              ELEMENT_FAIL_3:  'Update the @%1@ widget values for @aria-valuemin@ ("%2") and/or @aria-valuemax@ ("%3") attributes to be valid numbers.',
              ELEMENT_FAIL_4:  '@%1@ widget is missing or has an invalid value for @aria-valuenow@.',
              ELEMENT_HIDDEN_1:  'Widget range values were not tested because the @%1@ range widget is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Range roles identify a value between a minimum or maximum value and whether the value can be changed by the user (e.g. @scrollbar@, @slider@ or @spinbutton@).',
              'Screen readers typcially render the value of a range widget as a percentage of the total range defined by the minimum and maximum values.',
              '@aria-valuetext@ can be used to render an alternative to the percentage when a numerical values and/or a units of measure are more descriptive.',
              'Some range roles (e.g. @progress@ and @spinbutton@) allow an unknown current value indicating indeterminate or no current value.'
            ],
            TECHNIQUES: [
              'Use the @aria-valuenow@ attributes numerical value must be in the range defined by @aria-valuemin@ and @aria-valuemax@.',
              'Screen reader typically render the slider value as a percentage, requiring a valid @aria-valuenow@ attribute.',
              'Use the @aria-valuetext@ to provide an alternative to the percentage typically spoken by assistive technologies (e.g. "32 dollars", "78 degrees")',
              'For most range roles, if @aria-valuemin@ is not defined it\'s default value is 0.',
              'For most range roles, if @aria-valuemax@ is not defined it\'s default value is 100.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'ARIA Authoring Practices: Communicating Value and Limits for Range Widgets',
                url:   'https://w3c.github.io/aria-practices/#range_related_properties'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Meter',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#meter'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Progress',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#progress'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Scollbar',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#scollbar'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Slider',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#slider'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Spinbutton',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#spinbutton'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA5: Using WAI-ARIA state and property attributes to expose the state of a user interface component',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA5.html'
              }
            ]
        },
     WIDGET_11: {
            ID:                    'Widget 11',
            DEFINITION:            'Elements with UI event handlers %s have widget roles that accurately describe the options and actions available to the user upon interacting with the element.',
            SUMMARY:               'Elements with event handlers %s have roles',
            TARGET_RESOURCES_DESC: 'Elements with event handlers',
            RULE_RESULT_MESSAGES: {
              FAIL_S:          'Add an ARIA widget role to the interactive element, or to its descendants, to describe the user interactions associated with the event handler or handlers on the element.',
              FAIL_P:          'Add ARIA widget roles to the %N_F interactive elements, or to their descendants, to describe the user interactions associated with the event handlers on those elements.',
              MANUAL_CHECK_S:  'Verify the user interactions associated with the interactive element with one or more event handlers are accurately described by the element\'s widget role and/or those of its descendants.',
              MANUAL_CHECK_P:  'Verify the user interactions associated with the %N_MC interactive elements with one or more event handlers are accurately described by each element\'s widget role and/or their descendants.',
              HIDDEN_S:        'The hidden interactive element with event handlers was not evaluated.',
              HIDDEN_P:        'The %N_H interactive elements with event handlers were not evaluated.',
              NOT_APPLICABLE:  'No interactive elements with event handlers found on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_MANUAL_CHECK_1:  'Verify the user options and actions available through the "@%2@" event handler(s) are accurately described by the @%1@ widget role.',
              ELEMENT_MANUAL_CHECK_2:  'Verify the user options and actions available through the "@%2@" event handler(s) are accurately described by native role semantics of the @%1@ element.',
              ELEMENT_MANUAL_CHECK_3:  'Verify the user options and actions available through the "@%2@" event handler(s) are accurately described by the descendant elements with widget roles or the native role semantics of the interactive elements.',
              ELEMENT_FAIL_1:   'Add widget role(s) to the element and/or its descendants that accurately describe the user options and actions of the @%1@ element with the following event handlers: %2.',
              ELEMENT_HIDDEN_1: 'Roles for interactive elements was not tested because the %1 element is hidden from assistive technologies with following event handlers: %2'
            },
            PURPOSE: [
              'ARIA widget roles describe the user options and actions, or more generally, the expected behavior, of interactive elements to users of assistive technologies.',
              'Standard HTML form controls and links have default widget roles that describe their behavior.',
              'When UI event handlers are used to create user options and actions that change the expected behavior of an interactive element, ensure that the appropriate widget role is assigned to the element.',
              'Conversely, ensure that the event handlers are adding appropriate behaviors that align with the ARIA widget role.'
            ],
            TECHNIQUES: [
              'Use the @role@ attribute with an ARIA widget role value to describe the user options, actions and expected behavior of custom interactive elements.',
              'Use ARIA property and state attributes to describe the features of each widget role. Note that some widget roles have required properties and states.',
              'Ensure that all options and actions of interactive elements are available through keyboard-only interaction.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Widget Roles',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#widget_roles'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: INPUT element widget role semantics',
                url:   'https://www.w3.org/TR/html51/sec-forms.html#state-of-the-type-attribute'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: SELECT element widget role semantics',
                url:   'https://www.w3.org/TR/html51/sec-forms.html#the-select-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: TEXTAREA element widget role semantics',
                url:   'https://www.w3.org/TR/html51/sec-forms.html#the-textarea-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: BUTTON element widget role semantics',
                url:   'https://www.w3.org/TR/html51/sec-forms.html#the-button-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML5: A element widget role semantics',
                url:   'https://www.w3.org/TR/html51/textlevel-semantics.html#the-a-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'UI Events Specification',
                url:   'https://www.w3.org/TR/DOM-Level-3-Events/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes.',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes.',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'ARIA Authoring Practices',
                url:   'https://w3c.github.io/aria-practices/'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'MDN Web Docs: ARIA ',
                url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'Web Fundamentals: Introduction to ARIA',
                url:   'https://developers.google.com/web/fundamentals/accessibility/semantics-aria'
              }
            ]
        },
        WIDGET_12: {
            ID:         'Widget 12',
            DEFINITION: 'The label for elements with a widget roles on a page %s sufficiently describe its purpose.',
            SUMMARY:    'Widget labels %s be descriptive',
            TARGET_RESOURCES_DESC: 'Elements with widget roles on a page',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'To the element with widget role missing a label, add a label that describes its purpose.',
              FAIL_P:   'To each of the %N_F element with widget roles missing labels, add a label that uniquely describes its purpose.',
              MANUAL_CHECK_S: 'Verify that the label uniquely describes the purpose of the element with widget role.',
              MANUAL_CHECK_P: 'Verify that the label for each of the %N_MC element with widget roles uniquely describes its purpose.',
              HIDDEN_S: 'The control element that is hidden was not evaluated.',
              HIDDEN_P: 'The %N_H control elements that are hidden were not evaluated.',
              NOT_APPLICABLE: 'No element with widget roles on this page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_MC_1:     'Verify the label "%1" for the @%2@ element with @%3@ widget role describes its purpose.',
              ELEMENT_MC_2:     'Verify the @%1@ element with @%2@ widget role does not need a label, a label is only needed  if it clarifies the purpose of the widget on the page.',
              ELEMENT_FAIL_1:   'Add a label to the @%1@ element with @%2@ widget role.',
              ELEMENT_HIDDEN_1: '@%1@ element with the %2@ widget role was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Labels that are sufficiently descriptive make it possible for people to understand the purposes of elements with widget roles on the page.'
            ],
            TECHNIQUES: [
              'In some cases the child text nodes and @alt@ from descendant image elements will be used as the label for elements with widget roles.',
              'Use @aria-labelledby@ attribute to reference the id(s) of the elements on the page to label elements with widget roles.',
              'Use @aria-label@ attribute to provide a explicit label for an element with a widget role.',
              'Elements with grouping widget roles may not receive keyboard focus, but giving them a label provides users of assistive technologies a more accurate description of the purpose of the widget'
            ],
            MANUAL_CHECKS: [
              'Good labels are both concise and descriptive of the element with widget role purpose.',
              'If element with widget roles are arranged in groups, make sure labels include grouping information.',
              'Consider using @aria-describedby@ to provide references to instructions or error information.',
              'When there is more than one widget of the same type on a page, they need an label for users to uniquely identify the form control.'
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML Specification: The @label@ element',
                url:   'https://html.spec.whatwg.org/#the-label-element'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-label@ attribute',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-label'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2: The @aria-labelledby@ attribute',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'HTML Specification: The @title@ attribute',
                url:   'https://html.spec.whatwg.org/#the-title-attribute'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H65: Using the title attribute to identify form controls when the label element cannot be used',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H65'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA6: Using aria-label to provide labels for objects',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA6'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'ARIA9: Using aria-labelledby to concatenate a label from several text nodes',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA9'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'H71: Providing a description for groups of form controls using fieldset and legend elements',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/html/H71'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'MDN Web Docs: ARIA ',
                url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'Web Fundamentals: Introduction to ARIA',
                url:   'https://developers.google.com/web/fundamentals/accessibility/semantics-aria'
              }
            ]
        },
        WIDGET_13: {
            ID:                    'Widget 13',
            DEFINITION:            'ARIA roles that prohibit accessible names %s not have an accessible name defined using @aria-label@ or @aria-labelledby@ attributes.',
            SUMMARY:               'Role does not support accessible name.',
            TARGET_RESOURCES_DESC: 'ARIA roles which prohibit an accessible name',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Remove @aria-label@ or @aria-labelledby@ from the element with a role that prohibits the use of naming techniques.',
              FAIL_P:   'Remove @aria-label@ or @aria-labelledby@ from the %N_F elements with roles that prohibit the use of naming techniques.',
              HIDDEN_S: 'The element with an widget role that is hidden and was not evaluated.',
              HIDDEN_P: '%N_H elements with @aria-label@ or @aria-labelledby@ that are on elements and/or have roles that prohibit the use of naming techniques.',
              NOT_APPLICABLE:  'No elements with @aria-label@ or @aria-labelledby@ that are on elements and/or have roles that prohibit the use of naming techniques where found.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_FAIL_1:    'Remove @aria-label@ or @aria-labelledby@ attribute from @%1@ element with role @%2@.',
              ELEMENT_FAIL_2:    'Remove @aria-label@ or @aria-labelledby@ attribute from @%1@ element.',
              ELEMENT_HIDDEN_1:  'Element @%1[role="%2"]@ was not tested because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2:  'Element @%1@ was not tested because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Providing an accessible name for elements or roles provides a way for users to identify the purpose of each landmark, widget, link, table and form control on a web page.',
              'Versions of the ARIA specification before 1.2 allowed @aria-label@ or @aria-labelledby@  to be used on any element, even if an accessible name was not useful .',
              'For example, defining an accessible name on a @p@ element or an element with @role=none@ does not provide any useful accessibility information to assistive technologies.  For a @p@ element the text content is the only part that is needed by assistive technologies.'
            ],
            TECHNIQUES: [
              'Remove @aria-label@ or @aria-labelledby@ attribute from the element.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Widget Roles',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#widget_roles'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'ARIA Authoring Practices',
                url:   'https://w3c.github.io/aria-practices/'
              }
            ]
        },
        WIDGET_14: {
            ID:                    'Widget 14',
            DEFINITION:            'Verify the live region has the appropriate ARIA markup to indicate whether or how the screen reader will interrupt the user with a change notification.',
            SUMMARY:               'Verify appropriate use of live region',
            TARGET_RESOURCES_DESC: 'Elements with @alert@, @log@ or @status@ roles or the @aria-live@ attribute',
            RULE_RESULT_MESSAGES: {
              FAIL_S:          'One element identified as a live region has a conflict between the implied attribute values of the role and the defined attribute values.',
              FAIL_P:          'The %N_F elements identified as live regions have conflicts between the implied attribute values of their roles and the defined attribute values.',
              HIDDEN_S:        'One element identified as a live region is hidden and was not evaluated.',
              MANUAL_CHECK_S:  'Verify the element identified as a live region has the appropriate ARIA markup for the type of informational change that can occur.',
              MANUAL_CHECK_P:  'Verify the %N_MC elements identified as live regions have the appropriate ARIA markup for the type of informational changes that can occur in those regions.',
              HIDDEN_P:        '%N_H elements identified as live regions are hidden and were not evaluated.',
              NOT_APPLICABLE:  'No elements were identified as live regions on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_FAIL_1:     'The @aria-live@ attribute value of @%1@ conflicts with the default value of @%2@ for the @aria-live@ property of the @%3@ role.',
              ELEMENT_FAIL_2:     'The @aria-atomic@ attribute value of @false@ conflicts with the default value of @true@ for the @aria-atomic@ property of the @%1@ role.',
              ELEMENT_MC_1:       'Verify the @aria-live@ attribute value of @%1@ is appropriate for the type of informational change that can occur in the region.',
              ELEMENT_MC_2:       'Verify the @alert@ role identifies a live region with critical time-sensitive information.',
              ELEMENT_MC_3:       'Verify the @log@ role identifies a live region where new information added and deleted in a meaningful order.',
              ELEMENT_MC_4:       'Verify the @alert@ role identifies a live region with advisory information.',
              ELEMENT_HIDDEN_1:   '@%1[arial-live="%2"]@ was not evaluated because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2:   '@%1[role="%2"]@ was not evaluated because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'ARIA live regions provide a mechanism for displaying dynamic text content on a page such that changes in the content will be automatically announced to screen reader users while they are focusing on other parts of the page.',
              'The manner in which informational changes in live regions are announced to screen reader users is controlled by three separate ARIA roles that may be assigned to the region: @alert@, @log@ and @status@.',
              'In general, live regions should be used sparingly, since live regions that are constantly announcing changes become distracting, and may prevent the user from completing the task they are working on.',
              'A common misuse of live regions is to announce the opening of pull down menus or dialog boxes: These types of announcements are better handled through the appropriate use of other ARIA markup such as the @menu@ and @dialog@ roles.'
            ],
            TECHNIQUES: [
              'The @alert@ role identifies a live region with very important, and usually time-sensitive, information. When the information changes in this type of live region, a message is typically sent that interrupts the current speech being spoken by a screen reader. Examples includes transaction errors that are cancelling or impeding the progress of completing a financial transaction.',
              'The @log@ role identifies a type of live region where new information is added in a meaningful order and old information may disappear. Examples include chat logs, messaging history, game log, or an error log.',
              'The @status@ role identifies a live region that contains an advisory message, but one that is not important enough to justify an @alert@ role. This type of region is often, but not necessarily, presented as a status bar, and announcements of informational changes are typically delayed until a break occurs in the current speech being read by the screen reader software.',
              'When the @aria-atomic@ attribute is specified for a live region, it indicates to assistive technologies that when a change occurs, it should re-render all of the content or just the changes.',
              'The optional @aria-relevant@ attribute on a live region indicates what types of informational changes should be communicated to the user (e.g. @additions@, @deletions@, @text@ and @all@).',
              'The @aria-live@ attribute can be used to create custom live regions, with possible values of @polite@, @assertive@ and @off@. When used in conjunction with the ARIA @alert@, @log@ or @status@ roles, care must be taken in order to avoid conflicts with the default properties of those roles.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.OTHER,
                title: 'Mozilla Developer Network: ARIA Live Regions',
                url:   'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Alert Role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/roles#alert'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Log Role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/roles#log'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Status Role',
                url:   'https://www.w3.org/TR/wai-aria-1.2/roles#status'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: aria-live',
                url:   'https://www.w3.org/TR/wai-aria-1.2/states_and_properties#aria-live'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: aria-atomic',
                url:   'https://www.w3.org/TR/wai-aria-1.2/states_and_properties#aria-atomic'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: aria-relevant',
                url:   'https://www.w3.org/TR/wai-aria-1.2/states_and_properties#aria-relevant'
              }

            ]
        },
        WIDGET_15: {
            ID:                    'Widget 15',
            DEFINITION:            'ARIA attributes that have been deprecated for a role %s be removed.',
            SUMMARY:               'Remove deprecated ARIA attributes.',
            TARGET_RESOURCES_DESC: 'Roles where ARIA attributes are deprecated.',
            RULE_RESULT_MESSAGES: {
              FAIL_S:   'Remove the deprecated ARIA attribute from the element.',
              FAIL_P:   'Remove the deprecated ARIA attributes from the %N_F elements.',
              HIDDEN_S: 'The element with deprecated ARIA attribute that is hidden and was not evaluated.',
              HIDDEN_P: '%N_H elements with deprecated ARIA attributes that are hidden were not evaluated.',
              NOT_APPLICABLE:  'No elements with deprecated ARIA attributes found.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_FAIL_1:    'Remove @%1@ attribute from @%2@ element with role @%3@.',
              ELEMENT_FAIL_2:    'Remove @%1@ attribute from @%2@ element which has an implicit role of "@%3@".',
              ELEMENT_HIDDEN_1:  'The @%1@ attribute on the @%2[role="%3"]@ element was not tested because it is hidden from assistive technologies.',
              ELEMENT_HIDDEN_2:  'The @%1@ attribute on the @%2@ element which has the implicit role of "@%3@"" was not tested because it is hidden from assistive technologies.'
            },
            PURPOSE: [
              'Not all ARIA properties and states are useful on every ARIA role and starting with ARIA 1.2 certain states and properties that were once considered global have been deprecated on specific roles.',
              'The ARIA in HTML specification defines implicit roles for most HTML elememnts.',
              'The same ARIA property and state restrictions on explicit roles apply to implicit roles.'
            ],
            TECHNIQUES: [
              'Remove the deprecated ARIA attribute from the element.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification: Widget Roles',
                url:   'https://www.w3.org/TR/wai-aria-1.2/#widget_roles'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'ARIA in HTML',
                url:   'https://www.w3.org/TR/html-aria/'
              },
              { type:  OpenAjax.a11y.REFERENCES.WCAG_TECHNIQUE,
                title: 'G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
                url:   'https://www.w3.org/WAI/WCAG21/Techniques/general/G108'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'ARIA Authoring Practices',
                url:   'https://w3c.github.io/aria-practices/'
              }
            ]
        },
        WIDGET_16: {
            ID:                    'Widget 16',
            DEFINITION:            'Custom elements (HTML elements created using the Web Components APIs) with closed Shadow DOMs %s be manually checked for accessibility requirements.',
            SUMMARY:               'Closed shadow DOM requires manual check.',
            TARGET_RESOURCES_DESC: 'Custom elements created using web components API with closed shadow DOM.',
            RULE_RESULT_MESSAGES: {
              MANUAL_CHECK_S:  'Verify the custom element with a closed shadow DOM meets WCAG accessibility requirments.',
              MANUAL_CHECK_P:  'Verify the %N_MC custom elements with a closed shadow DOM meet WCAG accessibility requirments.',
              HIDDEN_S: 'A custom element with a closed shadow DOM is hidden and only needs to be checked if has features that become visible need to be checked for accessbility.',
              HIDDEN_P: '%N_H custom elements with a closed shadow DOM are hidden and only the custom elements with features that may become visible need to be checked for accessibility.',
              NOT_APPLICABLE:  'No custom elements found on the page.'
            },
            NODE_RESULT_MESSAGES: {
              ELEMENT_MC_1:       'Verify the accessibility of the "@%1@"" custom component with a closed shadow DOM using manual checking techniques or automated tools that can anlyze the shadow DOM of custom elements.',
              ELEMENT_HIDDEN_1:  'The @%1@ custom element with a closed shadow DOM is hidden from assistive technologies.',
            },
            PURPOSE: [
              'Custom elements, defined using the Web Components APIs of HTML 5, are typically used for creating interactive widgets on a web page. A custom element effectively creates a self-scoped package of HTML, CSS and JavaScript that uses the Shadow DOM to insulate itself from other CSS and JavaScript defined by the parent document.',
              'Because custom elements use the Shadow DOM and thus are not part of the legacy DOM, they can only be accessed by the evaluation library for programmatic checking of accessibility features when the shadow DOM is "open".',
              'The evaluation library is unable to analyze custom elements created with "closed" shadow DOMs. In the case of the "closed" shadow DOM all accessibility requirements require manual checks, possibly by using other DOM inspection tools to identify accessibility issues and features.'
            ],
            TECHNIQUES: [
              'In evaluating custom elements with "closed" shadow DOMs that render as interactive widgets, the most important manual checks involve keyboard navigation and operability, and focus styling, which are related to the various ways a user may interact with the widget.',
              'Test with screen readers to verify functionality is operable by a screen reader user.',
              'Test the graphical rendering in operating system using high contrast settings to verify content is perceivable by people with visual impairments.',
              'Use accessibility tools in browser DOM inspectors to assist with manual inspection, since the DOM inspector of most  browsers allows access to the Shadow DOM of the custom element.',
              'You can use the accessibility rules in this tool to help guide your manual testing procedures.'
            ],
            MANUAL_CHECKS: [
            ],
            INFORMATIONAL_LINKS: [
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'MDN: Web Components',
                url:   'https://developer.mozilla.org/en-US/docs/Web/Web_Components'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'WebComponents.org: Introduction',
                url:   'https://www.webcomponents.org/introduction'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Web Content Accessibility Guidelines (WCAG)',
                url:   'https://www.w3.org/TR/WCAG/'
              },
              { type:  OpenAjax.a11y.REFERENCES.SPECIFICATION,
                title: 'Accessible Rich Internet Applications (WAI-ARIA) 1.2 Specification',
                url:   'https://www.w3.org/TR/wai-aria-1.2/'
              },
              { type:  OpenAjax.a11y.REFERENCES.EXAMPLE,
                title: 'ARIA Authoring Practices',
                url:   'https://w3c.github.io/aria-practices/'
              }
            ]
        }
    }
});
/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*            OpenAjax Alliance Media Rules                         */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

/**
 * @object AUDIO_1
 *
 * @desc Audio elements must have captions or text transcripts
 */

{ rule_id             : 'AUDIO_1',
  last_updated        : '2014-11-21',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.AUDIO_VIDEO,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '1.2.1',
  wcag_related_ids    : ['1.2.2', '1.2.4', '1.2.9'],
  target_resources    : ['audio', 'track'],
  primary_property    : 'type',
  resource_properties : ['controls', 'autoplay', 'name', 'src', 'label'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var audio_elements     = dom_cache.media_cache.audio_elements;
    var audio_elements_len = audio_elements.length;

    for (var i = 0; i < audio_elements_len; i++) {
      var ae = audio_elements[i];
      var de = ae.dom_element;
      var cs = de.computed_style;

      if ((cs.is_visible_to_at === VISIBILITY.VISIBLE) ||
          (ae.has_autoplay)) {
        if (ae.getTextTracks().length) rule_result.addResult(TEST_RESULT.PASS, ae, 'ELEMENT_PASS_1', []);
        else if (de.has_aria_describedby) rule_result.addResult(TEST_RESULT.PASS, ae, 'ELEMENT_PASS_2', []);
        else rule_result.addResult(TEST_RESULT.FAIL, ae, 'ELEMENT_FAIL_1', []);
      }
      else {
       rule_result.addResult(TEST_RESULT.HIDDEN, ae, 'ELEMENT_HIDDEN_1', []);
      }
    }
  } // end validate function
},

/**
 * @object AUDIO_2
 *
 * @desc If object element is used for audio only, object must have captions or text transcript
 */

{ rule_id             : 'AUDIO_2',
  last_updated        : '2014-11-21',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.AUDIO_VIDEO,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '1.2.1',
  wcag_related_ids    : ['1.2.2', '1.2.4', '1.2.9'],
  target_resources    : ['object', 'param'],
  primary_property    : 'type',
  resource_properties : ['data', 'name', 'value', 'valuetype'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var object_elements     = dom_cache.media_cache.object_elements;
    var object_elements_len = object_elements.length;

    for (var i = 0; i < object_elements_len; i++) {
      var oe = object_elements[i];
      var de = oe.dom_element;
      var cs = de.computed_style;

      if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
        if (de.has_aria_describedby) {
          rule_result.addResult(TEST_RESULT.PASS, oe, 'ELEMENT_PASS_1', []);
        }
        else {
          if ((typeof oe.type === 'string') &&
               (oe.type.indexOf('audio') >= 0)) {
            rule_result.addResult(TEST_RESULT.MANUAL_CHECK, oe, 'ELEMENT_MC_1', []);
          }
          else {
            rule_result.addResult(TEST_RESULT.MANUAL_CHECK, oe, 'ELEMENT_MC_2', []);
          }
        }
      }
      else {
       rule_result.addResult(TEST_RESULT.HIDDEN, oe, 'ELEMENT_HIDDEN_1', []);
      }
    }
  } // end validate function
},

/**
 * @object AUDIO_3
 *
 * @desc If embed element is used for audio only, embed  must have captions or text transcript
 */

{ rule_id             : 'AUDIO_3',
  last_updated        : '2014-11-21',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.AUDIO_VIDEO,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '1.2.1',
  wcag_related_ids    : ['1.2.2', '1.2.4', '1.2.9'],
  target_resources    : ['embed'],
  primary_property    : 'type',
  resource_properties : ['src'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var embed_elements     = dom_cache.media_cache.embed_elements;
    var embed_elements_len = embed_elements.length;

    for (var i = 0; i < embed_elements_len; i++) {
      var ee = embed_elements[i];
      var de = ee.dom_element;
      var cs = de.computed_style;

      if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
        if (de.has_aria_describedby) {
          rule_result.addResult(TEST_RESULT.PASS, ee, 'ELEMENT_PASS_1', []);
        }
        else {
          if ((typeof ee.type === 'string') &&
              (ee.type.indexOf('audio') >= 0)) {
            rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ee, 'ELEMENT_MC_1', []);
          }
          else {
            rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ee, 'ELEMENT_MC_2', []);
          }
        }
      }
      else {
       rule_result.addResult(TEST_RESULT.HIDDEN, ee, 'ELEMENT_HIDDEN_1', []);
      }
    }
  } // end validate function
},

  /**
   * @object AUDIO_4
   *
   * @desc  Audio automatically starts
   */

{ rule_id             : 'AUDIO_4',
  last_updated        : '2014-11-21',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.PAGE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.AUDIO_VIDEO,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '1.4.2',
  wcag_related_ids    : [],
  target_resources    : [],
  primary_property    : '',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

      var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

      var page_element = dom_cache.media_cache.page_element;

      if (page_element) {
         rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'PAGE_MC_1', []);
       }

    } // end validate function
  }

]);
/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*            OpenAjax Alliance List Rules                         */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

/**
 * @object BYPASS_1
 *
 * @desc Looking for links or that support bypassing blocks of content
*/

{ rule_id             : 'BYPASS_1',
  last_updated        : '2015-02-19',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.PAGE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.KEYBOARD_SUPPORT,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '2.4.1',
  wcag_related_ids    : ['2.4.4'],
  target_resources    : ['a'],
  primary_property    : 'accessible_name',
  resource_properties : ['class_name', 'id', 'href', 'name'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var link_elements     = dom_cache.links_cache.link_elements;
    var link_elements_len = link_elements.length;

    var control_elements     = dom_cache.controls_cache.control_elements;
    var control_elements_len = control_elements.length;

    var page_element = dom_cache.headings_landmarks_cache.page_element;

    var bypass_links = [];
    var bypass_link = false;
    var skipto_link = false;
    var focusable   = false;
    var missing     = false;

    var i, ce, cs, de, le, id;

    for (i = 0; i < control_elements_len; i++) {

      ce = control_elements[i];
      de = ce.dom_element;

      if ((de.role === 'button') && (de.class_name !== '') && (de.class_name.toLowerCase().indexOf('skipto') >= 0)) {
        bypass_links.push(ce);
        rule_result.addResult(TEST_RESULT.PASS, ce, 'ELEMENT_PASS_1', []);
        skipto_link = true;
        break;
      }
    }

    for (i = 0; (!skipto_link && (i < link_elements_len) && (i < 2)); i++) {

      le = link_elements[i];
      de = le.dom_element;
      cs = de.computed_style;

      if (le.href && le.href.length && (le.href.indexOf('#') >= 0 )) {
        id = le.href.substring((le.href.indexOf('#')+1), le.href.length);

        if (id.length) {
          bypass_link = true;

          // check for id first
          de = dom_cache.element_with_id_cache.getDOMElementById(id);

          // check for name second
          if (!de) de = dom_cache.element_cache.getDOMElementByName(id);

          if (de) {
            if (cs.is_visible_to_at == VISIBILITY.VISIBLE) {
              if ((de.tab_index >= 0) || de.has_tabindex || de.is_interactive) {
                bypass_links.push(le);
                rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_2', []);

//                OpenAjax.a11y.logger.debug("[BYPASS 1] tag: " + de.tag_name + " tabindex: " + de.tab_index  + " has tabindex: " + de.has_tabindex + " has href: " + de.has_href );

                if ((de.tag_name !== 'a') ||
                    (de.tab_index < 0) ||
                    (de.tab_index > 0) ||
                     de.has_href) {
                  focusable = true;
                  rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_3', []);
                }
                else {
                  rule_result.addResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
                }
              }
              else {
                rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_2', [id]);
                rule_result.addResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
              }
            }
            else {
              rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', []);
            }
          }
          else {
            missing = true;
            rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_1', [id]);
          }
        }
      }
    }

    if (skipto_link || (bypass_link && focusable)) {
      rule_result.addResult(TEST_RESULT.PASS, page_element, 'PAGE_PASS_1', []);
    }
    else {
      if (missing) rule_result.addResult(TEST_RESULT.FAIL, page_element, 'PAGE_FAIL_1', []);
      else if (bypass_link) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'PAGE_MC_1', []);
      else rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'PAGE_MC_2', []);
    }

  } // end validation function  }
}
]);

/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

//
// OpenAjax Alliance Rules
// Rule group: Styling Rules
//
OpenAjax.a11y.RuleManager.addRulesFromJSON([


  /**
   * @object COLOR_1
   *
   * @desc  Color contrast ratio must be > 4.5 for normal text, or > 3.1 for large text
   */

  { rule_id             : 'COLOR_1',
    last_updated        : '2014-11-21',
    rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
    rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
    rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
    wcag_primary_id     : '1.4.3',
    wcag_related_ids    : ['1.4.1','1.4.6'],
    target_resources    : ['textnodes'],
    primary_property    : 'color_contrast_ratio',
    resource_properties : ['color_hex', 'background_color_hex', 'background_image', 'is_large_font'],
    language_dependency : "",
    validate            : function (dom_cache, rule_result) {

      var MIN_CCR_NORMAL_FONT = 4.5;
      var MIN_CCR_LARGE_FONT  = 3.1;

      var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
      var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

      var cc_items     = dom_cache.text_cache.text_nodes;
      var cc_items_len = cc_items.length;

      for (var i = 0; i < cc_items_len; i++) {

        var cc_item = cc_items[i];
        var pe = cc_item.parent_element;
        var cs = pe.computed_style;

        // if color contrast raio is undefined, skip this item
        if (!cs.color_contrast_ratio) continue;

        if (cs.is_visible_onscreen === VISIBILITY.VISIBLE) {

          if (!cs.is_large_font) {
            if (cs.color_contrast_ratio >= MIN_CCR_NORMAL_FONT) {
              // Passes color contrast requirements
              if (cs.background_image != "none") {
                rule_result.addResult(TEST_RESULT.MANUAL_CHECK, cc_item, 'ELEMENT_MC_1', [cs.color_contrast_ratio]);
              }
              else {
                rule_result.addResult(TEST_RESULT.PASS, cc_item, 'ELEMENT_PASS_1', [cs.color_contrast_ratio]);
              }
            }
            else {

              // Fails color contrast requirements
              if (cs.background_image === "none") {
                rule_result.addResult(TEST_RESULT.FAIL, cc_item, 'ELEMENT_FAIL_1', [cs.color_contrast_ratio]);
              }
              else {
                rule_result.addResult(TEST_RESULT.MANUAL_CHECK, cc_item, 'ELEMENT_MC_2', [cs.color_contrast_ratio]);
              }
            }
          }
          else {
            if (cs.color_contrast_ratio >= MIN_CCR_LARGE_FONT) {
              // Passes color contrast requirements
              if (cs.background_image != "none") {
                rule_result.addResult(TEST_RESULT.MANUAL_CHECK, cc_item, 'ELEMENT_MC_3', [cs.color_contrast_ratio]);
              }
              else {
                rule_result.addResult(TEST_RESULT.PASS, cc_item, 'ELEMENT_PASS_2', [cs.color_contrast_ratio]);
              }
            }
            else {
              // Fails color contrast requirements
              if (cs.background_image === "none") {
                rule_result.addResult(TEST_RESULT.FAIL, cc_item, 'ELEMENT_FAIL_2', [cs.color_contrast_ratio]);
              }
              else {
                rule_result.addResult(TEST_RESULT.MANUAL_CHECK, cc_item, 'ELEMENT_MC_4', [cs.color_contrast_ratio]);
              }
            }
          }
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, cc_item, 'ELEMENT_HIDDEN_1', []);
        }

      } // end loop

    } // end validate function
  },

  /**
   * @object COLOR_1
   *
   * @desc  Use of color
   */

  { rule_id             : 'COLOR_2',
    last_updated        : '2014-04-04',
    rule_scope          : OpenAjax.a11y.RULE_SCOPE.PAGE,
    rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
    rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
    wcag_primary_id     : '1.4.1',
    wcag_related_ids    : [],
    target_resources    : [],
    primary_property    : '',
    resource_properties : [],
    language_dependency : "",
    validate            : function (dom_cache, rule_result) {

      var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

      var page_element = dom_cache.headings_landmarks_cache.page_element;

      if (page_element) {
         rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'PAGE_MC_1', []);
       }

    } // end validate function
  }

]);




/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*  OpenAjax Alliance Control Rules                                 */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

/**
 * @object ERROR_1
 *
 * @desc Identify form controls with invalid values
 *
 */

{ rule_id             : 'ERROR_1',
  last_updated        : '2014-11-21',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.FORMS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '3.3.1',
  wcag_related_ids    : [],
  target_resources    : ['input[type="checkbox"]', 'input[type="date"]', 'input[type="file"]', 'input[type="radio"]', 'input[type="number"]', 'input[type="password"]', 'input[type="tel"]' , 'input[type="text"]', 'input[type="url"]', 'select', 'textarea', 'meter', 'progress'],
  primary_property    : 'aria-invalid',
  resource_properties : ['validity', 'validation_message', 'pattern'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY = OpenAjax.a11y.VISIBILITY;

    var control_elements   = dom_cache.controls_cache.control_elements;
    var control_elements_len = control_elements.length;

    // Check to see if valid cache reference
    if (control_elements && control_elements_len) {

      // collect all the visible controls
      for (var i = 0; i < control_elements_len; i++) {
        var ce = control_elements[i];
        var de = ce.dom_element;
        var cs = de.computed_style;

        if (ce.has_validity) {
          if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
            if (!ce.is_valid) {
              if (de.has_aria_invalid) {
                if (de.aria_invalid) rule_result.addResult(TEST_RESULT.PASS, ce, 'ELEMENT_PASS_1', [ce.toString()]);
                else rule_result.addResult(TEST_RESULT.FAIL, ce, 'ELEMENT_FAIL_1', [ce.toString()]);
              }
              else {
                rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ce, 'ELEMENT_MC_1', [ce.toString()]);
              }
            }
            else {
              if (de.has_aria_invalid) {
                if (de.aria_invalid) rule_result.addResult(TEST_RESULT.FAIL, ce, 'ELEMENT_FAIL_2', [ce.toString()]);
                else rule_result.addResult(TEST_RESULT.PASS, ce, 'ELEMENT_PASS_2', [ce.toString()]);
              }
              else {
                if (ce.has_pattern) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ce, 'ELEMENT_MC_2', [ce.toString()]);
                else rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ce, 'ELEMENT_MC_3', [ce.toString()]);
              }
            }
          }
          else {
            rule_result.addResult(TEST_RESULT.HIDDEN, ce, 'ELEMENT_HIDDEN_1', [ce].toString());
          }
        }
      } // end loop
    }
  } // end validate function
},

/**
 * @object ERROR_2
 *
 * @desc Use required attribute on required standard form controls
 *
 */

{ rule_id             : 'ERROR_2',
  last_updated        : '2014-11-21',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.FORMS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '3.3.3',
  wcag_related_ids    : [],
  target_resources    : ['input[type="text"]', 'input[type="date"]', 'input[type="file"]', 'input[type="number"]', 'input[type="password"]', 'input[type="tel"]' , 'input[type="text"]', 'input[type="url"]', 'select', 'textarea'],
  primary_property    : 'has_required',
  resource_properties : ['has_aria_required', 'aria_required'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY = OpenAjax.a11y.VISIBILITY;

    var control_elements   = dom_cache.controls_cache.control_elements;
    var control_elements_len = control_elements.length;

    // collect all the visible controls
    for (var i = 0; i < control_elements_len; i++) {
      var ce = control_elements[i];
      var de = ce.dom_element;
      var cs = de.computed_style;

      var control_type = ce.control_type;

      if (control_type === OpenAjax.a11y.CONTROL_TYPE.CHECKBOX  ||
          control_type === OpenAjax.a11y.CONTROL_TYPE.DATE      ||
          control_type === OpenAjax.a11y.CONTROL_TYPE.EMAIL     ||
          control_type === OpenAjax.a11y.CONTROL_TYPE.FILE      ||
          control_type === OpenAjax.a11y.CONTROL_TYPE.NUMBER    ||
          control_type === OpenAjax.a11y.CONTROL_TYPE.PASSWORD  ||
          control_type === OpenAjax.a11y.CONTROL_TYPE.RADIO     ||
          control_type === OpenAjax.a11y.CONTROL_TYPE.TEL       ||
          control_type === OpenAjax.a11y.CONTROL_TYPE.TEXT      ||
          control_type === OpenAjax.a11y.CONTROL_TYPE.URL ) {

        var input_type = de.node.getAttribute('type');

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
          if (de.has_required || de.has_aria_required) {
            if (de.has_required && de.has_aria_required && !de.aria_required) {
              rule_result.addResult(TEST_RESULT.FAIL, ce, 'ELEMENT_FAIL_1', [input_type]);
            }
            else {
              if (de.has_required) rule_result.addResult(TEST_RESULT.PASS, ce, 'ELEMENT_PASS_1', [input_type]);
              else rule_result.addResult(TEST_RESULT.PASS, ce, 'ELEMENT_PASS_2', [input_type]);
            }
          }
          else {
            rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ce, 'ELEMENT_MC_1', [input_type]);
          }
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, ce, 'ELEMENT_HIDDEN_1', [input_type]);
        }
      }
      else {
        if ((control_type === OpenAjax.a11y.CONTROL_TYPE.TEXTAREA) ||
            (control_type === OpenAjax.a11y.CONTROL_TYPE.SELECT)) {

          var tag_name = de.tag_name;

          if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
            if (de.has_required || de.has_aria_required) {
              if (de.has_required && de.has_aria_required && !de.aria_required) {
                rule_result.addResult(TEST_RESULT.FAIL, ce, 'ELEMENT_FAIL_2', [tag_name]);
              }
              else {
                if (de.has_required) rule_result.addResult(TEST_RESULT.PASS, ce, 'ELEMENT_PASS_3', [tag_name]);
                else rule_result.addResult(TEST_RESULT.PASS, ce, 'ELEMENT_PASS_4', [tag_name]);
              }
            }
            else {
              rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ce, 'ELEMENT_MC_2', [tag_name]);
            }
          }
          else {
            rule_result.addResult(TEST_RESULT.HIDDEN, ce, 'ELEMENT_HIDDEN_2', [de.tag_name]);
          }
        }
      }
    }

  } // end validate function
},

/**
 * @object ERROR_3
 *
 * @desc Use aria-required attribute widgets
 *
 */

{ rule_id             : 'ERROR_3',
  last_updated        : '2014-11-21',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '3.3.3',
  wcag_related_ids    : [],
  target_resources    : ['[role=""],'],
  primary_property    : 'has_aria_required',
  resource_properties : ['aria_required'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY = OpenAjax.a11y.VISIBILITY;

    var widget_elements     = dom_cache.controls_cache.widget_elements;
    var widget_elements_len = widget_elements.length;

    // collect all the visible controls
    for (var i = 0; i < widget_elements_len; i++) {
      var we = widget_elements[i];
      var de = we.dom_element;
      var cs = de.computed_style;

      var role = de.role;

      if (role === 'combobox'     ||
          role === 'gridcell'     ||
          role === 'listbox'      ||
          role === 'radiogroup'   ||
          role === 'spinbutton'   ||
          role === 'textarea'     ||
          role === 'tree'         ||
          role === 'textbox'    ||
          role === 'treegrid') {

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
          if (de.has_aria_required) {
            rule_result.addResult(TEST_RESULT.PASS, we, 'ELEMENT_PASS_1', [de.tag_name, role]);
          }
          else {
            rule_result.addResult(TEST_RESULT.MANUAL_CHECK, we, 'ELEMENT_MC_1', [de.tag_name, role]);
          }
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, we, 'ELEMENT_HIDDEN_1', [de.tag_name, role]);
        }
      }
    }
  } // end validate function
},

/**
 * @object ERROR_4
 *
 * @desc Provide correction suggestions
 *
 */

{ rule_id             : 'ERROR_4',
  last_updated        : '2014-11-21',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.FORMS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '3.3.3',
  wcag_related_ids    : [],
  target_resources    : ['input[type="text"]', 'input[type="date"]', 'input[type="file"]', 'input[type="number"]', 'input[type="password"]', 'input[type="tel"]' , 'input[type="text"]', 'input[type="url"]', 'select', 'textarea', '[role="textbox"]', '[role="combobox"]', '[role="gridcell"]'],
  primary_property    : 'aria-invalid',
  resource_properties : ['validity', 'validation_message', 'pattern'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY = OpenAjax.a11y.VISIBILITY;

    var control_elements   = dom_cache.controls_cache.control_elements;
    var control_elements_len = control_elements.length;

    // collect all the visible controls
    for (var i = 0; i < control_elements_len; i++) {
      var ce = control_elements[i];
      var de = ce.dom_element;
      var cs = de.computed_style;

      var control_type = ce.control_type;

      if (control_type === OpenAjax.a11y.CONTROL_TYPE.DATE        ||
            control_type === OpenAjax.a11y.CONTROL_TYPE.EMAIL     ||
            control_type === OpenAjax.a11y.CONTROL_TYPE.FILE      ||
            control_type === OpenAjax.a11y.CONTROL_TYPE.NUMBER    ||
            control_type === OpenAjax.a11y.CONTROL_TYPE.PASSWORD  ||
            control_type === OpenAjax.a11y.CONTROL_TYPE.TEL       ||
            control_type === OpenAjax.a11y.CONTROL_TYPE.TEXT      ||
            control_type === OpenAjax.a11y.CONTROL_TYPE.URL ) {
        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
         rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ce, 'ELEMENT_MC_1', [de.node.getAttribute('type')]);
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, ce, 'ELEMENT_HIDDEN_1', [de.node.getAttribute('type')]);
        }
      }
      else {
        if ((control_type === OpenAjax.a11y.CONTROL_TYPE.TEXTAREA) ||
            (control_type === OpenAjax.a11y.CONTROL_TYPE.SELECT)) {
          if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
            rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ce, 'ELEMENT_MC_2', [de.tag_name]);
          }
          else {
            rule_result.addResult(TEST_RESULT.HIDDEN, ce, 'ELEMENT_HIDDEN_2', [de.tag_name]);
          }
        }
      }
    }

  } // end validate function
},

/**
 * @object ERROR_5
 *
 * @desc Provide error prevention
 *
 */

{ rule_id             : 'ERROR_5',
  last_updated        : '2015-04-09',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.PAGE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.FORMS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '3.3.4',
  wcag_related_ids    : [],
  target_resources    : ['input[type="text"]', 'input[type="date"]', 'input[type="file"]', 'input[type="number"]', 'input[type="password"]', 'input[type="tel"]' , 'input[type="text"]', 'input[type="url"]', 'select', 'textarea', '[role="textbox"]', '[role="combobox"]', '[role="gridcell"]'],
  primary_property    : '',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY = OpenAjax.a11y.VISIBILITY;

    var control_elements     = dom_cache.controls_cache.control_elements;
    var control_elements_len = control_elements.length;

    var control_count = 0;

    for (var i = 0; i < control_elements_len; i++) {
      var ce = control_elements[i];
      var de = ce.dom_element;
      var cs = de.computed_style;

//      console.log('[ERROR_5][tag]: ' + de.tag_name + ' [role]: ' + de.role + ' [isWidget]: ' + de.is_widget);

      if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
        rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ce, 'ELEMENT_MC_1', [de.node.getAttribute('type')]);
        control_count += 1;
      }
      else {
        rule_result.addResult(TEST_RESULT.HIDDEN, ce, 'ELEMENT_HIDDEN_1', [de.node.getAttribute('type')]);
      }
    }

    if (control_elements_len) {
      var page_element = dom_cache.headings_landmarks_cache.page_element;
      if (page_element && control_count) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'PAGE_MC_1', []);
    }

  } // end validate function
}


]);




/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*  OpenAjax Alliance Control Rules                                 */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

/**
 * @object FOCUS_1
 *
 * @desc Focus order
 */

{ rule_id             : 'FOCUS_1',
  last_updated        : '2014-11-21',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.PAGE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.KEYBOARD_SUPPORT,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '2.4.3',
  wcag_related_ids    : ['2.1.1', '2.1.2', '2.4.7', '3.2.1'],
  target_resources    : ['Page', 'a', 'applet', 'area', 'button', 'input', 'object', 'select', 'area', 'widgets'],
  primary_property    : 'tabindex',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

     var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
     var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

     var page_element = dom_cache.keyboard_focus_cache.page_element;

//     OpenAjax.a11y.logger.debug(" Page Element: " + page_element + "  " + page_element.dom_element);

     var interactive_elements     = dom_cache.keyboard_focus_cache.interactive_elements;
     var interactive_elements_len = interactive_elements.length;

     var tab_count = 0;
     var visible_count = 0;

     for (var i = 0; i < interactive_elements_len; i++) {

       var ie = interactive_elements[i];

       var de = ie.dom_element;
       if (!de) de =ie;

       var cs = de.computed_style;

       if ((cs.is_visible_to_at    === VISIBILITY.VISIBLE) ||
           (cs.is_visible_onscreen === VISIBILITY.VISIBLE)) {

         visible_count++;

         if (de.tab_index >= 0) {
           if (de.is_widget) {
             // only include widgets that can be part of the tab order
             if (de.is_tab_stoppable) {
                tab_count++;
               rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_1', [de.tag_name, de.role]);
             }
           }
           else {
             tab_count++;
             rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_2', [de.tag_name]);
           }
         }
         else {
           if (de.is_widget) {
             // only include widgets that can be part of the tab order
             if (de.is_tab_stoppable) {
               rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_3', [de.tag_name, de.role, de.tab_index]);
             }
           }
           else {
             rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_4', [de.tag_name, de.tab_index]);
           }
         }

       }
       else {

         if (de.is_widget) {
           // only include widgets that can be part of the tab order
           if (de.is_tab_stoppable) {
             rule_result.addResult(TEST_RESULT.HIDDEN, ie, 'ELEMENT_HIDDEN_1', [de.tag_name, de.role]);
           }
         }
         else {
           rule_result.addResult(TEST_RESULT.HIDDEN, ie, 'ELEMENT_HIDDEN_2', [de.tag_name]);
         }
       }
     }  // endfor

 //    OpenAjax.a11y.logger.debug(" Visible count: " + visible_count + "  Tab count: " + tab_count);

     if (visible_count > 1) {

       if (tab_count === visible_count) {
         rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'PAGE_MC_1', [tab_count]);
       }
       else {
         rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'PAGE_MC_2', [tab_count, (visible_count-tab_count)]);
       }

     }


   } // end validation function
},

/**
 * @object FOCUS_2
 *
 * @desc Focus style
 */

{ rule_id             : 'FOCUS_2',
  last_updated        : '2014-11-21',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.PAGE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.KEYBOARD_SUPPORT,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '2.4.7',
  wcag_related_ids    : ['2.1.1', '2.1.2',  '2.4.3', '3.2.1'],
  target_resources    : ['Page', 'a', 'applet', 'area', 'button', 'input', 'object', 'select', 'area', 'widgets'],
  primary_property    : 'has_outline',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

     var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
     var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

     var page_element = dom_cache.keyboard_focus_cache.page_element;

//     OpenAjax.a11y.logger.debug(" Page Element: " + page_element + "  " + page_element.dom_element);

     var interactive_elements     = dom_cache.keyboard_focus_cache.interactive_elements;
     var interactive_elements_len = interactive_elements.length;

     var visible_interactive_count = 0;

     for (var i = 0; i < interactive_elements_len; i++) {

       var ie = interactive_elements[i];

       var de = ie.dom_element;
       if (!de) de =ie;

       var cs = de.computed_style;

       if (cs.is_visible_onscreen === VISIBILITY.VISIBLE) {

         visible_interactive_count++;

         if (de.is_widget) {
           rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_1', [de.tag_name, de.role]);
         }
         else {
           rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_2', [de.tag_name]);
         }

       }
       else {

         if (de.is_widget) {
           rule_result.addResult(TEST_RESULT.HIDDEN, ie, 'ELEMENT_HIDDEN_1', [de.tag_name, de.role]);
         }
         else {
           rule_result.addResult(TEST_RESULT.HIDDEN, ie, 'ELEMENT_HIDDEN_2', [de.tag_name]);
         }

       }
     }  // endfor

//     OpenAjax.a11y.logger.debug(" Visible Interactive Count: " + visible_interactive_count);

     if (visible_interactive_count > 1) {

       if (visible_interactive_count === interactive_elements_len) {
         rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'PAGE_MC_1', [interactive_elements_len]);
       }
       else {
         rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'PAGE_MC_2', [visible_interactive_count, (interactive_elements_len - visible_interactive_count)]);
       }

     }


   } // end validation function

},

/**
 * @object FOCUS_3
 *
 * @desc Target of a link does not go to a page with popup windows
 */

{ rule_id             : 'FOCUS_3',
  last_updated        : '2014-11-21',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LINKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '3.2.1',
  wcag_related_ids    : ['2.1.1', '2.1.2',  '2.4.3', '2.4.7'],
  target_resources    : ['a', 'area', 'select'],
  primary_property    : 'href',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

     var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
     var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

//     OpenAjax.a11y.logger.debug(" Page Element: " + page_element + "  " + page_element.dom_element);

     var link_elements     = dom_cache.links_cache.link_elements;
     var link_elements_len = link_elements.length;

     for (var i = 0; i < link_elements_len; i++) {

       var le = link_elements[i];

       var de = le.dom_element;
       if (!de) de =le;

       var cs = de.computed_style;

       if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {

         rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_1', [de.tag_name]);

       }
       else {
         rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [de.tag_name, de.role]);
       }
     }  // endfor

   } // end validation function
},

/**
 * @object FOCUS_4
 *
 * @desc Select elements with onchange events
 */

{ rule_id             : 'FOCUS_4',
  last_updated        : '2014-11-21',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.FORMS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '3.2.2',
  wcag_related_ids    : ['2.1.1', '2.1.2',  '2.4.3', '2.4.7'],
  target_resources    : ['select'],
  primary_property    : 'events.has_change',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

     var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
     var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

//     OpenAjax.a11y.logger.debug(" Page Element: " + page_element + "  " + page_element.dom_element);

     var control_elements     = dom_cache.controls_cache.control_elements;
     var control_elements_len = control_elements.length;

     for (var i = 0; i < control_elements_len; i++) {

       var ce = control_elements[i];

       var de = ce.dom_element;

       var cs = de.computed_style;

       if ((de.tag_name === 'select') &&
            de.events.has_change) {

         if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
           rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ce, 'ELEMENT_MC_1', [de.tag_name]);
         }
         else {
           rule_result.addResult(TEST_RESULT.HIDDEN, ce, 'ELEMENT_HIDDEN_1', [de.tag_name, de.role]);
         }
       }
     }  // endfor

   } // end validation function
},

/**
 * @object FOCUS_5
 *
 * @desc Form include a submit button
 *
 */

{ rule_id             : 'FOCUS_5',
  last_updated        : '2014-11-21',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.FORMS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '3.2.2',
  wcag_related_ids    : [],
  target_resources    : ['form', 'input[type="submit"]', 'input[type="button"]', 'input[type="image"]', 'button', '[role="button"]'],
  primary_property    : '',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    function has_submit_button(control) {

      var cce = control.child_cache_elements;
      var cce_len = cce.length;

      var has_submit = false;

      for(var i = 0; i < cce_len; i++) {
        var ce = cce[i];
        var de = ce.dom_element;
        var cs = de.computed_style;

        if(ce.control_type === OpenAjax.a11y.CONTROL_TYPE.SUBMIT) {
          if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
            rule_result.addResult(TEST_RESULT.PASS, ce, 'ELEMENT_PASS_2', []);
            has_submit = true;
          }
          else {
           rule_result.addResult(TEST_RESULT.HIDDEN, ce, 'ELEMENT_HIDDEN_2', []);                          }
        }

        if (ce.child_cache_elements && ce.child_cache_elements.length) {
          has_submit = has_submit || has_submit_button(ce);
        }

      }

      return has_submit;

    }

    function has_other_button(control, count) {

      var cee = control.child_cache_elements;
      var cee_len = cee.length;

      for(var i = 0; i < cee_len; i++) {
        var ce = cee[i];
        var de = ce.dom_element;
        var cs = de.computed_style;

//        OpenAjax.a11y.logger.debug("Control: " + ce + " de: " + de + " cs: " + cs);

        if (ce.control_type === CONTROL_TYPE.BUTTON_INPUT) {
          if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
            rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ce, 'ELEMENT_MC_3', ['button']);
            count += 1;
          }
          else {
            rule_result.addResult(TEST_RESULT.HIDDEN, ce, 'ELEMENT_HIDDEN_3', ['button']);
          }
        }
        else {
           if (ce.control_type === CONTROL_TYPE.IMAGE) {
             if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
               rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ce, 'ELEMENT_MC_3', ['image']);
               count += 1;
             }
             else {
               rule_result.addResult(TEST_RESULT.HIDDEN, ce, 'ELEMENT_HIDDEN_3', ['image']);
             }
           }
           else {
             if (ce.control_type === CONTROL_TYPE.BUTTON_ELEMENT) {
               if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
                 rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ce, 'ELEMENT_MC_4', []);
                 count += 1;
               }
               else {
                 rule_result.addResult(TEST_RESULT.HIDDEN, ce, 'ELEMENT_HIDDEN_4', []);
               }
             }
             else {
               if (de.has_role && (de.role === 'button')) {
                 if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
                  rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ce, 'ELEMENT_MC_5', [de.tag_name]);
                   count += 1;
                 }
                 else {
                  rule_result.addResult(TEST_RESULT.HIDDEN, ce, 'ELEMENT_HIDDEN_5', [de.tag_name]);
                 }
               }
             }
           }
        }

        if (ce.child_cache_elements && ce.child_cache_elements.length) {
          count += has_other_button(ce, count);
        }

      }

      return count;

    }

    function hasVisibleFormControls(controls) {

      for (var i = 0; i < controls.length; i++) {

        var ce = controls[i];
        if (ce.control_type === CONTROL_TYPE.LABEL) continue;

        var de = ce.dom_element;
        var cs = de.computed_style;

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
          return true;
        }
        else {
          if (ce.child_cache_elements && ce.child_cache_elements.length) {
            var result = hasVisibleFormControls(ce.child_cache_elements);
            if (result) return true;
          }
        }
      }

      return false;
    }

    var TEST_RESULT  = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY   = OpenAjax.a11y.VISIBILITY;
    var CONTROL_TYPE =  OpenAjax.a11y.CONTROL_TYPE;

    var form_elements   = dom_cache.controls_cache.form_elements;
    var form_elements_len = form_elements.length;

    // Check to see if valid cache reference
    if (form_elements && form_elements_len) {

      // collect all the visible controls
      for (var i = 0; i < form_elements_len; i++) {
        var fe = form_elements[i];
        var de = fe.dom_element;
        var cs = de.computed_style;

        var control_type = fe.control_type;

//        OpenAjax.a11y.logger.debug("Form: " + fe + " controls: " + fe.number_of_controls + " cache elements: " + fe.child_cache_elements);

        if ((control_type === CONTROL_TYPE.FORM) &&
            (fe.number_of_controls > 0) &&
            (hasVisibleFormControls(fe.child_cache_elements))) {

          if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {

            if (has_submit_button(fe)) {
              rule_result.addResult(TEST_RESULT.PASS, fe, 'ELEMENT_PASS_1', []);
            }
            else {
              var button_count = has_other_button(fe, 0);

              if (button_count === 1) {
                rule_result.addResult(TEST_RESULT.MANUAL_CHECK, fe, 'ELEMENT_MC_1', []);
              }
              else {
                if (button_count > 1) {
                  rule_result.addResult(TEST_RESULT.MANUAL_CHECK, fe, 'ELEMENT_MC_2', [button_count]);
                }
                else {
                  rule_result.addResult(TEST_RESULT.FAIL, fe, 'ELEMENT_FAIL_1', []);
                }
              }
            }
          }
          else {
            rule_result.addResult(TEST_RESULT.HIDDEN, fe, 'ELEMENT_HIDDEN_1', []);
          }
        }
      } // end loop
    }
  } // end validate function
},

/**
 * @object FOCUS_6
 *
 * @desc Checkbox and radio button events cause a change in context
 *
 */

{ rule_id             : 'FOCUS_6',
  last_updated        : '2014-08-25',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.FORMS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP3,
  wcag_primary_id     : '3.2.2',
  wcag_related_ids    : [],
  target_resources    : ['input[type="submit"]'],
  primary_property    : '',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT  = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY   = OpenAjax.a11y.VISIBILITY;

    var control_elements   = dom_cache.controls_cache.control_elements;
    var control_elements_len = control_elements.length;

    // Check to see if valid cache reference
    if (control_elements && control_elements_len) {

      // collect all the visible controls
      for (var i = 0; i < control_elements_len; i++) {
        var ce = control_elements[i];
        var de = ce.dom_element;
        var cs = de.computed_style;

        var control_type = ce.control_type;

//        OpenAjax.a11y.logger.debug(fe);

        if ((control_type === OpenAjax.a11y.CONTROL_TYPE.CHECKBOX) ||
            (control_type === OpenAjax.a11y.CONTROL_TYPE.RADIO)) {

          if ((de.role === 'checkbox') || (de.role === 'radio')) {
            if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
              rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ce, 'ELEMENT_MC_2', [de.tag_name, de.role]);
            }
            else {
              rule_result.addResult(TEST_RESULT.HIDDEN, ce, 'ELEMENT_HIDDEN_2', [de.tag_name, de.role]);
            }
          }
          else {
            if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
              rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ce, 'ELEMENT_MC_1', [ce.type]);
            }
            else {
              rule_result.addResult(TEST_RESULT.HIDDEN, ce, 'ELEMENT_HIDDEN_1', [ce.type]);
            }
          }
        }
      } // end loop
    }
  } // end validate function
}


]);




/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*  OpenAjax Alliance Control Rules                                 */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

/**
 * @object CONTROL_1
 *
 * @desc textarea, select and input elements of type text,
 *       password, checkbox, radio and file must have an
 *       accessible label
 *
 */

{ rule_id             : 'CONTROL_1',
  last_updated        : '2014-11-25',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.FORMS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '3.3.2',
  wcag_related_ids    : ['1.3.1', '2.4.6'],
  target_resources    : ['input[type="checkbox"]', 'input[type="date"]', 'input[type="file"]', 'input[type="radio"]', 'input[type="number"]', 'input[type="password"]', 'input[type="tel"]' , 'input[type="text"]', 'input[type="url"]', 'select', 'textarea', 'meter', 'progress'],
  primary_property    : 'computed_label',
  resource_properties : ['computed_label_source', 'name_attribute', 'fieldset_element'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

    var control_elements   = dom_cache.controls_cache.control_elements;
    var control_elements_len = control_elements.length;

    // Check to see if valid cache reference
    if (control_elements && control_elements_len) {

      for (var i = 0; i < control_elements_len; i++) {
        var ce = control_elements[i];

        if (ce.needs_label) {

          if (ce.dom_element.computed_style.is_visible_to_at == OpenAjax.a11y.VISIBILITY.VISIBLE) {

            if (ce.computed_label && ce.computed_label.length) {
              rule_result.addResult(TEST_RESULT.PASS, ce, 'ELEMENT_PASS_1', [ce.toString(), ce.computed_label]);
            }
            else {
              rule_result.addResult(TEST_RESULT.FAIL, ce, 'ELEMENT_FAIL_1', [ce.toString()]);
            }
          }
          else {
            rule_result.addResult(TEST_RESULT.HIDDEN, ce, 'ELEMENT_HIDDEN_1', [ce.toString()]);
          }
        }
      } // end loop
    }
  } // end validation function
},

/**
 * @object CONTROL_2
 *
 * @desc Every input type image must have an accessible name attribute with content
 */

{ rule_id             : 'CONTROL_2',
  last_updated        : '2014-11-25',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.FORMS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '3.3.2',
  wcag_related_ids    : ['1.3.1', '2.4.6'],
  target_resources    : ['input[type="image"]'],
  primary_property    : 'computed_label',
  resource_properties : ['computed_label_source', 'alt', 'aria_label', 'aria_labelledby', 'title'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

    var control_elements   = dom_cache.controls_cache.control_elements;
    var control_elements_len = control_elements.length;

    // Check to see if valid cache reference
    if (control_elements && control_elements_len) {

      for (var i = 0; i < control_elements_len; i++) {
        var ce = control_elements[i];
        var de = ce.dom_element;

        var type = control_elements[i].type;

        if (type === 'image') {

          if (de.computed_style.is_visible_to_at == OpenAjax.a11y.VISIBILITY.VISIBLE) {

            if (ce.computed_label) {
              if (ce.computed_label.length) {
                rule_result.addResult(TEST_RESULT.PASS, ce, 'ELEMENT_PASS_1', [ce.computed_label]);
              }
              else {
                rule_result.addResult(TEST_RESULT.FAIL, ce, 'ELEMENT_FAIL_2', []);
              }
            }
            else {
              rule_result.addResult(TEST_RESULT.FAIL, ce, 'ELEMENT_FAIL_1', []);
            }
          }
          else {
            rule_result.addResult(TEST_RESULT.HIDDEN, ce, 'ELEMENT_HIDDEN_1', []);
          }
        }
      } // end loop
    }
  } // end validation function
 },

/**
 * @object CONTROL_3
 *
 * @desc Groups of radio buttons should be contained in fieldset/legend or have some other group label
 */
{ rule_id             : 'CONTROL_3',
  last_updated        : '2014-11-25',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.FORMS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '3.3.2',
  wcag_related_ids    : ['1.3.1', '2.4.6'],
  target_resources    : ['input[type="radio"]'],
  primary_property    : 'grouping_element',
  resource_properties : [''],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var control_elements   = dom_cache.controls_cache.control_elements;
    var control_elements_len = control_elements.length;

    // Check to see if valid cache reference
    if (control_elements && control_elements_len) {

      for (var i = 0; i < control_elements_len; i++) {
        var ce = control_elements[i];
        var de = ce.dom_element;
        var cs = de.computed_style;

        var type = control_elements[i].control_type;

        if (type == OpenAjax.a11y.CONTROL_TYPE.RADIO) {

          if (cs.is_visible_to_at == VISIBILITY.VISIBLE) {

            if (ce.grouping_element) {
              var ge = ce.grouping_element;
              var dge = ge.dom_element;

              if (ge.control_type === OpenAjax.a11y.CONTROL_TYPE.FIELDSET) {
                if (ge.legend_element &&
                    ge.legend_element.computed_label &&
                    ge.legend_element.computed_label.length) {
                  rule_result.addResult(TEST_RESULT.PASS, ce, 'ELEMENT_PASS_1', [ge.legend_element.computed_label]);
                }
                else {
                  rule_result.addResult(TEST_RESULT.FAIL, ce, 'ELEMENT_FAIL_2', []);
                }
              }
              else {
                if (ge.computed_label &&
                    ge.computed_label.length) {
                  rule_result.addResult(TEST_RESULT.PASS, ce, 'ELEMENT_PASS_2', [dge.tag_name, ce.grouping_element.computed_label]);
                }
                else {
                  rule_result.addResult(TEST_RESULT.FAIL, ce, 'ELEMENT_FAIL_3', [dge.tag_name]);
                }
              }
            }
            else {
              rule_result.addResult(TEST_RESULT.FAIL, ce, 'ELEMENT_FAIL_1', []);
            }
          }
          else {
            rule_result.addResult(TEST_RESULT.HIDDEN, ce, 'ELEMENT_HIDDEN_1', []);
          }
        }
      } // end loop
    }
  } // end validate function
},

/**
 * @object CONTROL_4
 *
 * @desc Button elements must have text content and input type button must have a value attribute with content
 */
{ rule_id             : 'CONTROL_4',
  last_updated        : '2014-11-25',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.FORMS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '3.3.2',
  wcag_related_ids    : ['1.3.1', '2.4.6'],
  target_resources    : ['button'],
  primary_property    : 'computed_label',
  resource_properties : ['computed_label_source'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT  = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY   = OpenAjax.a11y.VISIBILITY;
    var CONTROL_TYPE = OpenAjax.a11y.CONTROL_TYPE;

    var control_elements     = dom_cache.controls_cache.control_elements;
    var control_elements_len = control_elements.length;

    // Check to see if valid cache reference
    if (control_elements && control_elements_len) {

      for (var i = 0; i < control_elements_len; i++) {
        var ce = control_elements[i];
        var de = ce.dom_element;
        var cs = de.computed_style;


        if (ce.control_type === CONTROL_TYPE.BUTTON_ELEMENT) {

          if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {

            if (ce.computed_label_for_comparison.length > 0) {
              rule_result.addResult(TEST_RESULT.PASS, ce, 'ELEMENT_PASS_1', []);
            }
            else {
              rule_result.addResult(TEST_RESULT.FAIL, ce, 'ELEMENT_FAIL_1', []);
            }
          }
          else {
            rule_result.addResult(TEST_RESULT.HIDDEN, ce, 'ELEMENT_HIDDEN_1', []);
          }

        }
        else {

          if (ce.control_type === CONTROL_TYPE.BUTTON_INPUT) {

            if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {

              if (ce.value && (ce.value.length > 0)) {
                rule_result.addResult(TEST_RESULT.PASS, ce, 'ELEMENT_PASS_1', []);
              }
              else {
                rule_result.addResult(TEST_RESULT.FAIL, ce, 'ELEMENT_FAIL_1', []);
              }
            }
            else {
              rule_result.addResult(TEST_RESULT.HIDDEN, ce, 'ELEMENT_HIDDEN_1', []);
            }
          }
        }

      } // end loop
    }

  } // end validate function
},


/**
 * @object CONTROL_5
 *
 * @desc Ids on form controls must be unique
 *
 * @note Do not need to test for invisible elements, since getElementById searches all elements int he DOM
 */
{ rule_id             : 'CONTROL_5',
  last_updated        : '2014-11-25',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.FORMS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '4.1.1',
  wcag_related_ids    : ['3.3.2', '1.3.1', '2.4.6'],
  target_resources    : ['input[type="checkbox"]', 'input[type="radio"]', 'input[type="text"]', 'input[type="password"]', 'input[type="file"]', 'select', 'textarea'],
  primary_property    : 'id',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
    var ID          = OpenAjax.a11y.ID;

    var control_elements      = dom_cache.controls_cache.control_elements;
    var control_elements_len  = control_elements.length;

    // Check to see if valid cache reference
    if (control_elements && control_elements_len) {

      for (var i = 0; i < control_elements_len; i++) {
        var ce = control_elements[i];
        var de = ce.dom_element;
        var cs = de.computed_style;

        switch (de.id_unique) {
        case ID.NOT_UNIQUE:
          if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
            rule_result.addResult(TEST_RESULT.FAIL, ce, 'ELEMENT_FAIL_1', [de.tag_name, de.id]);
          }
          else {
            rule_result.addResult(TEST_RESULT.FAIL, ce, 'ELEMENT_FAIL_2', [de.tag_name, de.id]);
          }
          break;

        case ID.UNIQUE:
          rule_result.addResult(TEST_RESULT.PASS, ce, 'ELEMENT_PASS_1', [de.id]);
          break;

        default:
          break;
        } // end switch

     } // end loop
   }
  } // end validate function
},

/**
 * @object CONTROL_6
 *
 * @desc Label element with a for attribute reference does not reference a form control
 */
{ rule_id             : 'CONTROL_6',
  last_updated        : '2014-11-25',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.FORMS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '3.3.2',
  wcag_related_ids    : ['1.3.1', '2.4.6'],
  target_resources    : ['label'],
  primary_property    : 'for',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

   var TEST_RESULT   = OpenAjax.a11y.TEST_RESULT;
   var VISIBILITY = OpenAjax.a11y.VISIBILITY;

   var label_elements      = dom_cache.controls_cache.label_elements;
   var label_elements_len  = label_elements.length;

   // Check to see if valid cache reference
   if (label_elements && label_elements_len) {

     for (var i = 0; i < label_elements_len; i++) {
       var le = label_elements[i];
       var de = le.dom_element;

       if (le.for_id && le.for_id.length) {

         if (de.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {
           if (le.unused_label) {
              rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_1', [le.for_id]);
           }
           else {
              if (le.duplicate_label) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_1', [le.for_id]);
              else rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_1', [le.for_id]);
           }
         }
         else {
           rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', []);
         }
      }
     } // end loop
   }
  } // end validate function
},

/**
 * @object CONTROL_7
 *
 * @desc Label or legend element must contain content
 */

{ rule_id             : 'CONTROL_7',
  last_updated        : '2014-11-25',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.FORMS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '3.3.2',
  wcag_related_ids    : ['1.3.1', '2.4.6'],
  target_resources    : ['label', 'legend'],
  primary_property    : 'computed_label',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

   var TEST_RESULT   = OpenAjax.a11y.TEST_RESULT;
   var VISIBILITY = OpenAjax.a11y.VISIBILITY;

   var label_elements      = dom_cache.controls_cache.label_elements;
   var label_elements_len  = label_elements.length;

   // Check to see if valid cache reference
   if (label_elements && label_elements_len) {

     for (var i = 0; i < label_elements_len; i++) {
       var le = label_elements[i];
       var de = le.dom_element;
       var cs = de.computed_style;

       if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {

         if (le.computed_label_for_comparison.length === 0) {
           rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_1', [le.tag_name]);
         }
         else {
           rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_1', [le.tag_name]);
         }
       }
       else {
         rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [le.tag_name]);
       }
     } // end loop
   }
  } // end validate function
},


/**
 * @object CONTROL 8
 *
 * @desc Fieldset must contain exactly one legend element
 */

{ rule_id             : 'CONTROL_8',
  last_updated        : '2014-11-25',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.FORMS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '3.3.2',
  wcag_related_ids    : ['1.3.1', '2.4.6', '4.1.1'],
  target_resources    : ['fieldset'],
  primary_property    : 'legend_count',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

   var TEST_RESULT   = OpenAjax.a11y.TEST_RESULT;
   var VISIBILITY = OpenAjax.a11y.VISIBILITY;

   var grouping_elements      = dom_cache.controls_cache.grouping_elements;
   var grouping_elements_len  = grouping_elements.length;

   // Check to see if valid cache reference
   if (grouping_elements && grouping_elements_len) {

     for (var i = 0; i < grouping_elements_len; i++) {
       var fe = grouping_elements[i];

       if (fe.control_type !== OpenAjax.a11y.CONTROL_TYPE.FIELDSET) continue;

       var de = fe.dom_element;

       if (de.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {

         if (fe.legend_count === 0 || !fe.legend_element ) {
           rule_result.addResult(TEST_RESULT.FAIL, fe, 'ELEMENT_FAIL_1', []);
         }
         else {
           if (fe.legend_count > 1) {
             rule_result.addResult(TEST_RESULT.FAIL, fe, 'ELEMENT_FAIL_2', [(fe.legend_count-1)]);
           }
           else {
             de = fe.legend_element.dom_element;

             if (de.computed_style.is_visible_to_at == VISIBILITY.VISIBLE) {
               rule_result.addResult(TEST_RESULT.PASS, fe, 'ELEMENT_PASS_1', []);
             }
             else {
               rule_result.addResult(TEST_RESULT.FAIL, fe, 'ELEMENT_FAIL_3', []);
             }
           }
         }
       }
       else {
         rule_result.addResult(TEST_RESULT.HIDDEN, fe, 'ELEMENT_HIDDEN_1', []);
       }
     } // end loop
   }

  } // end validate function
},

/**
 * @object CONTROL_9
 *
 * @desc Check form controls labeled using the TITLE attribute for accessible name
 */

{ rule_id             : 'CONTROL_9',
  last_updated        : '2014-11-25',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.FORMS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '3.3.2',
  wcag_related_ids    : ['4.1.1'],
  target_resources    : ['input', 'select', 'textarea'],
  primary_property    : 'title',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

   var TEST_RESULT   = OpenAjax.a11y.TEST_RESULT;
   var VISIBILITY = OpenAjax.a11y.VISIBILITY;

   var control_elements      = dom_cache.controls_cache.control_elements;
   var control_elements_len  = control_elements.length;

   // Check to see if valid cache reference
   if (control_elements && control_elements_len) {

     for (var i = 0; i < control_elements_len; i++) {
       var ce = control_elements[i];
       var de = ce.dom_element;

       if (ce.computed_label_source === OpenAjax.a11y.SOURCE.TITLE_ATTRIBUTE) {
          if (de.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {
           rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ce, 'ELEMENT_MC_1', [de.tag_name]);
         }
         else {
           rule_result.addResult(TEST_RESULT.HIDDEN, ce, 'ELEMENT_HIDDEN_1', [de.tag_name]);
         }
       }
     } // end loop
   }

  } // end validate function
},

/**
 * @object CONTROL_10
 *
 * @desc Accessible labels must be unique for every textarea,
 *       select and input element of type text, password, radio,
 *       and checkbox on a page
 */

{ rule_id             : 'CONTROL_10',
  last_updated        : '2014-11-25',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.FORMS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '2.4.6',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['input[type="checkbox"]', 'input[type="radio"]', 'input[type="text"]', 'input[type="password"]', 'input[type="file"]', 'select', 'textarea'],
  primary_property    : 'computed_label',
  resource_properties : ['computed_label', 'fieldset_element', 'computed_label_source', 'name_attribute'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

   var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
   var VISIBILITY = OpenAjax.a11y.VISIBILITY;

   var control_elements   = dom_cache.controls_cache.control_elements;
   var control_elements_len = control_elements.length;
   var ces   = [];
   var ces_len = 0;
   var i, j;

   // Check to see if valid cache reference
   if (control_elements && control_elements_len) {

     // collect all the visible controls
     for (i = 0; i < control_elements_len; i++) {
       var ce = control_elements[i];
       var de = ce.dom_element;

       if (ce.needs_label) {

         var control_type = ce.toString();

         if (de.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {
           // Only test form controls with labels
           if (ce.computed_label && ce.computed_label.length) {
             ces.push(ce);
           }
         }
         else {
           rule_result.addResult(TEST_RESULT.HIDDEN, ce, 'ELEMENT_HIDDEN_1', [control_type]);
         }
       }
     } // end loop

     // sort labels

     ces = dom_cache.sortArrayOfObjects(ces,'computed_label_for_comparison', true);
     ces = dom_cache.getDuplicateObjects(ces,'computed_label_for_comparison');

     for (i = 0; i < ces.length; i++) {
       ces_len = ces[i].length;

       ce      = ces[i][0];
       de      = ce.dom_element;

       if ((ces_len === 1) ||
           ((ces_len === 2) && ((de.role === 'tab') || (de.role === 'tabpanel')))) {
         rule_result.addResult(TEST_RESULT.PASS, ce, 'ELEMENT_PASS_1', []);
         if (ces_len === 2) rule_result.addResult(TEST_RESULT.PASS, ces[i][1], 'ELEMENT_PASS_1', []);
       }
       else {
         for (j = 0; j < ces_len; j++) {
           rule_result.addResult(TEST_RESULT.FAIL, ces[i][j], 'ELEMENT_FAIL_1', []);
         }
       }
     }

   }
  } // end validate function
},

/**
 * @object CONTROL_11
 *
 * @desc If there is more than one form on page, input element of type
 *       submit and reset must have unique labels in each form using the value attribute
 *
 */

{ rule_id             : 'CONTROL_11',
  last_updated        : '2014-11-25',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.FORMS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '2.4.6',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['input[type="submit"]', 'input[type="reset"]','button[type="submit"]', 'button[type="reset"]'],
  primary_property    : 'computed_label',
  resource_properties : ['value'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    function checkButtons(fe1) {

      var flag1 = false;
      var flag2 = false;

      var sb1 = fe1.submit_button ? fe1.submit_button : null;
      var rb1 = fe1.reset_button ? fe1.reset_button : null;

      for (var j = 0; j < form_elements_len; j += 1) {
        var fe2 = form_elements[j];

        if (fe1.cache_id === fe2.cache_id) {
          continue;
        }

        var sb2 = fe2.submit_button ? fe2.submit_button : null;
        var rb2 = fe2.reset_button  ? fe2.reset_button : null;

        if (!flag1 && sb1 && sb2 && (sb1.computed_label_for_comparison === sb2.computed_label_for_comparison)) {

          if (sb2.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {
            if (sb1.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {
              if (sb1.dom_element.tag_name === 'button') {
                rule_result.addResult(TEST_RESULT.FAIL, sb1, 'ELEMENT_FAIL_1', ['submit']);
              } else {
                rule_result.addResult(TEST_RESULT.FAIL, sb1, 'ELEMENT_FAIL_2', ['submit']);
              }
            } else {
             rule_result.addResult(TEST_RESULT.HIDDEN, sb1, 'ELEMENT_HIDDEN_1', ['submit']);
            }
            flag1 = true;
          }
        }

        if (!flag2 && rb1 && rb2 && (rb1.computed_label_for_comparison === rb2.computed_label_for_comparison)) {

          if (rb2.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {
            if (rb1.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {
              if (rb1.dom_element.tag_name === 'button') {
                rule_result.addResult(TEST_RESULT.FAIL, rb1, 'ELEMENT_FAIL_1', ['reset']);
              } else {
                rule_result.addResult(TEST_RESULT.FAIL, rb1, 'ELEMENT_FAIL_2', ['reset']);
              }
            } else {
             rule_result.addResult(TEST_RESULT.HIDDEN, rb1, 'ELEMENT_HIDDEN_1', ['reset']);
            }
            flag2 = true;
          }
        }

        if (flag1 && flag2) {
          return;
        }
      } // end loop
    }

   var TEST_RESULT  = OpenAjax.a11y.TEST_RESULT;
   var VISIBILITY   = OpenAjax.a11y.VISIBILITY;
   var CONTROL_TYPE =  OpenAjax.a11y.CONTROL_TYPE;

   var form_elements   = dom_cache.controls_cache.form_elements;
   var form_elements_len = form_elements.length;
   var fes   = [];

   var input_submit_info = [];
   var input_reset_info  = [];

   // Check to see if valid cache reference
   if (form_elements && form_elements_len) {

     for (var i = 0; i < form_elements_len; i += 1) {
       var fe = form_elements[i];
       checkButtons(fe);
     } // end loop
   }
  } // end validate function
}
]);




/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

//
// OpenAjax Alliance Rules
// Rule group: Styling Rules
//
OpenAjax.a11y.RuleManager.addRulesFromJSON([


  /**
   * @object FRAME_1
   *
   * @desc  Evaluate frame elements for a title attribute
   */

  { rule_id             : 'FRAME_1',
    last_updated        : '2015-07-31',
    rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
    rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
    rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
    wcag_primary_id     : '2.4.1',
    wcag_related_ids    : [],
    target_resources    : ['frame'],
    primary_property    : 'title',
    resource_properties : ['accessible_name'],
    language_dependency : "",
    validate            : function (dom_cache, rule_result) {

      var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
      var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

      var frame_elements     = dom_cache.frames_cache.frame_elements;
      var frame_elements_len = frame_elements.length;

      // Check to see if valid cache reference
      if (frame_elements && frame_elements_len) {

        for (var i = 0; i < frame_elements_len; i++) {
          var fe = frame_elements[i];
          var de = fe.dom_element;
          var cs = de.computed_style;

          // if no content in frame ignore
          if (fe.src.length === 0) continue;

          if ((cs.is_visible_to_at === VISIBILITY.VISIBLE) &&
              (cs.is_visible_onscreen === VISIBILITY.VISIBLE)){

            if (de.has_title && de.title.length) {
              rule_result.addResult(TEST_RESULT.PASS, fe, 'ELEMENT_PASS_1', [de.title]);
            }
            else {
              rule_result.addResult(TEST_RESULT.FAIL, fe, 'ELEMENT_FAIL_1', []);
            }

          }
          else {
            rule_result.addResult(TEST_RESULT.HIDDEN, fe, 'ELEMENT_HIDDEN_1', []);
          }
        } // end loop
      }

    } // end validate function
  },

  /**
   * @object FRAME_2
   *
   * @desc  Evaluate iframe elements for an accessible name
   */

  { rule_id             : 'FRAME_2',
    last_updated        : '2015-07-31',
    rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
    rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
    rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
    wcag_primary_id     : '2.4.1',
    wcag_related_ids    : [],
    target_resources    : ['iframe'],
    primary_property    : 'accessible_name',
    resource_properties : ['title', 'aria_label', 'aria_labelledby'],
    language_dependency : "",
    validate            : function (dom_cache, rule_result) {

      var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
      var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

      var iframe_elements     = dom_cache.frames_cache.iframe_elements;
      var iframe_elements_len = iframe_elements.length;

      // Check to see if valid cache reference
      if (iframe_elements && iframe_elements_len) {

        for (var i = 0; i < iframe_elements_len; i++) {
          var fe = iframe_elements[i];

          // if no content in frame ignore
          if (fe.src.length === 0) continue;

          if ((fe.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) &&
              (fe.dom_element.computed_style.is_visible_onscreen === VISIBILITY.VISIBLE)){

            if (fe.computed_label.length) {
              rule_result.addResult(TEST_RESULT.PASS, fe, 'ELEMENT_PASS_1', [fe.computed_label]);
            }
            else {
              rule_result.addResult(TEST_RESULT.FAIL, fe, 'ELEMENT_FAIL_1', []);
            }

          }
          else {
            rule_result.addResult(TEST_RESULT.HIDDEN, fe, 'ELEMENT_HIDDEN_1', []);
          }
        } // end loop
      }


    } // end validate function
  }

]);




/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/* OpenAjax Alliance IMG and AREA element Rules                     */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

/**
 * @object IMAGE_1
 *
 * @desc Images must have a source for an accessible name or be identified as decorative
 */

{ rule_id             : 'IMAGE_1',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.IMAGES,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '1.1.1',
  wcag_related_ids    : [],
  target_resources    : ['img', 'area', '[role="img"]'],
  primary_property    : 'accessible_name',
  resource_properties : ['accessible_name_source', 'alt', 'aria_label', 'aria_labelledby', 'title', 'is_visible_to_at', 'role'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
    var SOURCE      = OpenAjax.a11y.SOURCE;

    var image_elements   = dom_cache.images_cache.image_elements;
    var image_elements_len = image_elements.length;

    // Check to see if valid cache reference
    if (image_elements && image_elements_len) {

      for (var i = 0; i < image_elements_len; i++) {
        var ie = image_elements[i];
        var de = ie.dom_element;

        if (de.tag_name === 'area') continue;

//        OpenAjax.a11y.logger.debug("Image is visibile to AT: " + de.computed_style.is_visible_to_at);

        if ((de.computed_style.is_visible_to_at === VISIBILITY.VISIBLE ) &&
            (!de.has_role || (de.role !== 'presentation'))){

          if (ie.accessible_name_source !== SOURCE.NONE) {
            if (ie.accessible_name_source === SOURCE.ALT_ATTRIBUTE) {
              if (de.tag_name === "img") rule_result.addResult(TEST_RESULT.PASS, ie, 'ELEMENT_PASS_1', [de.tag_name]);
              else rule_result.addResult(TEST_RESULT.FAIL, ie, 'ELEMENT_FAIL_2', [de.tag_name]);
            } else if (ie.accessible_name_source === SOURCE.ARIA_LABELLEDBY) rule_result.addResult(TEST_RESULT.PASS, ie, 'ELEMENT_PASS_2', [de.tag_name]);
            else if (ie.accessible_name_source === SOURCE.ARIA_LABEL)      rule_result.addResult(TEST_RESULT.PASS, ie, 'ELEMENT_PASS_3', [de.tag_name]);
            else rule_result.addResult(TEST_RESULT.PASS, ie, 'ELEMENT_PASS_4', [de.tag_name]);
          }
          else {
            rule_result.addResult(TEST_RESULT.FAIL, ie, 'ELEMENT_FAIL_1', [de.tag_name]);
          }
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, ie, 'ELEMENT_HIDDEN_1', [de.tag_name]);
        }
      } // end loop
    }
  } // end validation function
},

/**
 * @object IMAGE_2
 *
 * @desc Text alternatives accurately describe images
 */
{ rule_id             : 'IMAGE_2',
  last_updated        : '2015-09-11',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.IMAGES,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '1.1.1',
  wcag_related_ids    : [],
  target_resources    : ['img', '[role="img"]'],
  primary_property    : 'accessible_name',
  resource_properties : ['tag_name', 'alt', 'title', 'role', 'is_visible_to_at'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT   = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY    = OpenAjax.a11y.VISIBILITY;

    var image_elements   = dom_cache.images_cache.image_elements;
    var image_elements_len = image_elements.length;

    // Check to see if valid cache reference
    if (image_elements && image_elements_len) {

      for (var i = 0; i < image_elements_len; i++) {
        var ie = image_elements[i];
        var de = ie.dom_element;
        var cs = de.computed_style;

        if (ie.is_presentation || (ie.accessible_name_length === 0)) continue;

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
          if (de.tag_name === 'img') rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_1', [], ie.toString('short'));
          else rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_2', [de.tag_name], ie.toString('short'));
        }
        else {
          if (de.tag_name === 'img') rule_result.addResult(TEST_RESULT.HIDDEN, ie, 'ELEMENT_HIDDEN_1', [], ie.toString('short'));
          else rule_result.addResult(TEST_RESULT.HIDDEN, ie, 'ELEMENT_HIDDEN_2', [de.tag_name], ie.toString('short'));
        }
      } // end loop
    }
  } // end validation function
},

/**
 * @object IMAGE_3
 *
 * @desc The file name of the image should not be part of the accessible name content (it must have an image file extension)
 */
{ rule_id             : 'IMAGE_3',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.IMAGES,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '1.1.1',
  wcag_related_ids    : [],
  target_resources    : ['img', '[role="img"]'],
  primary_property    : 'accessible_name',
  resource_properties : ['file_name', 'is_visible_to_at'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
    var SOURCE      = OpenAjax.a11y.SOURCE;

    var image_elements   = dom_cache.images_cache.image_elements;
    var image_elements_len = image_elements.length;

    // Check to see if valid cache reference
    if (image_elements && image_elements_len) {

      for (var i = 0; i < image_elements_len; i++) {
        var ie = image_elements[i];
        var de = ie.dom_element;

        if (ie.accessible_name_source !== SOURCE.NONE && (ie.accessible_name_for_comparison.length > 0)) {

          if ((de.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) &&
              (!de.has_role || (de.role !== 'presentation'))){

            // make sure it has a file extension, will assume extension is for an image
            if (ie.file_name.indexOf('.') >= 0) {

              if (ie.accessible_name_for_comparison.indexOf(ie.file_name) >= 0 ) {
                rule_result.addResult(TEST_RESULT.FAIL, ie, 'ELEMENT_FAIL_1', [], ie.toString('short'));
              }
              else {
                rule_result.addResult(TEST_RESULT.PASS, ie, 'ELEMENT_PASS_1', [], ie.toString('short'));
              }
            }
            else {
              rule_result.addResult(TEST_RESULT.PASS, ie, 'ELEMENT_PASS_1', [], ie.toString('short'));
            }
          }
          else {
            rule_result.addResult(TEST_RESULT.HIDDEN, ie, 'ELEMENT_HIDDEN_1', [de.tag_name], ie.toString('short'));
          }
        }
      } // end loop
    }
  } // end validation function
 },

/**
 * @object IMAGE_4_EN (English)
 *
 * @desc If the accessible name contains content, it should be less than 100 characters long, longer descriptions should use long description techniques (English only)
 */
{ rule_id             : 'IMAGE_4_EN',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.IMAGES,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '1.1.1',
  wcag_related_ids    : [],
  target_resources    : ['img', 'area'],
  primary_property    : 'accessible_name_length',
  resource_properties : ['accessible_name', 'is_visible_to_at'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var MAX_ACCESSIBLE_NAME_LENGTH = 100;

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
    var SOURCE      = OpenAjax.a11y.SOURCE;

    var image_elements   = dom_cache.images_cache.image_elements;
    var image_elements_len = image_elements.length;

    // Check to see if valid cache reference
    if (image_elements && image_elements_len) {

      for (var i = 0; i < image_elements_len; i++) {
        var ie = image_elements[i];
        var de = ie.dom_element;

        if (ie.accessible_name_source !== SOURCE.NONE && (ie.accessible_name_for_comparison.length > 0)) {

          if ((de.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) &&
              (!de.has_role || (de.role !== 'presentation'))){

            if (ie.accessible_name_for_comparison.length > MAX_ACCESSIBLE_NAME_LENGTH) {
              rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_1', [ie.accessible_name_for_comparison.length], ie.toString('short'));
            }
            else {
              rule_result.addResult(TEST_RESULT.PASS, ie, 'ELEMENT_PASS_1', [ie.accessible_name_for_comparison.length], ie.toString('short'));
            }
          }
          else {
            rule_result.addResult(TEST_RESULT.HIDDEN, ie, 'ELEMENT_HIDDEN_1', [de.tag_name], ie.toString('short'));
          }
        }
      } // end loop
    }
  } // end validation function
},

/**
 * @object IMAGE_5
 *
 * @desc Verify the image is decorative
 */
{ rule_id             : 'IMAGE_5',
  last_updated        : '2015-09-11',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.IMAGES,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '1.1.1',
  wcag_related_ids    : [],
  target_resources    : ['img', '[role="img"]'],
  primary_property    : 'accessible_name',
  resource_properties : ['tag_name', 'alt', 'role', 'is_visible_to_at'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT   = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY    = OpenAjax.a11y.VISIBILITY;

    var image_elements   = dom_cache.images_cache.image_elements;
    var image_elements_len = image_elements.length;

    // Check to see if valid cache reference
    if (image_elements && image_elements_len) {

      for (var i = 0; i < image_elements_len; i++) {
        var ie = image_elements[i];
        var de = ie.dom_element;
        var cs = de.computed_style;

        if (ie.accessible_name_source !== OpenAjax.a11y.SOURCE.NONE || ie.is_presentation) {
          if (ie.accessible_name_for_comparison.length === 0 || ie.is_presentation) {
            if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
              if (de.tag_name === 'img') rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_1', []);
              else rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_2', [de.tag_name]);
            }
            else {
              if (de.tag_name === 'img') rule_result.addResult(TEST_RESULT.HIDDEN, ie, 'ELEMENT_HIDDEN_1', []);
              else rule_result.addResult(TEST_RESULT.HIDDEN, ie, 'ELEMENT_HIDDEN_2', [de.tag_name]);
            }
          }
        }
      } // end loop
    }
  } // end validation function
},

/**
 * @object IMAGE_6
 *
 * @desc For complex images, charts or graphs provide long description
 */
{ rule_id             : 'IMAGE_6',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.IMAGES,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.1.1',
  wcag_related_ids    : [],
  target_resources    : ['img', '[role="img"]'],
  primary_property    : 'accessible_description',
  resource_properties : ['tag_name', 'longdesc', 'aria_describedby', 'title', 'calculated_aria_description', 'undefined_aria_describedby_ids', 'is_visible_to_at'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    function isSimilar(alt, title) {

      if (typeof alt   !== 'string') return false;
      if (typeof title !== 'string') return false;

      alt   = OpenAjax.a11y.util.normalizeSpace(alt.toLowerCase());
      title = OpenAjax.a11y.util.normalizeSpace(title.toLowerCase());

      if (alt === title) return true;

      if ((alt.length >= title.length) &&
          (alt.indexOf(title) >= 0)) return true;

      return false;
    }

    var TEST_RESULT   = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY    = OpenAjax.a11y.VISIBILITY;

    var image_elements   = dom_cache.images_cache.image_elements;
    var image_elements_len = image_elements.length;

    // Check to see if valid cache reference
    if (image_elements && image_elements_len) {

      for (var i = 0; i < image_elements_len; i++) {
        var ie = image_elements[i];
        var de = ie.dom_element;
        var cs = de.computed_style;

        if (ie.is_presentation || (ie.accessible_name_length === 0) || ie.accessible_name_source === OpenAjax.a11y.SOURCE.NONE) continue;

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
          if (de.has_aria_describedby) {
            if (de.undefined_aria_describedby_ids && de.undefined_aria_describedby_ids.length) {
              rule_result.addResult(TEST_RESULT.FAIL, ie, 'ELEMENT_FAIL_1', [de.undefined_aria_describedby_ids], ie.toString('long'));
            }
            else {
              if (de.tag_name === 'img') rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_1', [de.aria_describedby], ie.toString('long'));
              else rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_2', [de.tag_name, de.aria_describedby], ie.toString('long'));
            }
          } else if (de.has_title && (ie.accessible_name_source !== OpenAjax.a11y.SOURCE.TITLE)) {
              if (de.tag_name === 'img') {
                if (isSimilar(de.alt, de.title)) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_3A', [], ie.toString('long'));
                else rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_3', [de.title], ie.toString('long'));
              } else rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_4', [de.tag_name, de.title], ie.toString('long'));
            }
            else if (ie.has_longdesc) {
              if (de.tag_name === 'img') rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_5', [ie.longdesc], ie.toString('long'));
              else rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_6', [de.tag_name. ie.longdesc], ie.toString('long'));
            }
          else {
            if (de.tag_name === 'img') rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_7', [], ie.toString('long'));
            else rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_8', [de.tag_name], ie.toString('long'));
          }
        }
        else {
          if (de.tag_name === 'img') rule_result.addResult(TEST_RESULT.HIDDEN, ie, 'ELEMENT_HIDDEN_1', [], ie.toString('long'));
          else rule_result.addResult(TEST_RESULT.HIDDEN, ie, 'ELEMENT_HIDDEN_2', [de.tag_name], ie.toString('long'));
        }
      } // end loop
    }
  } // end validation function
},

/**
 * @object IMAGE_7
 *
 * @desc MathML for mathematical expressions
 */
{ rule_id             : 'IMAGE_7',
  last_updated        : '2015-09-15',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.IMAGES,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '1.1.1',
  wcag_related_ids    : [],
  target_resources    : ['img', '[role="img"]'],
  primary_property    : 'accessible_name',
  resource_properties : ['tag_name', 'alt', 'role', 'is_visible_to_at'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT   = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY    = OpenAjax.a11y.VISIBILITY;

    var image_elements   = dom_cache.images_cache.image_elements;
    var image_elements_len = image_elements.length;

    // Check to see if valid cache reference
    if (image_elements && image_elements_len) {

      for (var i = 0; i < image_elements_len; i++) {
        var ie = image_elements[i];
        var de = ie.dom_element;
        var cs = de.computed_style;

        if (ie.is_presentation || (ie.accessible_name_length === 0)) continue;

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
          if (de.tag_name === 'img') rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_1', [], ie.toString('short'));
          else rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_2', [de.tag_name], ie.toString('short'));
        }
        else {
          if (de.tag_name === 'img') rule_result.addResult(TEST_RESULT.HIDDEN, ie, 'ELEMENT_HIDDEN_1', [], ie.toString('short'));
          else rule_result.addResult(TEST_RESULT.HIDDEN, ie, 'ELEMENT_HIDDEN_2', [de.tag_name], ie.toString('short'));
        }
      } // end loop
    }
  } // end validation function
}]);

/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*  OpenAjax Alliance Heading and Landmark Rules                    */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

/**
 * @object HEADING_1
 *
 * @desc Page contains at least one H1 element and each H1 element has content
 */
{ rule_id             : 'HEADING_1',
  last_updated        : '2014-11-25',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.PAGE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.HEADINGS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '2.4.1',
  wcag_related_ids    : ['1.3.1', '2.4.2', '2.4.6', '2.4.10'],
  target_resources    : ['Page', 'h1'],
  primary_property    : 'name',
  resource_properties : ['tag_name', 'name_length'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

      var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
      var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

      var h1_elements     = dom_cache.headings_landmarks_cache.h1_elements;
      var h1_elements_len = h1_elements.length;

      var page_element = dom_cache.headings_landmarks_cache.page_element;

      var h1_count = 0;

      if (h1_elements && h1_elements_len) {

        for (var i = 0; i < h1_elements_len; i++ ) {
          var he = h1_elements[i];

          if (he.dom_element.computed_style.is_visible_to_at === VISIBILITY.HIDDEN) {
            rule_result.addResult(TEST_RESULT.HIDDEN, he, 'ELEMENT_HIDDEN_1', []);
          }
          else {
            if (he.name && he.name.length) {
              rule_result.addResult(TEST_RESULT.PASS, he, 'ELEMENT_PASS_1', []);
              h1_count++;
            }
            else {
              rule_result.addResult(TEST_RESULT.FAIL, he, 'ELEMENT_FAIL_1', []);
            }
          }
        }
      }

     if (page_element) {
       // Test if no h1s
       if (h1_count === 0) rule_result.addResult(TEST_RESULT.FAIL, page_element, 'PAGE_FAIL_1', []);
       else rule_result.addResult(TEST_RESULT.PASS, page_element, 'PAGE_PASS_1', []);
     }
  } // end validate function
},

/**
 * @object HEADING_2
 *
 * @desc If there are main and/or banner landmarks and H1 elements,
 *       H1 elements should be children of main or banner landmarks
 *
 */
{ rule_id             : 'HEADING_2',
  last_updated        : '2014-11-25',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.HEADINGS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '2.4.6',
  wcag_related_ids    : ['1.3.1', '2.4.1', '2.4.2', '2.4.10'],
  target_resources    : ['h1'],
  primary_property    : 'parent_landmark',
  resource_properties : ['tag_name', 'name'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    function checkForAnscetorRole(he, landmark) {
      var pl = he.dom_element.parent_landmark;

      while (pl) {
         if (pl.landmark === landmark) return true;
         pl = pl.dom_element.parent_landmark;
      }

      return false;
    }

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var h1_elements     = dom_cache.headings_landmarks_cache.h1_elements;
    var h1_elements_len = h1_elements.length;

    var main_elements     = dom_cache.headings_landmarks_cache.main_elements;
    var main_elements_len = main_elements.length;

    if (main_elements && h1_elements && main_elements_len && h1_elements_len) {

      for (var i = 0; i < h1_elements_len; i++) {
        var he = h1_elements[i];
        var de = he.dom_element;
        var cs = de.computed_style;

        if (cs.is_visible_to_at === VISIBILITY.HIDDEN) {
          rule_result.addResult(TEST_RESULT.HIDDEN, he, 'ELEMENT_HIDDEN_1', []);
        }
        else {
          if (checkForAnscetorRole(he, 'main')) {
            rule_result.addResult(TEST_RESULT.PASS, he, 'ELEMENT_PASS_1', []);
          }
          else {
            if (checkForAnscetorRole(he, 'banner')) {
              rule_result.addResult(TEST_RESULT.PASS, he, 'ELEMENT_PASS_2', []);
            }
            else {
              rule_result.addResult(TEST_RESULT.FAIL, he, 'ELEMENT_FAIL_1', []);
            }
          }
        }

      }
    }
  } // end validate function
},

/**
 * @object HEADING_3
 *
 * @desc Sibling headings of the same level that share the same parent heading should be unique
 *       This rule applies only when there are no main landmarks on the page and at least one
 *       sibling heading
 *
 */
{ rule_id             : 'HEADING_3',
  last_updated        : '2014-11-25',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.HEADINGS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '2.4.6',
  wcag_related_ids    : ['1.3.1', '2.4.10'],
  target_resources    : ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
  primary_property    : 'name',
  resource_properties : ['tag_name'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    function getSiblingHeadings(index, heading_element) {

      var list = [];
      var flag = true;

      tested_list.push(heading_element);

      for (var i = (index+1); i < heading_elements_len; i++) {

        var he = heading_elements[i];

        if (he.dom_element.computed_style.is_visible_to_at === VISIBILITY.HIDDEN) {
          tested_list.push(he);
          continue;
        }

        if (heading_element.level > he.level) return list;

        if (heading_element.level === he.level) {
          if (flag) list.push(heading_element);
          flag = false;

          list.push(he);
          tested_list.push(he);
        }

      }

      if (list.length > 1) return list;
      else return[];

    }

    function notInTestedList(he) {

      for (var i = 0; i < tested_list.length; i++) {
        if (tested_list[i] === he) return false;
      }

      return true;
    }

    function notInDoneList(he) {

      for (var i = 0; i < done_list.length; i++) {
        if (done_list[i] === he) return false;
      }

      return true;
    }


    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var heading_elements     = dom_cache.headings_landmarks_cache.heading_elements;
    var heading_elements_len = heading_elements.length;

    var tested_list = [];
    var done_list   = [];
    var i, j, k;
    var sibling_headings = [];
    var sibling_headings_len = 0;

    if (heading_elements_len > 1) {

      for (i = 0; i < (heading_elements_len-1); i++) {

        var he = heading_elements[i];

        if (notInTestedList(he)) sibling_headings = getSiblingHeadings(i, he);

        sibling_headings_len = sibling_headings.length;

        if (sibling_headings_len > 1) {

          for (j = 0; j < (sibling_headings_len-1); j++) {

            var sh1 = sibling_headings[j];
            var first_flag = true;

            if (notInDoneList(sh1) && sh1.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {

              for (k = j+1; k < sibling_headings_len; k++) {
                var sh2 = sibling_headings[k];

                if (sh1.name_for_comparison === sh2.name_for_comparison) {
                  if (first_flag) {
                    rule_result.addResult(TEST_RESULT.FAIL, sh1, 'ELEMENT_FAIL_1', [sh1.dom_element.tag_name]);
                    done_list.push(sh1);
                  }
                  rule_result.addResult(TEST_RESULT.FAIL, sh2, 'ELEMENT_FAIL_1', [sh2.dom_element.tag_name]);
                  done_list.push(sh2);
                  first_flag = false;
                }
              }
            }
          }

          for (j = 0; j < sibling_headings_len; j++) {
            var sh = sibling_headings[j];
            if (notInDoneList(sh)) {
              if (sh.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {
                rule_result.addResult(TEST_RESULT.PASS, sh, 'ELEMENT_PASS_1', [sh.dom_element.tag_name]);
              }
              done_list.push(sh);
            }
          }
        }
      }
    }
  } // end validate function
},

/**
 * @object HEADING_5
 *
 * @desc Headings must be properly nested
 *
 */
{ rule_id             : 'HEADING_5',
  last_updated        : '2014-11-25',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.HEADINGS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.6', '2.4.10'],
  target_resources    : ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
  primary_property    : 'level',
  resource_properties : ['tag_name', 'name'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

    var heading_elements     = dom_cache.headings_landmarks_cache.heading_elements;
    var heading_elements_len = heading_elements.length;

    for (var i = 0; i < heading_elements_len; i++) {

      var he = heading_elements[i];
      var tag_name = he.dom_element.tag_name;

      if (he.is_visible) {
        if (he.has_content) {
          if ((he.nesting_parent_heading === he.last_parent_heading)) {
            if (!he.nesting_parent_heading ||
                (he.nesting_parent_heading &&
                he.nesting_parent_heading.global_properly_nested)) {
              rule_result.addResult(TEST_RESULT.PASS, he, 'ELEMENT_PASS_1', [tag_name]);
              he.global_properly_nested = true;
            }
            else {
              rule_result.addResult(TEST_RESULT.FAIL, he, 'ELEMENT_FAIL_1', [tag_name]);
              he.global_properly_nested = false;
            }
          }
          else {
            rule_result.addResult(TEST_RESULT.FAIL, he, 'ELEMENT_FAIL_1', [tag_name]);
            he.global_properly_nested = false;
          }
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, he, 'ELEMENT_HIDDEN_2', [tag_name]);
        }
      }
      else {
        rule_result.addResult(TEST_RESULT.HIDDEN, he, 'ELEMENT_HIDDEN_1', [tag_name]);
      }
    }

//    var page_element = dom_cache.headings_landmarks_cache.page_element;
//
//      if (heading_fail === 0) rule_result.addResult(TEST_RESULT.PASS, page_element, 'ELEMENT_PASS_2', []);
//      else if (heading_fail === 1) rule_result.addResult(TEST_RESULT.FAIL, page_element, 'ELEMENT_FAIL_3', []);
//      else rule_result.addResult(TEST_RESULT.FAIL, page_element, 'ELEMENT_FAIL_4', [heading_fail]);
  } // end validate function
},

/**
 * @object HEADING_6
 *
 * @desc Headings should not consist only of image content
 *
 */
{ rule_id             : 'HEADING_6',
  last_updated        : '2014-11-25',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.HEADINGS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.6', '2.4.10'],
  target_resources    : ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
  primary_property    : 'text_only_from_image',
  resource_properties : ['tag_name', 'name'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var heading_elements     = dom_cache.headings_landmarks_cache.heading_elements;
    var heading_elements_len = heading_elements.length;

    for (var i = 0; i < heading_elements_len; i++ ) {
      var  he = heading_elements[i];
      var de = he.dom_element;
      var cs = de.computed_style;

      if (cs.is_visible_to_at === VISIBILITY.HIDDEN) {
        rule_result.addResult(TEST_RESULT.HIDDEN, he, 'ELEMENT_HIDDEN_1', [de.tag_name]);
      }
      else {
        if (he.name.length) {
          if (he.text_only_from_image) rule_result.addResult(TEST_RESULT.FAIL, he, 'ELEMENT_FAIL_1', [de.tag_name]);
          else rule_result.addResult(TEST_RESULT.PASS, he, 'ELEMENT_PASS_1', [de.tag_name]);
        }
        else {
          rule_result.addResult(TEST_RESULT.FAIL, he, 'ELEMENT_FAIL_2', [de.tag_name]);
        }
      }
    }
  } // end validate function
},

/**
 * @object HEADING_7
 *
 * @desc First heading in contentinfo, complementary, form, navigation and search landmark must be an h2, except main landmark h1
 */
{ rule_id             : 'HEADING_7',
  last_updated        : '2014-11-25',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.HEADINGS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
  target_resources    : ['h2', '[role="banner"]', '[role="contentinfo"]', '[role="complementary"]', '[role="form"]', '[role="navigation"]', '[role="search"]'],
  primary_property    : 'parent_landmark',
  resource_properties : ['tag_name', 'name'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

    var landmark_elements     = dom_cache.headings_landmarks_cache.landmark_elements;
    var landmark_elements_len = landmark_elements.length;

    for (var i = 0; i < landmark_elements_len; i++ ) {
      var le = landmark_elements[i];
      var cs = le.dom_element.computed_style;

      if ((le.landmark === 'contentinfo') ||
          (le.landmark === 'complementary') ||
          (le.landmark === 'form') ||
          (le.landmark === 'navigation') ||
          (le.landmark === 'search')) {

        if (cs.is_visible_to_at) {

          var heading_elements = le.getHeadings();

          if (heading_elements.length) {
            var he = heading_elements[0];
            if (he.level === 2) {
//              rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_1', [le.landmark]);
              rule_result.addResult(TEST_RESULT.PASS, he, 'ELEMENT_PASS_1', [le.landmark]);
            }
            else {
//              rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_1', [le.landmark, he.level]);
              rule_result.addResult(TEST_RESULT.FAIL, he, 'ELEMENT_FAIL_1', [le.landmark, he.level]);
            }
          }
        }
      }
    }
  } // end validate function
},

/**
 * @object HEADING_8
 *
 * @desc Headings should be properly nested in a landmark
 */
{ rule_id             : 'HEADING_8',
  last_updated        : '2014-11-25',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.HEADINGS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
  target_resources    : ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
  primary_property    : 'parent_landmark',
  resource_properties : ['tag_name', 'name' ],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

    var landmark_elements     = dom_cache.headings_landmarks_cache.landmark_elements;
    var landmark_elements_len = landmark_elements.length;

    for (var i = 0; i < landmark_elements_len; i++ ) {
      var le = landmark_elements[i];
      var cs = le.dom_element.computed_style;

      if (cs.is_visible_to_at) {

        var heading_elements = le.getHeadings();
        var heading_elements_len = heading_elements.length;

        for (var j = 0; j < heading_elements_len; j++) {

          var he = heading_elements[j];
          var tag_name = he.dom_element.tag_name;

          if (he.is_visible) {

//            OpenAjax.a11y.logger.debug(" Heading: " + he + " (" + le + ")");
//            OpenAjax.a11y.logger.debug("  LPH: " + he.landmark_parent_heading + "  LLPH: " + he.last_landmark_parent_heading);
//            if (he.landmark_parent_heading) OpenAjax.a11y.logger.debug("  LPH nested: " + he.landmark_parent_heading.landmark_properly_nested );

            if (he.has_content) {

              if (he.landmark_parent_heading === he.last_landmark_parent_heading) {

                if (!he.last_landmark_parent_heading ||
                    (he.landmark_parent_heading &&
                     he.landmark_parent_heading.landmark_properly_nested)) {
                  rule_result.addResult(TEST_RESULT.PASS, he, 'ELEMENT_PASS_1', [tag_name, le.toString()]);
                  he.landmark_properly_nested = true;
                }
                else {
                  rule_result.addResult(TEST_RESULT.FAIL, he, 'ELEMENT_FAIL_1', [tag_name, le.toString()]);
                  he.landmark_properly_nested = false;
                }
              }
              else {
                rule_result.addResult(TEST_RESULT.FAIL, he, 'ELEMENT_FAIL_1', [tag_name, le.toString()]);
                he.landmark_properly_nested = false;
              }
            }
            else {
              rule_result.addResult(TEST_RESULT.FAIL, he, 'ELEMENT_FAIL_2', [tag_name, le.toString()]);
              he.landmark_properly_nested = false;
            }
          }
          else {
            rule_result.addResult(TEST_RESULT.HIDDEN, he, 'ELEMENT_HIDDEN_1', [tag_name, le.toString()]);
          }
        }
      }
      else {
        rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_2', [le.toString()]);
      }
    }
  } // end validate function
}

]);




/**
 * Copyright 2011-2018  OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*            OpenAjax Alliance Media Rules                         */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

{ rule_id             : 'HTML_1',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '4.1.1',
  wcag_related_ids    : [],
  target_resources    : ['b', 'i'],
  primary_property    : 'tag_name',
  resource_properties : [],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT    = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY     = OpenAjax.a11y.VISIBILITY;

    var dom_elements     = dom_cache.element_cache.dom_elements;
    var dom_elements_len = dom_elements.length;

    for (var i = 0; i < dom_elements_len; i++) {
      var de = dom_elements[i];

      if (de.tag_name === 'b') {
        if (de.computed_style.is_visible_to_at === VISIBILITY.VISIBLE ) {
           rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.tag_name, de.lang]);
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tag_name, de.lang]);
        }
      }
      else {
        if (de.tag_name === 'i') {
          if (de.computed_style.is_visible_to_at === VISIBILITY.VISIBLE ) {
             rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', [de.tag_name, de.lang]);
          }
          else {
            rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_2', [de.tag_name, de.lang]);
          }
        }
      }
    }

  } // end validate function
},

/**
 * @object HTML_2
 *
 * @desc Change marquee elements to use accessible techniques
 */

{ rule_id             : 'HTML_2',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '2.3.1',
  wcag_related_ids    : ['2.2.2', '4.1.1'],
  target_resources    : ['marquee'],
  primary_property    : 'tag_name',
  resource_properties : [],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT    = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY     = OpenAjax.a11y.VISIBILITY;

    var dom_elements     = dom_cache.element_cache.dom_elements;
    var dom_elements_len = dom_elements.length;

    for (var i = 0; i < dom_elements_len; i++) {
      var de = dom_elements[i];

      if (de.tag_name === 'marquee') {
        if (de.computed_style.is_visible_to_at === VISIBILITY.VISIBLE ) {
           rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.tag_name, de.lang]);
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tag_name, de.lang]);
        }
      }
    }

  } // end validate function
},

/**
 * @object HTML_3
 *
 * @desc Role restrictions on HTML elements
 */

{ rule_id             : 'HTML_3',
  last_updated        : '2021-07-30',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['html elements'],
  primary_property    : 'tag_name',
  resource_properties : [],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    function isImplicitRole(d, e) {

      if (e.defaultRole === 'generic') {
        return false;
      }
      if (d.role === e.defaultRole) {
        return true;
      }
      if (d.role === 'none' && e.defaultRole === 'presentation') {
        return true;
      }

      return false;
    }

    function checkAnyRoleAllowed (d, e) {
      if (isImplicitRole(d, e)) {
        if (d.computed_style.is_visible_to_at === VISIBILITY.VISIBLE ) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, d, 'ELEMENT_MC_1', [d.role, e.tagName]);
          logProblemResult(d, e, 'MC', 'ELEMENT_MC_1A');
        } else {
          rule_result.addResult(TEST_RESULT.HIDDEN, d, 'ELEMENT_HIDDEN_1', [e.tagName, d.role]);
          logProblemResult(d, e, 'HIDDEN', 'ELEMENT_HIDDEN_1A');
        }
      }
    }

    function checkNoRoleAllowed (d, e) {
      if (d.computed_style.is_visible_to_at === VISIBILITY.VISIBLE ) {

        if (isImplicitRole(d, e)) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, d, 'ELEMENT_MC_1', [d.role, e.tagName]);
          logProblemResult(d, e, 'MC', 'ELEMENT_MC_1B');
        } else {
          if (e.attr2) {
            rule_result.addResult(TEST_RESULT.FAIL, d, 'ELEMENT_FAIL_1', [e.tagName, e.attr1, e.attr2, d.role]);
            logProblemResult(d, e, 'FAIL', 'ELEMENT_FAIL_1');
          } else {
            if (e.attr1) {
              rule_result.addResult(TEST_RESULT.FAIL, d, 'ELEMENT_FAIL_2', [e.tagName, e.attr1, d.role]);
              logProblemResult(d, e, 'FAIL', 'ELEMENT_FAIL_2');
            } else {
              if (e.hasAccname) {
                rule_result.addResult(TEST_RESULT.FAIL, d, 'ELEMENT_FAIL_3', [e.tagName, d.role]);
                logProblemResult(d, e, 'FAIL', 'ELEMENT_FAIL_3');
              } else {
                rule_result.addResult(TEST_RESULT.FAIL, d, 'ELEMENT_FAIL_4', [e.tagName, d.role]);
                logProblemResult(d, e, 'FAIL', 'ELEMENT_FAIL_4');
              }
            }
          }
        }
      } else {
        rule_result.addResult(TEST_RESULT.HIDDEN, d, 'ELEMENT_HIDDEN_1', [e.tagName, d.role]);
        logProblemResult(d, e, 'HIDDEN', 'ELEMENT_HIDDEN_1B');
      }
    }

    function checkSomeRolesAllowed (d, e) {
      if (!e.anyRoleAllowed && e.allowedRoles && (e.allowedRoles.indexOf(d.role) < 0)) {
        if (d.computed_style.is_visible_to_at === VISIBILITY.VISIBLE ) {
          var strAllowedRoles = e.allowedRoles.join(', ');

          if (isImplicitRole(d, e)) {
            rule_result.addResult(TEST_RESULT.MANUAL_CHECK, d, 'ELEMENT_MC_1', [d.role, e.tagName]);
            logProblemResult(d, e, 'MC', 'ELEMENT_MC_1C');
          } else {
            if (e.attr2) {
              rule_result.addResult(TEST_RESULT.FAIL, d, 'ELEMENT_FAIL_5', [e.tagName, e.attr1, e.attr2, strAllowedRoles]);
              logProblemResult(d, e, 'FAIL', 'ELEMENT_FAIL_5');
            } else {
              if (e.attr1) {
                rule_result.addResult(TEST_RESULT.FAIL, d, 'ELEMENT_FAIL_6', [e.tagName, e.attr1, d.role, strAllowedRoles]);
                logProblemResult(d, e, 'FAIL', 'ELEMENT_FAIL_6');
              } else {
                if (e.hasAccname) {
                  rule_result.addResult(TEST_RESULT.FAIL, d, 'ELEMENT_FAIL_7', [e.tagName, d.role, strAllowedRoles]);
                  logProblemResult(d, e, 'FAIL', 'ELEMENT_FAIL_7');
              } else {
                  rule_result.addResult(TEST_RESULT.FAIL, d, 'ELEMENT_FAIL_8', [e.tagName, d.role, strAllowedRoles]);
                  logProblemResult(d, e, 'FAIL', 'ELEMENT_FAIL_8');
                }
              }
            }
          }
        } else {
          rule_result.addResult(TEST_RESULT.HIDDEN, d, 'ELEMENT_HIDDEN_2', [d.tag_name, d.role]);
          logProblemResult(d, e, 'HIDDEN', 'ELEMENT_HIDDEN_2');
        }
      }
    }

    function logProblemResult(d, e, result, desc) {
      var show = false;
      if (show && d.node.className.indexOf(result) < 0) {
        console.log('[HTML3]: ' + desc + ' in context of ' + d.node.parentNode.tagName + '[role="' + d.node.parentNode.getAttribute('role') + '"]');
        console.log('[HTML3][' + d.tag_name + '][       role]: ' + d.role + ' [implicit]: ' + d.implicit_role);
        console.log('[HTML3][' + d.tag_name + '][  className]: ' + d.node.className);
        console.log('[HTML3][' + d.tag_name + '][    allowed]: ' + e.allowedRoles.join(', '));
        console.log('[HTML3][' + d.tag_name + '][defaultRole]: ' + e.defaultRole);
        console.log('[HTML3][' + d.tag_name + '][ isImplicit]: ' + isImplicitRole(d, e));
      }

    }

    var TEST_RESULT    = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY     = OpenAjax.a11y.VISIBILITY;

    var dom_elements     = dom_cache.element_cache.dom_elements;
    var dom_elements_len = dom_elements.length;

    for (var i = 0; i < dom_elements_len; i++) {
      var de = dom_elements[i];
      var eai = de.element_aria_info;

      if (de.role && !de.is_implied_role) {
        if (eai.anyRoleAllowed) {
          checkAnyRoleAllowed(de, eai);
        } else {
          if (eai.noRoleAllowed) {
            checkNoRoleAllowed(de, eai);
          } else {
            checkSomeRolesAllowed(de, eai);
          }
        }
      }
    }

  } // end validate function
}
]);
/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*  OpenAjax Alliance Control Rules                                 */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

/**
 * @object KEYBOARD_1
 *
 * @desc Widget elements on non-interactive elements or that override the default role of an interactive element
 *       need keyboard event handlers on the widget element or a parent element of the widget
 */

{ rule_id             : 'KEYBOARD_1',
  last_updated        : '2017-02-08',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.KEYBOARD_SUPPORT,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP3,
  wcag_primary_id     : '2.1.1',
  wcag_related_ids    : ['4.1.2'],
  target_resources    : ['widgets'],
  primary_property    : 'role',
  resource_properties : ['tab_index', 'is_owned', 'has_key_down', 'has_key_press', 'has_key_up', 'ancestor_has_key_down', 'ancestor_has_key_press', 'ancestor_has_key_up'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    function checkForKeyboardOnRequiredChildren(widget) {

      function checkChildren(children) {

        if (!children || !children.length) return false;

        var children_len = children.length;

        for (var i = 0; (i < children_len); i++) {

          var we = children[i];
          var de = we.dom_element;

          kbd_events = getEventsOnElementOrAncestors(de);

          if (kbd_events.length) return kbd_events;

//           OpenAjax.a11y.logger.debug("[checkForKeyboardOnRequiredChildren] " + widget + ": " + we + " ("+ flag + ")");


          if (de.role_info && de.role_info.requiredChildren && de.role_info.requiredChildren.length) {
            kbd_events = checkChildren(we.child_cache_elements);
            if (kbd_events.length) return kbd_events;
          }
        }
        return "";
      }

      return checkChildren(widget.child_cache_elements);
    }

    function getEventsOnElement(de) {

      var kbd_events = "";

      if (de.events.has_key_down)  kbd_events = "keydown ";
      if (de.events.has_key_press) kbd_events += "keypress ";
      if (de.events.has_key_up)    kbd_events += "keyup ";

      return kbd_events.trim();
    }

    function getEventsOnElementAncestors(de) {

      var kbd_events = "";

      if (de.events.ancestor_has_key_down)  kbd_events = "keydown ";
      if (de.events.ancestor_has_key_press) kbd_events += "keypress ";
      if (de.events.ancestor_has_key_up)    kbd_events += "keyup ";

      return kbd_events.trim();
    }

    function getEventsOnElementOrAncestors(de) {

      var kbd_events = "";

      if (de.events.has_key_down  || de.events.ancestor_has_key_down)  kbd_events = "keydown ";
      if (de.events.has_key_press || de.events.ancestor_has_key_press) kbd_events += "keypress ";
      if (de.events.has_key_up    || de.events.ancestor_has_key_up)    kbd_events += "keyup ";

      return kbd_events.trim();
    }

    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

    var widget_elements     = dom_cache.controls_cache.widget_elements;
    var widget_elements_len = widget_elements.length;

    if (widget_elements && widget_elements) {

      for (var i = 0; i < widget_elements_len; i++) {
        var we = widget_elements[i];
        var de = we.dom_element;
        var style = de.computed_style;

        var kbd_events = "";

        if (de.is_widget) {

          if (style.is_visible_to_at === VISIBILITY.VISIBLE) {

            kbd_events = getEventsOnElement(de);

            if (kbd_events.length) {
              rule_result.addResult(TEST_RESULT.MANUAL_CHECK, we, 'ELEMENT_MC_1', [kbd_events, de.role]);
            }
            else {

              kbd_events = getEventsOnElementAncestors(de);

              if (kbd_events.length) {
                rule_result.addResult(TEST_RESULT.MANUAL_CHECK, we, 'ELEMENT_MC_2', [kbd_events, de.role]);
              }
              else {
                if (we.parent_widget && we.parent_widget.dom_element) {
                  kbd_events = getEventsOnElementOrAncestors(we.parent_widget.dom_element);
                  if (kbd_events.length) {
                    rule_result.addResult(TEST_RESULT.MANUAL_CHECK, we, 'ELEMENT_MC_3', [kbd_events, we.parent_widget.dom_element.toString(), de.role]);
                    continue;
                  }
                }

                kbd_events = checkForKeyboardOnRequiredChildren(we);

                if (kbd_events.length) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, we, 'ELEMENT_MC_4', [kbd_events, de.role]);
                else rule_result.addResult(TEST_RESULT.MANUAL_CHECK, we, 'ELEMENT_MC_5', [de.role]);

              }
            }
          }
          else {
             rule_result.addResult(TEST_RESULT.HIDDEN, we, 'ELEMENT_HIDDEN_1', [we.toString()]);
          }
        }
      } // end loop
    }
  } // end validation function

},
/**
 * @object KEYBOARD_2
 *
 * @desc All operations available through the keyboard
 */

{ rule_id             : 'KEYBOARD_2',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.PAGE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.KEYBOARD_SUPPORT,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '2.1.1',
  wcag_related_ids    : ['2.1.2', '2.4.3',  '2.4.7', '3.2.1'],
  target_resources    : ['Page', 'applet', 'object', 'widgets'],
  primary_property    : 'tab_index',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

     var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
     var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

     var page_element = dom_cache.keyboard_focus_cache.page_element;

//     OpenAjax.a11y.logger.debug(" Page Element: " + page_element + "  " + page_element.dom_element);

     var interactive_elements      = dom_cache.controls_cache.interactive_elements;
     var interactive_elements_len  = interactive_elements.length;

     var interactive_count = 0;

     for (var i = 0; i < interactive_elements_len; i++) {


       var ie =interactive_elements[i];
       var de = ie.dom_element;
       var cs = de.computed_style;

       if ((cs.is_visible_to_at    === VISIBILITY.VISIBLE) ||
           (cs.is_visible_onscreen === VISIBILITY.VISIBLE)) {

         if (de.hasEvents() || de.has_tabindex || ie.is_embedded_app) {
           interactive_count++;
           if (de.hasEvents()) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_1', [de.tag_name]);
           else if (de.has_tabindex) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_2', [de.tab_index, de.tag_name]);
           else rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ie, 'ELEMENT_MC_3', [de.tag_name]);
         }
         else {
           rule_result.addResult(TEST_RESULT.PASS, ie, 'ELEMENT_PASS_1', [de.tag_name]);
         }
       }
       else {
         rule_result.addResult(TEST_RESULT.HIDDEN, ie, 'ELEMENT_HIDDEN_1', [de.tag_name]);
       }
     }  // endfor

     if (interactive_count > 1) {
       if (interactive_count === 1) {
         rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'PAGE_MC_1', []);
       }
       else {
         if (interactive_count >1) {
           rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'PAGE_MC_2', [interactive_count]);
         }
         else {
           if (interactive_elements_len > 0) {
             if (interactive_elements_len === 1) {
               rule_result.addResult(TEST_RESULT.PASS, page_element, 'PAGE_PASS_1', []);
             }
             else {
               rule_result.addResult(TEST_RESULT.PASS, page_element, 'PAGE_PASS_2', [interactive_elements_len]);
             }
           }
         }
       }
     }

   } // end validation function
},

/**
 * @object KEYBOARD_3
 *
 * @desc No keyboard trap
 */

{ rule_id             : 'KEYBOARD_3',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.KEYBOARD_SUPPORT,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '2.1.2',
  wcag_related_ids    : ['2.1.1', '2.4.3',  '2.4.7', '3.2.1'],
  target_resources    : ['object', 'applet'],
  primary_property    : 'tab_index',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {


     var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
     var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

//     OpenAjax.a11y.logger.debug(" Page Element: " + page_element + "  " + page_element.dom_element);

     var media_elements      = dom_cache.media_cache.media_elements;
     var media_elements_len  = media_elements.length;


     for (var i = 0; i < media_elements_len; i++) {

       var me = media_elements[i];

       var de = me.dom_element;
       if (!de) de =me;

       var cs = de.computed_style;

       if ((cs.is_visible_to_at    === VISIBILITY.VISIBLE) ||
           (cs.is_visible_onscreen === VISIBILITY.VISIBLE)) {
         rule_result.addResult(TEST_RESULT.MANUAL_CHECK, me, 'ELEMENT_MC_1', [me.tag_name]);
       }
       else {
         rule_result.addResult(TEST_RESULT.HIDDEN, me, 'ELEMENT_HIDDEN_1', [me.tag_name]);
       }
     }  // endfor

   } // end validation function
}


]);




/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*  OpenAjax Alliance Heading and Landmark Rules                    */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

/**
 * @object LANDMARK_1
 *
 * @desc Each page should have at least one main landmark
 *
 */
{ rule_id             : 'LANDMARK_1',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.PAGE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LANDMARKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '2.4.1',
  wcag_related_ids    : ['1.3.1', '2.4.6'],
  target_resources    : ['main', '[role="main"]'],
  primary_property    : 'accessible_name',
  resource_properties : ['tag_name', 'role'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var main_elements     = dom_cache.headings_landmarks_cache.main_elements;
    var main_elements_len = main_elements.length;

    var main_count = 0;

    for (var i = 0; i < main_elements_len; i++ ) {
      var me = main_elements[i];
      var de = me.dom_element;

      if (me.dom_element.computed_style.is_visible_to_at === VISIBILITY.HIDDEN) {
        if (de.has_role) rule_result.addResult(TEST_RESULT.HIDDEN, me, 'ELEMENT_HIDDEN_1', [de.tag_name]);
        else rule_result.addResult(TEST_RESULT.HIDDEN, me, 'ELEMENT_HIDDEN_2', []);
      }
      else {
        if (de.has_role) rule_result.addResult(TEST_RESULT.PASS, me, 'ELEMENT_PASS_1', [de.tag_name]);
        else rule_result.addResult(TEST_RESULT.PASS, me, 'ELEMENT_PASS_2', []);
        main_count++;
      }
    }

    var page_element = dom_cache.headings_landmarks_cache.page_element;

    if (page_element) {
      // Test if no h1s
      if (main_count === 0) rule_result.addResult(TEST_RESULT.FAIL, page_element, 'PAGE_FAIL_1', []);
      else if (main_count === 1) rule_result.addResult(TEST_RESULT.PASS, page_element, 'PAGE_PASS_1', []);
      else rule_result.addResult(TEST_RESULT.PASS, page_element, 'PAGE_PASS_2', [main_count]);
    }

  } // end validate function
},

/**
 * @object LANDMARK_2
 *
 * @desc All rendered content should be contained in a landmark
 */
{ rule_id             : 'LANDMARK_2',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LANDMARKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
  target_resources    : ['Page', 'all'],
  primary_property    : 'parent_landmark',
  resource_properties : ['tag_name'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var elements_with_content    = dom_cache.headings_landmarks_cache.elements_with_content;
    var elements_with_content_len = elements_with_content.length;

    var tag_name = "";

    for (var i = 0; i < elements_with_content_len; i++ ) {
      var de =elements_with_content[i];

      if (de.tag_name) tag_name = de.tag_name;
      else tag_name = de.parent_element.tag_name;

//      OpenAjax.a11y.logger.debug("  Content: " + de.toString()  +  " " + de.may_have_renderable_content);

      if (de.computed_style.is_visible_to_at === VISIBILITY.HIDDEN) {
        rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [tag_name]);
      }
      else {
        if (de.parent_landmark) {
          rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [tag_name, de.parent_landmark.landmark]);
        }
        else {
          if (de.may_have_renderable_content) {
            rule_result.addResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [tag_name]);
          }
          else {
            rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [tag_name]);
          }
        }
      }
    }

  } // end validate function
},

/**
 * @object LANDMARK_3
 *
 * @desc Each page within a website should have at least one navigation landmark
 *
 */
{ rule_id             : 'LANDMARK_3',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.WEBSITE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LANDMARKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '2.4.1',
  wcag_related_ids    : ['1.3.1', '2.4.6'],
  target_resources    : ['nav', '[role="navigation"]'],
  primary_property    : 'accessible_name',
  resource_properties : ['tag_name', 'role'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var landmark_elements     = dom_cache.headings_landmarks_cache.landmark_elements;
    var landmark_elements_len = landmark_elements.length;

    var container_elements     = dom_cache.lists_cache.container_elements;
    var container_elements_len = container_elements.length;

    var page_element = dom_cache.headings_landmarks_cache.page_element;

    var i, ci, le, de, cs;


    var navigation_count = 0;

    for (i = 0; i < landmark_elements_len; i++ ) {
      le = landmark_elements[i];
      de = le.dom_element;
      cs = de.computed_style;

      var tag_name = le.dom_element.tag_name;

      if (le.landmark === 'navigation') {
        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
          navigation_count++;
          if (de.has_role) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_1', [tag_name]);
          else rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_2', []);
        }
        else {
         rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [tag_name]);
        }
      }
    }

    if (page_element) {
      // Test if no navigation landmarks
      if (navigation_count === 0) {

        var list_of_links_count = 0;

        var MINIMUM_LINKS = 4;

        for (i = 0; i < container_elements_len; i++) {
          ci = container_elements[i];
          de = ci.dom_element;
          cs = de.computed_style;

          var li_count       = ci.getListItemCount();
          var one_link_count = ci.getListItemCountOneLink();
          var sublist_count  = ci.getSublistCount();

          if (li_count <= (1 + one_link_count + sublist_count)) {
            if (!ci.parent_landmark && (one_link_count > MINIMUM_LINKS)) {
              list_of_links_count += 1;
              rule_result.addResult(TEST_RESULT.FAIL, ci, 'ELEMENT_FAIL_1', [de.tag_name, one_link_count]);
            }
          }
        }

        // Are there any list of links on the page
        if (list_of_links_count > 0) {
          rule_result.addResult(TEST_RESULT.FAIL, page_element, 'WEBSITE_FAIL_1', []);
        }
      }
      else {
        if (navigation_count === 1) rule_result.addResult(TEST_RESULT.PASS, page_element, 'WEBSITE_PASS_1', []);
        else rule_result.addResult(TEST_RESULT.PASS, page_element, 'WEBSITE_PASS_2', [navigation_count]);
      }
    }

  } // end validate function
},

/**
 * @object LANDMARK_4
 *
 * @desc Each page may have one banner landmark
 *
 */

{ rule_id             : 'LANDMARK_4',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.WEBSITE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LANDMARKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '2.4.1',
  wcag_related_ids    : ['1.3.1', '2.4.6'],
  target_resources    : ['header', '[role="banner"]'],
  primary_property    : 'accessible_name',
  resource_properties : ['tag_name', 'role'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var landmark_elements     = dom_cache.headings_landmarks_cache.landmark_elements;
    var landmark_elements_len = landmark_elements.length;

    var page_element = dom_cache.headings_landmarks_cache.page_element;

    var landmark_count = 0;
    var les = [];

    var le, de, cs, tag_name;

    for (var i = 0; i < landmark_elements_len; i++ ) {
      le = landmark_elements[i];
      de = le.dom_element;
      cs = de.computed_style;
      tag_name = de.tag_name;

      if (le.landmark === 'banner') {
        if (cs.is_visible_to_at === VISIBILITY.HIDDEN) {
          if (de.has_role) rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [tag_name]);
          else rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_2', []);
        }
        else {
          landmark_count++;
          les.push(le);
        }
      }
    }

    if (page_element) {
      // Test if no banner landmarks
      if (landmark_count === 0) {
        rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'WEBSITE_MC_1', []);
      }
      else {
        if (landmark_count === 1) {
          rule_result.addResult(TEST_RESULT.PASS, page_element, 'WEBSITE_PASS_1', []);
        }
        else {
          rule_result.addResult(TEST_RESULT.PASS, page_element, 'WEBSITE_PASS_2', [landmark_count]);
        }
        for (i = 0; i < les.length; i++) {
          le = les[i];
          de = le.dom_element;
          if (de.has_role) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_1', [tag_name]);
          else rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_2', []);
        }
      }
    }

  } // end validate function
},

/**
 * @object LANDMARK_5
 *
 * @desc Each page may have only one banner landmark
 *
 */

{ rule_id             : 'LANDMARK_5',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.PAGE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LANDMARKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '2.4.1',
  wcag_related_ids    : ['1.3.1', '2.4.6'],
  target_resources    : ['header', '[role="banner"]'],
  primary_property    : 'accessible_name',
  resource_properties : ['tag_name', 'role', 'accessible_name'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var landmark_elements     = dom_cache.headings_landmarks_cache.landmark_elements;
    var landmark_elements_len = landmark_elements.length;

    var page_element = dom_cache.headings_landmarks_cache.page_element;

    var landmark_count = 0;
    var les = [];

    var le, de, cs, tag_name;

    for (var i = 0; i < landmark_elements_len; i++ ) {
      le = landmark_elements[i];
      de = le.dom_element;
      cs = de.computed_style;
      tag_name = de.tag_name;

      if (le.landmark === 'banner') {
        if (cs.is_visible_to_at === VISIBILITY.HIDDEN) {
          if (de.has_role) rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [tag_name]);
          else rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_2', []);
        }
        else {
          if (!de.body_element) {
            landmark_count++;
            les.push(le);
          }
        }
      }
    }

    if (page_element) {
      if (landmark_count > 1) {
        rule_result.addResult(TEST_RESULT.FAIL, page_element, 'PAGE_FAIL_1', [landmark_count]);
        for (i = 0; i < les.length; i++) {
          le = les[i];
          de = le.dom_element;
          if (de.has_role) rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_1', [tag_name]);
          else rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_2', []);
        }
      }
      else {
        if (landmark_count === 1) {
          rule_result.addResult(TEST_RESULT.PASS, page_element, 'PAGE_PASS_1', []);

          le = les[0];
          de = le.dom_element;
          if (de.has_role) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_1', [tag_name]);
          else rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_2', []);
        }
      }
    }

  } // end validate function
},

/**
 * @object LANDMARK_6
 *
 * @desc Each page may have one contentinfo landmark
 *
 */
{ rule_id             : 'LANDMARK_6',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.WEBSITE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LANDMARKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '2.4.1',
  wcag_related_ids    : ['1.3.1', '2.4.6'],
  target_resources    : ['footer', '[role="contentinfo"]'],
  primary_property    : 'accessible_name',
  resource_properties : ['tag_name', 'role'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var landmark_elements     = dom_cache.headings_landmarks_cache.landmark_elements;
    var landmark_elements_len = landmark_elements.length;

    var page_element = dom_cache.headings_landmarks_cache.page_element;

    var landmark_count = 0;
    var les = [];

    for (var i = 0; i < landmark_elements_len; i++ ) {
      var le = landmark_elements[i];
      var de = le.dom_element;
      var cs = de.computed_style;
      var tag_name = de.tag_name;

      if (le.landmark === 'contentinfo') {
        if (cs.is_visible_to_at === VISIBILITY.HIDDEN) {
          if(de.has_role) rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [tag_name]);
          else rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_2', []);
        }
        else {
          landmark_count++;
          les.push(le);
        }
      }
    }

    if (page_element) {
      // Test if no contentinfo landmarks
      if (landmark_count === 0) {
        rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'WEBSITE_MC_1', []);
      }
      else {
        if (landmark_count === 1) {
          de = les[0].dom_element;
          rule_result.addResult(TEST_RESULT.PASS, page_element, 'WEBSITE_PASS_1', []);
          if (de.has_role) rule_result.addResult(TEST_RESULT.PASS, les[0], 'ELEMENT_PASS_1', [tag_name]);
          else rule_result.addResult(TEST_RESULT.PASS, les[0], 'ELEMENT_PASS_2', []);
        }
        else {
          rule_result.addResult(TEST_RESULT.PASS, page_element, 'WEBSITE_PASS_2', [landmark_count]);
          for (i = 0; i < les.length; i++) {
            le = les[i];
            de = les[i].dom_element;
            if (de.has_role) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_1', [tag_name]);
            else rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_2', []);
          }
        }
      }
    }

  } // end validate function
},

/**
 * @object LANDMARK_7
 *
 * @desc Each page may have only one contentinfo landmark
 *
 */
{ rule_id             : 'LANDMARK_7',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.PAGE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LANDMARKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '2.4.1',
  wcag_related_ids    : ['1.3.1', '2.4.6'],
  target_resources    : ['footer', '[role="contentinfo"]'],
  primary_property    : 'accessible_name',
  resource_properties : ['tag_name', 'role'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var landmark_elements     = dom_cache.headings_landmarks_cache.landmark_elements;
    var landmark_elements_len = landmark_elements.length;

    var page_element = dom_cache.headings_landmarks_cache.page_element;

    var landmark_count = 0;
    var les = [];

    for (var i = 0; i < landmark_elements_len; i++ ) {
      var le = landmark_elements[i];
      var de = le.dom_element;
      var cs = de.computed_style;
      var tag_name = de.tag_name;

      if (le.landmark === 'contentinfo') {
        if (cs.is_visible_to_at === VISIBILITY.HIDDEN) {
          if(de.has_role) rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [tag_name]);
          else rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_2', []);
        }
        else {
          if (!de.body_element) {
            landmark_count++;
            les.push(le);
          }
        }
      }
    }

    if (page_element) {
      // Test if no contentinfo landmarks
      if (landmark_count > 1) {
        rule_result.addResult(TEST_RESULT.FAIL, page_element, 'PAGE_FAIL_1', [landmark_count]);
        for (i = 0; i < les.length; i++) {
          le = les[i];
          de = le.dom_element;
          if (de.has_role) rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_1', [tag_name]);
          else rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_2', []);
        }
      }
      else {
        if (landmark_count === 1) {
          rule_result.addResult(TEST_RESULT.PASS, page_element, 'PAGE_PASS_1', []);

          le = les[0];
          de = le.dom_element;
          if (de.has_role) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_1', [tag_name]);
          else rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_2', []);
        }
      }
    }

  } // end validate function
},

/**
 * @object LANDMARK_8
 *
 * @desc banner landmark must be a top level landmark
 */
{ rule_id             : 'LANDMARK_8',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LANDMARKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
  target_resources    : ['header', '[role="banner"]'],
  primary_property    : 'parent_landmark',
  resource_properties : ['role', 'tag_name', 'accessible_name'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var landmark_elements     = dom_cache.headings_landmarks_cache.landmark_elements;
    var landmark_elements_len = landmark_elements.length;

    for (var i = 0; i < landmark_elements_len; i++ ) {
      var le = landmark_elements[i];
      var de = le.dom_element;
      var cs = de.computed_style;

      if (le.landmark === 'banner') {

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {

          if (de.parent_landmark === null) {
            if (de.has_role) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_1', [de.tag_name]);
            else rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_3', []);
          }
          else {

            var de1 = de.parent_landmark.dom_element;

            if (de1 && (de.body_element !== de1.body_element)) {
              if (de.has_role) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_2', [de.tag_name]);
              else rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_4', []);
            }
            else {
              if (de.has_role) rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_1', [de.tag_name, de.parent_landmark.landmark]);
              else  rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_2', [de.parent_landmark.landmark]);
            }
          }

        }
        else {
          if (de.has_role) rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [de.tag_name]);
          else rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_2', []);
        }
      }
    }
  } // end validate function
},

/**
 * @object LANDMARK_9
 *
 * @desc Banner landmark should only contain only search and navigation landmarks
 */
{ rule_id             : 'LANDMARK_9',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LANDMARKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
  target_resources    : ['header', '[role="banner"]'],
  primary_property    : 'accessible_name',
  resource_properties : ['role', 'tag_name', 'parent_landmark'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    function checkLandmarkChildren(landmark) {

      var cces     = landmark.child_cache_elements;
      var cces_len = cces.length;
      var fail_count = 0;

      for (var i = 0; i < cces_len; i++) {

        var cce = cces[i];
        var de = cce.dom_element;
        var cs = de.computed_style;
        landmark_count++;

        if (!cce.landmark) continue;

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
          if ((cce.landmark === 'navigation') ||
              (cce.landmark === 'region') ||
              (cce.landmark === 'search')||
              (cce.landmark === 'application')) {
            if (de.has_role) rule_result.addResult(TEST_RESULT.PASS, cce, 'ELEMENT_PASS_1', [de.role]);
            else rule_result.addResult(TEST_RESULT.PASS, cce, 'ELEMENT_PASS_1', [de.tag_name]);
            pass_list += ' ' + cce.landmark;
          }
          else {
            if (de.has_role) rule_result.addResult(TEST_RESULT.FAIL, cce, 'ELEMENT_FAIL_1', [de.role]);
            else rule_result.addResult(TEST_RESULT.FAIL, cce, 'ELEMENT_FAIL_1', [de.tag_name]);
            fail_count++;
            fail_list += ' ' + cce.landmark;
          }
          if (cce.landmark) fail_count += checkLandmarkChildren(cce);
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, cce, 'ELEMENT_HIDDEN_1', [de.tag_name]);
        }
      }

      return fail_count;
    }

    var landmark_elements     = dom_cache.headings_landmarks_cache.landmark_elements;
    var landmark_elements_len = landmark_elements.length;
    var fail_count = 0;

    for (var i = 0; i < landmark_elements_len; i++ ) {
      var le = landmark_elements[i];
      var de = le.dom_element;
      var cs = de.computed_style;

      if (le.landmark === 'banner') {

        var fail_list = '';
        var pass_list = '';
        var landmark_count = 0;

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
          fail_count = checkLandmarkChildren(le);

          if (fail_count === 1) rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_2', [fail_list.toUpperCase()]);
          else if (fail_count > 1) rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_3', [fail_count, fail_list.toUpperCase()]);
          else if (landmark_count === 0) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_2', []);
          else if (landmark_count === 1) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_3', [pass_list.toUpperCase()]);
          else rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_4', [landmark_count, pass_list.toUpperCase()]);
        }
        else {
          if (de.has_role) rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [de.tag_name]);
          else rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_2', [de.tag_name]);
        }
      }
    }
  } // end validate function
},

/**
 * @object LANDMARK_10
 *
 * @desc Navigation landmark should only contain only region and search landmarks
 */
{ rule_id             : 'LANDMARK_10',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LANDMARKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
  target_resources    : ['nav', '[role="naviation"]'],
  primary_property    : 'parent_landmark',
  resource_properties : ['role', 'tag_name', 'accessible_name'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    function checkLandmarkChildren(landmark) {

      var cces     = landmark.child_cache_elements;
      var cces_len = cces.length;
      var fail_count = 0;

      for (var i = 0; i < cces_len; i++) {
        var cce = cces[i];
        var de = cce.dom_element;
        var cs = de.computed_style;

        if (!cce.landmark) continue;

        landmark_count++;

//        OpenAjax.a11y.logger.debug("Landmarks: " +  landmark.landmark + " -> " + cce.landmark);

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
          if ((cce.landmark === 'region') ||
              (cce.landmark === 'search')||
              (cce.landmark === 'application')) {
             rule_result.addResult(TEST_RESULT.PASS, cce, 'ELEMENT_PASS_1', [cce.landmark]);
             pass_list += ' ' + cce.landmark;
          }
          else {
            rule_result.addResult(TEST_RESULT.FAIL, cce, 'ELEMENT_FAIL_1', [cce.landmark]);
            fail_count++;
            fail_list += ' ' + cce.landmark;
          }
          fail_count += checkLandmarkChildren(cce);
        }
        else {
          if (de.has_role) rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [de.tag_name]);
          else rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_2', [de.tag_name]);
        }
      }

      return fail_count;
    }


    var landmark_elements     = dom_cache.headings_landmarks_cache.landmark_elements;
    var landmark_elements_len = landmark_elements.length;
    var fail_count = 0;

    for (var i = 0; i < landmark_elements_len; i++ ) {
      var le = landmark_elements[i];
      var de = le.dom_element;
      var cs = de.computed_style;


      if (le.landmark === 'navigation') {

        var fail_list = '';
        var pass_list = '';
        var landmark_count = 0;

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
          fail_count = checkLandmarkChildren(le);

          if (fail_count === 1) rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_2', [fail_list.toUpperCase()]);
          else if (fail_count > 1) rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_3', [fail_count, fail_list.toUpperCase()]);
          else if (landmark_count === 0) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_2', []);
          else if (landmark_count === 1) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_3', [pass_list.toUpperCase()]);
          else rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_4', [landmark_count, pass_list.toUpperCase()]);
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [de.tag_name]);
        }
      }
    }
  } // end validate function
},

/**
 * @object LANDMARK_11
 *
 * @desc Main landmark must be a top level lanmark
 */
{ rule_id             : 'LANDMARK_11',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LANDMARKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
  target_resources    : ['main', '[role="main"]'],
  primary_property    : 'parent_landmark',
  resource_properties : ['role', 'tag_name', 'accessible_name'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var landmark_elements     = dom_cache.headings_landmarks_cache.landmark_elements;
    var landmark_elements_len = landmark_elements.length;

    for (var i = 0; i < landmark_elements_len; i++ ) {
      var le = landmark_elements[i];
      var de = le.dom_element;
      var cs = de.computed_style;

      if (le.landmark === 'main') {
        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {

          if (de.parent_landmark) {
            var de1 = de.parent_landmark.dom_element;

            if (de1 && (de.body_element !== de1.body_element)) {
              if (de.has_role) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_2', [de.tag_name]);
              else rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_4', []);
            }
            else {
              if (de.has_role) rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_1', [de.tag_name, de.parent_landmark.landmark]);
              else rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_2', [de.parent_landmark.landmark]);
            }
          }
          else {
            if (de.has_role) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_1', [de.tag_name]);
            else rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_3', []);
          }
        }
        else {
          if (de.has_role) rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [de.tag_name]);
          else rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_2', []);
        }
      }
    }
  } // end validate function
},

/**
 * @object LANDMARK_12
 *
 * @desc Contentinfo landmark must be a top level landmark
 */
{ rule_id             : 'LANDMARK_12',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LANDMARKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
  target_resources    : ['footer', '[role="contentinfo"]'],
  primary_property    : 'parent_landmark',
  resource_properties : ['role', 'tag_name', 'accessible_name'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var landmark_elements     = dom_cache.headings_landmarks_cache.landmark_elements;
    var landmark_elements_len = landmark_elements.length;

    for (var i = 0; i < landmark_elements_len; i++ ) {
      var le = landmark_elements[i];
      var de = le.dom_element;
      var cs = de.computed_style;

      if (le.landmark === 'contentinfo') {

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {

          if (de.parent_landmark === null) {
            if (de.has_role) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_1', [de.tag_name]);
            else rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_3', []);
          }
          else {

            var de1 = de.parent_landmark.dom_element;

            if (de1 && (de.body_element !== de1.body_element)) {
              if (de.has_role) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_2', [de.tag_name]);
              else rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_4', []);
            }
            else {
              if (de.has_role) rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_1', [de.tag_name, de.parent_landmark.landmark]);
              else  rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_2', [de.parent_landmark.landmark]);
            }
          }

        }
        else {
          if (de.has_role) rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [de.tag_name]);
          else rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_2', []);
        }
      }
    }
  } // end validate function
},

/**
 * @object LANDMARK_13
 *
 * @desc Contentinfo landmark should only contain only search, region and navigation landmarks
 */
{ rule_id             : 'LANDMARK_13',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LANDMARKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
  target_resources    : ['header', '[role="banner"]'],
  primary_property    : 'accessible_name',
  resource_properties : ['role', 'tag_name', 'parent_landmark'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    function checkLandmarkChildren(landmark) {

      var cces     = landmark.child_cache_elements;
      var cces_len = cces.length;
      var fail_count = 0;

      for (var i = 0; i < cces_len; i++) {

        var cce = cces[i];
        var de = cce.dom_element;
        var cs = de.computed_style;
        landmark_count++;

        if (!cce.landmark) continue;

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
          if ((cce.landmark === 'navigation') ||
              (cce.landmark === 'region') ||
              (cce.landmark === 'search') ||
              (cce.landmark === 'application')) {
            if (de.has_role) rule_result.addResult(TEST_RESULT.PASS, cce, 'ELEMENT_PASS_1', [de.role]);
            else rule_result.addResult(TEST_RESULT.PASS, cce, 'ELEMENT_PASS_1', [de.tag_name]);
            pass_list += ' ' + cce.landmark;
          }
          else {
            if (de.has_role) rule_result.addResult(TEST_RESULT.FAIL, cce, 'ELEMENT_FAIL_1', [de.role]);
            else rule_result.addResult(TEST_RESULT.FAIL, cce, 'ELEMENT_FAIL_1', [de.tag_name]);
            fail_count++;
            fail_list += ' ' + cce.landmark;
          }
          if (cce.landmark) fail_count += checkLandmarkChildren(cce);
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, cce, 'ELEMENT_HIDDEN_1', [de.tag_name]);
        }
      }

      return fail_count;
    }

    var landmark_elements     = dom_cache.headings_landmarks_cache.landmark_elements;
    var landmark_elements_len = landmark_elements.length;
    var fail_count = 0;

    for (var i = 0; i < landmark_elements_len; i++ ) {
      var le = landmark_elements[i];
      var de = le.dom_element;
      var cs = de.computed_style;

      if (le.landmark === 'contentinfo') {

        var fail_list = '';
        var pass_list = '';
        var landmark_count = 0;

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
          fail_count = checkLandmarkChildren(le);

          if (fail_count === 1) rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_2', [fail_list.toUpperCase()]);
          else if (fail_count > 1) rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_3', [fail_count, fail_list.toUpperCase()]);
          else if (landmark_count === 0) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_2', []);
          else if (landmark_count === 1) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_3', [pass_list.toUpperCase()]);
          else rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_4', [landmark_count, pass_list.toUpperCase()]);
        }
        else {
          if (de.has_role) rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [de.tag_name]);
          else rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_2', [de.tag_name]);
        }
      }
    }
  } // end validate function
},

/**
 * @object LANDMARK_14
 *
 * @desc Search landmark should only contain only region landmarks
 */
{ rule_id             : 'LANDMARK_14',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LANDMARKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
  target_resources    : ['[role="search"]'],
  primary_property    : 'parent_landmark',
  resource_properties : ['role', 'tag_name', 'accessible_name'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    function checkLandmarkChildren(landmark) {

      var cces     = landmark.child_cache_elements;
      var cces_len = cces.length;
      var fail_count = 0;

      for (var i = 0; i < cces_len; i++) {

        var cce = cces[i];
        var de = cce.dom_element;
        var cs = de.computed_style;

        if (!cce.landmark) continue;

        landmark_count++;

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
          if ((cce.landmark === 'region') ||
              (cce.landmark === 'application')) {
             rule_result.addResult(TEST_RESULT.PASS, cce, 'ELEMENT_PASS_1', [cce.landmark]);

             pass_list += ' ' + cce.landmark;
          }
          else {
            rule_result.addResult(TEST_RESULT.FAIL, cce, 'ELEMENT_FAIL_1', [cce.landmark]);
            fail_count++;
            fail_list += ' ' + cce.landmark;
          }
          fail_count += checkLandmarkChildren(cce);
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, cce, 'ELEMENT_HIDDEN_2', [de.tag_name, de.landmark]);
        }
      }

      return fail_count;
    }


    var landmark_elements     = dom_cache.headings_landmarks_cache.landmark_elements;
    var landmark_elements_len = landmark_elements.length;
    var fail_count = 0;

//    OpenAjax.a11y.logger.debug("  LANDMARK 14 Rule");

    for (var i = 0; i < landmark_elements_len; i++ ) {

      var le = landmark_elements[i];
      var de = le.dom_element;
      var cs = de.computed_style;

      if (le.landmark === 'search') {

        var fail_list = '';
        var pass_list = '';
        var landmark_count = 0;


        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
          fail_count = checkLandmarkChildren(le);

          if (fail_count === 1) rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_2', [fail_list.toUpperCase()]);
          else if (fail_count > 1) rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_3', [fail_count, fail_list.toUpperCase()]);
          else if (landmark_count === 0) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_2', []);
          else if (landmark_count === 1) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_3', [pass_list.toUpperCase()]);
          else rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_4', [landmark_count, pass_list.toUpperCase()]);

        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [de.tag_name]);
        }
      }
    }
  } // end validate function
},

/**
 * @object LANDMARK_15
 *
 * @desc Form landmark should only contain only region landmarks
 */
{ rule_id             : 'LANDMARK_15',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LANDMARKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
  target_resources    : ['[role="form"]'],
  primary_property    : 'parent_landmark',
  resource_properties : ['role', 'tag_name', 'accessible_name'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    function checkLandmarkChildren(landmark) {

      var cces     = landmark.child_cache_elements;
      var cces_len = cces.length;
      var fail_count = 0;

      for (var i = 0; i < cces_len; i++) {

        var cce = cces[i];
        var de = cce.dom_element;
        var cs = de.computed_style;

        if (!cce.landmark) continue;

        landmark_count++;

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
          if ((cce.landmark === 'region') ||
              (cce.landmark === 'application')) {
             rule_result.addResult(TEST_RESULT.PASS, cce, 'ELEMENT_PASS_1', [cce.landmark]);
          }
          else {
            rule_result.addResult(TEST_RESULT.FAIL, cce, 'ELEMENT_FAIL_1', [cce.landmark]);
            fail_count++;
          }
          fail_count += checkLandmarkChildren(cce);
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, cce, 'ELEMENT_HIDDEN_3', [cce.dom_element.tag_name, cce.landmark]);
        }
      }

      return fail_count;
    }


    var landmark_elements     = dom_cache.headings_landmarks_cache.landmark_elements;
    var landmark_elements_len = landmark_elements.length;
    var fail_count = 0;

    for (var i = 0; i < landmark_elements_len; i++ ) {

      var le = landmark_elements[i];
      var de = le.dom_element;
      var cs = de.computed_style;

      if (le.landmark === 'form') {

        var landmark_count = 0;

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
          fail_count = checkLandmarkChildren(le);

//          OpenAjax.a11y.logger.debug("  Search: " + fail_count);

          if (fail_count > 0) rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_2', []);
          else if (landmark_count === 0) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_2', []);
          else if (landmark_count === 1) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_3', []);
          else rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_4', [landmark_count]);
        }
        else {
          if (de.has_role) rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [de.tag_name]);
          else rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_2', []);
        }
      }
    }
  } // end validate function
},

/**
 * @object LANDMARK_16
 *
 * @desc Elements with the role=region must have accessible name to be considered a landmark
 */
{ rule_id             : 'LANDMARK_16',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LANDMARKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
  target_resources    : ['[role="region"]'],
  primary_property    : 'computed_label',
  resource_properties : ['tag_name', 'role', 'computed_label_source', 'aria-label', 'aria-labelledby', 'title'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var landmark_elements     = dom_cache.headings_landmarks_cache.landmark_elements;
    var landmark_elements_len = landmark_elements.length;

    for (var i = 0; i < landmark_elements_len; i++ ) {

      var le = landmark_elements[i];
      var de = le.dom_element;
      var cs = de.computed_style;

      if (le.landmark === 'region') {

//        OpenAjax.a11y.logger.debug("  Region: " + fail_count);

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {

          if ((le.computed_label_source !== OpenAjax.a11y.SOURCE.NONE) &&
              (le.computed_label.length > 0)) {
            if (de.has_role) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_1', [ de.tag_name]);
            else rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_2', []);
          }
          else {
            if (de.has_role) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_1', [de.tag_name]);
            else rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_2', []);
          }
        }
        else {
          if (de.has_role) rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [de.tag_name]);
          else rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_2', []);
        }
      }
    }

    var section_elements     = dom_cache.headings_landmarks_cache.all_section_elements;
    var section_elements_len = section_elements.length;

    for (i = 0; i < section_elements_len; i++ ) {

      le = section_elements[i];
      de = le.dom_element;
      cs = de.computed_style;

//       OpenAjax.a11y.logger.debug("TAG NAME: " + de.tag_name);

      if (de.tag_name === 'section' &&
          !de.has_role &&
          !de.has_aria_labelledby &&
          !de.has_aria_label &&
          !de.has_title) {
        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_2', []);
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_2', []);
        }
      }
    }

  } // end validate function
},

/**
 * @object LANDMARK_17
 *
 * @desc Landmark must have unique labels
 */

{ rule_id             : 'LANDMARK_17',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LANDMARKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
  target_resources    : ['main', 'nav', 'header', 'footer', 'section', 'aside', '[role="application"]','[role="banner"]', '[role="complementary"]','[role="contentinfo"]','[role="form"]','[role="main"]','[role="navigation"]','[role="region"]','[role="search"]'],
  primary_property    : 'computed_label',
  resource_properties : ['tag_name', 'role', 'computed_label_source', 'aria-label', 'aria-labelledby', 'title'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var landmark_elements     = dom_cache.headings_landmarks_cache.landmark_elements;
    var landmark_elements_len = landmark_elements.length;

    var i;
    var les   = [];

    for (i = 0; i < landmark_elements_len; i++ ) {

      var le = landmark_elements[i];
      var de = le.dom_element;
      var cs = de.computed_style;

      if (cs.is_visible_to_at === VISIBILITY.VISIBLE) les.push(le);
      else rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [de.tag_name, de.landmark]);

    } // end loop

    // sort labels

    les = dom_cache.sortArrayOfObjects(les,'computed_label_for_comparison', true);

    for (i = 0; i < les.length; i++) {

      le = les[i];

      if (le.duplicate) rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_1', [le.computed_label, le.landmark]);
      else rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_1', [le.landmark]);

    }

  } // end validate function
},

{ rule_id             : 'LANDMARK_18',
  last_updated        : '2015-08-07',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LANDMARKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
  target_resources    : ['main', 'nav', 'header', 'footer', 'section', 'aside', '[role="application"]','[role="banner"]', '[role="complementary"]','[role="contentinfo"]','[role="form"]','[role="main"]','[role="navigation"]','[role="region"]','[role="search"]'],
  primary_property    : 'computed_label',
  resource_properties : ['tag_name', 'role', 'computed_label_source', 'aria-label', 'aria-labelledby', 'title'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var landmark_elements     = dom_cache.headings_landmarks_cache.landmark_elements;
    var landmark_elements_len = landmark_elements.length;

    for (var i = 0; i < landmark_elements_len; i++ ) {
      var le = landmark_elements[i];
      var de = le.dom_element;
      if (de.computed_style.is_visible_to_at === VISIBILITY.HIDDEN) {
        rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [le.landmark]);
      }
      else {
        rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_1', [le.landmark, le.computed_label]);
      }
    }
  } // end validate function
},

/**
 * @object LANDMARK_19
 *
 * @desc Complementary landmark must be a top level landmark
 */
{ rule_id             : 'LANDMARK_19',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LANDMARKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1', '2.4.6', '2.4.10'],
  target_resources    : ['aside', '[role="complementary"]'],
  primary_property    : 'parent_landmark',
  resource_properties : ['role', 'tag_name', 'accessible_name'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var landmark_elements     = dom_cache.headings_landmarks_cache.landmark_elements;
    var landmark_elements_len = landmark_elements.length;

    for (var i = 0; i < landmark_elements_len; i++ ) {
      var le = landmark_elements[i];
      var de = le.dom_element;
      var cs = de.computed_style;

      if (le.landmark === 'complementary') {

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {

          if (!de.parent_landmark) {
            if (de.has_role) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_1', [de.tag_name]);
            else rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_3', []);
          }
          else {
            var de1 = de.parent_landmark.dom_element;

            if (de1 && (de.body_element !== de1.body_element)) {
              if (de.has_role) rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_2', [de.tag_name]);
              else rule_result.addResult(TEST_RESULT.PASS, le, 'ELEMENT_PASS_4', []);
            }
            else {
              if (de.has_role) rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_1', [de.tag_name, de.parent_landmark.landmark]);
              else rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_2', [de.parent_landmark.landmark]);
            }
          }
        }
        else {
          if (de.has_role) rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [de.tag_name]);
          else rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_2', []);
        }
      }
    }
  } // end validate function
}

]);
/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*  OpenAjax Alliance Control Rules                                 */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

/**
 * @object LANGUAGE_1
 *
 * @desc HTML element must have a lang attribute
 */

{ rule_id             : 'LANGUAGE_1',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.PAGE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '3.1.1',
  wcag_related_ids    : [],
  target_resources    : ['html'],
  primary_property    : 'lang',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT    = OpenAjax.a11y.TEST_RESULT;

//    OpenAjax.a11y.logger.debug( "Language Codes: " + typeof OpenAjax.a11y.LANGUAGE_CODES);

    var page_element = dom_cache.headings_landmarks_cache.page_element;

    if (page_element) {
       if (dom_cache.lang && dom_cache.lang.length) {
         if (OpenAjax.a11y.util.validLanguageCode(dom_cache.lang)) {
           rule_result.addResult(TEST_RESULT.PASS, page_element, 'PAGE_PASS_1', [dom_cache.lang]);
         }
         else {
           rule_result.addResult(TEST_RESULT.FAIL, page_element, 'PAGE_FAIL_2', [dom_cache.lang]);
         }
       }
       else {
         rule_result.addResult(TEST_RESULT.FAIL, page_element, 'PAGE_FAIL_1', []);
       }
    }


  } // end validation function
},

/**
 * @object LANGUAGE_2
 *
 * @desc Identify the elements on the page where the text content is different language from the primary content
 */

{ rule_id             : 'LANGUAGE_2',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.PAGE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '3.1.2',
  wcag_related_ids    : ['3.1.1'],
  target_resources    : ['[lang]'],
  primary_property    : 'lang',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT    = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY     = OpenAjax.a11y.VISIBILITY;

    var dom_elements     = dom_cache.languages_cache.dom_elements;
    var dom_elements_len = dom_elements.length;

//
//    OpenAjax.a11y.logger.debug("[Language Rule 2]  Language 2: " + dom_elements_len);
    var fail_count = 0;
    var pass_count = 0;

    for (var i = 0; i < dom_elements_len; i++) {
      var de = dom_elements[i];

      if (de.computed_style.is_visible_to_at === VISIBILITY.VISIBLE ) {

         if (OpenAjax.a11y.util.validLanguageCode(de.lang)) {
           rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.tag_name, de.lang]);
           pass_count++;
         }
         else {
           rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.tag_name, de.lang]);
           fail_count++;
         }

      }
      else {
        rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tag_name, de.lang]);
      }
    }

    var page_element = dom_cache.headings_landmarks_cache.page_element;

    if (page_element) {
      if (fail_count === 1) rule_result.addResult(TEST_RESULT.FAIL, page_element, 'PAGE_FAIL_1', []);
      else if (fail_count > 1) rule_result.addResult(TEST_RESULT.FAIL, page_element, 'PAGE_FAIL_2', [fail_count]);
      else if (pass_count === 1) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'PAGE_MC_1', []);
      else if (pass_count > 1) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'PAGE_MC_2', [pass_count]);
      else rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'PAGE_MC_3', []);
    }

  } // end validation function
}
]);




/**
 * Copyright 2011-2017  OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*      OpenAjax Alliance Table Rules                               */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

/**

   **
 * @object LAYOUT_1
 *
 * @desc     Make sure content is in a meaningful sequence
 *           tables used for layout must be checked for
 *           maintaining meanful sequence
 */
{ rule_id             : 'LAYOUT_1',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.PAGE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.TABLES,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.2',
  wcag_related_ids    : ['1.3.1'],
  target_resources    : ['Page', 'table'],
  primary_property    : 'is_data_table',
  resource_properties : ['max_column', 'max_row', 'nesting_level'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

     function getNestingLevel(table_element, level) {

       var l = level;
       var pte = table_element.parent_table_element;

       if (pte) {
         if ((pte.table_role === OpenAjax.a11y.TABLE_ROLE.DATA) || pte.max_column == 1) {
           l = getNestingLevel(pte, level);
         }
         else {
           l = getNestingLevel(pte, (level+1));
         }
       }
       return l;
     }

     var TEST_RESULT   = OpenAjax.a11y.TEST_RESULT;
     var VISIBILITY    = OpenAjax.a11y.VISIBILITY;

     var table_elements     = dom_cache.tables_cache.table_elements;
     var table_elements_len = table_elements.length;

     var page_element = dom_cache.headings_landmarks_cache.page_element;
     var layout_pass = 0;
     var layout_mc   = 0;

     // Check to see if valid cache reference
     if (table_elements && table_elements_len) {

       for (var i = 0; i < table_elements_len; i++) {

         var te = table_elements[i];
         var de = te.dom_element;
         var cs = de.computed_style;

         if (te.table_role === OpenAjax.a11y.TABLE_ROLE.LAYOUT) {

           if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {

             var nesting_level = getNestingLevel(te, 0);

             te.nesting_level = nesting_level;

             if (te.max_column === 1)  {
               rule_result.addResult(TEST_RESULT.PASS, te, 'ELEMENT_PASS_1', []);
               layout_pass++;
             }
             else {

               if (nesting_level === 0) {
                 rule_result.addResult(TEST_RESULT.MANUAL_CHECK, te, 'ELEMENT_MC_2', [te.max_row, te.max_column]);
                 layout_mc++;
               }
               else {
                 rule_result.addResult(TEST_RESULT.MANUAL_CHECK, te, 'ELEMENT_MC_3', [te.nesting_level]);
                 layout_mc++;
               }
             }
           }
           else {
             rule_result.addResult(TEST_RESULT.HIDDEN, te, 'ELEMENT_HIDDEN_1', []);
           }
         }
       } // end loop
     }

     if (layout_mc) {
       rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'PAGE_MC_1', []);
     }
     else {
       if (layout_pass) {
         rule_result.addResult(TEST_RESULT.PASS, page_element, 'PAGE_PASS_1', []);
       }
     }

   }  // end validation function
 },

/**
 * @object LAYOUT_2
 *
 * @desc     Do not use nested tables more than 1 column wide for positioning content
 *           Fails with one or more one levels of nesting.
 */
{ rule_id             : 'LAYOUT_2',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.2',
  wcag_related_ids    : [],
  target_resources    : ['table'],
  primary_property    : 'nesting_level',
  resource_properties : ['is_data_table', 'max_column', 'max_row'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

     var TEST_RESULT   = OpenAjax.a11y.TEST_RESULT;
     var VISIBILITY    = OpenAjax.a11y.VISIBILITY;

     var i;
     var te;

     var table_elements     = dom_cache.tables_cache.table_elements;
     var table_elements_len = table_elements.length;


     // Check to see if valid cache reference
     if (table_elements && table_elements_len) {

       for (i=0; i < table_elements_len; i++) {

         te = table_elements[i];

         if (te.table_role === OpenAjax.a11y.TABLE_ROLE.LAYOUT) {

           if (te.dom_element.computed_style.is_visible_to_at == VISIBILITY.VISIBLE) {

             if (te.max_column > 1) {

               if (te.nesting_level > 0) rule_result.addResult(TEST_RESULT.FAIL, te, 'ELEMENT_FAIL_1', [te.max_row, te.max_column, te.nesting_level]);
               else rule_result.addResult(TEST_RESULT.PASS, te, 'ELEMENT_PASS_1', []);
             }
             else {
               rule_result.addResult(TEST_RESULT.PASS, te, 'ELEMENT_PASS_2', []);
             }
           }
           else {
             rule_result.addResult(TEST_RESULT.HIDDEN, te, 'ELEMENT_HIDDEN_1', []);
           }
         }
       } // end loop
     }
  } // end validation function
},

/**
 * @object LAYOUT_3
 *
 * @desc     Check to see if aria-flowto property ordering makes sense to AT users.
 */
{ rule_id             : 'LAYOUT_3',
  last_updated        : '2017-01-17',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.2',
  wcag_related_ids    : [],
  target_resources    : ['[aria_flowto]'],
  primary_property    : 'aria_flowto',
  resource_properties : ['aria_flowto'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var dom_elements     = dom_cache.element_cache.dom_elements;
    var dom_elements_len = dom_elements.length;

    for (var i = 0; i < dom_elements_len; i++ ) {

      var de =dom_elements[i];

      if (de.type != Node.ELEMENT_NODE) continue;

//      OpenAjax.a11y.logger.debug('[RULE][LAYOUT 3]: ' + de.tag_name + ' (' + de.has_aria_flowto + ')');

      if (de.has_aria_flowto) {
        if (de.computed_style.is_visible_to_at === VISIBILITY.HIDDEN) {
          rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tag_name]);
        }
        else {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.tag_name]);
        }
      }
    }
  } // end validation function
}
]);
/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*            OpenAjax Alliance Link Rules                          */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

/**
 * @object LINK_1
 *
 * @desc Link should describe the target of a link
 */

{ rule_id             : 'LINK_1',
  last_updated        : '2012-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LINKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '2.4.4',
  wcag_related_ids    : ['2.4.9'],
  target_resources    : ['a', 'area', '[role=link]'],
  primary_property    : 'accessible_name',
  resource_properties : ['accessible_name_source', 'href', 'accessible_description'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var link_elements     = dom_cache.links_cache.link_elements;
    var link_elements_len = link_elements.length;

    var visible_link_elements = [];

    for (var i = 0; i < link_elements_len; i++) {

      var le = link_elements[i];
      var tag_name = le.dom_element.tag_name;

      if (le.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE &&
          le.is_link) {
        visible_link_elements.push(le);
      }
      else {
        rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [tag_name]);
      }

    }

    var visible_link_elements_len = visible_link_elements.length;

    for (i = 0; i < visible_link_elements_len; i++) {

      le = visible_link_elements[i];

      var name        = le.accessible_name_for_comparison;
      var description = le.accessible_description_for_comparison;
      tag_name        = le.dom_element.tag_name;

      if (name.length) {
        if (description.length) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_2', [tag_name, name, description]);
        else rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_1', [tag_name, name]);
      }
      else {
        rule_result.addResult(TEST_RESULT.FAIL, le, 'ELEMENT_FAIL_1', [tag_name]);
      }

    }  // end loop


  } // end valifdation function
},

/**
 * @object LINK_2
 *
 * @desc Links with the different HREFs should have the unique accessible names
 */

{ rule_id             : 'LINK_2',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LINKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '2.4.4',
  wcag_related_ids    : ['2.4.9'],

  target_resources    : ['a', 'area', '[role=link]'],
  primary_property    : 'href',
  resource_properties : ['accessible_name', 'accessible_description', 'accessible_name_source'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    function updateResults(links, test_result, message) {

      for (var i = 0; i < links.length; i++) {

        var le = links[i];
        var links_len = links[i].length;

//        OpenAjax.a11y.logger.debug("  Update Item: " + i + " of " + end + " le: " + le.toString());

        var tag_name  = le.dom_element.tag_name;

        rule_result.addResult(test_result, le,  message, [tag_name, links_len]);
      }

    }

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

    var same_names     = dom_cache.links_cache.getLinksThatShareTheSameName();
    var same_names_len = same_names.length;

    for (var i = 0; i < same_names_len; i++) {

      var same_name = same_names[i];

      if (same_name.same_hrefs) {
        updateResults(same_name.links, TEST_RESULT.PASS, 'ELEMENT_PASS_1');
      } else {
        if (same_name.unique_descriptions) {
          updateResults(same_name.links, TEST_RESULT.PASS, 'ELEMENT_PASS_2');
        } else {
          updateResults(same_name.links, TEST_RESULT.FAIL, 'ELEMENT_FAIL_1');
        }
      }
    }  // end loop

  } // end validate function
 }


]);




/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*            OpenAjax Alliance List Rules                          */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

/**
 * @object LIST_1
 *
 * @desc Verify list elements are used semantically
*/

{ rule_id             : 'LIST_1',
  last_updated        : '2015-08-14',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.PAGE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : [],
  target_resources    : ['ul', 'ol', 'li', 'dl', 'dt', 'dd', '[role="list"]', '[role="listitem"]', '[role="group"]'],
  primary_property    : 'tag_name',
  resource_properties : ['accessible_name'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

      var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
      var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

      var page_element = dom_cache.keyboard_focus_cache.page_element;

      var list_elements     = dom_cache.lists_cache.list_elements;
      var list_elements_len = list_elements.length; // loop control

      for (var i = 0; i < list_elements_len; i++) {
        var le = list_elements[i];
        var de = le.dom_element;
        var cs = de.computed_style;

        var tag_name = de.tag_name;
        if (de.has_role) tag_name += '[role=' + de.role + ']';

        if (cs.is_visible_to_at  === VISIBILITY.VISIBLE) {
          if (le.list_type === OpenAjax.a11y.LIST.CONTAINER) {
            rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_1', [tag_name]);
          }
          else  {
            rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_2', [tag_name]);
          }
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [tag_name]);
        }

      } // end loop

      if (list_elements_len > 0) {
        rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'PAGE_MC_1', [list_elements_len]);
      }

    } // end validate function
  },
/**
 * @object LIST_2
 *
 * @desc Verify list benefits from an accessible name
*/

{ rule_id             : 'LIST_2',
  last_updated        : '2015-08-14',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '2.4.6',
  wcag_related_ids    : ['1.3.1'],
  target_resources    : ['ul', 'ol', '[role="list"]', '[role="group"]'],
  primary_property    : 'accessible_name',
  resource_properties : ['tag_name', 'role', 'computed_label_source'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

      var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
      var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

      var container_elements     = dom_cache.lists_cache.container_elements;
      var container_elements_len = container_elements.length; // loop control

      for (var i = 0; i < container_elements_len; i++) {
        var le = container_elements[i];
        var de = le.dom_element;
        var cs = de.computed_style;

        var tag_name = de.tag_name;
        if (de.has_role) tag_name += '[role=' + de.role + ']';

        if (cs.is_visible_to_at  === VISIBILITY.VISIBLE) {
          if (le.accessible_name.length) {
            rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_1', [le.accessible_name]);
          }
          else {
            rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_2', [tag_name]);
          }
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, le, 'ELEMENT_HIDDEN_1', [tag_name]);
        }

      } // end loop
    } // end validate function
  }
]);

/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*  OpenAjax Alliance Control Rules                                 */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

/**
 * @object NAVIGATION_1
 *
 * @desc Page has at least two of the following resources: table of contents, site map,
 *       search, navigation links, sand trail
 */

{ rule_id             : 'NAVIGATION_1',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.WEBSITE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.SITE_NAVIGATION,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '2.4.5',
  wcag_related_ids    : [],
  target_resources    : ['Website', 'role=\'search\'', 'role=\'navigation\''],
  primary_property    : 'role',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var landmark_elements     = dom_cache.headings_landmarks_cache.landmark_elements;
    var landmark_elements_len = landmark_elements.length;

    var page_element = dom_cache.headings_landmarks_cache.page_element;

    var navigation_count = 0;
    var search_count     = 0;

    for (var i = 0; i < landmark_elements_len; i++ ) {
      var le = landmark_elements[i];

      if (le.role === 'navigation') {
        if (le.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_1', []);
          navigation_count++;
        }
      }

      if (le.role === 'search') {
        if (le.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_2', []);
          search_count++;
        }
      }

    }

    if (page_element) {
      if ((navigation_count > 0) && (search_count > 0)) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'WEBSITE_MC_1', []);
      else rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'WEBSITE_MC_2', []);
    }


  } // end validation function
},

/**
 * @object NAVIGATION_2
 *
 * @desc  Landmarks are in the same relative order when used to identify sections of web pages within the same website
 *
 */

{ rule_id             : 'NAVIGATION_2',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.WEBSITE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.SITE_NAVIGATION,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '3.2.3',
  wcag_related_ids    : ['3.2.4'],
  target_resources    : ['Website', 'role=\'main\'', 'role=\'navigation\'', 'role=\'banner\'', 'role=\'contentinfo\'','role=\'search\''],
  primary_property    : 'role',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var landmark_elements     = dom_cache.headings_landmarks_cache.landmark_elements;
    var landmark_elements_len = landmark_elements.length;

    var page_element = dom_cache.headings_landmarks_cache.page_element;

    var main_count          = 0;
    var navigation_count    = 0;
    var banner_count        = 0;
    var contentinfo_count   = 0;
    var search_count        = 0;
    var complementary_count = 0;

    var landmark_count    = 0;

    var les = [];

    for (var i = 0; i < landmark_elements_len; i++ ) {
      var le = landmark_elements[i];

      if (le.role === 'main') {
        if (le.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_1', []);

          if (main_count === 0) les.push('main');

          main_count += 1;
          landmark_count += 1;
        }
      }

      if (le.role === 'navigation') {
        if (le.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_2', []);

          if (navigation_count === 0) les.push('navigation');

          navigation_count += 1;
          landmark_count += 1;
        }
      }

      if (le.role === 'banner') {
        if (le.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_3', []);

          if (banner_count === 0) les.push('banner');

          banner_count += 1;
          landmark_count += 1;
        }
      }

      if (le.role === 'contentinfo') {
        if (le.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_4', []);

          if (contentinfo_count === 0) les.push('contentinfo');

          contentinfo_count += 1;
          landmark_count += 1;
        }
      }

      if (le.role === 'search') {
        if (le.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_5', []);

          if (search_count === 0) les.push('search');

          search_count += 1;
          landmark_count += 1;
        }
      }

      if (le.role === 'complementary') {
        if (le.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_6', []);

          if (complementary_count === 0) les.push('complementary');

          complementary_count += 1;
          landmark_count += 1;
        }
      }


    }

    if (page_element) {
      if (landmark_count > 0) {

        var last = les.length - 1;
        var landmark_list = les[0];

        for (i = 1; i < les.length; i++) {
          if (i === last) landmark_list += " and " + les[i];
          else landmark_list += ", " + les[i];
        }
        rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'WEBSITE_MC_1', [landmark_list]);
      }
    }
  } // end validation function
},

/**
 * @object NAVIGATION_3
 *
 * @desc  h2 elements are in the same relative order when used to identify sections of web pages within the same website
 *
 */

{ rule_id             : 'NAVIGATION_3',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.WEBSITE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.SITE_NAVIGATION,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '3.2.3',
  wcag_related_ids    : ['3.2.4'],
  target_resources    : ['Website', 'h2'],
  primary_property    : 'role',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var heading_elements     = dom_cache.headings_landmarks_cache.heading_elements;
    var heading_elements_len = heading_elements.length;

    var page_element = dom_cache.headings_landmarks_cache.page_element;

    var heading_count = 0;

    for (var i = 0; i < heading_elements_len; i++ ) {
      var he = heading_elements[i];

      if ((he.level === 1) &&
         (he.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE)) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, he, 'ELEMENT_MC_1', []);
          heading_count += 1;
      }

      if ((he.level === 2) &&
         (he.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE)) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, he, 'ELEMENT_MC_2', []);
          heading_count += 1;
      }
    }

    if (page_element) {
       if (heading_count) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'WEBSITE_MC_1', []);
       else rule_result.addResult(TEST_RESULT.FAIL, page_element, 'WEBSITE_FAIL_1', []);
    }


  } // end validation function
},

/**
 * @object NAVIGATION_4
 *
 * @desc  landmarks identifying the same sections in a website have the same accessible name
 *
 */

{ rule_id             : 'NAVIGATION_4',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.WEBSITE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.SITE_NAVIGATION,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '3.2.4',
  wcag_related_ids    : ['3.2.3'],
  target_resources    : ['Website', 'role=\'search\'', 'role=\'navigation\'', 'role=\'main\'', 'role=\'banner\'', 'role=\'contentinfo\'', 'h2'],
  primary_property    : 'role',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var landmark_elements     = dom_cache.headings_landmarks_cache.landmark_elements;
    var landmark_elements_len = landmark_elements.length;

    var page_element = dom_cache.headings_landmarks_cache.page_element;

    var landmark_count = 0;

    for (var i = 0; i < landmark_elements_len; i++ ) {
      var le = landmark_elements[i];

      if (le.role === 'main') {
        if (le.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_1', []);
          landmark_count += 1;
        }
      }

      if (le.role === 'navigation') {
        if (le.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_2', []);
          landmark_count += 1;
        }
      }

      if (le.role === 'search') {
        if (le.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_3', []);
          landmark_count += 1;
        }
      }

      if (le.role === 'banner') {
        if (le.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_4', []);
          landmark_count += 1;
        }
      }

      if (le.role === 'contentinfo') {
        if (le.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_5', []);
          landmark_count += 1;
        }
      }

      if (le.role === 'complementary') {
        if (le.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, le, 'ELEMENT_MC_6', []);
          landmark_count += 1;
        }
      }

    }

    if (page_element  && landmark_count) {
      rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'WEBSITE_MC_1', []);
    }


  } // end validation function
},

/**
 * @object NAVIGATION_5
 *
 * @desc  h2 elements used to identify sections of web pages within the same accessible name
 *
 */

{ rule_id             : 'NAVIGATION_5',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.WEBSITE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.SITE_NAVIGATION,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '3.2.4',
  wcag_related_ids    : ['3.2.3'],
  target_resources    : ['Website', 'h2'],
  primary_property    : 'role',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var heading_elements     = dom_cache.headings_landmarks_cache.heading_elements;
    var heading_elements_len = heading_elements.length;

    var page_element = dom_cache.headings_landmarks_cache.page_element;

    var heading_count = 0;

    for (var i = 0; i < heading_elements_len; i++ ) {
      var he = heading_elements[i];

      if ((he.level === 1) &&
         (he.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE)) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, he, 'ELEMENT_MC_1', []);
          heading_count += 1;
      }

      if ((he.level === 2) &&
         (he.dom_element.computed_style.is_visible_to_at === VISIBILITY.VISIBLE)) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, he, 'ELEMENT_MC_2', []);
          heading_count += 1;
      }
    }

    if (page_element) {
       if (heading_count) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'WEBSITE_MC_1', []);
       else rule_result.addResult(TEST_RESULT.FAIL, page_element, 'WEBSITE_FAIL_1', []);
    }

  } // end validation function
}

]);




/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*            OpenAjax Alliance Media Rules                         */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

  /**
   * @object ORDER_1
   *
   * @desc Reading order is meaningful when content is positioned using CSS
   */

{ rule_id             : 'ORDER_1',
  last_updated        : '2015-08-15',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.PAGE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.2',
  wcag_related_ids    : [],
  target_resources    : [],
  primary_property    : 'position',
  resource_properties : ['display', 'height', 'width', 'area'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var dom_elements     = dom_cache.element_cache.dom_elements;
    var dom_elements_len = dom_elements.length;

    for (var i = 0; i < dom_elements_len; i++) {

      var de = dom_elements[i];
      var cs = de.computed_style;

      if (cs.position === 'absolute' || cs.position === 'relative' || cs.position === 'fixed') {

        if (cs.is_visible_to_at  === VISIBILITY.VISIBLE) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.tag_name, cs.position]);
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tag_name, cs.position]);
        }

      }

    }

  } // end validate function
}


]);
/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*            OpenAjax Alliance Media Rules                         */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

/**
 * @object RESIZE_1
 *
 * @desc Timing adjustable for pages with interactive elements
 */

{ rule_id             : 'RESIZE_1',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP3,
  wcag_primary_id     : '1.4.4',
  wcag_related_ids    : [],
  target_resources    : [],
  primary_property    : '',
  resource_properties : [],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

    var page_element = dom_cache.timing_cache.page_element;

//    OpenAjax.a11y.logger.debug("  [Resize 1][page_element][dom_element]: " + page_element.dom_element);

    if (page_element) {
      rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'PAGE_MC_1', []);
    }

  } // end validate function
}

]);
/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*            OpenAjax Alliance Media Rules                         */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

/**
 * @object ROLE_1
 *
 * @desc main element may only have roles 'main' or 'presentation'
 */

{ rule_id             : 'ROLE_1',
  last_updated        : '2015-05-14',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1','2.4.6', '4.1.1', '4.1.2'],
  target_resources    : ['main'],
  primary_property    : 'role',
  resource_properties : [],
  language_dependency : '',
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT    = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY     = OpenAjax.a11y.VISIBILITY;

    var dom_elements     = dom_cache.element_cache.dom_elements;
    var dom_elements_len = dom_elements.length;

    for (var i = 0; i < dom_elements_len; i++) {
      var de = dom_elements[i];

      if (de.tag_name === 'main') {

        if (de.computed_style.is_visible_to_at === VISIBILITY.VISIBLE ) {

           if (de.role && de.role.length > 0) {
             if (de.role.indexOf('presentation') >= 0) {
               rule_result.addResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
             }
             else {
               if (de.role.indexOf('main') < 0) {
//                 OpenAjax.a11y.logger.debug("FAIL 1: " + de.role );
                 rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.role]);
               }
             }
           }
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', []);
        }
      }
    }

  } // end validate function
},

/**
 * @object ROLE_2
 *
 * @desc body element role restrictions
 */

{ rule_id             : 'ROLE_2',
  last_updated        : '2015-05-14',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1','2.4.6', '4.1.1', '4.1.2'],
  target_resources    : ['body'],
  primary_property    : 'role',
  resource_properties : [],
  language_dependency : '',
  validate          : function (dom_cache, rule_result) {


    var TEST_RESULT    = OpenAjax.a11y.TEST_RESULT;

    var section_elements     = dom_cache.headings_landmarks_cache.getListOfSectionElements();
    var section_elements_len = section_elements.length;

//   OpenAjax.a11y.logger.debug("Section Elements: " + section_elements_len );

    for (var i = 0; i < section_elements_len; i++) {
      var se = section_elements[i];
      var de = se.dom_element;

//      OpenAjax.a11y.logger.debug("ROLE 2: " + de.tag_name + "[" + de.has_role + "]");

      if (de.has_role && de.tag_name === 'body') {

        var role = de.role;

        if ((role !== 'application') && (role !== 'document')) {
          rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [role]);
        }
      }
    }
  } // end validate function
},

/**
 * @object ROLE_3
 *
 * @desc List container element role restrictions
 */

{ rule_id             : 'ROLE_3',
  last_updated        : '2015-05-04',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['4.1.1'],
  target_resources    : ['ul', 'ol'],
  primary_property    : 'role',
  resource_properties : [],
  language_dependency : '',
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT    = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY     = OpenAjax.a11y.VISIBILITY;

    var dom_elements     = dom_cache.element_cache.dom_elements;
    var dom_elements_len = dom_elements.length;

    for (var i = 0; i < dom_elements_len; i++) {
      var de = dom_elements[i];
      var cs = de.computed_style;

      if ((de.tag_name === 'ul' || de.tag_name === 'ol') && de.has_role) {

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE ) {

          if (de.role && de.role.length > 0) {
            if (de.role.indexOf('presentation') >= 0) {
              rule_result.addResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.tag_name]);
            }
            else {
              if ('directory group listbox menu menubar presentation radiogroup tablist toolbar tree '.indexOf(de.role + ' ') < 0) {
                rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.tag_name, de.role]);
              }
            }
          }
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tag_name]);
        }
      }
    }

  } // end validate function
},

/**
 * @object ROLE_4
 *
 * @desc article element role restrictions
 */

{ rule_id             : 'ROLE_4',
  last_updated        : '2015-05-14',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1','2.4.6', '4.1.1', '4.1.2'],
  target_resources    : ['article'],
  primary_property    : 'role',
  resource_properties : [],
  language_dependency : '',
  validate          : function (dom_cache, rule_result) {


    var TEST_RESULT    = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY     = OpenAjax.a11y.VISIBILITY;

    var section_elements     = dom_cache.headings_landmarks_cache.getListOfSectionElements();
    var section_elements_len = section_elements.length;

//   OpenAjax.a11y.logger.debug("Section Elements: " + section_elements_len );

    for (var i = 0; i < section_elements_len; i++) {
      var se = section_elements[i];
      var de = se.dom_element;

//      OpenAjax.a11y.logger.debug("ROLE 4: " + de.tag_name + "[" + de.has_role + "]");

      if (de.tag_name === 'article' && de.has_role) {

        var role = de.role;
        var cs   = de.computed_style;

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
          if ('application article document main region '.indexOf(role + ' ') < 0) {
            rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [role]);
          }
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [role]);
        }
      }
    }
  } // end validate function
},

/**
 * @object ROLE_5
 *
 * @desc section element role restrictions
 */

{ rule_id             : 'ROLE_5',
  last_updated        : '2015-05-14',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1','2.4.6', '4.1.1', '4.1.2'],
  target_resources    : ['section'],
  primary_property    : 'role',
  resource_properties : [],
  language_dependency : '',
  validate          : function (dom_cache, rule_result) {


    var TEST_RESULT    = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY     = OpenAjax.a11y.VISIBILITY;

    var section_elements     = dom_cache.headings_landmarks_cache.getListOfSectionElements();
    var section_elements_len = section_elements.length;

    for (var i = 0; i < section_elements_len; i++) {
      var se = section_elements[i];
      var de = se.dom_element;

//      OpenAjax.a11y.logger.debug("ROLE 5: " + de.tag_name + "[" + de.has_role + "]");

      if (de.has_role && de.tag_name === 'section') {

        var role = de.role;
        var cs   = de.computed_style;

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {

          if ((role !== 'alert'       ) &&
              (role !== 'alertdialog' ) &&
              (role !== 'application' ) &&
              (role !== 'contentinfo' ) &&
              (role !== 'dialog'      ) &&
              (role !== 'document'    ) &&
              (role !== 'log'         ) &&
              (role !== 'main'        ) &&
              (role !== 'marquee'     ) &&
              (role !== 'presentation') &&
              (role !== 'region'      ) &&
              (role !== 'search'      ) &&
              (role !== 'status'      )) {
            rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [role]);
          }
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [role]);
        }
      }
    }
  } // end validate function
},

/**
 * @object ROLE_6
 *
 * @desc nav element role restrictions
 */

{ rule_id             : 'ROLE_6',
  last_updated        : '2015-05-14',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1','2.4.6', '4.1.1', '4.1.2'],
  target_resources    : ['nav'],
  primary_property    : 'role',
  resource_properties : [],
  language_dependency : '',
  validate          : function (dom_cache, rule_result) {


    var TEST_RESULT    = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY     = OpenAjax.a11y.VISIBILITY;

    var section_elements     = dom_cache.headings_landmarks_cache.getListOfSectionElements();
    var section_elements_len = section_elements.length;

    for (var i = 0; i < section_elements_len; i++) {
      var se = section_elements[i];
      var de = se.dom_element;

//      OpenAjax.a11y.logger.debug("ROLE 6: " + de.tag_name + "[" + de.has_role + "]");

      if (de.tag_name === 'nav' && de.has_role) {
        var cs   = de.computed_style;

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {

          var role = de.role;

          if (role === 'presentation') {
            rule_result.addResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
          }
          else {
            if (role !== 'navigation') {
              rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [role]);
            }
          }
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [role]);
        }
      }
    }
  } // end validate function
},

/**
 * @object ROLE_7
 *
 * @desc aside element role restrictions
 */

{ rule_id             : 'ROLE_7',
  last_updated        : '2015-05-14',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1','2.4.6', '4.1.1', '4.1.2'],
  target_resources    : ['aside'],
  primary_property    : 'role',
  resource_properties : [],
  language_dependency : '',
  validate          : function (dom_cache, rule_result) {


    var TEST_RESULT    = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY     = OpenAjax.a11y.VISIBILITY;

    var section_elements     = dom_cache.headings_landmarks_cache.getListOfSectionElements();
    var section_elements_len = section_elements.length;

    for (var i = 0; i < section_elements_len; i++) {
      var se = section_elements[i];
      var de = se.dom_element;

//      OpenAjax.a11y.logger.debug("ROLE 7: " + de.tag_name + "[" + de.has_role + "]");

      if (de.has_role && de.tag_name === 'aside') {

        var cs   = de.computed_style;

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {

          var role = de.role;

          if ((role !== 'complementary') &&
              (role !== 'region'       ) &&
              (role !== 'note'         ) &&
              (role !== 'search'       ) &&
              (role !== 'presentation' )) {
            rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [role]);
          }
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [role]);
        }
      }
    }
  } // end validate function
},

/**
 * @object ROLE_8
 *
 * @desc header element role restrictions
 */

{ rule_id             : 'ROLE_8',
  last_updated        : '2015-05-14',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1','2.4.6', '4.1.1', '4.1.2'],
  target_resources    : ['header'],
  primary_property    : 'role',
  resource_properties : ['role'],
  language_dependency : '',
  validate          : function (dom_cache, rule_result) {


    var TEST_RESULT    = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY     = OpenAjax.a11y.VISIBILITY;

    var section_elements     = dom_cache.headings_landmarks_cache.getListOfSectionElements();
    var section_elements_len = section_elements.length;

    for (var i = 0; i < section_elements_len; i++) {
      var se = section_elements[i];
      var de = se.dom_element;

//      OpenAjax.a11y.logger.debug("[ROLE RULE 8] tag: " + de.tag_name + "[" + de.has_role + "]");

      if (de.has_role && de.tag_name === 'header') {

        var cs   = de.computed_style;

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {

          if (de.has_role) {
            var role = de.role;

            if (role === 'presentation') {
              rule_result.addResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
            }
            else {
              if (role !== 'banner') {
                rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [role]);
              }
            }
          }
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [role]);
        }
      }
    }
  } // end validate function
},

/**
 * @object ROLE_9
 *
 * @desc footer element role restrictions
 */

{ rule_id             : 'ROLE_9',
  last_updated        : '2015-05-14',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1','2.4.6', '4.1.1', '4.1.2'],
  target_resources    : ['footer'],
  primary_property    : 'role',
  resource_properties : [],
  language_dependency : '',
  validate          : function (dom_cache, rule_result) {


    var TEST_RESULT    = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY     = OpenAjax.a11y.VISIBILITY;

    var section_elements     = dom_cache.headings_landmarks_cache.getListOfSectionElements();
    var section_elements_len = section_elements.length;

    for (var i = 0; i < section_elements_len; i++) {
      var se = section_elements[i];
      var de = se.dom_element;

//      OpenAjax.a11y.logger.debug("ROLE 9: " + de.tag_name + "[" + de.has_role + "]");

      if (de.has_role && de.tag_name === 'footer') {

        var cs   = de.computed_style;

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {

          if (de.has_role) {
            var role = de.role;

            if (role === 'presentation') {
              rule_result.addResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
            }
            else {
              if (role !== 'contentinfo' ) {
                rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [role]);
              }
            }
          }
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [role]);
        }
      }
    }
  } // end validate function
},

/**
 * @object ROLE_10
 *
 * @desc h1, h2, h3, h4, h5 and h6 element role restrictions
 */

{ rule_id             : 'ROLE_10',
  last_updated        : '2015-05-14',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.HEADINGS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.1','2.4.6', '4.1.1', '4.1.2'],
  target_resources    : ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
  primary_property    : 'role',
  resource_properties : [],
  language_dependency : '',
  validate          : function (dom_cache, rule_result) {


    var TEST_RESULT    = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY     = OpenAjax.a11y.VISIBILITY;

    var dom_elements     = dom_cache.element_cache.dom_elements;
    var dom_elements_len = dom_elements.length;

    for (var i = 0; i < dom_elements_len; i++) {
      var de = dom_elements[i];
      var cs = de.computed_style;

      if (de.has_role && ('h1 h2 h3 h4 h5 h6 '.indexOf(de.tag_name + ' ') >= 0)) {

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {

          var role = de.role;

          if (role === 'presentation') {
            rule_result.addResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.tag_name]);
          }
          else {
            if ((role !== 'heading') &&
                (role !== 'tab'    )) {
              rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.tag_name, role]);
            }
          }
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tag_name, role]);
        }
      }
    }
  } // end validate function
},

/**
 * @object ROLE_11
 *
 * @desc List element role restrictions
 */

{ rule_id             : 'ROLE_11',
  last_updated        : '2015-05-04',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['4.1.1'],
  target_resources    : ['li'],
  primary_property    : 'role',
  resource_properties : [],
  language_dependency : '',
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT    = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY     = OpenAjax.a11y.VISIBILITY;

    var dom_elements     = dom_cache.element_cache.dom_elements;
    var dom_elements_len = dom_elements.length;

    for (var i = 0; i < dom_elements_len; i++) {
      var de = dom_elements[i];
      var cs = de.computed_style;

      if ((de.tag_name === 'li') && de.has_role) {

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE ) {

          if (de.role && de.role.length > 0) {
            if (de.role.indexOf('presentation') >= 0) {
              rule_result.addResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', []);
            }
            else {
              if ('listitem menuitem menuitemcheckbox menuitemradio option tab treeitem '.indexOf(de.role + ' ') < 0) {
                rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.role]);
              }
            }
          }
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.role]);
        }
      }
    }

  } // end validate function
},

/**
 * @object ROLE_12
 *
 * @desc a element role semantic restrictions
 */

{ rule_id             : 'ROLE_12',
  last_updated        : '2015-05-04',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.LINKS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['4.1.1'],
  target_resources    : ['a'],
  primary_property    : 'role',
  resource_properties : [],
  language_dependency : '',
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT    = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY     = OpenAjax.a11y.VISIBILITY;

    var dom_elements     = dom_cache.element_cache.dom_elements;
    var dom_elements_len = dom_elements.length;

    for (var i = 0; i < dom_elements_len; i++) {
      var de = dom_elements[i];
      var cs = de.computed_style;

      if ((de.tag_name === 'a') && de.has_href && de.has_role) {

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE ) {

          if (de.role && de.role.length > 0) {
            if (' button checkbox link menuitem menuitemcheckbox menuitemradio tab switch treeitem '.indexOf(' ' + de.role + ' ') < 0) {
              rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.role]);
            }
            else {
              rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.role]);
            }
          }
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.role]);
        }
      }
    }

  } // end validate function
},

/**
 * @object ROLE_13
 *
 * @desc select element role semantic restrictions
 */

{ rule_id             : 'ROLE_13',
  last_updated        : '2016-05-21',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.FORMS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['4.1.1'],
  target_resources    : ['select'],
  primary_property    : 'role',
  resource_properties : [],
  language_dependency : '',
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT    = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY     = OpenAjax.a11y.VISIBILITY;

    var dom_elements     = dom_cache.element_cache.dom_elements;
    var dom_elements_len = dom_elements.length;

    for (var i = 0; i < dom_elements_len; i++) {
      var de = dom_elements[i];
      var cs = de.computed_style;

      if ((de.tag_name === 'select') && de.has_role) {

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE ) {

          if (de.role && de.role.length > 0) {
            if (' listbox menu '.indexOf(' ' + de.role + ' ') < 0) {
              rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.role]);
            }
            else {
              rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.role]);
            }
          }
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.role]);
        }
      }
    }

  } // end validate function
},

/**
 * @object ROLE_14
 *
 * @desc textarea element role semantic restrictions
 */

{ rule_id             : 'ROLE_14',
  last_updated        : '2016-05-21',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.FORMS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['4.1.1'],
  target_resources    : ['textarea'],
  primary_property    : 'role',
  resource_properties : [],
  language_dependency : '',
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT    = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY     = OpenAjax.a11y.VISIBILITY;

    var dom_elements     = dom_cache.element_cache.dom_elements;
    var dom_elements_len = dom_elements.length;

    for (var i = 0; i < dom_elements_len; i++) {
      var de = dom_elements[i];
      var cs = de.computed_style;

      if ((de.tag_name === 'textarea') && de.has_role) {

        if (cs.is_visible_to_at === VISIBILITY.VISIBLE ) {

          if (de.role && de.role.length > 0) {
            if (' textbox '.indexOf(' ' + de.role + ' ') < 0) {
              rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.role]);
            }
            else {
              rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.role]);
            }
          }
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.role]);
        }
      }
    }

  } // end validate function
}






]);
/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*            OpenAjax Alliance Media Rules                         */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

  /**
   * @object SENSORY_1
   *
   * @desc Content does not rely solely on sensory characteristics
   */

{ rule_id             : 'SENSORY_1',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.PAGE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.STYLES_READABILITY,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.3',
  wcag_related_ids    : [],
  target_resources    : [],
  primary_property    : '',
  resource_properties : [],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

    var page_element = dom_cache.headings_landmarks_cache.page_element;

    if (page_element) {
      rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'PAGE_MANUAL_CHECK_1', []);
    }
  } // end validate function
}

]);
/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*      OpenAjax Alliance Table Rules                               */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

/**
 * @object TABLE_1
 *
 * @desc If a table is a data table, if each data cell has headers
 */
{ rule_id             : 'TABLE_1',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.TABLES,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.6'],
  target_resources    : ['td'],
  primary_property    : 'header_content',
  resource_properties : ['headers', 'header_source'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    function allReadyDone(span_cell) {

      var span_cells_len = span_cells.length;

      for (var i = 0; i < span_cells_len; i++) {
        if (span_cell === span_cells[i]) return true;
      }

      span_cells.push(span_cell);
      return false;
    }

    var TEST_RESULT   = OpenAjax.a11y.TEST_RESULT;
    var HEADER_SOURCE = OpenAjax.a11y.HEADER_SOURCE;
    var VISIBILITY    = OpenAjax.a11y.VISIBILITY;
    var TABLE_ROLE    = OpenAjax.a11y.TABLE_ROLE;

    var span_cells = [];

    var table_elements   = dom_cache.tables_cache.table_elements;
    var table_elements_len = table_elements.length;

//     OpenAjax.a11y.logger.debug("[Table Rule 1] Table Elements on page: " + table_elements_len);

    // Check to see if valid cache reference
    if (table_elements && table_elements_len) {

      for (var i=0; i < table_elements_len; i++) {
        var te = table_elements[i];
        var is_visible_to_at = te.dom_element.computed_style.is_visible_to_at;

//         OpenAjax.a11y.logger.debug("[Table Rule 1] Table Element: " + te + "   is data table: " + te.table_role);

        if (te.table_role === TABLE_ROLE.DATA) {

          var max_row    = te.max_row;
          var max_column = te.max_column;
          var cells      = te.cells;

          for (var r = 0; r < max_row; r++) {
            for (var c = 0; c < max_column; c++) {

              var cell = cells[r][c];

              if (cell &&
                  (cell.table_type === OpenAjax.a11y.TABLE.TD_ELEMENT)) {

                if (is_visible_to_at == VISIBILITY.VISIBLE) {

                  if(cell.has_spans && allReadyDone(cell)) continue;

                  if (!cell.has_content) {
                    rule_result.addResult(TEST_RESULT.MANUAL_CHECK, cell, 'ELEMENT_MC_1', []);
                  }
                  else {
                    if (cell.header_content.length > 0) {
                      rule_result.addResult(TEST_RESULT.PASS, cell, 'ELEMENT_PASS_1', []);
                    }
                    else {
                      if (cell.header_source === HEADER_SOURCE.ROW_OR_COLUMN_HEADERS) {
                        rule_result.addResult(TEST_RESULT.FAIL, cell, 'ELEMENT_FAIL_1', []);
                      }
                      else {
                        rule_result.addResult(TEST_RESULT.FAIL, cell, 'ELEMENT_FAIL_2', []);
                      }
                    }
                  }
                }
                else {
                 rule_result.addResult(TEST_RESULT.HIDDEN, cell, 'ELEMENT_HIDDEN_1', []);
                }
              }
            }
          }
        }
      } // end loop
    }
  } // end validation function
 },

/**
 * @object TABLE_2
 *
 * @desc Data table %s have an accessible name
 */
{ rule_id             : 'TABLE_2',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.TABLES,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '2.4.6',
  wcag_related_ids    : ['1.3.1'],
  target_resources    : ['table', 'caption'],
  primary_property    : 'accessible_name',
  resource_properties : ['accessible_name_source', 'accessible_description', 'summary', 'title', 'aria-label', 'aria-labelledby'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var SOURCE      = OpenAjax.a11y.SOURCE;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var table_elements     = dom_cache.tables_cache.table_elements;
    var table_elements_len = table_elements.length;

    var data_tables = [];
    var visible_data_tables = 0;

    var i, te, de, cs;

//     OpenAjax.a11y.logger.debug("[Table Rule 2] Number of tables: " + table_elements_len);

    // Check to see if valid cache reference
    if (table_elements && table_elements_len) {

      for (i = 0; i < table_elements_len; i++) {
        te = table_elements[i];
        de = te.dom_element;
        cs = de.computed_style;

        if ((te.table_role === OpenAjax.a11y.TABLE_ROLE.DATA) ||
            (te.table_role === OpenAjax.a11y.TABLE_ROLE.COMPLEX)) {
          data_tables.push(te);
          if (cs.is_visible_to_at === VISIBILITY.VISIBLE) visible_data_tables += 1;
        }
      } // end loop

      if (visible_data_tables > 0) {

        for (i = 0; i < data_tables.length; i++) {
          te = table_elements[i];
          de = te.dom_element;
          cs = de.computed_style;

          if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {

            if (te.accessible_name.length > 0) {

               switch (te.accessible_name_source) {

               case SOURCE.TABLE_CAPTION:
                  rule_result.addResult(TEST_RESULT.PASS, te, 'ELEMENT_PASS_1', [te.accessible_name]);
                  break;

               case SOURCE.TABLE_SUMMARY:
                  rule_result.addResult(TEST_RESULT.PASS, te, 'ELEMENT_PASS_2', [te.aaccessible_name]);
                  break;

               case SOURCE.ARIA_LABEL:
                  rule_result.addResult(TEST_RESULT.PASS, te, 'ELEMENT_PASS_3', [te.accessible_name]);
                  break;

               case SOURCE.ARIA_LABELLEDBY:
                  rule_result.addResult(TEST_RESULT.PASS, te, 'ELEMENT_PASS_4', [te.accessible_name]);
                  break;

               case SOURCE.TITLE_ATTRIBUTE:
                  rule_result.addResult(TEST_RESULT.PASS, te, 'ELEMENT_PASS_5', [te.accessible_name]);
                  break;
               default:

                  break;
              }
            }
            else {
              rule_result.addResult(TEST_RESULT.FAIL, te, 'ELEMENT_FAIL_1', []);
            }
          }
          else {
            rule_result.addResult(TEST_RESULT.HIDDEN, te, 'ELEMENT_HIDDEN_1', []);
          }
        } // end loop
      }
    }
  } // end validation function
 },

/**
 * @object TABLE_3
 *
 * @desc  Complex data tables should have a text description or summary of data in the table
 */

{ rule_id             : 'TABLE_3',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.TABLES,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.6'],
  target_resources    : ['table'],
  primary_property    : 'accessible_description',
  resource_properties : ['accessible_description_source', 'accessible_name', 'summary', 'title', 'aria-describedby'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT        = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY         = OpenAjax.a11y.VISIBILITY;
    var DESCRIPTION_SOURCE = OpenAjax.a11y.DESCRIPTION_SOURCE;
    var TABLE_ROLE         = OpenAjax.a11y.TABLE_ROLE;

    var table_elements     = dom_cache.tables_cache.table_elements;
    var table_elements_len = table_elements.length;

    // Check to see if valid cache reference
    if (table_elements && table_elements_len) {

      for (var i = 0; i < table_elements_len; i++) {
        var te = table_elements[i];
        var is_visible_to_at = te.dom_element.computed_style.is_visible_to_at;

        if ((te.table_role === OpenAjax.a11y.TABLE_ROLE.DATA) ||
            (te.table_role === OpenAjax.a11y.TABLE_ROLE.COMPLEX)) {

          if (is_visible_to_at == VISIBILITY.VISIBLE) {

            if (te.accessible_description.length > 0) {

              switch (te.accessible_description_source) {

              case DESCRIPTION_SOURCE.TABLE_SUMMARY:
                rule_result.addResult(TEST_RESULT.PASS, te, 'ELEMENT_PASS_1', []);
                break;

              case DESCRIPTION_SOURCE.ARIA_DESCRIBEDBY:
                rule_result.addResult(TEST_RESULT.PASS, te, 'ELEMENT_PASS_2', []);
                break;

              default:
                rule_result.addResult(TEST_RESULT.PASS, te, 'ELEMENT_PASS_3', []);
                break;
              }
            }
            else {
              if (te.table_role === TABLE_ROLE.COMPLEX) {
                rule_result.addResult(TEST_RESULT.MANUAL_CHECK, te, 'ELEMENT_MC_2', []);
              }
              else {
                rule_result.addResult(TEST_RESULT.MANUAL_CHECK, te, 'ELEMENT_MC_1', []);
              }
            }
          }
          else {
            rule_result.addResult(TEST_RESULT.HIDDEN, te, 'ELEMENT_HIDDEN_1', []);
          }
        }
      } // end loop
    }
  } // end validation function
 },

/**
 * @object TABLE_4
 *
 * @desc   Data tables with accessible names must be unique
 */

{ rule_id             : 'TABLE_4',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.TABLES,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.6'],
  target_resources    : ['table'],
  primary_property    : 'accessible_name',
  resource_properties : ['accessible_name_source', 'accessible_name_for_comparison'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT   = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY    = OpenAjax.a11y.VISIBILITY;

    var table_elements   = dom_cache.tables_cache.table_elements;
    var table_elements_len = table_elements.length;

    var table_visible = [];
    var i;
    var j;

    // Check to see if valid cache reference
    if (table_elements && table_elements_len) {

      for (i = 0; i < table_elements_len; i++) {
        var te = table_elements[i];
        var is_visible_to_at = te.dom_element.computed_style.is_visible_to_at;

        if (((te.table_role === OpenAjax.a11y.TABLE_ROLE.DATA) ||
             (te.table_role === OpenAjax.a11y.TABLE_ROLE.COMPLEX)) &&
             te.accessible_name_length) {
          if (is_visible_to_at == VISIBILITY.VISIBLE) {
            if (te.accessible_name_for_comparison.length) {
              table_visible.push(te);
            }
            else {
              rule_result.addResult(TEST_RESULT.FAIL, te, 'ELEMENT_FAIL_2', []);
            }
          }
          else {
            rule_result.addResult(TEST_RESULT.HIDDEN, te, 'ELEMENT_HIDDEN_1', []);
          }
        }
      } // end loop


      for (i = 0; i < table_visible.length; i++) {
        var te1 = table_visible[i];
        var count = 0;

        for(j = 0; j < table_visible.length; j++) {

          var te2 = table_visible[j];


          if (te1.accessible_name_for_comparison === te2.accessible_name_for_comparison) {
            count += 1;
            if (count > 1) break;
          }
        }

//        OpenAjax.a11y.logger.debug("[Table Rule 4]: " + te1.accessible_name + " '" + te1.accessible_name_for_comparison + "' " + te1.accessible_name_for_comparison.length + " "+ count);

        if (count < 2) {
          rule_result.addResult(TEST_RESULT.PASS, te1, 'ELEMENT_PASS_1', [te1.accessible_name]);
        }
        else {
            rule_result.addResult(TEST_RESULT.FAIL, te1, 'ELEMENT_FAIL_1', [te1.accessible_name]);
        }
      }
    }
  } // end validation function
},

/**
 * @object TABLE_5
 *
 * @desc  Identifies a table is being used for layout or tabular data, or cannot be determined form markup
 */

 { rule_id             : 'TABLE_5',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.TABLES,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.6'],
  target_resources    : ['table'],
  primary_property    : 'table_role',
  resource_properties : ['accessible_name', 'accessible_description'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var table_elements     = dom_cache.tables_cache.table_elements;
    var table_elements_len = table_elements.length;

    // Check to see if valid cache reference
    if (table_elements && table_elements_len) {

      for (var i = 0; i < table_elements_len; i++) {
        var te = table_elements[i];
        var is_visible_to_at = te.dom_element.computed_style.is_visible_to_at;

        if (is_visible_to_at == VISIBILITY.VISIBLE) {

          if (te.table_role === OpenAjax.a11y.TABLE_ROLE.DATA) rule_result.addResult(TEST_RESULT.PASS, te, 'ELEMENT_PASS_1', []);
          else if (te.table_role === OpenAjax.a11y.TABLE_ROLE.COMPLEX) rule_result.addResult(TEST_RESULT.PASS, te, 'ELEMENT_PASS_3', []);
          else if (te.table_role === OpenAjax.a11y.TABLE_ROLE.LAYOUT)  rule_result.addResult(TEST_RESULT.PASS, te, 'ELEMENT_PASS_2', []);
          else if (te.max_row    < 2) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, te, 'ELEMENT_MC_1', []);
          else if (te.max_column < 2) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, te, 'ELEMENT_MC_2', []);
          else rule_result.addResult(TEST_RESULT.FAIL, te, 'ELEMENT_FAIL_1', []);
        }
        else {
          rule_result.addResult(TEST_RESULT.HIDDEN, te, 'ELEMENT_HIDDEN_1', []);
        }
      } // end loop
    }
  } // end validation function
 },

/**
 * @object TABLE_6
 *
 * @desc    Tests if table headers use TH elements instead of TD with SCOPE
 */

{ rule_id             : 'TABLE_6',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.TABLES,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.6'],
  target_resources    : ['td[scope]'],
  primary_property    : 'tag_name',
  resource_properties : ['scope'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    function allReadyDone(span_cell) {

      var span_cells_len = span_cells.length;

      for (var i = 0; i < span_cells_len; i++) {
        if (span_cell === span_cells[i]) return true;
      }

      span_cells.push(span_cell);
      return false;
    }

    var TEST_RESULT   = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY    = OpenAjax.a11y.VISIBILITY;

    var span_cells = [];

    var table_elements   = dom_cache.tables_cache.table_elements;
    var table_elements_len = table_elements.length;

    // Check to see if valid cache reference
    if (table_elements && table_elements_len) {

      for (var i=0; i < table_elements_len; i++) {
        var te = table_elements[i];
        var is_visible_to_at = te.dom_element.computed_style.is_visible_to_at;

        if ((te.table_role === OpenAjax.a11y.TABLE_ROLE.DATA) ||
            (te.table_role === OpenAjax.a11y.TABLE_ROLE.COMPLEX)) {

          var max_row    = te.max_row;
          var max_column = te.max_column;
          var cells      = te.cells;

          for (var r = 0; r < max_row; r++) {
            for (var c = 0; c < max_column; c++) {

              var cell = cells[r][c];

              if (cell && cell.table_type  === OpenAjax.a11y.TABLE.TH_ELEMENT) {

                if (is_visible_to_at == VISIBILITY.VISIBLE) {

                  if(cell.has_spans && allReadyDone(cell)) continue;

                  if(cell.dom_element.tag_name === 'th') rule_result.addResult(TEST_RESULT.PASS, cell, 'ELEMENT_PASS_1', []);
                  else rule_result.addResult(TEST_RESULT.FAIL, cell, 'ELEMENT_FAIL_1', []);

                }
                else {
                 rule_result.addResult(TEST_RESULT.HIDDEN, cell, 'ELEMENT_HIDDEN_1', []);
                }
              }
            }
          }
        }
      } // end loop
    }
  } // end validation function
},

/**
 * @object TABLE_7
 *
 * @desc  Data cells in complex table must use headers attributes
 */

{ rule_id             : 'TABLE_7',
  last_updated        : '2015-02-20',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.TABLES,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.6'],
  target_resources    : ['td'],
  primary_property    : 'header_content',
  resource_properties : ['headers', 'header_source'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    function allReadyDone(span_cell) {

      var span_cells_len = span_cells.length;

      for (var i = 0; i < span_cells_len; i++) {
        if (span_cell === span_cells[i]) return true;
      }

      span_cells.push(span_cell);
      return false;
    }

    var TEST_RESULT   = OpenAjax.a11y.TEST_RESULT;
    var HEADER_SOURCE = OpenAjax.a11y.HEADER_SOURCE;
    var VISIBILITY    = OpenAjax.a11y.VISIBILITY;
    var TABLE_ROLE    = OpenAjax.a11y.TABLE_ROLE;

    var span_cells = [];

    var table_elements   = dom_cache.tables_cache.table_elements;
    var table_elements_len = table_elements.length;

//     OpenAjax.a11y.logger.debug("[Table Rule 7] Table Elements on page: " + table_elements_len);

    // Check to see if valid cache reference
    if (table_elements && table_elements_len) {

      for (var i=0; i < table_elements_len; i++) {
        var te = table_elements[i];
        var is_visible_to_at = te.dom_element.computed_style.is_visible_to_at;

//         OpenAjax.a11y.logger.debug("[Table Rule 1] Table Element: " + te + "   is data table: " + te.table_role);

        if (te.table_role === TABLE_ROLE.COMPLEX) {

          var max_row    = te.max_row;
          var max_column = te.max_column;
          var cells      = te.cells;

//         OpenAjax.a11y.logger.debug("[Table Rule 1] Cell: " + cell + " headers: " + cell.headers);


          for (var r = 0; r < max_row; r++) {
            for (var c = 0; c < max_column; c++) {

              var cell = cells[r][c];

              if (cell &&
                  (cell.table_type === OpenAjax.a11y.TABLE.TD_ELEMENT)) {

                if (is_visible_to_at == VISIBILITY.VISIBLE) {

                  if(cell.has_spans && allReadyDone(cell)) continue;

                  if (!cell.has_content) {
                    rule_result.addResult(TEST_RESULT.MANUAL_CHECK, cell, 'ELEMENT_MC_1', []);
                  }
                  else {
                    if (cell.header_source === HEADER_SOURCE.HEADERS_ATTRIBUTE) {
                      if (cell.has_content) {
                        rule_result.addResult(TEST_RESULT.PASS, cell, 'ELEMENT_PASS_1', [cell.headers]);
                      }
                      else {
                        rule_result.addResult(TEST_RESULT.FAIL, cell, 'ELEMENT_FAIL_1', [cell.headers]);
                      }
                    }
                    else {
                      if (cell.headers && cell.headers.length > 0) {
                        rule_result.addResult(TEST_RESULT.FAIL, cell, 'ELEMENT_FAIL_5', [cell.headers]);
                      }
                      else {
                        rule_result.addResult(TEST_RESULT.FAIL, cell, 'ELEMENT_FAIL_1', []);
                      }
                    }
                  }
                }
                else {
                 rule_result.addResult(TEST_RESULT.HIDDEN, cell, 'ELEMENT_HIDDEN_1', []);
                }
              }
            }
          }
        }
      } // end loop
    }
  }
},

/**
 * @object TABLE_8
 *
 * @desc    Accessible name and description must be different, description longer than name
 */

{ rule_id             : 'TABLE_8',
  last_updated        : '2015-02-20',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.TABLES,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '1.3.1',
  wcag_related_ids    : ['2.4.6'],
  target_resources    : ['caption', 'table[summary]', 'table[title]'],
  primary_property    : 'accessible_name',
  resource_properties : ['accessible_name_source', 'accessible_description', 'accessible_description_source'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {


    var TEST_RESULT   = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY    = OpenAjax.a11y.VISIBILITY;
    var TABLE_ROLE    = OpenAjax.a11y.TABLE_ROLE;

    var table_elements   = dom_cache.tables_cache.table_elements;
    var table_elements_len = table_elements.length;

    // Check to see if valid cache reference
    if (table_elements && table_elements_len) {

      for (var i=0; i < table_elements_len; i++) {
        var te = table_elements[i];
        var is_visible_to_at = te.dom_element.computed_style.is_visible_to_at;

//        OpenAjax.a11y.logger.debug("[Table Rule 8]          Table Element: " + te);
//        OpenAjax.a11y.logger.debug("[Table Rule 8]        Accessible Name: " + te.accessible_name_for_comparison);
//        OpenAjax.a11y.logger.debug("[Table Rule 8] Accessible Description: " + te.accessible_description_for_comparison);

        if (((te.table_role === TABLE_ROLE.DATA) ||
             (te.table_role === TABLE_ROLE.COMPLEX)) &&
            te.accessible_name_for_comparison.length &&
            te.accessible_description_for_comparison.length) {

          if (is_visible_to_at === VISIBILITY.VISIBLE) {
            if (te.accessible_name_for_comparison === te.accessible_description_for_comparison ) {
              rule_result.addResult(TEST_RESULT.FAIL, te, 'ELEMENT_FAIL_1', []);
            }
            else {
              if (te.accessible_name_for_comparison.length >= te.accessible_description_for_comparison.length) {
                rule_result.addResult(TEST_RESULT.MANUAL_CHECK, te, 'ELEMENT_MC_1', []);
              }
              else {
                rule_result.addResult(TEST_RESULT.PASS, te, 'ELEMENT_PASS_1', []);
              }
            }
          }
          else {
            rule_result.addResult(TEST_RESULT.HIDDEN, te, 'ELEMENT_HIDDEN_1', []);
          }
        }
      }
    }
  } // end validation function
}
]);




/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*            OpenAjax Alliance Media Rules                         */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

/**
 * @object TIMING_1
 *
 * @desc Timing adjustable for pages with interactive elements
 */

{ rule_id             : 'TIMING_1',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.TIMING,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '2.2.1',
  wcag_related_ids    : [],
  target_resources    : ['a', 'input', 'button', 'wdiget'],
  primary_property    : '',
  resource_properties : [],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

    var page_element = dom_cache.timing_cache.page_element;

    rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'PAGE_MC_1', []);

  } // end validate function
},

/**
 * @object TIMING_2
 *
 * @desc Stop, puase or hide content that is moving, scrolling, flashing or auto updating
 */

{ rule_id             : 'TIMING_2',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.TIMING,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '2.2.2',
  wcag_related_ids    : [],
  target_resources    : ['applet', 'canvas', 'embed', 'img', 'object', 'svg'],
  primary_property    : '',
  resource_properties : [],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var timing_elements     = dom_cache.timing_cache.timing_elements;
    var timing_elements_len = timing_elements.length;

    var page_element = dom_cache.timing_cache.page_element;

    for (var i = 0; i < timing_elements_len; i++) {
      var mbe = timing_elements[i];
      var de = mbe.dom_element;
      var cs = de.computed_style;

      if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
        rule_result.addResult(TEST_RESULT.MANUAL_CHECK, mbe, 'ELEMENT_MC_1', [de.tag_name]);
      }
      else {
       rule_result.addResult(TEST_RESULT.HIDDEN, mbe, 'ELEMENT_HIDDEN_1', [de.tag_name]);
      }
    }

    rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'PAGE_MC_1', []);

  } // end validate function
},

/**
 * @object TIMING_3
 *
 * @desc Web pages do not contain anything that flashes more than three times in any one second period
 */

{ rule_id             : 'TIMING_3',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.TIMING,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '2.3.1',
  wcag_related_ids    : [],
  target_resources    : ['applet', 'canvas', 'embed', 'img', 'object', 'svg'],
  primary_property    : '',
  resource_properties : [],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var timing_elements     = dom_cache.timing_cache.timing_elements;
    var timing_elements_len = timing_elements.length;

    var page_element = dom_cache.timing_cache.page_element;

    for (var i = 0; i < timing_elements_len; i++) {
      var mbe = timing_elements[i];
      var de = mbe.dom_element;
      var cs = de.computed_style;

      if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
        rule_result.addResult(TEST_RESULT.MANUAL_CHECK, mbe, 'ELEMENT_MC_1', [de.tag_name]);
      }
      else {
       rule_result.addResult(TEST_RESULT.HIDDEN, mbe, 'ELEMENT_HIDDEN_1', [de.tag_name]);
      }
    }

    rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'PAGE_MC_1', []);

  } // end validate function
}

]);
/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*  OpenAjax Alliance Heading and Landmark Rules                    */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([


/**
 * @object TITLE_1
 *
 * @desc the title element text content must describe the purpose or content of the page
 */

{ rule_id             : 'TITLE_1',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.PAGE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.SITE_NAVIGATION,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '2.4.2',
  wcag_related_ids    : ['1.3.1', '2.4.6'],
  target_resources    : ['Page', 'title'],
  primary_property    : 'name',
  resource_properties : ['tag_name', 'name_for_comparison'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

      var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

      var title_element  = dom_cache.headings_landmarks_cache.title_element;

      if (dom_cache.document_has_title) {

        if (title_element.name_for_comparison.length) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, title_element, 'PAGE_MC_1', []);
        }
        else {
          rule_result.addResult(TEST_RESULT.FAIL, title_element, 'PAGE_FAIL_1', []);
        }
      }
      else {
        rule_result.addResult(TEST_RESULT.FAIL, title_element, 'PAGE_FAIL_2', []);
      }

    } // end validate function
},

/**
 * @object TITLE_2
 *
 * @desc The words in the @h1@ content must be part of the title element text content.
 *
 */

{ rule_id             : 'TITLE_2',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.PAGE,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.SITE_NAVIGATION,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '2.4.2',
  wcag_related_ids    : ['1.3.1', '2.4.6'],
  target_resources    : ['Page', 'title', 'h1'],
  primary_property    : 'name',
  resource_properties : ['tag_name', 'name_for_comparison'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

      function compareTextContent(s1, s2) {

        var words = s2.split(' ');
        var words_len = words.length;
        var words_match = 0;
        var words_not_matched = 0;
        var characters_match = 0;
        var characters_not_matched = 0;

//        OpenAjax.a11y.logger.debug("Comparison: " + s1 + "/" + s2);

        for (var i = 0; i < words_len; i++) {
          var w = words[i];
          if (s1.indexOf(w) >= 0) {
            characters_match += w.length;
            words_match++;
          }
          else {
            characters_not_matched += w.length;
            words_not_matched++;
          }
        }

//        OpenAjax.a11y.logger.debug("Match Information: " + (characters_match * words_match) + "/" + (characters_not_matched * words_not_matched));

        if (characters_not_matched === 0) return true;

        var p = (100 * characters_match * words_match) / ((characters_match  * words_match) + (characters_not_matched * words_not_matched ));

//        OpenAjax.a11y.logger.debug("Match Percentage: " + p);

        if (p > 80) return true;

        return false;
      }

      var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
      var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

      var title_element  = dom_cache.headings_landmarks_cache.title_element;
      var page_element   = dom_cache.headings_landmarks_cache.page_element;
      var h1_elements    = dom_cache.headings_landmarks_cache.h1_elements;
      var visible_h1_element_count = 0;
      var passed_h1_element_count  = 0;
      var i, h1, de, cs;

//      OpenAjax.a11y.logger.debug('[RULE][TITLE 2] Title: ' + title_element.name_for_comparison + '(' + title_element.name_for_comparison.length + ')');

      if (title_element.name_for_comparison.length === 0) {
        rule_result.addResult(TEST_RESULT.FAIL, page_element, 'PAGE_FAIL_1', []);
      }
      else {

        var h1_count = h1_elements.length;

        for(i = 0; i < h1_count; i++) {
          h1 = h1_elements[i];
          de = h1.dom_element;
          cs = de.computed_style;
          if (cs.is_visible_to_at === VISIBILITY.VISIBLE) visible_h1_element_count += 1;
        }

        for(i = 0; i < h1_count; i++) {
          h1 = h1_elements[i];
          de = h1.dom_element;
          cs = de.computed_style;

//          OpenAjax.a11y.logger.debug('[RULE][TITLE 2] H1: ' + h1.name_for_comparison + '(' + h1.name_for_comparison.length + ')');

          if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
            if (h1.name_for_comparison.length) {
              if (compareTextContent(title_element.name_for_comparison, h1.name_for_comparison)) {
                rule_result.addResult(TEST_RESULT.PASS, h1, 'ELEMENT_PASS_1', []);
                passed_h1_element_count++;
              }
              else {
                if (visible_h1_element_count > 2) {
                  rule_result.addResult(TEST_RESULT.MANUAL_CHECK, h1, 'ELEMENT_MC_1', []);
                }
                else {
                  rule_result.addResult(TEST_RESULT.FAIL, h1, 'ELEMENT_FAIL_1', []);
                }
              }
            }
            else {
              rule_result.addResult(TEST_RESULT.FAIL, h1, 'ELEMENT_FAIL_2', []);
            }
          }
          else {
            rule_result.addResult(TEST_RESULT.HIDDEN, h1, 'ELEMENT_HIDDEN_1', []);
          }
        }

        if (visible_h1_element_count === 0) rule_result.addResult(TEST_RESULT.FAIL, page_element, 'PAGE_FAIL_2', []);
        else if (visible_h1_element_count > 2) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, page_element, 'PAGE_MC_1', []);
        else if (visible_h1_element_count !== passed_h1_element_count) rule_result.addResult(TEST_RESULT.FAIL, page_element, 'PAGE_FAIL_4', []);
        else if (visible_h1_element_count === 1) rule_result.addResult(TEST_RESULT.PASS, page_element, 'PAGE_PASS_1', []);
        else rule_result.addResult(TEST_RESULT.PASS, page_element, 'PAGE_PASS_2', []);
      }
    } // end validate function
  }
 ]);
/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*            OpenAjax Alliance Media Rules                         */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

/**
 * @object VIDEO_1
 *
 * @desc Video elements used for prerecorded video only content using the video element must have text or audio description
 */

{ rule_id             : 'VIDEO_1',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.AUDIO_VIDEO,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '1.2.1',
  wcag_related_ids    : ['1.2.2', '1.2.4'],
  target_resources    : ['video', 'track'],
  primary_property    : '',
  resource_properties : ['controls', 'autoplay', 'name', 'type', 'src', 'label'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var video_elements     = dom_cache.media_cache.video_elements;
    var video_elements_len = video_elements.length;

    for (var i = 0; i < video_elements_len; i++) {
      var ve = video_elements[i];
      var de = ve.dom_element;
      var cs = de.computed_style;

      if ((cs.is_visible_to_at === VISIBILITY.VISIBLE) ||
          (ve.has_autoplay)) {
        if (ve.getTextTracks().length) rule_result.addResult(TEST_RESULT.PASS, ve, 'ELEMENT_PASS_1', []);
        else if (de.has_aria_describedby) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ve, 'ELEMENT_MC_1', []);
        else rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ve, 'ELEMENT_MC_2', []);
      }
      else {
       rule_result.addResult(TEST_RESULT.HIDDEN, ve, 'ELEMENT_HIDDEN_1', []);
      }
    }
  } // end validate function
},

/**
 * @object VIDEO_2
 *
 * @desc Video elements used for prerecorded video only content using the object element must have text or audio description
 */

{ rule_id             : 'VIDEO_2',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.AUDIO_VIDEO,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '1.2.1',
  wcag_related_ids    : ['1.2.2', '1.2.4'],
  target_resources    : ['object', 'param'],
  primary_property    : '',
  resource_properties : ['data', 'type', 'name', 'value', 'valuetype'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var object_elements     = dom_cache.media_cache.object_elements;
    var object_elements_len = object_elements.length;

    for (var i = 0; i < object_elements_len; i++) {
      var oe = object_elements[i];
      var de = oe.dom_element;
      var cs = de.computed_style;

      if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
        if (oe.isTypeVideo()) {
          if (de.has_aria_describedby) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, oe, 'ELEMENT_MC_1', []);
          else rule_result.addResult(TEST_RESULT.MANUAL_CHECK, oe, 'ELEMENT_MC_2', []);
        }
        else {
          if (de.has_aria_describedby) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, oe, 'ELEMENT_MC_3', []);
          else rule_result.addResult(TEST_RESULT.MANUAL_CHECK, oe, 'ELEMENT_MC_4', []);
        }
      }
      else {
       rule_result.addResult(TEST_RESULT.HIDDEN, oe, 'ELEMENT_HIDDEN_1', []);
      }
    }
  } // end validate function
},

/**
 * @object VIDEO_3
 *
 * @desc Video elements used for prerecorded video only content using the embed element must have text or audio description
 */

{ rule_id             : 'VIDEO_3',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.AUDIO_VIDEO,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '1.2.1',
  wcag_related_ids    : ['1.2.2', '1.2.4'],
  target_resources    : ['embed'],
  primary_property    : '',
  resource_properties : ['src', 'type'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var embed_elements     = dom_cache.media_cache.embed_elements;
    var embed_elements_len = embed_elements.length;

    for (var i = 0; i < embed_elements_len; i++) {
      var ee = embed_elements[i];
      var de = ee.dom_element;
      var cs = de.computed_style;

      if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
        if (ee.isTypeVideo()) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ee, 'ELEMENT_MC_1', []);
        }
        else {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ee, 'ELEMENT_MC_2', []);
        }
      }
      else {
       rule_result.addResult(TEST_RESULT.HIDDEN, ee, 'ELEMENT_HIDDEN_1', []);
      }
    }
  } // end validate function
},

/**
 * @object VIDEO_4
 *
 * @desc Live and prerecorded video with synchronized audio (i.e. movie, lecture) using the video element must have captions
 */

{ rule_id             : 'VIDEO_4',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.AUDIO_VIDEO,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '1.2.2',
  wcag_related_ids    : ['1.2.4'],
  target_resources    : ['video', 'track'],
  primary_property    : '',
  resource_properties : ['controls', 'autoplay', 'name', 'type', 'src', 'label'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var video_elements     = dom_cache.media_cache.video_elements;
    var video_elements_len = video_elements.length;

    for (var i = 0; i < video_elements_len; i++) {
      var ve = video_elements[i];
      var de = ve.dom_element;
      var cs = de.computed_style;

      if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
        if (ve.hasCaptionTrack() || ve.hasSubtitleTrack()) rule_result.addResult(TEST_RESULT.PASS, ve, 'ELEMENT_PASS_1', []);
        else rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ve, 'ELEMENT_MC_1', []);
      }
      else {
       rule_result.addResult(TEST_RESULT.HIDDEN, ve, 'ELEMENT_HIDDEN_1', []);
      }
    }
  } // end validate function
},

/**
 * @object VIDEO_5
 *
 * @desc Live and prerecorded video with synchronized audio (i.e. movie, lecture) using the object element must have captions
 */

{ rule_id             : 'VIDEO_5',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.AUDIO_VIDEO,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '1.2.2',
  wcag_related_ids    : ['1.2.4'],
  target_resources    : ['object', 'param'],
  primary_property    : '',
  resource_properties : ['data', 'type', 'name', 'value', 'valuetype'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var object_elements     = dom_cache.media_cache.object_elements;
    var object_elements_len = object_elements.length;

    for (var i = 0; i < object_elements_len; i++) {
      var oe = object_elements[i];
      var de = oe.dom_element;
      var cs = de.computed_style;

      if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
        if (oe.isTypeVideo()) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, oe, 'ELEMENT_MC_1', []);
        }
        else {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, oe, 'ELEMENT_MC_2', []);
        }
      }
      else {
       rule_result.addResult(TEST_RESULT.HIDDEN, oe, 'ELEMENT_HIDDEN_1', []);
      }
    }
  } // end validate function
},

/**
 * @object VIDEO_6
 *
 * @desc Live and prerecorded video with synchronized audio (i.e. movie, lecture) using the embed element must have captions
 */

{ rule_id             : 'VIDEO_6',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.AUDIO_VIDEO,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '1.2.2',
  wcag_related_ids    : ['1.2.1', '1.2.4'],
  target_resources    : ['embed'],
  primary_property    : '',
  resource_properties : ['src', 'type'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var embed_elements     = dom_cache.media_cache.embed_elements;
    var embed_elements_len = embed_elements.length;

    for (var i = 0; i < embed_elements_len; i++) {
      var ee = embed_elements[i];
      var de = ee.dom_element;
      var cs = de.computed_style;

      if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
        if (ee.isTypeVideo()) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ee, 'ELEMENT_MC_1', []);
        }
        else {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ee, 'ELEMENT_MC_2', []);
        }
      }
      else {
       rule_result.addResult(TEST_RESULT.HIDDEN, ee, 'ELEMENT_HIDDEN_1', []);
      }
    }
  } // end validate function
},

/**
 * @object VIDEO_7
 *
 * @desc Prerecorded video with synchronized audio (i.e. movie) using the video element must have audio description
 */

{ rule_id             : 'VIDEO_7',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.AUDIO_VIDEO,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '1.2.3',
  wcag_related_ids    : ['1.2.5'],
  target_resources    : ['video', 'track'],
  primary_property    : '',
  resource_properties : ['controls', 'autoplay', 'name', 'type', 'src', 'label'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var video_elements     = dom_cache.media_cache.video_elements;
    var video_elements_len = video_elements.length;

    for (var i = 0; i < video_elements_len; i++) {
      var ve = video_elements[i];
      var de = ve.dom_element;
      var cs = de.computed_style;

      if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
        if (ve.hasDescriptionTrack()) rule_result.addResult(TEST_RESULT.PASS, ve, 'ELEMENT_PASS_1', []);
        else rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ve, 'ELEMENT_MC_1', []);
      }
      else {
       rule_result.addResult(TEST_RESULT.HIDDEN, ve, 'ELEMENT_HIDDEN_1', []);
      }
    }
  } // end validate function
},

/**
 * @object VIDEO_8
 *
 * @desc Prerecorded video with synchronized audio (i.e. movie) using the object element must have audio description
 */

{ rule_id             : 'VIDEO_8',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.AUDIO_VIDEO,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '1.2.3',
  wcag_related_ids    : ['1.2.1', '1.2.5'],
  target_resources    : ['object', 'param'],
  primary_property    : '',
  resource_properties : ['data', 'type', 'name', 'value', 'valuetype'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var object_elements     = dom_cache.media_cache.object_elements;
    var object_elements_len = object_elements.length;

    for (var i = 0; i < object_elements_len; i++) {
      var oe = object_elements[i];
      var de = oe.dom_element;
      var cs = de.computed_style;

      if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
        if (oe.isTypeVideo()) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, oe, 'ELEMENT_MC_1', []);
        }
        else {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, oe, 'ELEMENT_MC_2', []);
        }
      }
      else {
       rule_result.addResult(TEST_RESULT.HIDDEN, oe, 'ELEMENT_HIDDEN_1', []);
      }
    }
  } // end validate function
},

/**
 * @object VIDEO_9
 *
 * @desc Prerecorded video with synchronized audio (i.e. movie) using the embed element must have audio description
 */

{ rule_id             : 'VIDEO_9',
  last_updated        : '2014-11-28',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.AUDIO_VIDEO,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP1,
  wcag_primary_id     : '1.2.3',
  wcag_related_ids    : ['1.2.1', '1.2.5'],
  target_resources    : ['embed'],
  primary_property    : '',
  resource_properties : ['src', 'type'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var embed_elements     = dom_cache.media_cache.embed_elements;
    var embed_elements_len = embed_elements.length;

    for (var i = 0; i < embed_elements_len; i++) {
      var ee = embed_elements[i];
      var de = ee.dom_element;
      var cs = de.computed_style;

      if (cs.is_visible_to_at === VISIBILITY.VISIBLE) {
        if (ee.isTypeVideo()) {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ee, 'ELEMENT_MC_1', []);
        }
        else {
          rule_result.addResult(TEST_RESULT.MANUAL_CHECK, ee, 'ELEMENT_MC_2', []);
        }
      }
      else {
       rule_result.addResult(TEST_RESULT.HIDDEN, ee, 'ELEMENT_HIDDEN_1', []);
      }
    }
  } // end validate function
}

]);
/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* ---------------------------------------------------------------- */
/*  OpenAjax Alliance Control Rules                                 */
/* ---------------------------------------------------------------- */

OpenAjax.a11y.RuleManager.addRulesFromJSON([

/**
 * @object WIDGET_1
 *
 * @desc ARIA Widgets must have accessible names
 */

{ rule_id             : 'WIDGET_1',
  last_updated        : '2021-07-07',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP3,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['[role="widget"]'],
  primary_property    : 'accessible_name',
  resource_properties : ['accessible_description', 'computed_label_source'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

     var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
     var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

     var widgets     = dom_cache.controls_cache.widget_elements;
     var widgets_len = widgets.length;

     // Check to see if valid cache reference
     if (widgets && widgets_len) {

       for (var i = 0; i < widgets_len; i++) {
         var we = widgets[i];
         var de = we.dom_element;

         if (de.is_widget) {

           if (de.computed_style.is_visible_to_at == VISIBILITY.VISIBLE) {

             if (we.computed_label && we.computed_label.length) {
               rule_result.addResult(TEST_RESULT.PASS, we, 'ELEMENT_PASS_1', [de.tag_name, de.role, we.computed_label]);
             }
             else {
               if (de.role_info.nameRequired) {
                 rule_result.addResult(TEST_RESULT.FAIL, we, 'ELEMENT_FAIL_1', [de.tag_name, de.role]);
               } else {
                rule_result.addResult(TEST_RESULT.MANUAL_CHECK, we, 'ELEMENT_MC_1', [de.tag_name, de.role]);
              }
            }
           }
           else {
             rule_result.addResult(TEST_RESULT.HIDDEN, we, 'ELEMENT_HIDDEN_1', [de.tag_name, de.role]);
           }
         }
       } // end loop
     }
   } // end validation function
},

/**
 * @object WIDGET_2
 *
 * @desc Elements with onClick event handlers event handlers need role
 */

{ rule_id             : 'WIDGET_2',
  last_updated        : '2021-07-07',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP3,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['[onClick]'],
  primary_property    : 'has_click',
  resource_properties : ['tag_name', 'role', 'is_widget'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

     function hasDecendantWidgetRole(dom_element) {

       function checkChildren(list) {

         if (!list) return false;

         var flag = false;

         for (var i = 0; (i < list.length) && !flag; i++) {

           var de = list[i];

           if (de.type != Node.ELEMENT_NODE) continue;

           if (de.is_widget ||
               "input textarea button select".indexOf(de.tag_name) ||
               de.tag_name === "a" ||
               de.tag_name === "area") return true;

           if (de.child_dom_elements.length) flag = checkChildren(de.child_dom_elements);

         }

         return flag;

       }

       return checkChildren(dom_element.child_dom_elements);
     }

    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

    var dom_elements     = dom_cache.element_cache.dom_elements;
    var dom_elements_len = dom_elements.length;

    if (dom_elements && dom_elements_len) {

      for (var i = 0; i < dom_elements_len; i++) {
        var de = dom_elements[i];
        var style = de.computed_style;

        if (de.events.has_click &&
            ((de.tag_name !== 'body') &&
             (de.tag_name !== 'frame') &&
             (de.tag_name !== 'iframe') &&
             (de.tag_name !== 'embed') &&
             (de.tag_name !== 'object') &&
             (de.tag_name !== 'applet'))) {

          if (style.is_visible_to_at == VISIBILITY.VISIBLE || style.is_visible_onscreen == VISIBILITY.VISIBLE ) {

            if (de.is_widget) {
              rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.tag_name]);
            }
            else {
              if ("input textarea button select".indexOf(de.tag_name) >= 0) {
                rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', [de.tag_name]);
              }
              else {
                if ("a area".indexOf(de.tag_name) >= 0) {
                  rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_3', [de.tag_name]);
                }
                else {
                  if (hasDecendantWidgetRole(de)) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.tag_name]);
                  else rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.tag_name]);
                }
              }
            }
          }
          else {
            rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tag_name]);
          }
        }
      } // end loop
    }
  } // end validation function
},

/**
 * @object WIDGET_3
 *
 * @desc Elements with role values must have valid widget or landmark roles
 */

{ rule_id             : 'WIDGET_3',
  last_updated        : '2021-07-07',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP3,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['[role]'],
  primary_property    : 'role',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

     var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
     var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

     var elements_with_role     = dom_cache.controls_cache.elements_with_role;
     var elements_with_role_len = elements_with_role.length;

     if (elements_with_role && elements_with_role_len) {

       for (var i = 0; i < elements_with_role_len; i++) {
         var de = elements_with_role[i];
         var style = de.computed_style;

         if (style.is_visible_to_at == VISIBILITY.VISIBLE || style.is_visible_onscreen == VISIBILITY.VISIBLE ) {

           if (de.is_widget) rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.role]);
           else if (de.is_landmark) rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', [de.role]);
           else if (de.is_live) rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_3', [de.role]);
           else if (de.is_section) rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_4', [de.role]);
           else if (de.is_abstract) rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.role]);
           else if (de.role.length === 0) rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', []);
           else rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_3', [de.role]);
         }
         else {
           rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tag_name, de.role]);
         }
       } // end loop
     }
   } // end validation function
},

/**
 * @object WIDGET_4
 *
 * @desc Elements with ARIA attributes have valid values
 */

{ rule_id             : 'WIDGET_4',
  last_updated        : '2021-07-07',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP3,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['[aria-atomic]',
                         '[aria-autocomplete]',
                         '[aria-busy]',
                         '[aria-checked]',
                         '[aria-colcount]',
                         '[aria-colindex]',
                         '[aria-colspan]',
                         '[aria-current]',
                         '[aria-disabled]',
                         '[aria-dropeffect]',
                         '[aria-expanded]',
                         '[aria-grabbed]',
                         '[aria-haspopup]',
                         '[aria-hidden]',
                         '[aria-invalid]',
                         '[aria-label]',
                         '[aria-labelledby]',
                         '[aria-live]',
                         '[aria-modal]',
                         '[aria-multiline]',
                         '[aria-multiselectable]',
                         '[aria-orientation]',
                         '[aria-pressed]',
                         '[aria-readonly]',
                         '[aria-relevant]',
                         '[aria-required]',
                         '[aria-rowcount]',
                         '[aria-rowindex]',
                         '[aria-rowspan]',
                         '[aria-selected]',
                         '[aria-sort]'],
  primary_property    : '',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

     function makeProp(label, value) {

       var p = {};

       p.label = label;
       p.value = value;
       p.description = "";

       return p;

     }

     var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
     var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

     var elements_with_aria_attributes     = dom_cache.controls_cache.elements_with_aria_attributes;
     var elements_with_aria_attributes_len = elements_with_aria_attributes.length;

     if (elements_with_aria_attributes && elements_with_aria_attributes_len) {

       for (var i = 0; i < elements_with_aria_attributes_len; i++) {
         var de = elements_with_aria_attributes[i];
         var style = de.computed_style;
         var aria_attrs = de.aria_attributes;
         var aria_attrs_len = aria_attrs.length;

         for (var j = 0; j < aria_attrs_len; j++) {

           var attr = aria_attrs[j];

           var prop = makeProp(attr.name, attr.value);

           if (style.is_visible_to_at == VISIBILITY.VISIBLE || style.is_visible_onscreen == VISIBILITY.VISIBLE ) {

             if (attr.is_value_valid && attr.tokens) rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [attr.name, attr.value], [prop]);
             else if (attr.is_value_valid) rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', [attr.name, attr.value, attr.type], [prop]);
             else if (attr.type === 'nmtoken' || attr.type === 'boolean') rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [attr.name, attr.value, attr.tokens], [prop]);
             else if (attr.type === 'nmtokens') rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', [attr.name, attr.value, attr.tokens], [prop]);
             else rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_3', [attr.name, attr.value, attr.type], [prop]);

           }
           else {
             rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [attr.name, attr.value], [prop]);
           }

         } // end loop
       } // end loop
     }
   } // end validation function
},

/**
 * @object WIDGET_5
 *
 * @desc ARIA attributes must be defined
 */

{ rule_id             : 'WIDGET_5',
  last_updated        : '2021-07-07',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP3,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['[aria-atomic]',
                         '[aria-autocomplete]',
                         '[aria-busy]',
                         '[aria-checked]',
                         '[aria-controls]',
                         '[aria-describedby]',
                         '[aria-disabled]',
                         '[aria-dropeffect]',
                         '[aria-expanded]',
                         '[aria-flowto]',
                         '[aria-grabbed]',
                         '[aria-haspopup]',
                         '[aria-hidden]',
                         '[aria-invalid]',
                         '[aria-label]',
                         '[aria-labelledby]',
                         '[aria-level]',
                         '[aria-live]',
                         '[aria-multiline]',
                         '[aria-multiselectable]',
                         '[aria-orientation]',
                         '[aria-owns]',
                         '[aria-pressed]',
                         '[aria-readonly]',
                         '[aria-relevant]',
                         '[aria-required]',
                         '[aria-selected]',
                         '[aria-sort]',
                         '[aria-valuemax]',
                         '[aria-valuemin]',
                         '[aria-valuenow]',
                         '[aria-valuetext]'],
  primary_property    : '',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

     function makeProp(label, value) {

       var p = {};

       p.label = label;
       p.value = value;
       p.description = "";

       return p;

     }

     var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
     var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

     var elements_with_aria_attributes     = dom_cache.controls_cache.elements_with_aria_attributes;
     var elements_with_aria_attributes_len = elements_with_aria_attributes.length;

     if (elements_with_aria_attributes && elements_with_aria_attributes_len) {

       for (var i = 0; i < elements_with_aria_attributes_len; i++) {
         var de = elements_with_aria_attributes[i];

         var style = de.computed_style;
         var aria_attrs = de.aria_attributes;
         var aria_attrs_len = aria_attrs.length;

         for (var j = 0; j < aria_attrs_len; j++) {

           var attr = aria_attrs[j];
           var prop = makeProp(attr.name, attr.value);

           if (style.is_visible_to_at == VISIBILITY.VISIBLE || style.is_visible_onscreen == VISIBILITY.VISIBLE ) {
             if (attr.is_valid_attribute) rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [attr.name], [prop]);
             else rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [attr.name], [prop]);
           }
           else {
             rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [attr.name, attr.value], [prop]);
           }

         } // end loop
       } // end loop
     }
   } // end validation function
},

/**
 * @object WIDGET_6
 *
 * @desc Widgets must have required properties
 */

{ rule_id             : 'WIDGET_6',
  last_updated        : '2021-07-07',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP3,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['[checkbox]',
                         '[combobox]',
                         '[menuitemcheckbox]',
                         '[option]',
                         '[scrollbar]',
                         '[slider]',
                         '[switch]'],
  primary_property    : 'role',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

     function getRequiredPropertiesAndValues(dom_element, required_props) {

       var rps = [];

       var attrs     = dom_element.aria_attributes;
       var attrs_len = attrs.length;

       for (var i = 0; i < required_props.length; i++) {

         var prop = required_props[i];

         var flag = false;

         for (var j = 0; j <attrs_len; j++) {
           if (prop === attrs[j].name) {
             flag = true;
             break;
           }
         }

         var rp = {};
         rp.label = prop;
         rp.description = "";
         rp.defined = flag;

         if (flag) {
           rp.value  = attrs[j].value;
         }
         else {
           rp.value  = "undefined";
         }

         rps.push(rp);

       }

       return rps;

     }

     function getPropsString(props) {

       var str = "";
       var prop_max = props.length - 1;

       for (var i = 0; i < props.length; i++ ) {
         str += props[i];
         if (i !== prop_max) str += ", ";
       }

       return str;

     }

     var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
     var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

     var widget_elements     = dom_cache.controls_cache.widget_elements;
     var widget_elements_len = widget_elements.length;

     if (widget_elements && widget_elements) {

       for (var i = 0; i < widget_elements_len; i++) {
         var we = widget_elements[i];
         var de = we.dom_element;
         var style = de.computed_style;

         var required_properties = de.role_info.requiredProps;

         if (required_properties && required_properties.length) {

           if (style.is_visible_to_at == VISIBILITY.VISIBLE || style.is_visible_onscreen == VISIBILITY.VISIBLE ) {

             var props_string   = getPropsString(required_properties);
             var required_props = getRequiredPropertiesAndValues(de, required_properties);

             var flag = true;

             for (var j = 0; (j < required_props.length) && flag; j++) flag = flag && required_props[j].defined;

             if (flag) rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.role, props_string], required_props);
             else rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.role, props_string], required_props);
           }
           else {
             rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.role]);
           }
         }
       } // end loop
     }
   } // end validation function
},

/**
 * @object WIDGET_7
 *
 * @desc Widgets must have required owned elements
 */

{ rule_id             : 'WIDGET_7',
  last_updated        : '2021-07-02',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP3,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['[feed]',
                         '[grid]',
                         '[list]',
                         '[listbox]',
                         '[menu]',
                         '[menubar]',
                         '[radiogroup]',
                         '[row]',
                         '[rowgroup]',
                         '[table]',
                         '[tablist]',
                         '[tree]',
                         '[treegrid]'],
  primary_property    : 'role',
  resource_properties : ['aria_busy', 'aria_owns'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {


     function getRequiredChildRolesString(required_children) {

       var str = "";
       var required_children_max = required_children.length - 1;

       for (var i = 0; i < required_children.length; i++ ) {
         str += required_children[i];
         if (i !== required_children_max) str += ", ";
       }

       return str;

     }

     var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
     var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

     var widget_elements     = dom_cache.controls_cache.widget_elements;
     var widget_elements_len = widget_elements.length;

     if (widget_elements && widget_elements) {

       for (var i = 0; i < widget_elements_len; i++) {
         var we = widget_elements[i];
         var de = we.dom_element;
         var style = de.computed_style;

         var required_child_roles = de.role_info.requiredChildren;

         if (required_child_roles && required_child_roles.length) {

           if (style.is_visible_to_at == VISIBILITY.VISIBLE || style.is_visible_onscreen == VISIBILITY.VISIBLE ) {

             if (we.aria_busy) {
               rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', [de.role]);
             } else {
               var flag = false;

               for (var j = 0; (j < required_child_roles.length) && !flag; j++) {
                 flag = we.hasRequiredChildRole(required_child_roles[j]);
               }

               var required_child_roles_string = getRequiredChildRolesString(required_child_roles);

               if (flag) {
                rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.role, required_child_roles_string]);
               } else {
                rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.role, required_child_roles_string]);
              }
             }
           }
           else {
             rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.role]);
           }
         }
       } // end loop
     }
   } // end validation function
},

/**
 * @object WIDGET_8
 *
 * @desc Widgets must have required parent roles
 */

{ rule_id             : 'WIDGET_8',
  last_updated        : '2021-07-07',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP3,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : [ "caption",
                          "cell",
                          "columnheader",
                          "gridcell",
                          "listitem",
                          "menuitem",
                          "menuitemcheckbox",
                          "menuitemradio",
                          "option",
                          "row",
                          "rowgroup",
                          "rowheader",
                          "tab",
                          "treeitem"
                      ],
  primary_property    : 'role',
  resource_properties : ['aria_owns'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {


     function getRequiredRolesString(required_roles) {

       var str = "";
       var required_roles_max = required_roles.length - 1;

       for (var i = 0; i < required_roles.length; i++ ) {
         if (i > 0) {
          if ( i === required_roles_max) {
            str += "@ or @" + required_roles[i];
          } else {
            str += "@, @" + required_roles[i];
;
          }
         } else {
           str += required_roles[i];
         }
       }

       return str;

     }

     var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
     var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

     var widget_elements     = dom_cache.controls_cache.widget_elements;
     var widget_elements_len = widget_elements.length;

     if (widget_elements && widget_elements) {

       for (var i = 0; i < widget_elements_len; i++) {
         var we = widget_elements[i];
         var de = we.dom_element;
         var style = de.computed_style;

         var required_parent_roles = de.role_info.requiredParents;

         if (required_parent_roles && required_parent_roles.length) {

           if (style.is_visible_to_at == VISIBILITY.VISIBLE || style.is_visible_onscreen == VISIBILITY.VISIBLE ) {

             var flag = false;

             for (var j = 0; (j < required_parent_roles.length) && !flag; j++) {
                var role = required_parent_roles[j];
                flag = we.isOwnedByRole(role);
             }

             var required_roles_string = getRequiredRolesString(required_parent_roles);

             if (flag) {
               rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de.role, role]);
             } else {
               rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [required_roles_string, de.role]);
             }
           }
           else {
             rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.role]);
           }
         }
       } // end loop
     }
   } // end validation function
},
/**
 * @object WIDGET_9
 *
 * @desc Widgets cannot be owned by more than one widget
 */

{ rule_id             : 'WIDGET_9',
  last_updated        : '2021-07-07',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP3,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['[aria-owns]'],
  primary_property    : 'is_owned',
  resource_properties : ['owner_controls'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

     var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

     var dom_elements     = dom_cache.element_cache.dom_elements;
     var dom_elements_len = dom_elements.length;
     var we;

     for (var i = 0; i < dom_elements_len; i++) {
        var de = dom_elements[i];

        if (de.owned_by.length === 1) {
          we = de.owned_by[0];
          rule_result.addResult(TEST_RESULT.PASS, we, 'ELEMENT_PASS_1', [we, de]);
        } else {
          if (de.owned_by.length > 1) {
            for (var j = 0; j < de.owned_by.length; j += 1) {
              we = de.owned_by[j];
              rule_result.addResult(TEST_RESULT.FAIL, we, 'ELEMENT_FAIL_1', [we, de]);
            } // end loop
          }
        }
     } // end loop

   } // end validation function
},

/**
 * @object WIDGET_10
 *
 * @desc Range widgets with ariavaluenow mut be in range of aria-valuemin and aria-valuemax
 */

{ rule_id             : 'WIDGET_10',
  last_updated        : '2021-07-07',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP3,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['[role="meter"]',
                         '[role="progress"]',
                         '[role="scrollbar"]',
                         '[role="slider"]',
                         '[role="spinbutton"]'],
  primary_property    : '',
  resource_properties : ['aria-valuemin', 'aria-valuenow', 'aria-valuemax'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

     var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
     var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

     var dom_elements     = dom_cache.element_cache.dom_elements;
     var dom_elements_len = dom_elements.length;

     if (dom_elements && dom_elements) {

       for (var i = 0; i < dom_elements_len; i++) {
         var de = dom_elements[i];
         var style = de.computed_style;

         if (de.is_range) {

            if (style.is_visible_to_at === VISIBILITY.VISIBLE) {

              var is_value_required = !('progressbar spinbutton'.indexOf(de.role) >= 0);

              var valuetext          = de.getAttributeValue('aria-valuetext');
              var is_valuetext_valid = de.isAttributeValueValid('aria-valuetext', valuetext);

              var min          = de.getAttributeValue('aria-valuemin');
              var is_min_valid = de.isAttributeValueValid('aria-valuemin', min);

              var max          = de.getAttributeValue('aria-valuemax');
              var is_max_valid = de.isAttributeValueValid('aria-valuemax', max);

              var value          = de.getAttributeValue('aria-valuenow');
              var is_value_valid = de.isAttributeValueValid('aria-valuenow', value);

              if (is_valuetext_valid) {
                rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_1', [de, valuetext]);
              } else {
                if (is_value_valid) {
                  if (is_max_valid && is_min_valid) {
                    if (min < max) {
                      if ((min <= value) && (value <= max)) {
                        rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_2', [de, value, min, max]);
                      } else {
                        rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [value, min, max]);
                      }
                    } else {
                      rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', [min, max]);
                    }
                  } else {
                    rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_3', [de, min, max]);
                  }
                } else {
                  if (is_value_required) {
                    rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_4', [de]);
                  } else {
                    rule_result.addResult(TEST_RESULT.PASS, de, 'ELEMENT_PASS_3', [de]);
                  }
                }
              }
            } else {
              rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de]);
            }
         }
       } // end loop
     }
   } // end validation function
},

/**
 * @object WIDGET_11
 *
 * @desc Elements with mouse down, mouse move and mouse up events must have roles
 */

{ rule_id             : 'WIDGET_11',
  last_updated        : '2021-07-07',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP3,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['[onmousedown]', '[onmouseup]', '[onmousemove]', '[onkeydown]', '[onkeyup]', '[onkeypress]', '[onclick]', '[ondbclick]', '[ondrag]', '[ondragstart]', '[ondragend]', '[ondragover]', '[onenter]', '[ondragleave]', '[ondrop]'],
  primary_property    : '',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

     function getUIEvents(dom_element) {

        var events = dom_element.getMouseEvents();
        events += dom_element.getClickEvents();
        events += dom_element.getDragEvents();
        events += dom_element.getKeyboardEvents();

        return events;
     }

     var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
     var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

     var dom_elements_with_events     = dom_cache.controls_cache.elements_with_events;
     var dom_elements_with_events_len = dom_elements_with_events.length;

     if (dom_elements_with_events_len) {

       for (var i = 0; i < dom_elements_with_events_len; i++) {
         var de = dom_elements_with_events[i];

         var style = de.computed_style;
         var events = getUIEvents(de);

         if (events.length &&
             (de.tag_name !== 'embed') &&
             (de.tag_name !== 'applet') &&
             (de.tag_name !== 'object') &&
             (de.tag_name !== 'video') &&
             (de.tag_name !== 'audio')) {

           if (style.is_visible_to_at === VISIBILITY.VISIBLE) {

             if (de.is_widget) {
               rule_result.addResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MANUAL_CHECK_1', [de.role, events]);
             }
             else {
               if (de.is_interactive) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MANUAL_CHECK_2', [de.tag_name, events]);
               else if (de.containsInteractiveElements()) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MANUAL_CHECK_3', [de.tag_name, events]);
               else rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.tag_name, events]);
             }
           }
           else {
             rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tag_name]);
           }
         }
       } // end loop
     }
   } // end validation function
},
/**
 * @object WIDGET_12
 *
 * @desc Element with widget role label should describe the purpose of the widget
 *
 */

{ rule_id             : 'WIDGET_12',
  last_updated        : '2015-08-10',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '2.4.6',
  wcag_related_ids    : ['1.3.1', '3.3.2'],
  target_resources    : ['[role="widget"]'],
  primary_property    : 'accessible_name',
  resource_properties : ['accessible_description', 'computed_label_source'],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {

     var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
     var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

     var widgets     = dom_cache.controls_cache.widget_elements;
     var widgets_len = widgets.length;

     // Check to see if valid cache reference
     if (widgets && widgets_len) {

       for (var i = 0; i < widgets_len; i++) {
         var we = widgets[i];
         var de = we.dom_element;

         if (de.is_widget) {

           if (de.computed_style.is_visible_to_at == VISIBILITY.VISIBLE) {

             if (we.computed_label && we.computed_label.length) {
               rule_result.addResult(TEST_RESULT.MANUAL_CHECK, we, 'ELEMENT_MC_1', [we.computed_label, de.tag_name, de.role]);
             }
             else {
               if (!de.role_info.nameRequired) rule_result.addResult(TEST_RESULT.MANUAL_CHECK, we, 'ELEMENT_MC_2', [de.tag_name, de.role]);
               else rule_result.addResult(TEST_RESULT.FAIL, we, 'ELEMENT_FAIL_1', [de.tag_name, de.role]);
             }
           }
           else {
             rule_result.addResult(TEST_RESULT.HIDDEN, we, 'ELEMENT_HIDDEN_1', [de.tag_name, de.role]);
           }
         }
       } // end loop
     }
   } // end validation function
},

/**
 * @object WIDGET_13
 *
 * @desc Roles that prohibit accessible names
 */

{ rule_id             : 'WIDGET_13',
  last_updated        : '2021-07-07',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : ['2.4.6'],
  target_resources    : [ "caption",
                          "code",
                          "deletion",
                          "emphasis",
                          "generic",
                          "insertion",
                          "none",
                          "paragraph",
                          "presentation",
                          "strong",
                          "subscript",
                          "superscript"],
  primary_property    : '',
  resource_properties : [],
  language_dependency : "",
  validate            : function (dom_cache, rule_result) {


     var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
     var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

     var dom_elements     = dom_cache.element_cache.dom_elements;
     var dom_elements_len = dom_elements.length;

     for (var i = 0; i < dom_elements_len; i++) {
        var de = dom_elements[i];
        var style = de.computed_style;
        var implicit_role = '';

        if (de.element_aria_info) {
          implicit_role = de.element_aria_info.defaultRole;
        }

        if (de.has_aria_label || de.has_aria_labelledby) {

          if (de.role &&
              OpenAjax.a11y.aria.designPatterns[de.role] &&
              OpenAjax.a11y.aria.designPatterns[de.role].nameProhibited) {
            if (style.is_visible_to_at == VISIBILITY.VISIBLE || style.is_visible_onscreen == VISIBILITY.VISIBLE ) {
              rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [de.tag_name, de.role]);
            } else {
              rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tag_name, de.role]);
            }
          } else {
            if (!de.role &&
                implicit_role &&
                OpenAjax.a11y.aria.designPatterns[implicit_role] &&
                OpenAjax.a11y.aria.designPatterns[implicit_role].nameProhibited) {
              if (style.is_visible_to_at == VISIBILITY.VISIBLE || style.is_visible_onscreen == VISIBILITY.VISIBLE ) {
                if (de.tag_name === 'a') {
                  rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_3', []);
                } else {
                  rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', [de.tag_name]);
                }
              } else {
                rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_2', [de.tag_name]);
              }
            }
          }
        } // end loop
      }
   } // end validation function
},

/**
 * @object WIDGET_14
 *
 * @desc     Verify live regions are being used properly
 */
{ rule_id             : 'WIDGET_14',
  last_updated        : '2017-02-08',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '4.1.2',
  wcag_related_ids    : [],
  target_resources    : ['[role="alert"]','[role="log"]','[role="status"]','[aria-live]'],
  primary_property    : 'is_live',
  resource_properties : ['is_live', 'role','aria_live', 'aria_atomic', 'aria_busy', 'aria_relavent'],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;
    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;

    var dom_elements     = dom_cache.element_cache.dom_elements;
    var dom_elements_len = dom_elements.length;


    for (var i = 0; i < dom_elements_len; i++ ) {

      var de =dom_elements[i];

      if (de.type != Node.ELEMENT_NODE || !de.is_live || (de.aria_live === 'off')) continue;

      var has_failure = false;

      var has_live_role =  de.role && de.role.length && (" alert log status".indexOf(de.role) > 0);


      if (de.has_aria_live) {
        if (de.computed_style.is_visible_to_at === VISIBILITY.HIDDEN) {
          rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tag_name, de.aria_live]);
        }
        else {
          if (has_live_role) {

            switch (de.role) {

              case 'alert':
                if (de.aria_live === 'polite') {
                  rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', ['polite', 'assertive',  de.role]);
                  has_failure = true;
                }
                break;

              case 'log':
              case 'status':
                if (de.aria_live === 'assertive') {
                  rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', ['assertive', 'polite', de.role]);
                  has_failure = true;
                }
                break;

              default:
                break;

            }
          }
          else {
            rule_result.addResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.tag_name, de.aria_live]);
          }
        }
      }

      if (de.has_aria_atomic && has_live_role && (de.role === 'alert' || de.role === 'status')) {

        if (de.aria_atomic === 'false') {
          rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', [de.role]);
          has_failure = true;
        }

      }

      if(has_live_role && !has_failure) {

        switch (de.role) {

          case 'alert':
            if (de.computed_style.is_visible_to_at === VISIBILITY.HIDDEN) {
              rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_2', [de.tag_name, de.role]);
            }
            else {
              rule_result.addResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_2', [de.tag_name]);
            }
            break;

          case 'log':
            if (de.computed_style.is_visible_to_at === VISIBILITY.HIDDEN) {
              rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_2', [de.tag_name, de.role]);
            }
            else {
              rule_result.addResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_3', [de.tag_name]);
            }
            break;

          case 'status':
            if (de.computed_style.is_visible_to_at === VISIBILITY.HIDDEN) {
              rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_2', [de.tag_name, de.role]);
            }
            else {
              rule_result.addResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_4', [de.tag_name]);
            }
            break;

          default:
            break;
        }
      }
    }
  } // end validation function
},

/**
 * @object WIDGET_15
 *
 * @desc     Roles with deprecated ARIA attributes
 */
{ rule_id             : 'WIDGET_15',
  last_updated        : '2021-08-10',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '4.1.1',
  wcag_related_ids    : ['4.1.2'],
  target_resources    : [
        "alert",
        "alertdialog",
        "article",
        "banner",
        "blockquote",
        "button",
        "caption",
        "cell",
        "checkbox",
        "code",
        "command",
        "complementary",
        "composite",
        "contentinfo",
        "definition",
        "deletion",
        "dialog",
        "directory",
        "document",
        "emphasis",
        "feed",
        "figure",
        "form",
        "generic",
        "grid",
        "group",
        "heading",
        "img",
        "input",
        "insertion",
        "landmark",
        "link",
        "list",
        "listbox",
        "listitem",
        "log",
        "main",
        "marquee",
        "math",
        "meter",
        "menu",
        "menubar",
        "menuitem",
        "menuitemcheckbox",
        "menuitemradio",
        "navigation",
        "note",
        "option",
        "paragraph",
        "presentation",
        "progressbar",
        "radio",
        "radiogroup",
        "range",
        "region",
        "row",
        "rowgroup",
        "scrollbar",
        "search",
        "section",
        "sectionhead",
        "select",
        "separator",
        "spinbutton",
        "status",
        "strong",
        "structure",
        "subscript",
        "superscript",
        "switch",
        "tab",
        "table",
        "tablist",
        "tabpanel",
        "term",
        "time",
        "timer",
        "toolbar",
        "tooltip",
        "tree",
        "treegrid",
        "treeitem",
        "widget",
        "window"
    ],
  primary_property    : 'role',
  resource_properties : [
        "aria-disabled",
        "aria-errormessage",
        "aria-haspopup",
        "aria-invalid",
        "aria-checked",
        "aria-selected"
    ],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

     var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
     var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

     var dom_elements     = dom_cache.element_cache.dom_elements;
     var dom_elements_len = dom_elements.length;

     for (var i = 0; i < dom_elements_len; i++) {
        var de = dom_elements[i];
        var style = de.computed_style;
        var role = de.role;
        var implicit_role = '';
        var deprecatedProps = [];

        if (!de.has_role && de.element_aria_info) {
          implicit_role = de.element_aria_info.defaultRole;
        }

        if (de.has_role && OpenAjax.a11y.aria.designPatterns[role]) {
          deprecatedProps = OpenAjax.a11y.aria.designPatterns[role].deprecatedProps;
        } else {
          if (implicit_role && OpenAjax.a11y.aria.designPatterns[implicit_role]) {
            deprecatedProps = OpenAjax.a11y.aria.designPatterns[implicit_role].deprecatedProps;
          }
        }

        if (deprecatedProps.length) {
          for (var j = 0; j < deprecatedProps.length; j += 1) {
            var prop = deprecatedProps[j];

            if (de.node.hasAttribute(prop)) {

              if (role) {
                if (style.is_visible_to_at == VISIBILITY.VISIBLE || style.is_visible_onscreen == VISIBILITY.VISIBLE ) {
                  rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_1', [prop, de.tag_name, role]);
                } else {
                  rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [prop, de.tag_name, role]);
                }
              } else {
                if (style.is_visible_to_at == VISIBILITY.VISIBLE || style.is_visible_onscreen == VISIBILITY.VISIBLE ) {
                  rule_result.addResult(TEST_RESULT.FAIL, de, 'ELEMENT_FAIL_2', [prop, de.tag_name, implicit_role]);
                } else {
                  rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_2', [prop, de.tag_name, implicit_role]);
                }
              }
            }
          }
        }
      }
  } // end validation function
},

/**
 * @object WIDGET_16
 *
 * @desc     Web compnents require manual check
 */
{ rule_id             : 'WIDGET_16',
  last_updated        : '2021-09-12',
  rule_scope          : OpenAjax.a11y.RULE_SCOPE.ELEMENT,
  rule_category       : OpenAjax.a11y.RULE_CATEGORIES.WIDGETS_SCRIPTS,
  rule_group          : OpenAjax.a11y.RULE_GROUP.GROUP2,
  wcag_primary_id     : '2.1.1',
  wcag_related_ids    : ['1.1.1','1.4.1','1.4.3','1.4.4','2.1.2','2.2.1','2.2.2', '2.4.7','2.4.3','2.4.7','3.3.2'],
  target_resources    : ["Custom elements using web component APIs"],
  primary_property    : '',
  resource_properties : [],
  language_dependency : "",
  validate          : function (dom_cache, rule_result) {

    var VISIBILITY  = OpenAjax.a11y.VISIBILITY;
    var TEST_RESULT = OpenAjax.a11y.TEST_RESULT;

    var dom_elements     = dom_cache.element_cache.dom_elements;
    var dom_elements_len = dom_elements.length;

    for (var i = 0; i < dom_elements_len; i++) {
      var de = dom_elements[i];
      var style = de.computed_style;

      if (de.tag_name.indexOf('-') >= 0) {
        if (!de.node.shadowRoot) {
          if (style.is_visible_to_at == VISIBILITY.VISIBLE || style.is_visible_onscreen == VISIBILITY.VISIBLE ) {
            rule_result.addResult(TEST_RESULT.MANUAL_CHECK, de, 'ELEMENT_MC_1', [de.tag_name]);
          } else {
          rule_result.addResult(TEST_RESULT.HIDDEN, de, 'ELEMENT_HIDDEN_1', [de.tag_name]);
          }
        }
      }
    }
  } // end validation function
}

]);




/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/* OpenAjax Alliance (OAA) Test Ruleset for WCAG 2.0 (Beta)           */
/* --------------------------------------------------------------------------- */

(function () {

  var ruleset_info = {
    ruleset_id    : "TEST",
    version       : "1.1.0",
    last_updated  : "2017-02-01",
    author        : "OpenAjax Accessibility Task Force",
    author_url    : "https://www.openajax.org/member/wiki/Accessibility",

    nls : {
      'en-us' : {
         title           : "TEST Ruleset: All rules in the library are included as required rules",
         abbrev          : "TEST",
         tooltip         : "Ruleset for use the the testsuite",
         description     : "Test ruleset used for the test suite to make sure all rules are tested.",
         description_url : ""
      }
    }
  };

  var rule_mappings = {
   AUDIO_1 : {
       required : true,
       enabled  : true
     },
   AUDIO_2 : {
       required : true,
       enabled  : true
     },
   AUDIO_3 : {
       required : true,
       enabled  : true
     },
   AUDIO_4 : {
       required : true,
       enabled  : true
     },
   BYPASS_1 : {
        required : false,
        enabled  : true
     },
   COLOR_1 : {
       required : true,
       enabled  : true
     },
   COLOR_2 : {
       required : true,
       enabled  : true
     },
   CONTROL_1 : {
       required : true,
       enabled  : true
     },
   CONTROL_2 : {
       required : true,
       enabled  : true
     },
   CONTROL_3 : {
       required : true,
       enabled  : true
     },
   CONTROL_4 : {
       required : true,
       enabled  : true
     },
   CONTROL_5 : {
       required : true,
       enabled  : true
     },
   CONTROL_6 : {
       required : true,
       enabled  : true
     },
   CONTROL_7 : {
       required : true,
       enabled  : true
     },
   CONTROL_8 : {
       required : true,
       enabled  : true
     },
   CONTROL_9 : {
       required : true,
       enabled  : true
     },
   CONTROL_10 : {
       required : true,
       enabled  : true
     },
   CONTROL_11 : {
       required : true,
       enabled  : true
     },
   ERROR_1 : {
       required : true,
       enabled  : true
     },
   ERROR_2 : {
       required : true,
       enabled  : true
     },
   ERROR_3 : {
       required : true,
       enabled  : true
     },
   ERROR_4 : {
       required : true,
       enabled  : true
     },
   ERROR_5 : {
       required : true,
       enabled  : true
     },
   FOCUS_1 : {
       required : true,
       enabled  : true
     },
   FOCUS_2 : {
       required : true,
       enabled  : true
     },
   FOCUS_3 : {
       required : true,
       enabled  : true
     },
   FOCUS_4 : {
       required : true,
       enabled  : true
     },
   FOCUS_5 : {
       required : true,
       enabled  : true
     },
   FRAME_1 : {
       required : true,
       enabled  : true
     },
   FRAME_2 : {
       required : true,
       enabled  : true
     },
   HEADING_1 : {
       required : true,
       enabled  : true
     },
   HEADING_2 : {
       required : true,
       enabled  : true
     },
   HEADING_3 : {
       required : true,
       enabled  : true
     },
   HEADING_5 : {
       required : true,
       enabled  : true
     },
   HEADING_6 : {
       required : true,
       enabled  : true
     },
   HEADING_7 : {
       required : true,
       enabled  : true
     },
   HEADING_8 : {
       required : false,
       enabled  : true
     },
   HTML_1 : {
       required : true,
       enabled  : true
     },
   HTML_2 : {
       required : true,
       enabled  : true
     },
   HTML_3 : {
       required : true,
       enabled  : true
     },
   IMAGE_1 : {
       required : true,
       enabled  : true
     },
   IMAGE_2 : {
       required : true,
       enabled  : true
     },
   IMAGE_3 : {
       required : true,
       enabled  : true
     },
   IMAGE_4_EN : {
       required : true,
       enabled  : true
     },
   IMAGE_5 : {
       required : true,
       enabled  : true
     },
   IMAGE_6 : {
       required : true,
       enabled  : true
     },
    IMAGE_7 : {
      required : true,
      enabled  : true
    },
   KEYBOARD_1 : {
       required : true,
       enabled  : true
     },
   KEYBOARD_2 : {
       required : true,
       enabled  : true
     },
   KEYBOARD_3 : {
       required : true,
       enabled  : true
     },
   LANDMARK_1 : {
       required : true,
       enabled  : true
     },
   LANDMARK_2 : {
       required : true,
       enabled  : true
     },
   LANDMARK_3 : {
       required : true,
       enabled  : true
     },
   LANDMARK_4 : {
       required : true,
       enabled  : true
     },
   LANDMARK_5 : {
       required : true,
       enabled  : true
     },
   LANDMARK_6 : {
       required : true,
       enabled  : true
     },
   LANDMARK_7 : {
       required : true,
       enabled  : true
     },
   LANDMARK_8 : {
       required : true,
       enabled  : true
     },
   LANDMARK_9 : {
       required : true,
       enabled  : true
     },
   LANDMARK_10 : {
       required : true,
       enabled  : true
     },
   LANDMARK_11 : {
       required : true,
       enabled  : true
     },
   LANDMARK_12 : {
       required : true,
       enabled  : true
     },
   LANDMARK_13 : {
       required : true,
       enabled  : true
     },
   LANDMARK_14 : {
       required : true,
       enabled  : true
     },
   LANDMARK_15 : {
       required : true,
       enabled  : true
     },
   LANDMARK_16 : {
       required : true,
       enabled  : true
     },
   LANDMARK_17 : {
       required : true,
       enabled  : true
     },
   LANDMARK_18 : {
       required : true,
       enabled  : true
     },
   LANDMARK_19 : {
       required : true,
       enabled  : true
     },
   LANGUAGE_1 : {
       required : true,
       enabled  : true
     },
   LANGUAGE_2 : {
       required : true,
       enabled  : true
     },
   LAYOUT_1 : {
       required : true,
       enabled  : true
     },
   LAYOUT_2 : {
       required : true,
       enabled  : true
     },
   LAYOUT_3 : {
       required : true,
       enabled  : true
     },
   LINK_1 : {
       required : true,
       enabled  : true
     },
   LINK_2 : {
       required : true,
       enabled  : true
     },
   LIST_1 : {
       required : true,
       enabled  : true
     },
   LIST_2 : {
       required : false,
       enabled  : true
     },
   NAVIGATION_1 : {
       required : true,
       enabled  : true
     },
   NAVIGATION_2 : {
       required : true,
       enabled  : true
     },
   NAVIGATION_3 : {
       required : true,
       enabled  : true
     },
   NAVIGATION_4 : {
       required : true,
       enabled  : true
     },
   NAVIGATION_5 : {
       required : true,
       enabled  : true
     },
   ORDER_1 : {
       required : true,
       enabled  : true
     },
   RESIZE_1 : {
       required : true,
       enabled  : true
     },
   ROLE_1 : {
       required : true,
       enabled  : true
     },
   ROLE_2 : {
       required : true,
       enabled  : true
     },
   ROLE_3 : {
       required : true,
       enabled  : true
     },
   ROLE_4 : {
       required : true,
       enabled  : true
     },
   ROLE_5 : {
       required : true,
       enabled  : true
     },
   ROLE_6 : {
       required : true,
       enabled  : true
     },
   ROLE_7 : {
       required : true,
       enabled  : true
     },
   ROLE_8 : {
       required : true,
       enabled  : true
     },
   ROLE_9 : {
       required : true,
       enabled  : true
     },
   ROLE_10 : {
       required : true,
       enabled  : true
     },
   ROLE_11 : {
       required : true,
       enabled  : true
     },
   ROLE_12 : {
       required : true,
       enabled  : true
     },
   ROLE_13 : {
       required : true,
       enabled  : true
     },
   ROLE_14 : {
       required : true,
       enabled  : true
     },
   SENSORY_1 : {
       required : true,
       enabled  : true
     },
   TABLE_1 : {
       required : true,
       enabled  : true
     },
   TABLE_2: {
       required : true,
       enabled  : true
     },
   TABLE_3 : {
       required : true,
       enabled  : true
     },
   TABLE_4 : {
       required : true,
       enabled  : true
     },
   TABLE_5 : {
       required : true,
       enabled  : true
     },
   TABLE_6 : {
       required : true,
       enabled  : true
     },
   TABLE_7 : {
        required : true,
        enabled  : true
     },
   TABLE_8 : {
        required : true,
        enabled  : true
     },
   TITLE_1 : {
       required : true,
       enabled  : true
     },
   TITLE_2 : {
       required : true,
       enabled  : true
     },
   TIMING_1 : {
       required : true,
       enabled  : true
     },
   TIMING_2 : {
       required : true,
       enabled  : true
     },
   TIMING_3 : {
       required : true,
       enabled  : true
     },
   VIDEO_1 : {
       required : true,
       enabled  : true
     },
   VIDEO_2 : {
       required : true,
       enabled  : true
     },
   VIDEO_3 : {
       required : true,
       enabled  : true
     },
   VIDEO_4 : {
       required : true,
       enabled  : true
     },
   VIDEO_5 : {
       required : true,
       enabled  : true
     },
   VIDEO_6 : {
       required : true,
       enabled  : true
     },
   VIDEO_7 : {
       required : true,
       enabled  : true
     },
   VIDEO_8 : {
       required : true,
       enabled  : true
     },
   VIDEO_9 : {
       required : true,
       enabled  : true
     },
   WIDGET_1: {
       required : true,
       enabled  : true
     },
   WIDGET_2: {
       required : true,
       enabled  : true
     },
   WIDGET_3: {
       required : true,
       enabled  : true
     },
   WIDGET_4: {
       required : true,
       enabled  : true
     },
   WIDGET_5: {
       required : true,
       enabled  : true
     },
   WIDGET_6: {
       required : true,
       enabled  : true
     },
   WIDGET_7: {
       required : true,
       enabled  : true
     },
   WIDGET_8: {
       required : true,
       enabled  : true
     },
   WIDGET_9: {
       required : true,
       enabled  : true
     },
   WIDGET_10: {
       required : true,
       enabled  : true
     },
   WIDGET_11: {
       required : true,
       enabled  : true
     },
   WIDGET_12: {
       required : true,
       enabled  : true
     },
   WIDGET_13: {
       required : true,
       enabled  : true
     },
   WIDGET_14: {
       required : true,
       enabled  : true
     },
   WIDGET_15: {
       required : false,
       enabled  : true
     },
   WIDGET_16: {
       required : true,
       enabled  : true
     }
  };

  try {
    // Create a Ruleset and add it to the RulesetManager

    var as_ruleset_factory = OpenAjax.a11y.RulesetFactory.newInstance();

    as_ruleset_factory.setParameter('rulesetInfo', ruleset_info);
    as_ruleset_factory.setParameter('ruleMappingInfo', rule_mappings);
    as_ruleset_factory.setFeature('locale', 'en-us');

    var as_ruleset = as_ruleset_factory.newRuleset();

    OpenAjax.a11y.RulesetManager.addRuleset(as_ruleset);
  }
  catch (err) {
    OpenAjax.a11y.logger.error("[TEST Ruleset] ** Error creating ARIA Test Ruleset");
  }

}());


/**
 * Copyright 2011-2021 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// import {OpenAjax} from '../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/* OpenAjax Alliance (OAA) ARIA Transitional Rule Mapping (Beta)               */
/* --------------------------------------------------------------------------- */

(function () {

  var ruleset_info = {
    ruleset_id    : "ARIA_TRANS",
    version       : "1.2.0",
    last_updated  : "2021-07-07",
    author        : "OpenAjax Accessibility Task Force",
    author_url    : "https://www.openajax.org/member/wiki/Accessibility",

    nls : {
      'en-us' : {
         title           : "HTML4 Legacy Techniques",
         abbrev          : "HTML4",
         tooltip         : "WCAG 2.0 Level A and AA requirements primarily using HTML4 techniques, but allows HTML5 and ARIA accessibility techniques.",
         description     : "Evaluation of W3C Web Content Accessibility Guidelines 2.0 Level A and AA conformance using HTML4 accessibility techniques, but allows for the use of HTML5 and ARIA techniques.  ARIA landmarks are NOT required, but if used must follow landmark and sectioning element requirements as outlined in HTML5 and ARIA.  The ruleset does NOT require the use of ARIA widget roles for identifying and describing interactive elements (e.g. popup menus, grids, trees, etc...) that cannot be not described by the native semantics of HTML4 and HTML5 form control and link elements.  This means the developer will need to do more manual checking and have a high level understanding of assistive technology to describe widgets typically using offscreen text and/or small images (e.g. with ALT text) to define and manage the roles, properties and states of interactive elements. ",
         description_url : ""
      }
    }
  };

  var rule_mappings = {
   AUDIO_1 : {
       required : true,
       enabled  : true
     },
   AUDIO_2 : {
       required : true,
       enabled  : true
     },
   AUDIO_3 : {
       required : true,
       enabled  : true
     },
   AUDIO_4 : {
       required : true,
       enabled  : true
     },
   BYPASS_1 : {
       required : false,
       enabled  : true
   },
   COLOR_1 : {
       required : true,
       enabled  : true
     },
   COLOR_2 : {
       required : true,
       enabled  : true
     },
   CONTROL_1 : {
       required : true,
       enabled  : true
     },
   CONTROL_2 : {
       required : true,
       enabled  : true
     },
   CONTROL_3 : {
       required : true,
       enabled  : true
     },
   CONTROL_4 : {
       required : true,
       enabled  : true
     },
   CONTROL_5 : {
       required : true,
       enabled  : true
     },
   CONTROL_6 : {
       required : true,
       enabled  : true
     },
   CONTROL_7 : {
       required : true,
       enabled  : true
     },
   CONTROL_8 : {
       required : true,
       enabled  : true
     },
   CONTROL_9 : {
       required : true,
       enabled  : true
     },
   CONTROL_10 : {
       required : true,
       enabled  : true
     },
   CONTROL_11 : {
       required : true,
       enabled  : true
     },
   ERROR_1 : {
       required : true,
       enabled  : true
     },
   ERROR_2 : {
       required : true,
       enabled  : true
     },
   ERROR_4 : {
       required : true,
       enabled  : true
     },
   ERROR_5 : {
       required : true,
       enabled  : true
     },
   FOCUS_1 : {
       required : true,
       enabled  : true
     },
   FOCUS_2 : {
       required : true,
       enabled  : true
     },
   FOCUS_3 : {
       required : true,
       enabled  : true
     },
   FOCUS_4 : {
       required : true,
       enabled  : true
     },
   FOCUS_5 : {
       required : true,
       enabled  : true
     },
   FRAME_1 : {
     required : true,
     enabled  : true
   },
   FRAME_2 : {
      required : true,
      enabled  : true
   },
   HEADING_1 : {
       required : false,
       enabled  : true
     },
   HEADING_2 : {
       required : false,
       enabled  : true
     },
   HEADING_3 : {
       required : false,
       enabled  : true
     },
   HEADING_5 : {
       required : true,
       enabled  : true
     },
   HEADING_6 : {
       required : false,
       enabled  : true
     },
   HTML_2 : {
       required : true,
       enabled  : true
     },
   HTML_3 : {
       required : true,
       enabled  : true
     },
   IMAGE_1 : {
       required : true,
       enabled  : true
     },
   IMAGE_2 : {
       required : true,
       enabled  : true
     },
   IMAGE_3 : {
       required : true,
       enabled  : true
     },
   IMAGE_4_EN : {
       required : false,
       enabled  : true
     },
   IMAGE_5 : {
       required : true,
       enabled  : true
     },
   IMAGE_6 : {
       required : true,
       enabled  : true
     },
    IMAGE_7 : {
      required : true,
      enabled  : true
    },
   KEYBOARD_1 : {
       required : true,
       enabled  : true
     },
   KEYBOARD_2 : {
       required : true,
       enabled  : true
     },
   KEYBOARD_3 : {
       required : true,
       enabled  : true
     },
   LANDMARK_5 : {
       required : false,
       enabled  : true
     },
   LANDMARK_7 : {
       required : false,
       enabled  : true
     },
   LANDMARK_8 : {
       required : false,
       enabled  : true
     },
   LANDMARK_9 : {
       required : false,
       enabled  : true
     },
   LANDMARK_10 : {
       required : false,
       enabled  : true
     },
   LANDMARK_11 : {
       required : false,
       enabled  : true
     },
   LANDMARK_12 : {
       required : false,
       enabled  : true
     },
   LANDMARK_13 : {
       required : false,
       enabled  : true
     },
   LANDMARK_14 : {
       required : false,
       enabled  : true
     },
   LANDMARK_15 : {
       required : false,
       enabled  : true
     },
   LANDMARK_16 : {
       required : false,
       enabled  : true
     },
   LANDMARK_17 : {
       required : false,
       enabled  : true
     },
   LANDMARK_18 : {
     required : true,
     enabled  : true
   },
   LANDMARK_19 : {
       required : false,
       enabled  : true
     },
   LANGUAGE_1 : {
       required : true,
       enabled  : true
     },
   LANGUAGE_2 : {
       required : true,
       enabled  : true
     },
   LAYOUT_1 : {
       required : true,
       enabled  : true
     },
   LAYOUT_2 : {
       required : false,
       enabled  : true
     },
   LAYOUT_3 : {
       required : true,
       enabled  : true
     },
   LINK_1 : {
       required : true,
       enabled  : true
     },
   LINK_2 : {
       required : false,
       enabled  : true
     },
   LIST_1 : {
       required : true,
       enabled  : true
     },
   LIST_2 : {
       required : false,
       enabled  : true
     },
   NAVIGATION_1 : {
       required : false,
       enabled  : true
     },
   NAVIGATION_2 : {
       required : false,
       enabled  : true
     },
   NAVIGATION_3 : {
       required : true,
       enabled  : true
     },
   NAVIGATION_4 : {
       required : false,
       enabled  : true
     },
   NAVIGATION_5 : {
       required : true,
       enabled  : true
     },
   ORDER_1 : {
       required : true,
       enabled  : true
     },
   RESIZE_1 : {
       required : true,
       enabled  : true
     },
   ROLE_1 : {
       required : false,
       enabled  : false
     },
   ROLE_2 : {
       required : false,
       enabled  : false
     },
   ROLE_3 : {
       required : false,
       enabled  : false
     },
   ROLE_4 : {
       required : false,
       enabled  : false
     },
   ROLE_5 : {
       required : false,
       enabled  : false
     },
   ROLE_6 : {
       required : false,
       enabled  : false
     },
   ROLE_7 : {
       required : false,
       enabled  : false
     },
   ROLE_8 : {
       required : false,
       enabled  : false
     },
   ROLE_9 : {
       required : false,
       enabled  : false
     },
   ROLE_10 : {
       required : false,
       enabled  : false
     },
   ROLE_11 : {
       required : false,
       enabled  : false
     },
   ROLE_12 : {
       required : false,
       enabled  : false
    },
      ROLE_13 : {
       required : false,
       enabled  : false
      },
   ROLE_14: {
       required : false,
       enabled  : false
     },
   SENSORY_1 : {
       required : true,
       enabled  : true
     },
   TABLE_1 : {
       required : true,
       enabled  : true
     },
   TABLE_2 : {
       required : false,
       enabled  : true
     },
   TABLE_3 : {
       required : false,
       enabled  : true
     },
   TABLE_4 : {
       required : true,
       enabled  : true
     },
   TABLE_5 : {
       required : false,
       enabled  : true
     },
   TABLE_6 : {
       required : false,
       enabled  : true
     },
      TABLE_7 : {
        required : true,
        enabled  : true
      },
   TITLE_1 : {
       required : true,
       enabled  : true
     },
   TIMING_1 : {
       required : true,
       enabled  : true
     },
   TIMING_2 : {
       required : true,
       enabled  : true
     },
   TIMING_3 : {
       required : true,
       enabled  : true
     },
   VIDEO_1 : {
       required : true,
       enabled  : true
     },
   VIDEO_2 : {
       required : true,
       enabled  : true
     },
   VIDEO_3 : {
       required : true,
       enabled  : true
     },
   VIDEO_4 : {
       required : true,
       enabled  : true
     },
   VIDEO_5 : {
       required : true,
       enabled  : true
     },
   VIDEO_6 : {
       required : true,
       enabled  : true
     },
   VIDEO_7 : {
       required : true,
       enabled  : true
     },
   VIDEO_8 : {
       required : true,
       enabled  : true
     },
   VIDEO_9 : {
       required : true,
       enabled  : true
     },
   WIDGET_1 : {
       required : true,
       enabled  : true
     },
   WIDGET_3 : {
       required : true,
       enabled  : true
     },
   WIDGET_4 : {
       required : true,
       enabled  : true
     },
   WIDGET_5 : {
       required : true,
       enabled  : true
     },
   WIDGET_6 : {
       required : true,
       enabled  : true
     },
   WIDGET_7 : {
       required : true,
       enabled  : true
     },
   WIDGET_8 : {
       required : true,
       enabled  : true
     },
   WIDGET_9 : {
       required : true,
       enabled  : true
     },
   WIDGET_10 : {
       required : true,
       enabled  : true
     },
   WIDGET_11 : {
       required : true,
       enabled  : true
     },
   WIDGET_12 : {
       required : true,
       enabled  : true
     },
   WIDGET_13 : {
       required : false,
       enabled  : true
     },
   WIDGET_14 : {
       required : true,
       enabled  : true
     },
   WIDGET_15: {
       required : false,
       enabled  : true
     },
   WIDGET_16: {
       required : true,
       enabled  : true
     }
  };

  try {
    // Create a Ruleset and add it to the RulesetManager

    var as_ruleset_factory = OpenAjax.a11y.RulesetFactory.newInstance();

    as_ruleset_factory.setParameter('rulesetInfo', ruleset_info);
    as_ruleset_factory.setParameter('ruleMappingInfo', rule_mappings);

    as_ruleset_factory.setFeature('locale', 'en-us');

    var as_ruleset = as_ruleset_factory.newRuleset();

    OpenAjax.a11y.RulesetManager.addRuleset(as_ruleset);
  }
  catch (err) {
    OpenAjax.a11y.logger.error("[ARIA TRANS Ruleset] ** Error creating ARIA Strict Ruleset");
  }

}());
/**
 * Copyright 2011-2018 OpenAjax Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 // import {OpenAjax} from '../openajax_a11y_constants.js';

/* --------------------------------------------------------------------------- */
/* OpenAjax Alliance (OAA) ARIA Strict Rule Mapping (Beta)                     */
/* --------------------------------------------------------------------------- */


(function () {

  var ruleset_info = {
    ruleset_id    : "ARIA_STRICT",
    version       : "1.2.0",
    last_updated  : "2021-07-07",
    author        : "OpenAjax Accessibility Task Force",
    author_url    : "https://www.openajax.org/member/wiki/Accessibility",

    nls : {
      'en-us' : {
         title           : "HTML5 and ARIA Techniques",
         abbrev          : "HTML5+ARIA",
         tooltip         : "WCAG 2.0 Level A and AA requirements using ARIA and HTML5 accessibility features.",
         description     : "Evaluation of W3C Web Content Accessibility Guidelines 2.0 Level A and AA conformance using HTML5 and ARIA accessibility techniques.  ARIA Landmarks are required for the identification and labeling of the sections of content on a web page. The ruleset requires the use of ARIA widget roles for identifying and describing interactive elements (e.g. popup menus, grids, trees, etc...) that cannot be not described by the native semantics of HTML5 form control and links elements.",
         description_url : ""
      }
    }
  };

  var rule_mappings = {
      AUDIO_1 : {
        required : true,
        enabled  : true
      },
      AUDIO_2 : {
        required : true,
        enabled  : true
      },
      AUDIO_3 : {
        required : true,
        enabled  : true
      },
      AUDIO_4 : {
        required : true,
        enabled  : true
      },
      BYPASS_1 : {
        required : false,
        enabled  : true
      },
      COLOR_1 : {
        required : true,
        enabled  : true
      },
      COLOR_2 : {
        required : true,
        enabled  : true
      },
      CONTROL_1 : {
        required : true,
        enabled  : true
      },
      CONTROL_2 : {
        required : true,
        enabled  : true
      },
      CONTROL_3 : {
        required : true,
        enabled  : true
      },
      CONTROL_4 : {
        required : true,
        enabled  : true
      },
      CONTROL_5 : {
        required : true,
        enabled  : true
      },
      CONTROL_6 : {
        required : true,
        enabled  : true
      },
      CONTROL_7 : {
        required : true,
        enabled  : true
      },
      CONTROL_8 : {
        required : true,
        enabled  : true
      },
      CONTROL_9 : {
        required : true,
        enabled  : true
      },
      CONTROL_10 : {
        required : true,
        enabled  : true
      },
      CONTROL_11 : {
       required : true,
       enabled  : true
      },
      ERROR_1 : {
        required : true,
        enabled  : true
      },
      ERROR_2 : {
        required : true,
        enabled  : true
      },
      ERROR_3 : {
        required : true,
        enabled  : true
      },
      ERROR_4 : {
       required : true,
       enabled  : true
      },
      ERROR_5 : {
       required : true,
       enabled  : true
      },
      FOCUS_1 : {
        required : true,
        enabled  : true
      },
      FOCUS_2 : {
        required : true,
        enabled  : true
      },
      FOCUS_3 : {
        required : true,
        enabled  : true
      },
      FOCUS_4 : {
        required : true,
        enabled  : true
      },
      FOCUS_5 : {
        required : true,
        enabled  : true
      },
      FRAME_1 : {
       required : true,
       enabled  : true
      },
      FRAME_2 : {
        required : true,
        enabled  : true
      },
      HEADING_1 : {
        required : false,
        enabled  : true
      },
      HEADING_2 : {
        required : false,
        enabled  : true
      },
      HEADING_3 : {
        required : false,
        enabled  : true
      },
      HEADING_5 : {
        required : true,
        enabled  : true
      },
      HEADING_6 : {
        required : false,
        enabled  : true
      },
      HEADING_7 : {
        required : false,
        enabled  : true
      },
      HEADING_8 : {
        required : true,
        enabled  : true
      },
      HTML_2 : {
        required : true,
        enabled  : true
      },
      HTML_3 : {
        required : true,
        enabled  : true
      },
      IMAGE_1 : {
        required : true,
        enabled  : true
      },
      IMAGE_2 : {
        required : true,
        enabled  : true
      },
      IMAGE_3 : {
        required : true,
        enabled  : true
      },
      IMAGE_4_EN : {
        required : false,
        enabled  : true
      },
      IMAGE_5 : {
        required : true,
        enabled  : true
      },
      IMAGE_6 : {
        required : true,
        enabled  : true
      },
      IMAGE_7 : {
        required : true,
        enabled  : true
      },
      KEYBOARD_1 : {
        required : true,
        enabled  : true
      },
      KEYBOARD_2 : {
        required : true,
        enabled  : true
      },
      KEYBOARD_3 : {
        required : true,
        enabled  : true
      },
      LANDMARK_1 : {
        required : true,
        enabled  : true
      },
      LANDMARK_2 : {
        required : true,
        enabled  : true
      },
      LANDMARK_3 : {
        required : true,
        enabled  : true
      },
      LANDMARK_4 : {
        required : true,
        enabled  : true
      },
      LANDMARK_5 : {
        required : true,
        enabled  : true
      },
      LANDMARK_6 : {
        required : true,
        enabled  : true
      },
      LANDMARK_7 : {
        required : true,
        enabled  : true
      },
      LANDMARK_8 : {
        required : true,
        enabled  : true
      },
      LANDMARK_9 : {
        required : true,
        enabled  : true
      },
      LANDMARK_10 : {
        required : true,
        enabled  : true
      },
      LANDMARK_11 : {
        required : true,
        enabled  : true
      },
      LANDMARK_12 : {
        required : true,
        enabled  : true
      },
      LANDMARK_13 : {
        required : true,
        enabled  : true
      },
      LANDMARK_14 : {
        required : true,
        enabled  : true
      },
      LANDMARK_15 : {
        required : true,
        enabled  : true
      },
      LANDMARK_16 : {
        required : true,
        enabled  : true
      },
      LANDMARK_17 : {
        required : true,
        enabled  : true
      },
      LANDMARK_18 : {
       required : true,
       enabled  : true
      },
      LANDMARK_19 : {
       required : true,
       enabled  : true
      },
      LANGUAGE_1 : {
        required : true,
        enabled  : true
      },
      LANGUAGE_2 : {
        required : true,
        enabled  : true
      },
      LAYOUT_1 : {
        required : true,
        enabled  : true
      },
      LAYOUT_2 : {
        required : false,
        enabled  : true
      },
      LAYOUT_3 : {
        required : true,
        enabled  : true
      },
      LINK_1 : {
        required : true,
        enabled  : true
      },
      LINK_2 : {
        required : false,
        enabled  : true
      },
      LIST_1 : {
        required : true,
        enabled  : true
      },
      LIST_2 : {
       required : false,
       enabled  : true
      },
      NAVIGATION_1 : {
        required : true,
        enabled  : true
      },
      NAVIGATION_2 : {
        required : true,
        enabled  : true
      },
      NAVIGATION_3 : {
        required : true,
        enabled  : true
      },
      NAVIGATION_4 : {
        required : true,
        enabled  : true
      },
      NAVIGATION_5 : {
        required : true,
        enabled  : true
      },
     ORDER_1 : {
       required : true,
       enabled  : true
     },
      RESIZE_1 : {
        required : true,
        enabled  : true
      },
      ROLE_1 : {
        required : false,
        enabled  : false
      },
      ROLE_2 : {
        required : false,
        enabled  : false
      },
      ROLE_3 : {
        required : false,
        enabled  : false
      },
      ROLE_4 : {
        required : false,
        enabled  : false
      },
      ROLE_5 : {
        required : false,
        enabled  : false
      },
      ROLE_6 : {
        required : false,
        enabled  : false
      },
      ROLE_7 : {
        required : false,
        enabled  : false
      },
      ROLE_8 : {
        required : false,
        enabled  : false
      },
      ROLE_9 : {
        required : false,
        enabled  : false
      },
      ROLE_10 : {
        required : false,
        enabled  : false
      },
      ROLE_11 : {
        required : false,
        enabled  : false
      },
      ROLE_12 : {
        required : false,
        enabled  : false
      },
      ROLE_13 : {
        required : false,
        enabled  : false
      },
      ROLE_14 : {
        required : false,
        enabled  : false
     },
      SENSORY_1 : {
        required : true,
        enabled  : true
      },
      TABLE_1 : {
        required : true,
        enabled  : true
      },
      TABLE_2 : {
        required : false,
        enabled  : true
      },
      TABLE_3 : {
        required : false,
        enabled  : true
      },
      TABLE_4 : {
        required : true,
        enabled  : true
      },
      TABLE_5 : {
        required : true,
        enabled  : true
      },
      TABLE_6 : {
        required : true,
        enabled  : true
      },
      TABLE_7 : {
        required : true,
        enabled  : true
      },
      TABLE_8 : {
        required : true,
        enabled  : true
      },
      TITLE_1 : {
        required : true,
        enabled  : true
      },
      TIMING_1 : {
        required : true,
        enabled  : true
      },
      TIMING_2 : {
        required : true,
        enabled  : true
      },
      TIMING_3 : {
        required : true,
        enabled  : true
      },
      VIDEO_1 : {
        required : true,
        enabled  : true
      },
      VIDEO_2 : {
        required : true,
        enabled  : true
      },
      VIDEO_3 : {
        required : true,
        enabled  : true
      },
      VIDEO_4 : {
        required : true,
        enabled  : true
      },
      VIDEO_5 : {
        required : true,
        enabled  : true
      },
      VIDEO_6 : {
        required : true,
        enabled  : true
      },
      VIDEO_7 : {
        required : true,
        enabled  : true
      },
      VIDEO_8 : {
        required : true,
        enabled  : true
      },
      VIDEO_9 : {
        required : true,
        enabled  : true
      },
      WIDGET_1 : {
        required : true,
        enabled  : true
      },
      WIDGET_2 : {
        required : true,
        enabled  : true
      },
      WIDGET_3 : {
        required : true,
        enabled  : true
      },
      WIDGET_4 : {
        required : true,
        enabled  : true
      },
      WIDGET_5 : {
        required : true,
        enabled  : true
      },
      WIDGET_6 : {
        required : true,
        enabled  : true
      },
      WIDGET_7 : {
        required : true,
        enabled  : true
      },
      WIDGET_8 : {
        required : true,
        enabled  : true
      },
      WIDGET_9 : {
        required : true,
        enabled  : true
      },
      WIDGET_10 : {
        required : true,
        enabled  : true
      },
      WIDGET_11 : {
        required : true,
        enabled  : true
      },
      WIDGET_12 : {
       required : true,
       enabled  : true
      },
      WIDGET_13 : {
       required : true,
       enabled  : true
      },
      WIDGET_14 : {
       required : true,
       enabled  : true
     },
     WIDGET_15: {
       required : false,
       enabled  : true
     },
     WIDGET_16: {
       required : true,
       enabled  : true
     }
  };

  try {
    // Create a Ruleset and add it to the RulesetManager

    var as_ruleset_factory = OpenAjax.a11y.RulesetFactory.newInstance();

    as_ruleset_factory.setParameter('rulesetInfo', ruleset_info);
    as_ruleset_factory.setParameter('ruleMappingInfo', rule_mappings);

    as_ruleset_factory.setFeature('locale', 'en-us');

    var as_ruleset = as_ruleset_factory.newRuleset();

    OpenAjax.a11y.RulesetManager.addRuleset(as_ruleset);
  }
  catch (err) {
    OpenAjax.a11y.logger.error("[ARIA STRICT Ruleset] ** Error creating ARIA Strict Ruleset");
  }

}());

var asRuleset = OpenAjax.a11y.RulesetManager.getRuleset('TEST');

// then needs to get an evaluatorFactory
var evaluatorFactory = OpenAjax.a11y.EvaluatorFactory.newInstance();

// and configure it...
evaluatorFactory.setParameter('ruleset', asRuleset);

evaluatorFactory.setFeature('eventProcessing',   'none');
evaluatorFactory.setFeature('brokenLinkTesting', false);

// before getting the actual evaluator
var evaluator = evaluatorFactory.newEvaluator();

var ruleCategories = OpenAjax.a11y.nls.RuleCategories.getNLS('en-us').toJSON("\n  ");
var rules    = '{ "rules" : ' + OpenAjax.a11y.RuleManager.toJSON("      ") + '}\n';
var rulesets = '{ "rulesets" : ' + OpenAjax.a11y.RulesetManager.toJSON("      ") + '}\n';

var fs1 = require('fs');
fs1.writeFileSync('export/populate/rules.json', rules);

var fs2 = require('fs');
fs2.writeFileSync('export/populate/rulesets.json', rulesets);

var fs3 = require('fs');
fs3.writeFileSync('export/populate/rule_categories.json', ruleCategories);
